{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * IE11 requires the following for NgClass support on SVG elements\n */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n *  Sample for track in the Linear Gauge\n */\nimport { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { LinearGaugeComponent, LinearGauge } from '@syncfusion/ej2-angular-lineargauge';\nimport { ILoadedEventArgs, LinearGaugeTheme } from '@syncfusion/ej2-lineargauge';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n    @ViewChild('linearDefault')\n    public linearDefaultGauge: LinearGaugeComponent;\n    @ViewChild('linearEdge')\n    public linearEdgeGauge: LinearGaugeComponent;\n    @ViewChild('linearRange')\n    public linearRangeGauge: LinearGaugeComponent;\n    @ViewChild('linearInversed')\n    public linearInversedGauge: LinearGaugeComponent;\n    @ViewChild('linearOpposed')\n    public linearOpposedGauge: LinearGaugeComponent;\n\n    public axesDefault: Object[] = [{\n        line: {\n            width: 5\n        },\n        pointers: [{\n            width: 0,\n        }],\n        majorTicks: {\n            interval: 20, height: 7, width: 1\n        },\n        minorTicks: {\n            interval: 10, height: 3\n        },\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true,\n        labelStyle: { font: { fontFamily: 'inherit' } }\n    }];\n\n    public axesEdge: Object[] = [{\n        line: {\n            width: 0\n        },\n        pointers: [{\n            width: 0,\n        }],\n        majorTicks: {\n            interval: 20, height: 7, width: 1\n        },\n        minorTicks: {\n            interval: 10, height: 3\n        },\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true,\n        labelStyle: { font: { fontFamily: 'inherit' }, useRangeColor: true }\n    }];\n\n    public axesRange: Object[] = [{\n        line: {\n            width: 0\n        },\n        pointers: [\n            {\n                width: 0,\n            }\n        ],\n        ranges: [{\n            start: 0,\n            end: 30,\n            color: '#F45656',\n            startWidth: 5, endWidth: 5,\n            offset: -5\n        }, {\n            start: 30,\n            end: 60,\n            color: '#FFC93E',\n            startWidth: 5, endWidth: 5,\n            offset: -5\n        }, {\n            start: 60,\n            end: 100,\n            color: '#0DC9AB',\n            startWidth: 5, endWidth: 5,\n            offset: -5\n        }\n        ],\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true,\n        majorTicks: {\n            interval: 20, height: 7, width: 1\n        },\n        minorTicks: {\n            interval: 10, height: 3\n        },\n        labelStyle: { useRangeColor: true, font: { fontFamily: 'inherit' } }\n    }];\n\n    public axesInversed: Object = [{\n        line: {\n            width: 5\n        },\n        majorTicks: {\n            interval: 20,\n            height: 7,\n            width: 1\n        },\n        minorTicks: {\n            interval: 10,\n            height: 3\n        },\n        labelStyle: {\n            font: { fontFamily: 'inherit' }\n        },\n        pointers: [\n            {\n                width: 0\n            }\n        ],\n        minimum: 0,\n        maximum: 100,\n        isInversed: true,\n        opposedPosition: true\n    }];\n\n    public axesOpposed: Object = [{\n        line: {\n            width: 5\n        },\n        majorTicks: {\n            interval: 20,\n            height: 7,\n            width: 1,\n            position: 'Outside'\n        },\n        minorTicks: {\n            interval: 10,\n            height: 3,\n            position: 'Outside'\n        },\n        labelStyle: {\n            position: 'Outside',\n            font: { fontFamily: 'inherit' }\n        },\n        pointers: [\n            {\n                width: 0\n            }\n        ],\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true\n    }];\n\n    public containerEdge: Object = {\n        width: 20, roundedCornerRadius: 10, type: 'RoundedRectangle', border: { width: 1 }\n    };\n\n    public titleStyle: Object = {\n        fontFamily: 'inherit', fontWeight: 'normal'\n    };\n\n    public load(args: ILoadedEventArgs): void {\n        // custom code start\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');\n        // custom code end\n    }\n\n    public horizontalGauge(e: Event): void {\n        document.getElementById('containerBox').style.padding = \"0%\";\n        document.getElementById('containerDefault').className = document.getElementById('containerEdge').className =\n        document.getElementById('containerRange').className = document.getElementById('containerInversed').className =\n        document.getElementById('containerOpposed').className = \"col-xs-12 col-sm-12 col-lg-12 col-md-12\";\n        this.linearDefaultGauge.width = this.linearEdgeGauge.width = this.linearRangeGauge.width = this.linearInversedGauge.width = this.linearOpposedGauge.width = '450px';\n        this.linearDefaultGauge.height = this.linearEdgeGauge.height = this.linearRangeGauge.height = this.linearInversedGauge.height = this.linearOpposedGauge.height = '150px';\n        this.linearDefaultGauge.orientation = this.linearEdgeGauge.orientation = this.linearRangeGauge.orientation = this.linearInversedGauge.orientation = this.linearOpposedGauge.orientation = \"Horizontal\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('vertical').style.color = \"black\";\n            document.getElementById('vertical').style.backgroundColor = \"white\";\n            \n        }\n    };\n\n    public verticalGauge(e: Event): void {\n        document.getElementById('containerBox').style.padding = \"4%\";\n        document.getElementById('containerDefault').className = document.getElementById('containerEdge').className =\n                document.getElementById('containerRange').className = document.getElementById('containerInversed').className =\n                document.getElementById('containerOpposed').className = \"col-xs-4 col-sm-4 col-lg-2 col-md-2\"; \n        this.linearDefaultGauge.width = this.linearEdgeGauge.width = this.linearRangeGauge.width = this.linearInversedGauge.width = this.linearOpposedGauge.width = '150px';\n        this.linearDefaultGauge.height = this.linearEdgeGauge.height = this.linearRangeGauge.height = this.linearInversedGauge.height = this.linearOpposedGauge.height = '350px';\n        this.linearDefaultGauge.orientation = this.linearEdgeGauge.orientation = this.linearRangeGauge.orientation = this.linearInversedGauge.orientation = this.linearOpposedGauge.orientation = \"Vertical\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('horizontal')['style']['color'] = \"black\";\n            document.getElementById('horizontal')['style']['backgroundColor'] = \"white\";\n                       \n        }\n    };\n\n    constructor() {\n        //code\n    }\n\n}","app/app.module.ts":"import { ButtonModule, CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { LinearGaugeAllModule } from '@syncfusion/ej2-angular-lineargauge';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ LinearGaugeAllModule, ButtonModule, CheckBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-lg-12 col-md-12\"\n            style=\"display: flex;justify-content: center; align-items: center;\">\n            <div style=\"margin: auto;padding: 10px;\">\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <div id='horizontal'\n                                    style=\"padding:6px;cursor:pointer;width:86px;color:black;font-size:15px;border:1px solid #0074E3;background-color:white;text-align:center\"\n                                    (click)='horizontalGauge($event)'>Horizontal</div>\n                            </td>\n                            <td>\n                                <div id='vertical'\n                                    style=\"padding:6px;cursor:pointer;width:86px;color:white;font-size:15px;border:1px solid #0074E3;background-color: #0074E3;text-align:center\"\n                                    (click)='verticalGauge($event)'>Vertical</div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n    <pre style=\"background-color: inherit; border:hidden\"></pre>\n    <div id=\"containerBox\" style=\"float: left;padding: 4%;\"></div>\n    <div id='containerDefault' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n        style=\"display: flex;justify-content: center; align-items: center;\">\n        <ejs-lineargauge (load)='load($event)' id='linearDefault' #linearDefault background='transparent'\n            title='Default axis' [titleStyle]='titleStyle' width='150px' height='350px'\n            style='display:block;height:100px;' orientation='Vertical' [axes]='axesDefault'>\n        </ejs-lineargauge>\n    </div>\n    <div id='containerEdge' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n        style=\"display: flex;justify-content: center; align-items: center;\">\n        <ejs-lineargauge (load)='load($event)' id='linearEdge' #linearEdge background='transparent' title='Edge style'\n            [titleStyle]='titleStyle' width='150px' height='350px' style='display:block;height:100px;'\n            orientation='Vertical' [container]='containerEdge' [axes]='axesEdge'>\n        </ejs-lineargauge>\n    </div>\n    <div id='containerRange' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n        style=\"display: flex;justify-content: center; align-items: center;\">\n        <ejs-lineargauge (load)='load($event)' id='linearRange' #linearRange title='Range color for axis'\n            [titleStyle]='titleStyle' width='150px' height='350px' style='display:block;height:130px;'\n            background='transparent' orientation='Vertical' [axes]='axesRange'>\n        </ejs-lineargauge>\n    </div>\n    <div id='containerInversed' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n        style=\"display: flex;justify-content: center; align-items: center;\">\n        <ejs-lineargauge (load)='load($event)' id='linearInversed' #linearInversed title='Inversed axis'\n            [titleStyle]='titleStyle' width='150px' height='350px' style='display:block;height:100px;'\n            background='transparent' orientation='Vertical' [axes]='axesInversed'>\n        </ejs-lineargauge>\n    </div>\n    <div id='containerOpposed' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n        style=\"display: flex;justify-content: center; align-items: center;\">\n        <ejs-lineargauge (load)='load($event)' id='linearOpposed' #linearOpposed title='Opposed axis'\n            [titleStyle]='titleStyle' width='150px' height='350px' style='display:block;height:100px;'\n            background='transparent' orientation='Vertical' [axes]='axesOpposed'>\n        </ejs-lineargauge>\n    </div>\n</div>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-angular-lineargauge\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}