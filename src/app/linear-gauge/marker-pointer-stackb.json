{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { LinearGaugeComponent, LinearGaugeModule } from '@syncfusion/ej2-angular-lineargauge';\nimport { ILoadedEventArgs, LinearGaugeTheme, IPointerDragEventArgs } from '@syncfusion/ej2-lineargauge';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [LinearGaugeModule]\n})\n\nexport class AppComponent {\n    @ViewChild('linearTriangle')\n    public linearTriangle: LinearGaugeComponent;\n    @ViewChild('linearCircle')\n    public linearCircle: LinearGaugeComponent;\n    @ViewChild('linearText')\n    public linearText: LinearGaugeComponent;\n    @ViewChild('linearRectangle')\n    public linearRectangle: LinearGaugeComponent;\n    @ViewChild('linearMultiple')\n    public linearMultiple: LinearGaugeComponent;\n\n    public axesTriangle: Object[] = [{\n        line: {\n            width: 5\n        },\n        pointers: [{\n            width: 5,\n            value: 40,\n            height: 5,\n            enableDrag: true,\n            placement: 'Near',\n            type: 'Bar',\n            offset: 12,\n            color: '#0074E3',\n            animationDuration: 1500\n        }, {\n            width: 15,\n            value: 40,\n            height: 15,\n            enableDrag: true,\n            placement: 'Near',\n            markerType: 'Triangle',\n            animationDuration: 1500\n         }\n        ],\n        majorTicks: {\n            interval: 20, height: 7, width: 1\n        },\n        minorTicks: {\n            interval: 10, height: 3\n        },\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true,\n        labelStyle: { font: { fontFamily: 'inherit' } }\n    }];\n\n    public axesCircle: Object[] = [{\n        line: {\n            width: 5\n        },\n        pointers: [{\n            width: 5,\n            value: 20,\n            height: 5,\n            enableDrag: true,\n            placement: 'Near',\n            type: 'Bar',\n            offset: 12,\n            color: '#0074E3',\n            animationDuration: 1500\n        }, {\n            width: 15,\n            value: 20,\n            height: 15,\n            enableDrag: true,\n            placement: 'Near',\n            markerType: 'Circle',\n            animationDuration: 1500\n         }\n        ],\n        majorTicks: {\n            interval: 20, height: 7, width: 1\n        },\n        minorTicks: {\n            interval: 10, height: 3\n        },\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true,\n        labelStyle: { font: { fontFamily: 'inherit' } }\n    }];\n\n    public axesText: Object[] = [{\n        line: {\n            width: 5\n        },\n        pointers: [{\n            width: 5,\n            value: 50,\n            height: 5,\n            enableDrag: true,\n            placement: 'Near',\n            type: 'Bar',\n            offset: 12,\n            color: '#0074E3',\n            animationDuration: 1500\n        }, {\n            width: 15,\n            value: 50,\n            height: 15,\n            enableDrag: true,\n            offset: -10,\n            placement: 'Near',\n            markerType: 'Text',\n            text:'50 Points',\n            animationDuration: 1500\n         }\n        ],\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true,\n        majorTicks: {\n            interval: 20, height: 7, width: 1\n        },\n        minorTicks: {\n            interval: 10, height: 3\n        },\n        labelStyle: { font: { fontFamily: 'inherit' } }\n    }];\n\n    public axesRectangle: Object = [{\n        line: {\n            width: 5\n        },\n        majorTicks: {\n            interval: 20,\n            height: 7,\n            width: 1\n        },\n        minorTicks: {\n            interval: 10,\n            height: 3\n        },\n        labelStyle: {\n            font: { fontFamily: 'inherit' }\n        },\n        pointers: [{\n            width: 5,\n            value: 30,\n            height: 5,\n            enableDrag: true,\n            placement: 'Near',\n            type: 'Bar',\n            offset: 12,\n            color: '#0074E3',\n            animationDuration: 1500\n        }, {\n            width: 15,\n            value: 30,\n            height: 5,\n            enableDrag: true,\n            placement: 'Near',\n            markerType: 'Rectangle',\n            animationDuration: 1500\n         }\n        ],\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true\n    }];\n\n    public axesMultiple: Object = [{\n        line: {\n            width: 5\n        },\n        majorTicks: {\n            interval: 20,\n            height: 7,\n            width: 1\n        },\n        minorTicks: {\n            interval: 10,\n            height: 3\n        },\n        labelStyle: {\n            font: { fontFamily: 'inherit' }\n        },\n        pointers: [{\n            width: 5,\n            value: 10,\n            height: 5,\n            enableDrag: true,\n            placement: 'Near',\n            type: 'Bar',\n            offset: 12,\n            color: '#0074E3',\n            animationDuration: 1500\n        }, {\n            width: 15,\n            value: 10,\n            height: 15,\n            enableDrag: true,\n            placement: 'Near',\n            markerType: 'Triangle',\n            animationDuration: 1500\n        }, {\n            width: 15,\n            value: 100,\n            height: 15,\n            enableDrag: true,\n            placement: 'Near',\n            markerType: 'Diamond',\n            animationDuration: 1500\n         }\n        ],\n        minimum: 0,\n        maximum: 100,\n        opposedPosition: true\n    }];\n\n    public titleStyle: Object = {\n        fontFamily: 'inherit', fontWeight: 'normal'\n    };\n\n    public load(args: ILoadedEventArgs): void {\n        // custom code start\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n        // custom code end\n    }\n\n    public dragEndTriangle(args: IPointerDragEventArgs): void {\n        this.linearTriangle.axes[0].pointers[0].animationDuration = 1500;\n        this.linearTriangle.axes[0].pointers[1].animationDuration = 1500;\n    }\n\n    public dragStartTriangle(args: IPointerDragEventArgs): void {\n        this.linearTriangle.axes[0].pointers[0].animationDuration = 0;\n        this.linearTriangle.axes[0].pointers[1].animationDuration = 0;\n    }\n\n    public dragMoveTriangle(args: IPointerDragEventArgs): void {\n        if (args.pointerIndex == 1) {\n            this.linearTriangle.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n\n    public dragEndCircle(args: IPointerDragEventArgs): void {\n        this.linearCircle.axes[0].pointers[0].animationDuration = 1500;\n        this.linearCircle.axes[0].pointers[1].animationDuration = 1500;\n    }\n\n    public dragStartCircle(args: IPointerDragEventArgs): void {\n        this.linearCircle.axes[0].pointers[0].animationDuration = 0;\n        this.linearCircle.axes[0].pointers[1].animationDuration = 0;\n    }\n\n    public dragMoveCircle(args: IPointerDragEventArgs): void {\n        if (args.pointerIndex == 1) {\n            this.linearCircle.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n\n    public dragEndText(args: IPointerDragEventArgs): void {\n        this.linearText.axes[0].pointers[0].animationDuration = 1500;\n        this.linearText.axes[0].pointers[1].animationDuration = 1500;\n    }\n\n    public dragStartText(args: IPointerDragEventArgs): void {\n        this.linearText.axes[0].pointers[0].animationDuration = 0;\n        this.linearText.axes[0].pointers[1].animationDuration = 0;\n    }\n\n    public dragMoveText(args: IPointerDragEventArgs): void {\n        if (args.pointerIndex == 1) {\n            this.linearText.axes[0].pointers[1].text = Math.round(args.currentValue).toString() + \" Points\";\n            this.linearText.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n\n    public dragEndRectangle(args: IPointerDragEventArgs): void {\n        this.linearRectangle.axes[0].pointers[0].animationDuration = 1500;\n        this.linearRectangle.axes[0].pointers[1].animationDuration = 1500;\n    }\n\n    public dragStartRectangle(args: IPointerDragEventArgs): void {\n        this.linearRectangle.axes[0].pointers[0].animationDuration = 0;\n        this.linearRectangle.axes[0].pointers[1].animationDuration = 0;\n    }\n\n    public dragMoveRectangle(args: IPointerDragEventArgs): void {\n        if (args.pointerIndex == 1) {\n            this.linearRectangle.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n\n    public dragStartMultiple(args: IPointerDragEventArgs): void {\n        if (args.pointerIndex == 1) {\n            this.linearMultiple.axes[0].pointers[0].animationDuration = 0;\n            this.linearMultiple.axes[0].pointers[1].animationDuration = 0;\n        }\n    }\n\n    public dragEndMultiple(args: IPointerDragEventArgs): void {\n        if (args.pointerIndex == 1) {\n            this.linearMultiple.axes[0].pointers[0].animationDuration = 1500;\n            this.linearMultiple.axes[0].pointers[1].animationDuration = 1500;\n        }\n    }\n\n    public dragMoveMultiple(args: IPointerDragEventArgs): void {\n        if (args.pointerIndex == 1) {\n            this.linearMultiple.setPointerValue(0, 0, args.currentValue);\n        }\n    }\n\n    public horizontalGauge(e: Event): void {\n        this.linearTriangle.width = this.linearCircle.width = this.linearText.width = this.linearRectangle.width = this.linearMultiple.width = '450px';\n        this.linearTriangle.height = this.linearCircle.height = this.linearText.height = this.linearRectangle.height = this.linearMultiple.height = '150px';\n        this.linearTriangle.orientation = this.linearCircle.orientation = this.linearText.orientation = this.linearRectangle.orientation = this.linearMultiple.orientation = \"Horizontal\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('vertical').style.color = \"black\";\n            document.getElementById('vertical').style.backgroundColor = \"white\";\n            document.getElementById('containerTriangle').className = document.getElementById('containerCircle').className =\n                document.getElementById('containerText').className = document.getElementById('containerRectangle').className =\n                document.getElementById('containerMultiple').className = \"col-xs-12 col-sm-12 col-lg-12 col-md-12\";\n                document.getElementById('containerBox').style.padding = \"0%\";\n        }\n    };\n\n    public verticalGauge(e: Event): void {\n        this.linearTriangle.width = this.linearCircle.width = this.linearRectangle.width = this.linearMultiple.width = '150px';\n        this.linearText.width = '168px';\n        this.linearTriangle.height = this.linearCircle.height = this.linearText.height = this.linearRectangle.height = this.linearMultiple.height = '350px';\n        this.linearTriangle.orientation = this.linearCircle.orientation = this.linearText.orientation = this.linearRectangle.orientation = this.linearMultiple.orientation = \"Vertical\";\n        if (e.currentTarget != null) {\n            e.currentTarget['style']['color'] = \"white\";\n            e.currentTarget['style']['backgroundColor'] = \"#0074E3\";\n            document.getElementById('horizontal')['style']['color'] = \"black\";\n            document.getElementById('horizontal')['style']['backgroundColor'] = \"white\";\n            document.getElementById('containerTriangle').className = document.getElementById('containerCircle').className =\n                document.getElementById('containerText').className = document.getElementById('containerRectangle').className =\n                document.getElementById('containerMultiple').className = \"col-xs-4 col-sm-4 col-lg-2 col-md-2\";\n                document.getElementById('containerBox').style.padding = \"4%\";\n        }\n    };\n\n    constructor() {\n        //code\n    }\n\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<main>\n    <div class=\"control-section\">\n        <div class=\"row\">\n            <div class=\"col-xs-12 col-sm-12 col-lg-12 col-md-12\"\n                style=\"display: flex;justify-content: center; align-items: center;\">\n                <div style=\"margin: auto;padding: 10px;\">\n                    <table  role=\"none\">\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <div id='horizontal'\n                                        style=\"padding:6px;cursor:pointer;width:86px;color:black;font-size:15px;border:1px solid #0074E3;background-color:white;text-align:center\"\n                                        (click)='horizontalGauge($event)'>Horizontal</div>\n                                </td>\n                                <td>\n                                    <div id='vertical'\n                                        style=\"padding:6px;cursor:pointer;width:86px;color:white;font-size:15px;border:1px solid #0074E3;background-color: #0074E3;text-align:center\"\n                                        (click)='verticalGauge($event)'>Vertical</div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n        <pre style=\"background-color: inherit; border:hidden\"></pre>\n        <div id=\"containerBox\" style=\"float: left;padding: 4%;\"></div>\n        <div id='containerTriangle' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n            style=\"display: flex;justify-content: center; align-items: center;\">\n            <ejs-lineargauge (load)='load($event)' animationDuration=2000 (dragStart)='dragStartTriangle($event)'\n                (dragMove)='dragMoveTriangle($event)' (dragEnd)='dragEndTriangle($event)' id='linearTriangle'\n                #linearTriangle background='transparent' title='Inverted triangle' [titleStyle]='titleStyle' width='150px'\n                height='350px' style='display:block;' orientation='Vertical' [axes]='axesTriangle'>\n            </ejs-lineargauge>\n        </div>\n        <div id='containerCircle' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n            style=\"display: flex;justify-content: center; align-items: center;\">\n            <ejs-lineargauge (load)='load($event)' animationDuration=2000 (dragStart)='dragStartCircle($event)' (dragEnd)='dragEndCircle($event)'\n                (dragMove)='dragMoveCircle($event)' id='linearCircle' #linearCircle background='transparent' title='Circle'\n                [titleStyle]='titleStyle' width='150px' height='350px' style='display:block;' orientation='Vertical'\n                [axes]='axesCircle'>\n            </ejs-lineargauge>\n        </div>\n        <div id='containerRectangle' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n            style=\"display: flex;justify-content: center; align-items: center;\">\n            <ejs-lineargauge (load)='load($event)' animationDuration=2000 (dragStart)='dragStartRectangle($event)'\n                (dragMove)='dragMoveRectangle($event)' (dragEnd)='dragEndRectangle($event)' id='linearRectangle'\n                #linearRectangle title='Rectangle' [titleStyle]='titleStyle' width='150px' height='350px'\n                style='display:block;' background='transparent' orientation='Vertical' [axes]='axesRectangle'>\n            </ejs-lineargauge>\n        </div>\n        <div id='containerText' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n        style=\"display: flex;justify-content: center; align-items: center;\">\n        <ejs-lineargauge (load)='load($event)' animationDuration=2000 (dragStart)='dragStartText($event)' (dragEnd)='dragEndText($event)'\n            (dragMove)='dragMoveText($event)' id='linearText' #linearText title='Text'\n            [titleStyle]='titleStyle' width='168px' height='350px' style='display:block;' background='transparent'\n            orientation='Vertical' [axes]='axesText'>\n            </ejs-lineargauge>\n        </div>\n        <div id='containerMultiple' class=\"col-xs-4 col-sm-4 col-lg-2 col-md-2\"\n            style=\"display: flex;justify-content: center; align-items: center;\">\n            <ejs-lineargauge (load)='load($event)' animationDuration=2000 (dragStart)='dragStartMultiple($event)'\n                (dragMove)='dragMoveMultiple($event)' (dragEnd)='dragEndMultiple($event)' id='linearMultiple'\n                #linearMultiple title='Multiple pointers' [titleStyle]='titleStyle' width='150px' height='350px'\n                style='display:block;' background='transparent' orientation='Vertical' [axes]='axesMultiple'>\n            </ejs-lineargauge>\n        </div>\n    </div>\n    <section id=\"action-description\" aria-label=\"Description of Linear Gauge sample\">\n        <p>\n            This sample shows the various marker pointer shapes available in the linear gauge. Additionally, multiple marker\n            pointer, animation and drag support are enabled.\n        </p>\n    </section>\n    <section id=\"description\" aria-label=\"Description of the Linear Gauge features demonstrated in this sample\">\n        <p>\n            In this example, you can see how to render and configure marker pointer in the linear gauge. The <a\n                target=\"_blank\" href=\"https://ej2.syncfusion.com/angular/documentation/api/linear-gauge/pointerModel/\">\n                pointers</a> collection is useful for displaying multiple pointers. The properties available in <a\n                target=\"_blank\" href=\"https://ej2.syncfusion.com/angular/documentation/api/linear-gauge/pointerModel/\">\n                pointers</a> help in the customization of the marker pointer in the linear gauge. Drag pointers are\n            assisted by the <a target=\"_blank\"\n                href=\"https://ej2.syncfusion.com/angular/documentation/api/linear-gauge/#dragstart\">dragStart</a> and <a\n                target=\"_blank\"\n                href=\"https://ej2.syncfusion.com/angular/documentation/api/linear-gauge/#dragend\">dragEnd</a> events.\n        </p>\n        <p>\n            More information on the marker pointer can be found in this\n            <a target=\"_blank\"\n                href=\"https://ej2.syncfusion.com/angular/documentation/linear-gauge/pointers/#marker-pointer\">documentation\n                section</a>.\n        </p>\n    </section>\n</main>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-lineargauge\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}