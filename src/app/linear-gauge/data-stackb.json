{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { LinearGaugeAllModule } from '@syncfusion/ej2-angular-lineargauge';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [   AppComponent ], imports: [ LinearGaugeAllModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"row\">\n        <ejs-lineargauge (load)='load1($event)' id='thermometerContainer1' style='display:block;height:300px;' orientation='Horizontal' [container]='Container1'\n            [axes]='Axes1' [annotations]='Annotation1'>\n        </ejs-lineargauge>\n    </div>\n    <div class=\"row\">\n        <ejs-lineargauge (load)='load2($event)' id='thermometerContainer2' style='display:block;height:300px;' orientation='Horizontal' [container]='Container2'\n            [axes]='Axes2' [annotations]='Annotation2'>\n        </ejs-lineargauge>\n    </div>\n    <div class=\"row\">\n        <ejs-lineargauge (load)='load3($event)' id='thermometerContainer3' style='display:block;height:300px;' orientation='Horizontal' [container]='Container3'\n            [axes]='Axes3' [annotations]='Annotation3'>\n        </ejs-lineargauge>\n    </div>\n</div>\n<!-- custom code start -->\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>\n<!-- custom code end -->","app.component.css":"","app.component.ts":"/**\n * Sample for data sample\n */\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { ILoadedEventArgs, LinearGaugeTheme } from '@syncfusion/ej2-lineargauge';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n\n    public Container1: Object = {\n        width: 30,\n        backgroundColor: '#e0e0e0',\n        border: {\n            width: 0\n        },\n        offset: 30\n    };\n    // custom code start\n    public load1(args1: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args1.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n            if (args1.gauge.theme.toLowerCase().indexOf('dark') > 1 || args1.gauge.theme.toLowerCase() === 'highcontrast') {\n                args1.gauge.annotations[1].content = '<div id=\"walk\" style=\"width:100px;\"><img style=\"height:25px;width:25px;' +\n                    'float:left\" src=\"./assets/linear-gauge/images/Running1.svg\" /></span><p style=\"float:left;' +\n                    'margin-left:10px;\">Running</p></div>';\n            }\n    }\n    public load2(args2: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args2.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n            if (args2.gauge.theme.toLowerCase().indexOf('dark') > 1 || args2.gauge.theme.toLowerCase() === 'highcontrast') {\n                args2.gauge.annotations[0].content = '<div id=\"walk\" style=\"width:100px;\"><img style=\"height:25px;width:25px;' +\n                    'float:left\" src=\"./assets/linear-gauge/images/Cycling1.svg\" /></span><p style=\"float:left;' +\n                    'margin-left:10px;\">Cycling</p></div>';\n            }\n    }\n    public load3(args3: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args3.gauge.theme = <LinearGaugeTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n            if (args3.gauge.theme.toLowerCase().indexOf('dark') > 1 || args3.gauge.theme.toLowerCase() === 'highcontrast') {\n                args3.gauge.annotations[0].content = '<div id=\"walk\" style=\"width:100px;\"><img style=\"height:25px;width:25px;' +\n                    'float:left\" src=\"./assets/linear-gauge/images/Walking1.svg\" /></span><p style=\"float:left;' +\n                    'margin-left:10px;\">Walking</p></div>';\n            }\n    }\n    // custom code end\n    //Initializing Annotation\n    public Annotation1: Object[] = [\n        {\n            content: '<div id=\"title\" style=\"width:300px;\"> <img style=\"float:left\" src'\n            + '=\"./assets/linear-gauge/images/exercise-tracking.svg\"/><p style=\"font-size:18px;color:#4285F4;float:left;margin-left:12px;'\n            + 'margin-top:4px\">Exercise Tracking </p></div>',\n            axisIndex: 0,\n            axisValue: 0,\n            x: 150,\n            y: -180, zIndex: '1'\n        },\n        {\n            content: '<div id=\"running\" style=\"width:100px;\"><img style=\"height:25px;width:25px;float:left\" src=\"./assets/linear-gauge' +\n            '/images/running.svg\" /></span><p style=\"float:left;margin-left:10px;\">Running</p></div>',\n            axisIndex: 0,\n            axisValue: 0,\n            x: 50,\n            y: -130, zIndex: '1'\n        },\n        {\n            content: '<div id=\"pointerText\" style=\"width:60px;\"><p style=\"font-size:15px;\">10 MPH</p></div>',\n            axisIndex: 0,\n            axisValue: 10,\n            y: -65, zIndex: '1'\n        }\n    ];\n\n    public Axes1: Object[] = [{\n        line: {\n            offset: 30\n        },\n        labelStyle: {\n            offset: 50\n        },\n        pointers: [{\n            value: 10,\n            placement: 'Near',\n            offset: -60,\n            height: 10,\n            width: 10,\n            markerType: 'Triangle'\n        }],\n        ranges: [\n            {\n                start: 0,\n                end: 10,\n                startWidth: 30,\n                endWidth: 30,\n                color: '#30b32d'\n            }\n        ]\n    }];\n\n    public Container2: Object = {\n        width: 30,\n        backgroundColor: '#e0e0e0',\n        border: {\n            width: 0\n        },\n        offset: -50\n    };\n\n    public Annotation2: Object[] = [{\n        content: '<div id=\"cycle\" style=\"width:100px;\"><img style=\"height:25px;width:25px;float:left\" src=\"./assets/linear-gauge'\n        + '/images/cycling.svg\" /></span><p style=\"float:left;margin-left:10px;\">Cycling</p></div>',\n        axisIndex: 0,\n        axisValue: 0,\n        x: 50,\n        y: -110, zIndex: '1'\n    },\n    {\n        content: '<div id=\"pointerText\" style=\"width:60px;\"><p style=\"font-size:15px;\">28 MPH</p></div>',\n        axisIndex: 0,\n        axisValue: 28,\n        y: -70, zIndex: '1'\n    }];\n\n    public Axes2: Object[] = [{\n        line: {\n            offset: 30\n        },\n        labelStyle: {\n            offset: 50\n        },\n        pointers: [{\n            value: 28,\n            height: 10,\n            width: 10,\n            placement: 'Near',\n            offset: -60,\n            markerType: 'Triangle'\n        }],\n        ranges: [\n            {\n                start: 0,\n                end: 28,\n                startWidth: 30,\n                endWidth: 30,\n                color: '#30b32d'\n            }\n        ]\n    }];\n\n    public Container3: Object = {\n        width: 30,\n        backgroundColor: '#e0e0e0',\n        border: {\n            width: 0\n        },\n        offset: -90\n    };\n\n    public Annotation3: Object[] = [{\n        content: '<div id=\"walk\" style=\"width:100px;\"><img style=\"height:25px;width:25px;float:left\" src=\"./assets/' +\n        'linear-gauge/images/walking.svg\" /></span><p style=\"float:left;margin-left:10px;\">Walking</p></div>',\n        axisIndex: 0,\n        axisValue: 0,\n        x: 50,\n        y: -120, zIndex: '1'\n    },\n    {\n        content: '<div id=\"pointerText\" style=\"width:100px;\"><p style=\"font-size:15px;\">2000 Steps</p></div>',\n        axisIndex: 0,\n        axisValue: 2.2,\n        y: -65, zIndex: '1'\n    }];\n\n    public Axes3: Object[] = [{\n        maximum: 10,\n        line: {\n            offset: 30\n        },\n        labelStyle: {\n            format: '{value}k',\n            offset: 50\n        },\n        pointers: [{\n            value: 2,\n            height: 10,\n            width: 10,\n            placement: 'Near',\n            offset: -60,\n            markerType: 'Triangle'\n        }],\n        ranges: [\n            {\n                start: 0,\n                end: 2,\n                startWidth: 30,\n                endWidth: 30,\n                color: '#30b32d'\n            }\n        ]\n    }];\n    constructor() {\n        // code\n    };\n}"}