{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","double_data.ts":"export let sl: Object[] = [\n    { x: 1, y: 2 },\n    { x: 2, y: 3, isWicket: true },\n    { x: 3, y: 1 },\n    { x: 4, y: 7 },\n    { x: 5, y: 5 },\n    { x: 6, y: 24 },\n    { x: 7, y: 13 },\n    { x: 8, y: 4 },\n    { x: 9, y: 6 },\n    { x: 10, y: 4 },\n    { x: 11, y: 7 },\n    { x: 12, y: 5 },\n    { x: 13, y: 5 },\n    { x: 14, y: 10 },\n    { x: 15, y: 5 },\n    { x: 16, y: 5 },\n    { x: 17, y: 13 },\n    { x: 18, y: 4 },\n    { x: 19, y: 8 },\n    { x: 20, y: 2 },\n    { x: 21, y: 2 },\n    { x: 22, y: 2, isWicket: true },\n    { x: 23, y: 5 },\n    { x: 24, y: 7 },\n    { x: 25, y: 1 },\n    { x: 26, y: 4 },\n    { x: 27, y: 5 },\n    { x: 28, y: 5 },\n    { x: 29, y: 5 },\n    { x: 30, y: 17 },\n    { x: 31, y: 42, isWicket: true },\n    { x: 32, y: 7 },\n    { x: 33, y: 5 },\n    { x: 34, y: 2, isWicket: true },\n    { x: 35, y: 6 },\n    { x: 36, y: 16 },\n    { x: 37, y: 19 },\n    { x: 38, y: 6 },\n    { x: 39, y: 12 },\n    { x: 40, y: 11 },\n    { x: 41, y: 8 },\n    { x: 42, y: 12, isWicket: true },\n    { x: 43, y: 4, isWicket: true },\n    { x: 44, y: 8 },\n    { x: 45, y: 2, isWicket: true },\n    { x: 46, y: 2, isWicket: true }\n];\n\nexport let aus: Object[] = [\n    { x: 1, y: 4 },\n    { x: 2, y: 4 },\n    { x: 3, y: 5 },\n    { x: 4, y: 6 },\n    { x: 5, y: 5, isWicket: true },\n    { x: 6, y: 8 },\n    { x: 7, y: 2 },\n    { x: 8, y: 3 },\n    { x: 9, y: 4, isWicket: true },\n    { x: 10, y: 8 },\n    { x: 11, y: 3 },\n    { x: 12, y: 4 },\n    { x: 13, y: 7 },\n    { x: 14, y: 2 },\n    { x: 15, y: 7 },\n    { x: 16, y: 4 },\n    { x: 17, y: 3 },\n    { x: 18, y: 3 },\n    { x: 19, y: 3 },\n    { x: 20, y: 1 },\n    { x: 21, y: 7 },\n    { x: 22, y: 2 },\n    { x: 23, y: 5 },\n    { x: 24, y: 7 },\n    { x: 25, y: 7 },\n    { x: 26, y: 7 },\n    { x: 27, y: 5 },\n    { x: 28, y: 9 },\n    { x: 29, y: 14 },\n    { x: 30, y: 10 },\n    { x: 31, y: 10 },\n    { x: 32, y: 7, isWicket: true },\n    { x: 33, y: 2, isWicket: true },\n    { x: 34, y: 7 },\n    { x: 35, y: 14 },\n    { x: 36, y: 3 },\n    { x: 37, y: 17 },\n    { x: 38, y: 16 },\n    { x: 39, y: 10 },\n    { x: 40, y: 8 },\n    { x: 41, y: 17 },\n    { x: 42, y: 10 },\n    { x: 43, y: 20 },\n    { x: 44, y: 15 },\n    { x: 45, y: 6 },\n    { x: 46, y: 16 },\n    { x: 47, y: 8, isWicket: true },\n    { x: 48, y: 4, isWicket: true },\n    { x: 49, y: 19, isWicket: true },\n    { x: 50, y: 8, isWicket: true }\n]","theme-colors.ts":"import { ChartTheme, ILoadedEventArgs } from \"@syncfusion/ej2-angular-charts\";\n\nexport let themes: string[] = ['bootstrap5', 'bootstrap5dark', 'tailwind', 'tailwinddark', 'material', 'materialdark', 'bootstrap4', 'bootstrap', 'bootstrapdark', 'fabric', 'fabricdark', 'highcontrast', 'fluent', 'fluentdark', 'material3', 'material3dark', 'fluent2', 'fluent2highcontrast', 'fluent2dark', 'tailwind3', 'tailwind3dark'];\nexport let borderColor: string[] = ['#FD7E14', '#FD7E14', '#5A61F6', '#8B5CF6', '#00bdae', '#9ECB08', '#a16ee5', '#a16ee5', '#a16ee5', '#4472c4', '#4472c4', '#79ECE4', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\nexport let regionColor: string[] = ['rgba(52, 58, 64, 0.1)', 'rgba(173, 181, 189, 0.1)', 'rgba(90, 97, 246, 0.3)', 'rgba(139, 92, 246, 0.3)', 'rgba(0, 189, 174, 0.3)',\n    'rgba(158, 203, 8, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(161, 110, 229, 0.3)', 'rgba(68, 114, 196, 0.3)',\n    'rgba(68, 114, 196, 0.3)', 'rgba(121, 236, 228, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)',\n    'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printRegionColors = ['rgba(255, 64, 129, 0.3)', 'rgba(0, 120, 151, 0.3)',\n    'rgba(66, 139, 202, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(255, 217, 57, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(79, 70, 229, 0.3)',\n    'rgba(255, 64, 129, 0.3)', 'rgba(0, 120, 151, 0.3)', 'rgba(66, 139, 202, 0.3)', 'rgba(34, 211, 238, 0.3)', 'rgba(253, 126, 20, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(26, 201, 230, 0.3)', 'rgba(99, 85, 199, 0.3)', 'rgba(78, 170, 255, 0.3)', 'rgba(98, 0, 238, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(155, 180, 73, 0.3)', 'rgba(47, 64, 116, 0.3)', 'rgba(128, 41, 241, 0.3)'];\nexport let printThemes: string[] = ['Material', 'Fabric', 'Bootstrap', 'Bootstrap4', 'HighContrast', 'Bootstrap5', 'Tailwind', 'MaterialDark', 'FabricDark', 'BootstrapDark', 'TailwindDark', 'Bootstrap5Dark', 'Fluent', 'FluentDark', 'Material3', 'Material3Dark', 'Fluent2', 'Fluent2HighContrast', 'Fluent2Dark', 'Tailwind3', 'Tailwind3Dark'];\nexport let printBorderColor: string[] = ['#FF4081', '#007897', '#428BCA', '#FFD939', '#FFD939', '#FD7E14', '#4F46E5', '#FF4081', '#007897', '#428BCA', '#22D3EE', '#FD7E14', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449', '#2F4074', '#8029F1'];\n\n\nexport let loadRangeNavigatorTheme = (args?: ILoadedEventArgs): ChartTheme => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    let theme: ChartTheme;\n    if (args) {\n        theme = args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    else {\n        theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    return theme;\n}","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { ChartTheme, ChartAnnotation, ILoadedEventArgs, ChartAnnotationSettingsModel, getSeriesColor,\n     IRangeLoadedEventArgs, DateTime, StepLineSeries, Chart, IChangedEventArgs,\n      IRangeTooltipRenderEventArgs , RangeTooltip, IAxisLabelRenderEventArgs } from '@syncfusion/ej2-charts';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { sl, aus } from './double_data';\nimport { RangeNavigatorAllModule, ChartAllModule } from '@syncfusion/ej2-angular-charts';\nimport { loadRangeNavigatorTheme } from './theme-colors';\n\n/**\n * Sample for range navigator with numeric axis\n */\n\nlet theme: ChartTheme = loadRangeNavigatorTheme();;\nlet chartAnnotation: ChartAnnotationSettingsModel[] = [];\nchartAnnotation.push({ content: '<div id=\"exchangeRate\"></div>', coordinateUnits: 'Pixel', region: 'Chart', x: '85%', y: '15%' });\nlet backgroundColor: string = 'white';\n\nfunction getAnnotaiton(args: object[], color: string): void {\n    for (let i: number = 0; i < args.length; i++) {\n        /* tslint:disable:no-string-literal */\n        if (args[i]['isWicket']) {\n            chartAnnotation.push({\n                content: '<div id= \"wicket\" style=\"width: 20px; height:20px; border-radius: 5px;' +\n                    'background: ' + backgroundColor + '; border: 2px solid ' + color + '; color:' + color + '\">W</div>',\n                /* tslint:disable:no-string-literal */\n                x: args[i]['x'],\n                /* tslint:disable:no-string-literal */\n                y: args[i]['y'],\n                coordinateUnits: 'Point'\n            });\n        }\n    }\n\n}\ngetAnnotaiton(aus, getSeriesColor(theme)[0]);\ngetAnnotaiton(sl, getSeriesColor(theme)[1]);\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [RangeNavigatorAllModule, ChartAllModule]\n})\n\nexport class AppComponent {\n    @ViewChild('chartDouble')\n\n    public Chart: Chart;\n\n    public primaryXAxis: Object = { title: 'Overs', edgeLabelPlacement: 'Shift', majorGridLines: { width: 0 },\n                                  labelFormat: 'n1' };\n\n    public dataSource: Object[] = aus;\n\n    public dataSource1: Object[] = sl;\n\n    public chartArea: Object = { border: { width: 0 } };\n\n    public primaryYAxis: Object = { title: 'Runs', minimum: 0, majorTickLines: { width: 0 }, lineStyle: { width: 0 } };\n\n    public  chartTooltip: Object = { enable: true, shared: true };\n\n    public chartHeight: string = '350';\n\n    public animation: Object = { enable: false};\n\n    public width: string = Browser.isDevice ? '100%' : '80%';\n\n    public theme: ChartTheme = theme;\n\n    public value: Object = [31, 50];\n\n    public annotations: Object = chartAnnotation;\n\n    public tooltip:Object = { enable: true };\n\n    public legendSettings: Object = { visible: false };\n\n    public axisLabelRender(args: IAxisLabelRenderEventArgs): void {\n        if (args.axis.orientation === 'Horizontal') {\n            let value: number = Math.abs(Number(args.text));\n            args.text = String(value);\n        }\n    };\n\n    public loaded(args: ILoadedEventArgs): void {\n        let series1: string = args.chart.visibleSeries[0].interior;\n        let series2: string = args.chart.visibleSeries[1].interior;\n        let html: string = '<table>';\n        html += '<tr><td><div style=\"width:10px; height: 10px; border: 2px solid '\n                    + series1 + '; background: ' + series1 + ';\"></div></td><td style=\"padding-left:10px;\">' + ' Australia' + '</td>';\n        html += '<tr><td><div style=\"width:10px; height: 10px; border: 2px solid '\n                    + series2 + '; background: ' + series2 + ';\"></div></td><td style=\"padding-left:10px;\">' + ' Sri Lanka' + '</td>';\n        html += '</table>';\n        this.Chart.setAnnotationValue(0, '<div id=\"exchangeRate\" style=\"line-height: 18px;' +\n                    'font-size: 13px;background: #fff; opacity:0.9; color: #464e56; ' +\n                    ' box-shadow:0 0 8px 0 rgba(70,78,86,.25); padding: 7px 10px;' +\n                    'border-radius: 3px\">' +\n                    html +\n                    '</div>');\n    };\n    public tooltipRender(args: IRangeTooltipRenderEventArgs): void {\n        args.text[0] = Math.round(parseInt(args.text[0], 10)).toString();\n    };\n\n   public load(args: IRangeLoadedEventArgs) {\n    args.rangeNavigator.rangeTooltipModule = new RangeTooltip(args.rangeNavigator);\n    };\n\n    public changed(args: IChangedEventArgs): void {\n        this.Chart.primaryXAxis.zoomFactor = args.zoomFactor;\n        this.Chart.primaryXAxis.zoomPosition = args.zoomPosition;\n        this.Chart.dataBind();\n    };\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div class=\"row\" align=\"center\">\n            <h1 id=\"days\" style=\"font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px; margin-top: 10px;\">Score Comparision AUS vs SL</h1>\n    <div align=\"center\">\n        <ejs-rangenavigator style='display:block' align='center' id='containerDouble' [value]='value' labelPosition='Outside' [width]='width'\n           (changed)='changed($event)' [tooltip]='tooltip' [theme]='theme' (tooltipRender)='tooltipRender($event)'  (load)='load($event)'>\n            <e-rangenavigator-series-collection>\n                <e-rangenavigator-series [dataSource]='dataSource' xName='x' yName='y' width=2 name= 'AUS'>\n                </e-rangenavigator-series>\n                <e-rangenavigator-series [dataSource]='dataSource1' xName='x' yName='y' width=2 name='SL'>\n                </e-rangenavigator-series>\n            </e-rangenavigator-series-collection>\n        </ejs-rangenavigator>\n    </div>\n    <div align=\"center\">\n        <ejs-chart #chartDouble style='display:block;' id='chartDouble' align='center' [chartArea]='chartArea' [width]='width' [primaryXAxis]='primaryXAxis'\n            [primaryYAxis]='primaryYAxis' height='350' [legendSettings]='legendSettings' [theme]='theme' [annotations] = 'annotations'  (loaded)='loaded($event)'\n            (axisLabelRender)='axisLabelRender($event)'>\n            <e-series-collection>\n                <e-series [dataSource]='dataSource' name='Value' type='Spline' xName='x' yName='y' width='2' [animation]='animation'>\n                </e-series>\n                <e-series [dataSource]='dataSource1' name='Value' type='Spline' xName='x' yName='y' width='2' [animation]='animation'>\n                </e-series>\n            </e-series-collection>\n        </ejs-chart>\n    </div>\n</div>\n\n<style>\n    #control-containerDouble {\n        padding: 0px !important;\n    }\n</style>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}