{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, Inject, ViewChild } from '@angular/core';\n\n/**\n *  Sample for CSS Basic Layout Badge\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n \n    ngOnInit() {\n        this.loadData();\n    }\n\n    public profileimage:string =\"image e-avatar\";\n    public postimage:string =\"image\";\n    public cardname: string =\"\";\n    public time: string = \"\";\n    public listData:  { [key: string]: string; }[] = [];\n\n    public isDataLoading = true;\n    \n    public getData():Promise<{ [key: string]: any; }> {\n        return new Promise(resolve => setTimeout(() => {\n            let data: { [key: string]: any; }={};\n            data['list-data'] = [\n                { text: \"Jenifer\", contact: \"(206) 555-985774\", id: \"1\", avatar: \"\", pic: \"pic01\" },\n                { text: \"Amenda\", contact: \"(206) 555-3412\", id: \"2\", avatar: \"A\", pic: \"\" },\n                { text: \"Isabella\", contact: \"(206) 555-8122\", id: \"4\", avatar: \"\", pic: \"pic02\" },\n                { text: \"William \", contact: \"(206) 555-9482\", id: \"5\", avatar: \"W\", pic: \"\" },\n                { text: \"Jacob\", contact: \"(71) 555-4848\", id: \"6\", avatar: \"\", pic: \"pic04\" },\n                { text: \"Matthew\", contact: \"(71) 555-7773\", id: \"7\", avatar: \"M\", pic: \"\" },\n                { text: \"Oliver\", contact: \"(71) 555-5598\", id: \"8\", avatar: \"\", pic: \"pic03\" },\n                { text: \"Charlotte\", contact: \"(206) 555-1189\", id: \"9\", avatar: \"C\", pic: \"\" }\n            ];\n            data['profileImg'] = \"image profile-image e-avatar\";\n            data['postImg']  = \"image post-image\";\n            data['postName'] = \"Laura Callahan\";\n            data['postDate'] = new Date().toLocaleString();\n            resolve(data)\n        }, 3000));\n    }\n \n    public loadData():void {\n        this.getData().then((data:{ [key: string]: any; }) => {\n            this.profileimage = data['profileImg'] as string; ;\n            this.postimage=data['postImg'] as string; ;\n            this.cardname=data['postName'] as string;;\n            this.time=data['postDate'] as string;\n            this.listData = data['list-data'] as { [key: string]: string; }[];\n            this.isDataLoading = false;\n        });\n    }\n\n    // Reload button click event handler.\n    public reload():void {\n        if (!this.isDataLoading) {\n            this.isDataLoading = true;\n            this.profileimage = \"image e-avatar\" ;\n            this.postimage=\"image\"  ;\n            this.cardname=\"\";\n            this.time=\"\";\n            this.listData =[];\n            this.loadData();\n        }\n    };\n\n}\n","app/app.module.ts":"import { ListViewModule } from '@syncfusion/ej2-angular-lists';\n\nimport { SkeletonModule } from '@syncfusion/ej2-angular-notifications';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [CommonModule, BrowserModule, SkeletonModule, ListViewModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"row skeleton-animation\">\n        <div>\n            <button id=\"reloadSkeleton\" class=\"e-btn e-primary\" (click)=\"reload()\">Reload</button>\n        </div>\n        <div class=\"col-sm-6\">\n            <h5>Fade Effect</h5>\n            <br />\n            <div *ngIf=\"isDataLoading; else fadeBlock\">\n                <div id=\"skeletonCard\" class=\"e-card\">\n                    <div class=\"cardProfile\">\n                        <ejs-skeleton id=\"cardProfile\" shape=\"Circle\" width=\"60px\" shimmerEffect=\"Fade\"></ejs-skeleton>\n                    </div>\n                    <div class=\"cardinfo\">\n                        <ejs-skeleton id=\"cardText1\" width=\"30%\" height=\"15px\" shimmerEffect=\"Fade\"></ejs-skeleton>\n                        <br />\n                        <ejs-skeleton id=\"cardText2\" width=\"15%\" height=\"15px\" shimmerEffect=\"Fade\"></ejs-skeleton>\n                    </div>\n                    <div class=\"cardContent\">\n                        <ejs-skeleton id=\"cardContent\" shape='Rectangle' width=\"100%\" height=\"250px\" shimmerEffect=\"Fade\"></ejs-skeleton>\n                    </div>\n                    <div class=\"cardoptions\">\n                        <ejs-skeleton id=\"cardLeftOptn\" shape='Rectangle' width=\"20%\" height=\"30px\" shimmerEffect=\"Fade\"></ejs-skeleton>\n                        <ejs-skeleton id=\"cardRightOptn\" shape='Rectangle' width=\"20%\" height=\"30px\" shimmerEffect=\"Fade\"></ejs-skeleton>\n                    </div>\n                </div>\n            </div>\n            <ng-template #fadeBlock>\n                <div id=\"skeletondatacard\" class=\"e-card\">\n                    <div class=\"cardProfile\">\n                        <div [class]=\"profileimage\"></div>\n                    </div>\n                    <div class=\"cardinfo\">\n                        <label id=\"name\" style=\"font-size: 15px;\">{{cardname}}</label><br />\n                        <label id=\"time\" style=\"font-weight:normal;\">{{time}}</label>\n                    </div>\n                    <div class=\"cardContent\">\n                        <div [class]=\"postimage\"></div>\n                    </div>\n                    <div class=\"cardoptions\">\n                        <div id=\"cardLeftOptn\"><button class=\"e-btn e-outline e-primary\"\n                                style=\"width: 100%;\">Like</button></div>\n                        <div id=\"cardRightOptn\"><button class=\"e-btn e-primary\"\n                                style=\"width: 100%;\">Share</button></div>\n                    </div>\n                </div>\n            </ng-template>\n        </div>\n        <div class=\"col-sm-6\">\n            <h5>Pulse Effect</h5>\n            <br />\n            <div class=\"skeleton-listcard e-card\">\n                <ul id=\"skeleton-list\" *ngIf=\"isDataLoading; else pulseBlock\" class=\"e-card\">\n                    <li *ngFor=\"let e of [].constructor(8); index as i\">\n                        <ejs-skeleton id=\"listProfile{{i}}\" class=\"listProfile\" shape='Circle'  shimmerEffect=\"Pulse\"> </ejs-skeleton>\n                        <div>\n                            <ejs-skeleton id=\"listCtn{{i}}\" class=\"listCtn\" width=\"80%\"  shimmerEffect=\"Pulse\"> </ejs-skeleton>\n                            <br />\n                            <ejs-skeleton id=\"desCtn{{i}}\" class=\"distCtn\" width=\"60%\"  shimmerEffect=\"Pulse\"> </ejs-skeleton>\n                        </div>\n                    </li>\n                </ul>\n                <ng-template #pulseBlock>\n                    <ejs-listview id='skeleton-listview' [dataSource]='listData'  cssClass='e-list-template' sortOrder='Ascending' height='420px'>\n                        <ng-template #template let-data=\"\">\n                            <div class=\"e-list-wrapper e-list-multi-line e-list-avatar\">\n                                <span class=\"e-avatar e-avatar-circle\" *ngIf=\"data.avatar !== ''\">{{data.avatar}}</span>\n                                <span class=\"{{data.pic}} e-avatar e-avatar-circle\" *ngIf=\"data.pic !== '' \"> </span>\n                                <span class=\"e-list-item-header\">{{data.text}}</span>\n                                <span class=\"e-list-content\">{{data.contact}}</span>\n                            </div>\n                        </ng-template>\n                    </ejs-listview>\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>\n","app.component.css":".skeleton-animation .col-sm-6 {\n    padding: 30px;\n    min-height: 350px;\n    position: relative;\n}\n#reloadSkeleton {\n    margin-left: 30px;\n}\n/* Skeleton customization */\n#skeletondatacard,\n#skeletonCard {\n    padding: 10px;\n    line-height: inherit;\n    height: 420px;\n}\n.fluent-dark #skeletondatacard,\n.fluent-dark #skeletonCard,\n.fluent-dark #skeleton-list{\n    background-color: #313131;\n}\n.skeleton-listcard,\n.e-bigger .skeleton-listcard{\n    line-height: 20px;\n}\n.skeleton-animation .e-card {    \n    display: block;\n}\n.skeleton-animation .cardProfile {\n    float: left;\n    margin-right: 15px;\n}\n.skeleton-animation .cardinfo {\n    margin-top: 10px;\n    overflow: hidden;\n}\n.skeleton-animation #skeleton-list,\n.skeleton-animation .cardinfo label {\n    margin: 0;\n    white-space: nowrap;\n}\n.skeleton-animation .cardContent {\n    margin: 20px 0px 30px;\n}\n.skeleton-animation .cardoptions {\n    display: flex;\n    justify-content: space-between;\n}\n.skeleton-animation .cardoptions>div {\n     min-width: 60px;\n }\n#skeleton-list {\n    padding-left: 12px;\n    padding-top: 7px;\n    height: 420px;\n    line-height: inherit;\n}\n#skeleton-list li {\n    list-style: none;\n    display: flow-root;\n    margin-bottom: 9px;\n}\n.skeleton-animation .listProfile {\n    float: left;\n    margin-right: 15px;\n    width: 40px;\n    height: 40px;\n}\n.skeleton-animation .listCtn {\n    margin: 5px 0px;\n    width: 80%;\n    height: 14px;\n}\n.skeleton-animation .distCtn {\n    width: 60%;\n    height: 14px;\n}\n.skeleton-animation .image.profile-image {\n    background-image: url('/assets/skeleton/images/profile.png');\n    background-size: 60px 60px;\n    height: 60px;\n    width: 60px;\n    border-radius: 50%;\n}\n.skeleton-animation .image.post-image {\n    background: url('/assets/skeleton/images/post.jpg');\n    -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n    background-position: center;\n    height: 250px;\n    width: 100%;\n}\n/* List view customization */\n#skeleton-listview .e-list-item {\n    position:relative;\n}\n#skeleton-listview .e-list-item .e-avatar {\n    color: white;\n}\n#skeleton-listview .e-list-item:nth-child(1) .e-avatar {\n    background-color: #039be5;\n}\n#skeleton-listview .e-list-item:nth-child(2) .e-avatar {\n    background-color: #e91e63;\n}\n#skeleton-listview .e-list-item:nth-child(6) .e-avatar {\n    background-color: #009688;\n}\n#skeleton-listview .e-list-item:nth-child(8) .e-avatar {\n    background-color: #0088;\n}\n#skeleton-listview .pic01 {\n    background-image: url('/assets/skeleton/images/1.png');\n}\n#skeleton-listview .pic02 {\n    background-image: url('/assets/skeleton/images/3.png');\n}\n#skeleton-listview .pic03 {\n    background-image: url('/assets/skeleton/images/5.png');\n}\n#skeleton-listview .pic04 {\n    background-image: url('/assets/skeleton/images/2.png');\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-angular-notifications\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}