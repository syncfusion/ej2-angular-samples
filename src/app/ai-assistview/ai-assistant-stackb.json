{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","promptResponseData.ts":"export let defaultPromptResponseData: { [key: string]: string | string[] } [] = [\n    {\n        prompt: \"How do I set daily goals in my work day?\",\n        response: \"<p>To stay focused and productive, try these steps for setting daily goals:</p> <ol><li><strong>Identify Priorities:</strong> List the most important tasks based on deadlines or significance.</li> <li><strong>Break Down Tasks:</strong> Split larger tasks into smaller, manageable steps.</li> <li><strong>Set SMART Goals:</strong> Make sure goals are Specific, Measurable, Achievable, Relevant, and Time-bound.</li> <li><strong>Time Blocking:</strong> Allocate specific times for each task to stay organized and on track.</li></ol> <p>Would you like more tips on any of these steps?</p>\",\n        suggestions: [\n            \"How do I prioritize tasks effectively?\",\n            \"What tools or apps can help me prioritize tasks?\"\n        ]\n    },\n    {\n        prompt: \"Steps to publish a e-book with marketing strategy\",\n        response: \"<p>To publish an e-book, follow the steps below:</p> <ol><li><strong>Write and format your e-book:</strong> Ensure your content is well-organized, edited, and formatted for digital reading.</li> <li><strong>Choose a publishing platform:</strong> Platforms like Amazon Kindle Direct Publishing (KDP) or Smashwords can help you publish and distribute your e-book.</li> <li><strong>Develop a marketing strategy:</strong> Utilize social media, email newsletters, and book promotion sites to create buzz and reach your target audience.</li> <li><strong>Launch and promote:</strong> Schedule a launch date, gather reviews, and continue promoting through various channels to maintain momentum and drive sales.</li></ol> <p>Do you have a specific topic in mind for your e-book?</p>\",\n        suggestions: [\n            \"How do I create an eye-catching e-book cover?\",\n            \"What are common mistakes to avoid in e-book covers?\"\n        ]\n    },\n    {\n        prompt: \"How do I prioritize tasks effectively?\",\n        response: \"<p>To stay focused and productive, set daily goals by:</p> <ol><li><strong>Identifying Priorities:</strong> List important tasks based on deadlines or significance.</li> <li><strong>Breaking Down Tasks:</strong> Divide larger tasks into smaller, manageable steps.</li> <li><strong>Setting SMART Goals:</strong> Ensure goals are Specific, Measurable, Achievable, Relevant, and Time-bound. </li> <li><strong>Time Blocking:</strong> Schedule specific times for each task to stay organized.</li></ol> <p> Need more tips on any of these steps? </p>\"\n    },\n    {\n        prompt: \"What tools or apps can help me prioritize tasks?\",\n        response: \"<p>Here are some tools to help you prioritize tasks effectively:</p> <ol><li><strong>Google Keep:</strong> For simple note-taking and task organization with labels and reminders.</li> <li><strong>Scoro:</strong> A project management tool for streamlining activities and team collaboration.</li> <li><strong>Evernote:</strong> Great for note-taking, to-do lists, and reminders.</li> <li><strong>Todoist:</strong> A powerful task manager for setting priorities and tracking progress.</li></ol> <p>Are you looking for tools to manage a specific type of task or project?</p>\"\n    },\n    {\n        prompt: \"How do I create an eye-catching e-book cover?\",\n        response: \"<p>Creating an eye-catching e-book cover involves a few key steps:</p> <ol><li><strong>Understand your genre and audience:</strong> Research covers of popular books in your genre to see what appeals to your target readers.</li> <li><strong>Choose the right imagery and colors:</strong> Use high-quality images and a color scheme that reflects the tone and theme of your book.</li> <li><strong>Focus on typography:</strong> Select fonts that are readable and complement the overall design. The title should be prominent and easy to read even in thumbnail size.</li> <li><strong>Use design tools or hire a professional:</strong> Tools like Canva or Adobe Spark can help you create a professional-looking cover. Alternatively, consider hiring a graphic designer for a more polished result.</li></ol> <p>Would you like some tips on where to find good images or fonts for your cover?</p>\"\n    },\n    {\n        prompt: \"What are common mistakes to avoid in e-book covers?\",\n        response: \"<p>Here are some common mistakes to avoid when designing an e-book cover:</p> <ol><li><strong>Cluttered design:</strong> Overloading the cover with too many elements can make it look messy and unprofessional. Keep it simple and focused.</li> <li><strong>Poor quality images:</strong> Using low-resolution or generic stock images can detract from the overall appeal. Always opt for high-quality, relevant visuals.</li> <li><strong>Unreadable fonts:</strong> Fancy or overly intricate fonts can be hard to read, especially in thumbnail size. Choose clear, legible fonts for the title and author name.</li> <li><strong>Ignoring genre conventions:</strong> Each genre has its own visual cues. Not adhering to these can confuse potential readers about the bookâ€™s content.</li> <li><strong>Inconsistent branding:</strong> If you have a series or multiple books, ensure a consistent style across all covers to build a recognizable brand.</li></ol> <p>Would you like any specific advice on designing your cover?</p>\"\n    }\n];\n\nexport let defaultSuggestions: string[] = [\n    \"How do I set daily goals in my work day?\",\n    \"Steps to publish a e-book with marketing strategy\"\n];\n\nexport let streamingData: { [key: string]: string | string[] } [] = [\n    {\n        prompt: \"What are the main features of the AI AssistView component?\",\n        response: \"The AI AssistView component offers several powerful features that enhance user interaction:\\n\\n- **Customizable Views:** Allows for custom templates to be used for banners, prompts, responses, and suggestions.\\n- **Streaming Responses:** Provides real-time feedback as data is processed, enhancing immediacy and user engagement.\\n- **Interactive Toolbar:** Easily integrates custom toolbar items, such as buttons and inputs, enhancing functionality.\\n- **Seamless Integration:** Connects with AI services to provide advanced processing and intelligent responses.\",\n        suggestions: [ \"How can I customize the appearance of AI AssistView?\", \"What are the benefits of using Markdown?\" ]\n    },\n    {\n        prompt: \"How can I customize the appearance of AI AssistView?\",\n        response: \"Customizing AI AssistView enables you to tailor the look and functionality to suit specific needs:\\n\\n- **Template Customization:** Modify templates for prompts, responses, and more.\\n- **CSS Styling:** Apply custom styles to align with your applicationâ€™s visual theme.\\n- **Theme Support:** Utilize built-in themes or create your own for consistent styling.\\n- **Banner and Toolbar Configurations:** Adjust content and tools for personalized UI experiences.\",\n        suggestions: [ \"What customization options are available in AI AssistView?\", \"Prime number checking C# example?\" ]\n    },\n    {\n        prompt: \"What is Markdown and how is it used?\",\n        response: \"Markdown is a straightforward syntax used primarily for formatting text documents:\\n\\n- **Headers:** Create headings with `#`, `##`, `###` for different levels.\\n- **Emphasis:** Use `*text*` for italic and `**text**` for bold.\\n- **Links and Images:** `[Link](URL)`, `![Alt Text](ImageURL)` to include links and images.\\n- **Lists and Code Blocks:** Use `-` for lists and triple backticks ``` for code blocks.\\n\\nMarkdownâ€™s simplicity and readability make it ideal for writing documentation.\",\n        suggestions: [ \"What are the benefits of using Markdown?\", \"What customization options are available in AI AssistView?\" ]\n    },\n    {\n        prompt: \"What customization options are available in AI AssistView?\",\n        response: \"AI AssistView provides extensive customization options for tailored user interactions:\\n\\n- **Templates:** Use `<PromptItemTemplate>`, `<ResponseItemTemplate>`, etc., for customized display.\\n- **Custom Toolbar Items:** Add buttons and other controls via `AssistViewToolbar`.\\n- **Dynamic Content:** Update content based on user actions or external events.\\n- **Styling:** Full CSS support for styling individual components and layouts.\",\n        suggestions: [\"What are the main features of the AI AssistView component?\", \"Generate Fibonacci sequence C# example?\"]\n    },\n    {\n        prompt: \"What are the benefits of using Markdown?\",\n        response: \"Markdown provides several benefits, especially in documentation and writing:\\n\\n- **Ease of Use:** Its syntax is simple and quick to learn, increasing productivity.\\n- **Readability:** Plain text format ensures content is easy to read and edit.\\n- **Flexibility:** Can be converted to HTML, PDF, and other formats easily.\\n- **Collaboration:** Widely supported in various tools for collaborative writing and documentation.\",\n        suggestions: [\"Prime number checking C# example?\", \"Generate Fibonacci sequence C# example?\"]\n    },\n    {\n        prompt: \"Prime number checking C# example?\",\nresponse: `<pre><code class=\\\"csharp language-csharp\\\">using System;\n\nclass Program\n{\n    static bool IsPrime(int n)\n    {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.Sqrt(n); i++)\n            if (n % i == 0) return false;\n        return true;\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(IsPrime(11)); // True\n    }\n}\n</code></pre>`\n    },\n    {\n        prompt: \"Generate Fibonacci sequence C# example?\",\n        response: `<pre><code class=\\\"csharp language-csharp\\\">using System;\n\nclass Program\n{\n    static void Fibonacci(int n)\n    {\n        int a = 0, b = 1, c;\n        for (int i = 0; i < n; i++)\n        {\n            Console.Write(a + \\\" \\\");\n            c = a + b;\n            a = b;\n            b = c;\n        }\n    }\n\n    static void Main()\n    {\n        Fibonacci(10); // 0 1 1 2 3 5 8 13 21 34\n    }\n}\n</code></pre>`\n    }\n];\n\nexport let streamingSuggestions: string[] = [\n    \"What are the main features of the AI AssistView component?\",\n    \"What is Markdown and how is it used?\"\n];\n\nexport let assistantSuggestions: string[] = [\n    \"How is AI used in everyday life?\",\n    \"What are the benefits of using AI?\",\n    \"C# console app to manage library books\"\n];\n\nexport let assistantResponses : { [key: string]: string | string[] } [] = [\n    {\n    prompt: \"How is AI used in everyday life?\",\n    response: \"<p>AI is integrated into many aspects of daily life. Common examples include:</p> <ol><li>Voice assistants like Siri and Alexa.</li><li>Recommendation systems on Netflix and YouTube.</li><li>Spam filters in email.</li><li>Navigation apps like Google MapsSmart home devices and appliances.</li><ol>\",\n    suggestions: [\"C# console app to manage library books\", \"Prime number checking C# example?\", \"What are the benefits of using AI?\"]\n    },\n    {\n    prompt: \"What are the benefits of using AI?\",\n    response: \"<p>Artificial Intelligence (AI) is revolutionizing the way we live, work, and interact with the world. Here are the key benefits of using AI:<br></p><ol><li><strong>Automation of Repetitive Tasks:</strong> AI automates routine tasks, increasing efficiency and allowing humans to focus on creative and strategic work.</li><br><li><strong>Enhanced Decision-Making:</strong> AI analyzes large datasets to uncover patterns and insights, supporting better decisions in fields like finance, healthcare, and logistics.</li><br><li><strong>Personalization and Customer Experience:</strong> AI tailors experiences to individual users, improving satisfaction through personalized recommendations and services.</li><br><li><strong>Healthcare Advancements:</strong> AI improves diagnostics, treatment planning, and patient monitoring, enabling early disease detection and personalized medicine.</li><br><li><strong>Increased Productivity and Cost Savings:</strong> By optimizing processes and reducing errors, AI boosts productivity and lowers operational costs.</li><br><li><strong>Real-Time Data Processing:</strong> AI processes data in real time, enabling instant responses in areas like fraud detection, autonomous vehicles, and emergency services.</li><br><li><strong>Accessibility and Inclusion:</strong> AI-powered tools support people with disabilities through speech-to-text, real-time translation, and assistive technologies.</li><br><li><strong>Innovation and Scientific Discovery:</strong> AI accelerates research in fields like climate science, genomics, and space exploration by handling complex computations.</li><br><li><strong>Improved Safety and Security:</strong> AI enhances security through surveillance, threat detection, and predictive maintenance in industrial environments.</li><br><li><strong>Economic Growth and Job Creation:</strong> AI creates new roles in development, data science, and ethics, while fostering innovation and entrepreneurship.</li><br><li><strong>Environmental Sustainability:</strong> AI supports sustainability by optimizing energy use, improving agriculture, and guiding conservation efforts.</li><br><li><strong>Creative and Artistic Expression:</strong> AI contributes to the arts by generating music, visual art, and literature, opening new creative possibilities.</li></ol><br><p>In conclusion, AI offers transformative benefits across industries and society. When used responsibly, it can enhance human capabilities, solve complex problems, and drive progress in countless areas.</p>\",\n    suggestions: [\"What are the risks or challenges of AI?\", \"C# console app to manage library books\", \"Prime number checking C# example?\"]\n    },\n    {\n    prompt: \"What are the risks or challenges of AI?\",\n    response: \"<p>While AI has many benefits, it also presents challenges such as:</p><ol><li><strong>Bias:</strong> AI can reflect and amplify biases in training data.</li><li><strong>Privacy:</strong> AI systems often rely on large amounts of personal data.</li> <li><strong>Job Displacement:</strong> Automation may replace certain human jobs.</li></ol>\",\n    suggestions: [\"Prime number checking C# example?\", \"How is AI used in everyday life?\", \"C# console app to manage library books\"]\n    },       \n    {\n        prompt: \"C# console app to manage library books\",\n        response: `<p>Creating a C# console application for Library Management involves building a simple system to manage books, members, and transactions like borrowing and returning books. Here's a basic structure to get you started:</p><strong>Features to Include</strong><ol><li>Add/Remove Books</li><li>Register Members</li><li>Borrow/Return Books</li><li>View Book List</li><li>View Member List</li></ol><strong>Project Structure</strong><br><p>You can organize your code using classes like:</p><ol><li>Book</li><li>Member</li><li>Library</li><li>Program</li></ol>\n        <pre><code class=\\\"csharp language-csharp\\\">using System;\nusing System.Collections.Generic;\n\nclass Book {\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public bool IsBorrowed { get; set; } = false;\n}\n\nclass Member {\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\nclass Library {\n    private List<Book> books = new List<Book>();\n    private List<Member> members = new List<Member>();\n\n    public void AddBook(string title) {\n        int id = books.Count + 1;\n        books.Add(new Book { Id = id, Title = title });\n        Console.WriteLine($\"Book '{title}' added with ID {id}.\");\n    }\n\n    public void RegisterMember(string name) {\n        int id = members.Count + 1;\n        members.Add(new Member { Id = id, Name = name });\n        Console.WriteLine($\"Member '{name}' registered with ID {id}.\");\n    }\n\n    public void BorrowBook(int bookId) {\n        var book = books.Find(b => b.Id == bookId);\n        if (book != null && !book.IsBorrowed) {\n            book.IsBorrowed = true;\n            Console.WriteLine($\"Book '{book.Title}' borrowed.\");\n        } else {\n            Console.WriteLine(\"Book not available.\");\n        }\n    }\n\n    public void ReturnBook(int bookId) {\n        var book = books.Find(b => b.Id == bookId);\n        if (book != null && book.IsBorrowed) {\n            book.IsBorrowed = false;\n            Console.WriteLine($\"Book '{book.Title}' returned.\");\n        } else {\n            Console.WriteLine(\"Invalid return.\");\n        }\n    }\n\n    public void ListBooks() {\n        foreach (var book in books) {\n            Console.WriteLine($\"ID: {book.Id}, Title: {book.Title}, Borrowed: {book.IsBorrowed}\");\n        }\n    }\n\n    public void ListMembers() {\n        foreach (var member in members) {\n            Console.WriteLine($\"ID: {member.Id}, Name: {member.Name}\");\n        }\n    }\n}\n\nclass Program {\n    static void Main() {\n        Library library = new Library();\n        while (true) {\n            Console.WriteLine(\"\\nLibrary Menu:\\n1. Add Book\\n2. Register Member\\n3. Borrow Book\\n4. Return Book\\n5. List Books\\n6. List Members\\n7. Exit\");\n            Console.Write(\"Choose an option: \");\n            int choice = int.Parse(Console.ReadLine());\n\n            switch (choice) {\n                case 1:\n                    Console.Write(\"Enter book title: \");\n                    library.AddBook(Console.ReadLine());\n                    break;\n                case 2:\n                    Console.Write(\"Enter member name: \");\n                    library.RegisterMember(Console.ReadLine());\n                    break;\n                case 3:\n                    Console.Write(\"Enter book ID to borrow: \");\n                    library.BorrowBook(int.Parse(Console.ReadLine()));\n                    break;\n                case 4:\n                    Console.Write(\"Enter book ID to return: \");\n                    library.ReturnBook(int.Parse(Console.ReadLine()));\n                    break;\n                case 5:\n                    library.ListBooks();\n                    break;\n                case 6:\n                    library.ListMembers();\n                    break;\n                case 7:\n                    return;\n                default:\n                    Console.WriteLine(\"Invalid option.\");\n                    break;\n            }\n        }\n    }\n}\n</code></pre>`\n    },\n    {\n        prompt: \"Prime number checking C# example?\",\nresponse: `<pre><code class=\\\"csharp language-csharp\\\">using System;\n\nclass Program\n{\n    static bool IsPrime(int n)\n    {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.Sqrt(n); i++)\n            if (n % i == 0) return false;\n        return true;\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(IsPrime(11)); // True\n    }\n}\n</code></pre>`\n    }\n];","app.component.ts":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { AIAssistViewModule, AIAssistViewComponent, ToolbarSettingsModel } from '@syncfusion/ej2-angular-interactive-chat';\nimport { assistantSuggestions, assistantResponses } from './promptResponseData';\nimport { DropDownButton } from '@syncfusion/ej2-angular-splitbuttons';\nimport { ListViewComponent, ListViewModule } from '@syncfusion/ej2-angular-lists';\nimport { SidebarComponent, SidebarModule, ToolbarModule  } from '@syncfusion/ej2-angular-navigations';\n\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [AIAssistViewModule, ToolbarModule, ListViewModule, SidebarModule,   ]\n})\nexport class AppComponent {\n    @ViewChild('aiAssistViewInst')\n    public aiAssistViewInst: AIAssistViewComponent | undefined;\n    @ViewChild('grpListObj')\n    public grpListObj: ListViewComponent | undefined;\n    @ViewChild('sideObj')\n    public sideObj: SidebarComponent | undefined;\n    public enableAttachments: boolean = true;\n    public attachmentSettings = {\n        saveUrl: 'https://services.syncfusion.com/angular/production/api/FileUploader/Save',\n        removeUrl: 'https://services.syncfusion.com/angular/production/api/FileUploader/Remove'\n    };\n    public enableDock: boolean = true;\n    public enableGesture: boolean = true;\n    public prompts: { [key: string]: string | string[] }[] = assistantResponses;\n    public suggestions: string[] = assistantSuggestions;\n    public fields: { [ key: string]: Object } = {groupBy: \"category\", id: \"id\", text: \"text\" };\n    public selectedConvId: string = '';\n    public isFirstPrompt = false;\n    public listData = [];\n\n    ngAfterViewInit() {\n        this.InitializingApp();\n        this.listData = this.getLeftPaneData();\n    }\n\n    // Fetch your API_KEY\n    public API_KEY = \"Your API key\";\n    // Updat your AI model\n    public model = \"Your AI model\";\n\n    public async GetResult(prompt) {\n        let responseObj = this.prompts.find(resp => resp.prompt === prompt);\n        const result = responseObj ? responseObj.response : \"I apologize, but I'm experiencing some difficulty processing your request at this moment, which might be due to the complexity of your query or a technical limitation on my end, so I would greatly appreciate it if you could rephrase your question or provide additional context that might help me better understand what you're looking for.\";\n        return result;\n    }\n\n    public toolbarSettings: ToolbarSettingsModel = {\n        items: [\n            { type: 'Input', template: '<button id=\"ddMenu\"></button>', align: 'Right' }\n        ]\n    };\n\n    public created = () => {\n        var dropdown: DropDownButton = new DropDownButton({\n            content: \"Profile\",\n            items: [\n                { text: 'Settings', iconCss: 'e-icons e-settings' },\n                { separator: true },\n                { text: 'Log out' }\n            ],\n            iconCss: 'e-icons e-user',\n            cssClass: 'e-caret-hide',\n        }, '#ddMenu');\n    };\n\n    public promptRequest(args) {\n        this.execute(args.prompt);\n    }\n\n    public toggle() {\n        this.sideObj.toggle();\n    }\n\n    public onListViewSelect(args) {\n        if (args.event) {\n            this.selectedConvId = args.data.id;\n            this.updateAIAssistViewData(args.data.id);\n            this.updateBannerStyle();\n        }\n    }\n\n    public getDate(): number {\n        return Date.now();\n    }\n\n    public getDateFormat(date: number): string {\n        const today = new Date(date);\n        const yyyy = today.getFullYear();\n        let mm: number | string = today.getMonth() + 1; // Months start at 0!\n        let dd: number | string = today.getDate();\n\n        if (dd < 10) dd = '0' + dd;\n        if (mm < 10) mm = '0' + mm;\n\n        return dd + '/' + mm + '/' + yyyy;\n    }\n\n    public getCategory(today: string, key: number): string {\n        const date = this.getDateFormat(key);\n        if (date == today) {\n            return \"Today\";\n        } else {\n            return \"Previous days\";\n        }\n    }\n\n    public checkInitialLocalStorage(isClear?: boolean): void {\n        const aiAssistView = localStorage.getItem('aiassist-view');\n        if (!aiAssistView || isClear) {\n            const data: Record<string, any> = {};\n            localStorage.setItem('aiassist-view', JSON.stringify(data));\n        }\n    }\n\n    public checkAndUpdateLocalStorage(prompt: string): void {\n        const aiAssistView = localStorage.getItem('aiassist-view');\n        const appData = JSON.parse(aiAssistView);\n        const curConvDate = this.getDate();\n        const prompts = [];\n        const orgPrompts = this.aiAssistViewInst.prompts;\n        for (let i = 0; i < orgPrompts.length; i++) {\n            const tPrompt = {\n                prompt: orgPrompts[i].prompt || \"\",\n                response: orgPrompts[i].response || \"\"\n            };\n            prompts.push(tPrompt);\n        }\n        const pSuggestions: string[] = [];\n        const orgPSuggestions = this.aiAssistViewInst.promptSuggestions;\n        for (let j = 0; j < orgPSuggestions.length; j++) {\n            pSuggestions.push(orgPSuggestions[j]);\n        }\n        if (this.selectedConvId) {\n            const convData = appData[this.selectedConvId];\n            if (convData.name === convData.name) {\n                const dataSource = this.grpListObj.dataSource as any[];\n                if (dataSource) {\n                    for (let k = 0; k < dataSource.length; k++) {\n                        const item = dataSource[k] as any;\n                        if (item && item.id === this.selectedConvId) {\n                            item.text = convData.name;\n                            break;\n                        }\n                    }\n                }\n                this.grpListObj.dataBind();\n            }\n            convData.prompts = prompts;\n            convData.promptSuggestions = pSuggestions;\n            localStorage.setItem('aiassist-view', JSON.stringify(appData));\n        } else {\n            this.selectedConvId = curConvDate.toString();\n            const convData = {\n                name: prompt,\n                prompts: prompts,\n                promptSuggestions: pSuggestions\n            };\n            appData[curConvDate] = convData;\n            localStorage.setItem('aiassist-view', JSON.stringify(appData));\n            this.refreshConversationList();\n            const itemToSelect: any = 0;\n            this.grpListObj.selectItem(itemToSelect);\n        }\n    }\n\n    public getLeftPaneData() {\n        const today = this.getDateFormat(Date.now());\n        const aiAssistView = localStorage.getItem('aiassist-view');\n        const appData = JSON.parse(aiAssistView);\n        const keys = Object.keys(appData);\n        const items = [];\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const numericKey = parseInt(key);\n            const convData = appData[key];\n            const name = convData.name.split('\\n')[0];\n\n            items.push({\n                text: name,\n                id: numericKey,\n                numericId: numericKey, // Extra field for sorting\n                category: this.getCategory(today, numericKey),\n                time: this.getDateFormat(numericKey)\n            });\n        }\n        items.sort(function (a, b) {\n            return b.numericId - a.numericId;\n        });\n        return items;\n    }\n\n    public updateBannerStyle(): void {\n        const bannerElem = document.querySelector('.banner-content');\n        if (this.aiAssistViewInst.prompts && this.aiAssistViewInst.prompts.length) {\n            bannerElem.classList.remove('e-no-content');\n        } else {\n            bannerElem.classList.add('e-no-content');\n        }\n    }\n\n    public updateConversationName(prompt: string) {\n        if (this.isFirstPrompt && this.selectedConvId) {\n            const aiAssistView = JSON.parse(localStorage.getItem('aiassist-view'));\n            const convData = aiAssistView[this.selectedConvId];\n            if (convData?.name === \"New Conversation\") {\n                convData.name = prompt.slice(0, 40).trim();\n                localStorage.setItem('aiassist-view', JSON.stringify(aiAssistView));\n                const dataSource = this.grpListObj.dataSource as any[];\n                const listItem = dataSource.find((item: any) => item.id === this.selectedConvId);\n                if (listItem) {\n                    listItem.text = convData.name;\n                    this.grpListObj.dataBind();\n                }\n                this.refreshConversationList();\n            }\n            this.isFirstPrompt = false;\n        }\n    }\n\n    public refreshConversationList(): void {\n        const listData = this.getLeftPaneData();\n        this.grpListObj.dataSource = listData;\n        this.grpListObj.dataBind();\n    }\n\n    public updateAIAssistViewData(id: string | number): void {\n        if (id) {\n            const aiAssistView = localStorage.getItem('aiassist-view');\n            const appData = JSON.parse(aiAssistView);\n            const convData = appData[id.toString()];\n\n            this.aiAssistViewInst.prompts = convData.prompts;\n            this.aiAssistViewInst.promptSuggestions = convData.promptSuggestions;\n        } else {\n            this.aiAssistViewInst.prompts = [];\n            this.aiAssistViewInst.promptSuggestions = this.suggestions;\n        }\n    }\n\n    public loadNewAIAssist(): void {\n        this.selectedConvId = \"\";\n        this.isFirstPrompt = true;\n        const dataSource = this.grpListObj.dataSource as any[];\n        if (dataSource.length !== 0) {\n            this.aiAssistViewInst.prompts = [];\n            this.aiAssistViewInst.promptSuggestions = this.suggestions;\n        }\n        const curConvDate = this.getDate();\n        const aiAssistView = localStorage.getItem('aiassist-view');\n        const appData = JSON.parse(aiAssistView);\n        const convData = {\n            name: \"New Conversation\",\n            prompts: [] as any[],\n            promptSuggestions: this.suggestions\n        };\n        appData[curConvDate] = convData;\n        localStorage.setItem('aiassist-view', JSON.stringify(appData));\n        this.refreshConversationList();\n        this.selectedConvId = curConvDate.toString();\n        const itemToSelect = { id: curConvDate };\n        this.grpListObj.selectItem(itemToSelect);\n        this.updateBannerStyle();\n    }\n\n    public InitializingApp(): void {\n        this.checkInitialLocalStorage();\n        const resetButton = document.getElementById('resetButton');\n        if (resetButton) {\n            resetButton.addEventListener('click', () => {\n                this.grpListObj.dataSource = [];\n                this.grpListObj.dataBind();\n                localStorage.setItem('aiassist-view', JSON.stringify({}));\n                this.selectedConvId = \"\";\n                this.aiAssistViewInst.prompts = [];\n                this.aiAssistViewInst.promptSuggestions = this.suggestions;\n                this.updateBannerStyle();\n            });\n        }\n    }\n\n    public async execute(prompt: string) {\n        try {\n            this.aiAssistViewInst.promptSuggestions = [];\n            var finalResult: any[] = [];\n            var result: any = \"\";\n            \n            setTimeout(async () => {\n                let suggestionsObj = this.prompts.find((resp: any) => resp.prompt === prompt);\n                let suggestionResult = suggestionsObj ? suggestionsObj.suggestions || this.suggestions : this.suggestions;\n\n                for (let i = 0; i < suggestionResult.length; i++) {\n                    if (suggestionResult[i]) {\n                        finalResult.push(suggestionResult[i].replace(\"- \", \"\").replace(\"* \", \"\").trim());\n                    }\n                }\n            }, 1000);\n\n            setTimeout(async () => {\n                result = await this.GetResult(prompt);\n                this.aiAssistViewInst.addPromptResponse(result);\n                this.aiAssistViewInst.promptSuggestions = finalResult;\n                this.updateBannerStyle();\n                this.checkAndUpdateLocalStorage(prompt);\n                this.updateConversationName(prompt);\n            }, 1000);\n\n        } catch (error) {\n            result = error;\n            this.aiAssistViewInst.addPromptResponse(\"I apologize, but I'm experiencing some difficulty processing your request at this moment, which might be due to the complexity of your query or a technical limitation on my end, so I would greatly appreciate it if you could rephrase your question or provide additional context that might help me better understand what you're looking for.\");\n            this.aiAssistViewInst.promptSuggestions = [];\n            this.updateConversationName(prompt);\n        }\n        const dataSource = this.grpListObj.dataSource as any[];\n        if (!dataSource || dataSource.length === 0) {\n            this.loadNewAIAssist();\n            return;\n        }\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div>\n        <div class=\"ai-assistant\">\n            <div id=\"aiAssistView\" ejs-aiassistview #aiAssistViewInst [bannerTemplate]=\"bannerTemplate\" [promptSuggestions]=\"suggestions\" [toolbarSettings]=\"toolbarSettings\" [enableAttachments]=\"enableAttachments\" [attachmentSettings]=\"attachmentSettings\" (promptRequest)=\"promptRequest($event)\" (created)=\"created()\"></div>\n        </div>\n    </div>\n    <!-- sidebar element declaration -->\n    <ejs-sidebar id=\"assistantSidebar\" #sideObj width=\"260px\" target=\".ai-assistant\"\n            position=\"Left\" [enableDock]=\"enableDock\" dockSize=\"75px\" [enableGestures]=\"enableGesture\">\n        <div class=\"assistant-sidebar-header\">\n            <ejs-toolbar class=\"assistantToolbar\">\n                <e-items>\n                    <e-item prefixIcon=\"e-icons e-assistview-icon\" tooltipText=\"Menu\"></e-item>\n                    <e-item prefixIcon=\"e-icons e-menu\" tooltipText=\"Toggle sidebar\" align=\"Right\" (click)=\"toggle()\"></e-item>\n                    <e-item prefixIcon=\"e-icons e-rename\" cssClass= \"new-chat-button\" tooltipText=\"Start new chat\" align=\"Right\" (click)=\"loadNewAIAssist()\"></e-item>\n                </e-items>\n            </ejs-toolbar>\n        </div>\n        <div class=\"assistant-sidebar-content\">\n            <div class=\"assistant-listview-option\" tabindex=\"1\">\n                <div class=\"e-icons e-multiple-comment\"></div>\n                <div class=\"header-conversation\">Chat Conversations</div>\n                <span class=\"e-icons e-refresh\" title=\"Reset\" id=\"resetButton\"></span>\n            </div>\n            <ejs-listview id=\"assistant-listview-grp\" #grpListObj [dataSource]='listData' [fields]='fields'\n                (select)=\"onListViewSelect($event)\">\n                <ng-template #template let-data=\"\">\n                    <div class=\"chat-item\">\n                        <div class=\"chat-title\">{{data.text}}</div>\n                    </div>\n                </ng-template>\n            </ejs-listview>\n        </div>\n    </ejs-sidebar>\n    <!-- Banner Template for AI Assistant -->\n    <ng-template #bannerTemplate>\n        <div class=\"banner-content e-no-content\">\n            <div class=\"e-icons e-assistview-icon\"></div>\n            <h3>AI Assistance</h3>\n            <div class=\"ai-assist-banner-subtitle\">Hello, I'm Your Digital Assistant!</div>\n        </div>\n    </ng-template>\n</div>\n\n<!-- Action and General Description -->","app.component.css":".ai-assistant {\n    height: 500px;\n    width: auto;\n    margin: 0 auto;\n}\n\n.ai-assistant #aiAssistView {\n    width: auto !important;\n}\n\n#assistant-splitter .canvas-response {\n\tpadding: 16px;\n\toverflow-y: auto;\n\theight: 100%;\n\tfont-family: inherit;\n}\n\n.ai-assistant .banner-content .e-assistview-icon:before {\n    font-size: 35px;\n}\n\n.ai-assistant .banner-content {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 330px;\n    text-align: center;\n}\n\n.ai-assistant .banner-content.e-no-content {\n    height: 25vh;\n}\n\n.ai-assistant .banner-content h3 {\n    margin: 0;\n}\n\n.ai-assistant .banner-content .e-assistview-icon:before {\n    font-size: 40px;\n}\n\n#assistantSidebar {\n    border: 1px solid var(--color-sf-border);\n    border-right: unset;\n}\n\n#assistantSidebar .e-listview .e-aiassist-chat::before {\n    font-size: 18px;\n}\n\n#assistantSidebar .e-listview .e-aiassist-chat {\n    margin: 0 8px;\n}\n\n/* Chat item styles */\n#assistantSidebar #assistant-listview-grp .chat-item {\n    padding-left: 6px;\n    cursor: pointer;\n}\n\n#assistantSidebar #assistant-listview-grp .chat-title {\n    font-size: 14px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    margin-bottom: 5px;\n}\n\n#assistantSidebar #assistant-listview-grp .chat-time {\n    font-size: 12px;\n    color: #757575;\n}\n\n#assistantSidebar #assistant-listview-grp {\n    height: calc(100% - 50px);\n    overflow-y: auto;\n    border: none;\n}\n\n#assistantSidebar .assistant-listview-option {\n    display: flex;\n    padding: 10px 10px 10px 8px;\n    align-items: center;\n}\n\n#assistantSidebar .assistant-listview-option div {\n    font-size: 16px;\n    font-weight: 500;\n    margin-left: 10px;\n}\n\n#assistantSidebar .assistant-listview-option span {\n    margin-left: auto;\n    margin-top: 5px;\n}\n\n#assistantSidebar .e-toolbar-left .e-toolbar-item .e-tbar-btn {\n    pointer-events: none;\n}\n\n#assistantSidebar .assistant-sidebar-header .e-toolbar,\n#assistantSidebar .assistant-sidebar-header .e-toolbar .e-tbar-btn {\n    background: inherit;\n}\n\n#assistantSidebar.e-close .assistant-sidebar-content .assistant-listview-option .header-conversation,\n#assistantSidebar.e-close .assistant-sidebar-content .assistant-listview-option .e-refresh,\n#assistantSidebar.e-close .assistant-sidebar-content #assistant-listview-grp,\n#assistantSidebar.e-close .new-chat-button,\n#assistantSidebar.e-close .e-toolbar-left .e-toolbar-item {\n    display: none;\n}\n\n#assistantSidebar.e-close .assistant-sidebar-content .assistant-listview-option .e-multiple-comment {\n    font-size: 24px;\n    padding-left: 5px;\n}\n\n#assistantSidebar.e-close .e-toolbar-items .e-toolbar-right {\n    left: 14px;\n}\n\n#assistantSidebar .e-toolbar-item .e-tbar-btn:hover .e-icons {\n    color: #6c757d;\n}\n\n#assistantSidebar .assistant-listview-option #resetButton {\n    cursor: pointer;\n    font-size: 15px;\n}\n\n@media screen and (max-width: 480px) {\n    #assistantSidebar .e-toolbar-items .e-toolbar-right {\n        margin-left: 100px;\n    }\n\n    .ai-assistant {\n        width: 100%;\n    }\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-interactive-chat\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-interactive-chat\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}