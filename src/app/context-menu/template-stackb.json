{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { Browser } from '@syncfusion/ej2-base';\nimport { ContextMenuComponent, MenuEventArgs, MenuItemModel, ContextMenuModule, BeforeOpenCloseMenuEventArgs } from '@syncfusion/ej2-angular-navigations';\n\n\n/**\n * Default ContextMenu Controller\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ContextMenuModule,  ]\n})\n\nexport class AppComponent {\n    public content: string = '';\n\n    @ViewChild('contextmenu')\n    public contextmenu: ContextMenuComponent;\n\n    public data = [\n        {\n          answerType: 'Selection',\n          description: 'Choose from options',\n          iconCss: 'e-icons e-list-unordered',\n        },\n        {\n          answerType: 'Yes / No',\n          description: 'Select Yes or No',\n          iconCss: 'e-icons e-check-box',\n        },\n        {\n          answerType: 'Text',\n          description: 'Type own answer',\n          iconCss: 'e-icons e-caption',\n          items: [\n            {\n              answerType: 'Single line',\n              description: 'Type answer in a single line',\n              iconCss: 'e-icons e-text-form',\n            },\n            {\n              answerType: 'Multiple line',\n              description: 'Type answer in multiple line',\n              iconCss: 'e-icons e-text-wrap',\n            },\n          ],\n        },\n        {\n          answerType: 'None',\n          description: 'No answer required',\n          iconCss: 'e-icons e-mouse-pointer',\n        },\n    ];\n\n    // Event triggers once the context menu rendering is completed.\n    onCreated(): void {\n        if (Browser.isDevice) {\n            this.content = 'Touch hold to open the Context Menu and select the answer type';\n            this.contextmenu.animationSettings.effect = 'ZoomIn';\n        } else {\n            this.content = 'Right click/Touch hold to open the Context Menu and select the answer type';\n            this.contextmenu.animationSettings.effect = 'SlideDown';\n        }\n    }\n\n    addTemplateClass(args: BeforeOpenCloseMenuEventArgs): void {\n        if (args.element.classList.contains('e-ul')) {\n          args.element.classList.add('e-contextMenu-template');\n        }\n      }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div class=\"contextmenu-control\">\n      <div id=\"contextmenutarget\">{{content}}</div>\n      <ejs-contextmenu #contextmenu\n        cssClass=\"e-contextMenu-template\"\n        id=\"contextmenu\"\n        (created)=\"onCreated()\"\n        [target]=\"'#contextmenutarget'\"\n        [items]=\"data\"\n        [itemTemplate]=\"itemTemplate\"\n        (beforeOpen)=\"addTemplateClass($event)\"\n      >\n        <ng-template #itemTemplate let-data>\n          <div class=\"menu-wrapper\">\n            <span class=\"{{data.iconCss}} icon-right\"></span>\n            <div class=\"text-content\">\n              <span class=\"text\">{{ data.answerType }}</span>\n              <span class=\"description\">{{ data.description }}</span>\n            </div>\n          </div>\n        </ng-template>\n      </ejs-contextmenu>\n    </div>\n    <div id=\"description\">\n      <p>\n        ContextMenu is a graphical user interface that appears on a right-click or touch-and-hold action. It supports displaying single-level or multi-level menus and allows for customizing the menu items through templates.\n      </p>\n      <p>\n        In this demo, <code><a target=\"_blank\" class=\"code\" href=\"https://ej2.syncfusion.com/angular/documentation/api/context-menu/#itemtemplate\">itemTemplate\n        </a></code> property  is used to enable template support for customizing ContextMenu items. Each menu item is customized using a template to include icons, descriptive text, and additional content, offering a flexible and user-friendly interface.\n      </p>\n      <p>\n        In mobile, the sub menu opens in a single layer with option for switching back to parent menu.\n      </p>\n      <p>\n        More information about ContextMenu can be found in this\n        <a target=\"_blank\" href=\"https://ej2.syncfusion.com/angular/documentation/context-menu/getting-started\">documentation section</a>.\n      </p>\n    </div>\n  </div>\n  \n","app.component.css":"/* custom code start */\n/* template support css*/\n.e-contextMenu-template .menu-wrapper{\n    display: flex;\n    align-items: center;\n    padding: 2px;\n}\n\n.e-contextMenu-template .menu-wrapper .text-content {\n    display: flex;\n    flex-direction: column;\n}\n\n.e-contextMenu-template .menu-wrapper .text {\n    font-weight: 600;\n}\n\n.e-contextMenu-template .menu-wrapper .description {\n    font-size: 0.8em;\n}\n\n.e-contextMenu-template .menu-wrapper .icon-right {\n    padding: 8px 8px 8px 0px;\n    font-size: 1.5em;\n}\n\n.e-contextMenu-template .e-caret {\n    margin-top: -34px !important;\n}\n\n.e-contextMenu-template .e-menu-item {\n    height: auto !important;\n    line-height: unset !important;\n}\n\n.contextmenu-control {\n    margin: 5% 25%;\n    width: auto;\n    -webkit-touch-callout: none;\n    /* iOS Safari */\n    -webkit-user-select: none;\n    /* Safari */\n}\n\n#contextmenutarget {\n    border: 1px dashed;\n    height: 250px;\n    padding: 10px;\n    position: relative;\n    text-align: center;\n    justify-content: center;\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n}\n\n@media only screen and (max-width: 700px) {\n    .contextmenu-control {\n        margin: 5% 10%;\n        width: auto;\n    }\n    #contextmenutarget {\n        font-size: 12px;\n    }\n}\n\n.e-contextMenu-template .e-menu-item .e-previous {\n    margin-right: 0 !important;\n}\n\n/* custom code end */","dependencies.json":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}