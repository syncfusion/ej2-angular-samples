{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\n\n\nimport { SpeechToTextModule, TextAreaModule, SpeechToTextComponent, TextAreaComponent, ErrorEventArgs, StopListeningEventArgs, TranscriptChangedEventArgs } from '@syncfusion/ej2-angular-inputs';\nimport { DropDownListModule, ChangeEventArgs as DDLChangeEventArgs, DropDownListComponent } from '@syncfusion/ej2-angular-dropdowns';\nimport { SwitchModule, ButtonModule, ChangeEventArgs, SwitchComponent, ButtonComponent } from '@syncfusion/ej2-angular-buttons';\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [SpeechToTextModule, TextAreaModule, SwitchModule, ButtonModule, DropDownListModule,  ]\n})\nexport class AppComponent {\n\n    @ViewChild('speechToText') speechToText!: SpeechToTextComponent;\n    @ViewChild('outputTextarea') outputTextarea!: TextAreaComponent;\n    @ViewChild('sttStylingDdl') sttStylingDdl!: DropDownListComponent;\n    @ViewChild('sttLangDdl') sttLangDdl!: DropDownListComponent;\n    @ViewChild('interimSwitch') interimSwitch!: SwitchComponent;\n    @ViewChild('tooltipSwitch') tooltipSwitch!: SwitchComponent;\n    @ViewChild('iconWithTextSwitch') iconWithTextSwitch!: SwitchComponent;\n\n    private isSupportedBrowser: boolean = true;\n    public colorsData: Object[] = [\n        { text: 'Normal', value: '' },\n        { text: 'Primary', value: 'e-primary' },\n        { text: 'Success', value: 'e-success' },\n        { text: 'Warning', value: 'e-warning' },\n        { text: 'Danger', value: 'e-danger' },\n        { text: 'Flat', value: 'e-flat' },\n        { text: 'Info', value: 'e-info' }\n    ];\n    public languageData: Object[] = [\n        { text: 'English, US', value: 'en-US' },\n        { text: 'German, DE', value: 'de-DE' },\n        { text: 'Chinese, CN', value: 'zh-CN' },\n        { text: 'French, FR', value: 'fr-FR' },\n        { text: 'Arabic, SA', value: 'ar-SA' }\n    ];\n    public fields: Object = { text: 'text', value: 'value' };\n    \n    onTranscriptChange(args: TranscriptChangedEventArgs): void {\n       if (!args.isInterimResult) {\n        args.transcript += ' ';\n       }\n       this.outputTextarea.value = args.transcript;\n       this.toggleCopyButtonState();\n    }\n\n    onMicColorChange(args: DDLChangeEventArgs): void {\n        this.speechToText.cssClass = args.value.toString();\n    }\n    \n    onLanguageChange(args: DDLChangeEventArgs): void {\n        this.speechToText.lang = args.value.toString();\n    }\n    \n    toggleInterimResults(args: ChangeEventArgs): void {\n        this.speechToText.allowInterimResults = args.checked;\n    }\n    \n    toggleTooltip(args: ChangeEventArgs): void {\n        this.speechToText.showTooltip = args.checked;\n    }\n    \n    toggleIconWithText(args: ChangeEventArgs): void {\n        this.speechToText.buttonSettings = {\n          content: args.checked ? 'Start Listening' : '',\n          stopContent: args.checked ? 'Stop Listening' : ''\n        };\n    }\n    onListeningStart(): void {\n        if (this.isSupportedBrowser) {\n            if (this.outputTextarea.value) {\n                this.speechToText.transcript = this.outputTextarea.value + '\\n';\n            }\n        }\n        this.updateStatus(this.isSupportedBrowser ? 'Listening... Speak now...' : 'For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n        this.sttLangDdl.enabled = false;\n        this.interimSwitch.disabled = true;\n    }\n    \n    onListeningStop(args: StopListeningEventArgs): void {\n        if (this.isSupportedBrowser) {\n            if (args.isInteracted)\n                this.updateStatus('Click the mic button to start speaking...');\n        }\n        else {\n            this.updateStatus('For unsupported browsers, use event callbacks to handle Speech-to-Text actions.');\n        }\n        this.sttLangDdl.enabled = true;\n        this.interimSwitch.disabled = false;\n    }\n    onErrorHandler(args: ErrorEventArgs): void {\n        this.updateStatus(args.errorMessage);\n        if (args.error === 'unsupported-browser')\n            this.isSupportedBrowser = false;\n    }\n    \n    updateStatus(status: string): void {\n        document.querySelector('.speech-recognition-status')!.textContent = status;\n    }\n    \n    copyTranscript(): void {\n        const copyText = this.outputTextarea.value;\n        const copyBtnElem = document.getElementById('transcript-copy-button');\n\n        if (copyText && navigator.clipboard) {\n            navigator.clipboard.writeText(copyText).then(() => {\n            if (copyBtnElem) {\n                copyBtnElem.textContent = 'Copied!';\n                setTimeout(() => {\n                copyBtnElem.textContent = 'Copy';\n                }, 1000);\n            }\n            }).catch(err => {\n            console.error('Clipboard write failed', err);\n            });\n        }\n    }\n    \n    clearTranscript(): void {\n        this.outputTextarea.value = this.speechToText.transcript = '';\n        this.toggleCopyButtonState();\n    }\n\n    toggleCopyButtonState(): void {\n        var hasText = this.outputTextarea.element.value.trim() !== '';\n        const copyBtnElem = document.getElementById('transcript-copy-button');\n        if (hasText) {\n            copyBtnElem.removeAttribute('disabled');\n        }\n        else {\n            copyBtnElem.setAttribute('disabled', 'true');\n        }\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section sb-property-border\">\n    <div class=\"default-speechToText-section\">\n      <div class=\"speechToText-container\">\n          <button ejs-speechtotext #speechToText\n                (transcriptChanged)=\"onTranscriptChange($event)\"\n                (onStart)=\"onListeningStart()\"\n                (onStop)=\"onListeningStop($event)\"\n                (onError)=\"onErrorHandler($event)\">\n          </button>\n        <mark class=\"speech-recognition-status\">Click the mic button to start speaking...</mark>\n      </div>   \n      <div class=\"output-container\">\n        <h4>Live Speech Transcription</h4>\n        <ejs-textarea #outputTextarea id=\"output-textarea\" rows=\"10\" resizeMode=\"None\" cssClass=\"e-outline\" placeholder=\"Transcribed text will appear here...\" (input)=\"toggleCopyButtonState()\"></ejs-textarea>\n        <div class=\"output-options\">\n          <button id=\"transcript-copy-button\" class=\"e-btn\" (click)=\"copyTranscript()\" disabled=\"true\">Copy</button>\n          <button id=\"transcript-clear-button\" class=\"e-btn\" (click)=\"clearTranscript()\">Clear</button>\n        </div>\n      </div>\n    </div>  \n  </div>\n  \n  <div class=\"col-lg-4 default-speechToText property-section\">\n    <div class=\"property-panel-header\">Properties</div>\n    <div class=\"property-panel-content\">\n      <table>\n        <tbody>\n          <tr>\n            <td>Styling</td>\n            <td>\n              <ejs-dropdownlist #sttStylingDdl\n                (change)=\"onMicColorChange($event)\"\n                value=\"\"\n                [dataSource]='colorsData'\n                [fields]='fields'>\n              </ejs-dropdownlist>\n            </td>\n          </tr>\n          <tr>\n            <td>Language</td>\n            <td>\n              <ejs-dropdownlist #sttLangDdl\n                (change)=\"onLanguageChange($event)\"\n                value=\"en-US\"\n                [dataSource]='languageData'\n                [fields]='fields'>\n              </ejs-dropdownlist>\n            </td>\n          </tr>\n          <tr>\n            <td>Interim results</td>\n            <td>\n              <ejs-switch #interimSwitch checked=\"true\" (change)=\"toggleInterimResults($event)\"></ejs-switch>\n            </td>\n          </tr>\n          <tr>\n            <td>Show tooltip</td>\n            <td>\n              <ejs-switch #tooltipSwitch checked=\"true\" (change)=\"toggleTooltip($event)\"></ejs-switch>\n            </td>\n          </tr>\n          <tr>\n            <td>Show icon with text</td>\n            <td>\n              <ejs-switch #iconWithTextSwitch (change)=\"toggleIconWithText($event)\"></ejs-switch>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n</div>\n\n","app.component.css":".default-speechToText-section,\n.default-speechToText-section .output-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n#output-textarea {\n    width: 100%;\n}\n.default-speechToText-section {\n  gap: 50px;\n  margin: 50px auto;\n}\n\n.default-speechToText-section .output-container {\n  width: 75%;\n  gap: 10px;\n}\n\n.default-speechToText-section .output-container h4 {\n  margin: 0;\n  align-self: baseline;\n}\n\n.default-speechToText-section .speech-recognition-status {\n  font-size: 12px;\n}\n\n.default-speechToText .property-panel-content td {\n  padding: 10px 0px;\n  width: 50%;\n}\n.default-speechToText-section .output-options {\n    display: flex;\n    gap: 5px;\n}\n.default-speechToText-section .speechToText-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n}\n\n#transcript-copy-button:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n@media only screen and (max-width: 750px) {\n  .default-speechToText-section .output-container {\n    width: 100%;\n  }\n\n  .default-speechToText-section .output-options {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}