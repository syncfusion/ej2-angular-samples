{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild  } from '@angular/core';\nimport { SpeechToTextModule, SpeechToTextComponent, TranscriptChangedEventArgs, ErrorEventArgs, StopListeningEventArgs } from '@syncfusion/ej2-angular-inputs'\nimport { ChatUIComponent, ChatUIModule, MessageModel, UserModel } from '@syncfusion/ej2-angular-interactive-chat';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [SpeechToTextModule, ChatUIModule]\n})\nexport class AppComponent {\n\n  @ViewChild('speechToText') speechToTextInstance!: SpeechToTextComponent;\n  @ViewChild('chatUI') chatUIInstance!: ChatUIComponent;\n\n  public user: UserModel = { id: 'testing-user', user: 'Testing User' };\n  private msgIdx: number = -1;\n  private isIndicatorVisible: boolean = false;\n\n  onTranscriptChange(args: TranscriptChangedEventArgs): void {\n    const existingMsg: MessageModel = this.chatUIInstance.messages[this.msgIdx];\n    if (existingMsg) {\n      this.chatUIInstance.updateMessage({ text: args.transcript }, existingMsg.id as string);\n      this.chatUIInstance.scrollToBottom();\n    } else {\n      const newMsg: MessageModel = { id: 'msg-' + (this.msgIdx + 1), text: args.transcript, author: this.user };\n      this.chatUIInstance.addMessage(newMsg);\n    }\n\n    if (!this.isIndicatorVisible) {\n      this.chatUIInstance.typingUsers = [this.user];\n      this.isIndicatorVisible = true;\n    }\n\n    if (!args.isInterimResult) {\n      this.msgIdx++;\n      this.speechToTextInstance.transcript = '';\n      this.chatUIInstance.typingUsers = [];\n      this.isIndicatorVisible = false;\n    }\n  }\n\n  onListeningStart(): void {\n    this.msgIdx = this.chatUIInstance.messages.length;\n    this.speechToTextInstance.element.classList.add('stt-listening-state');\n    this.updateStatus('Listening... Speak now...');\n  }\n\n  onListeningStop(args: StopListeningEventArgs): void {\n    this.speechToTextInstance.element.classList.remove('stt-listening-state');\n    this.chatUIInstance.typingUsers = [];\n    if (args.isInteracted) this.updateStatus('Click the mic button to start speaking...');\n  }\n\n  onErrorHandler(args: ErrorEventArgs): void {\n    this.updateStatus(args.errorMessage);\n    if (args.error === 'unsupported-browser') {\n      this.speechToTextInstance.disabled = true;\n    }\n  }\n\n  private updateStatus(status: string): void {\n    const statusElement = document.querySelector('.speech-recognition-status') as HTMLElement;\n    statusElement.innerText = status;\n  }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n  <div class=\"usecase-speechToText-section e-message\">\n    <div class=\"stt-container\">\n      <button ejs-speechtotext #speechToText id=\"speechToText\"\n              [buttonSettings]=\"{ stopIconCss: 'e-icons e-listen-icon' }\"\n              cssClass=\"usecase-stt-btn\"\n              (transcriptChanged)=\"onTranscriptChange($event)\"\n              (onStart)=\"onListeningStart()\"\n              (onStop)=\"onListeningStop($event)\"\n              (onError)=\"onErrorHandler($event)\">\n      </button>\n      <span class=\"speech-recognition-status\">Click the mic button to start speaking...</span>\n    </div>\n    <div class=\"transcript-container\">\n      <div id=\"transcript-content\" ejs-chatui #chatUI [showHeader]=\"false\" [showFooter]=\"false\" timeStampFormat=\"MMM d, h:mm a\"\n                  autoScrollToBottom=\"true\">\n        <ng-template #emptyChatTemplate>\n          <div class=\"empty-chat\">\n            <span class=\"e-icons e-multiple-comment\"></span>\n            No transcript available. Start speaking to generate a transcript.\n          </div>\n        </ng-template>\n        <ng-template #typingUsersTemplate>\n          <div class=\"e-typing-indicator\">\n            <span class=\"e-user-text\">Transcripting</span> \n            <div class=\"e-indicator-wrapper\">\n              <span class=\"e-indicator\"></span><span class=\"e-indicator\"></span><span class=\"e-indicator\"></span>\n            </div>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n\n","app.component.css":".usecase-speechToText-section,\n.e-bigger .usecase-speechToText-section {\n    width: 90%;\n    height: 55vh;\n    margin: 0 auto;\n    padding: 0;\n    display: flex;\n}\n\n.usecase-speechToText-section #transcript-content {\n    border: none;\n    border-top-right-radius: 8px;\n    border-bottom-right-radius: 8px;\n}\n\n.usecase-speechToText-section .stt-container {\n    width: 70%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 40px;\n}\n\n.usecase-speechToText-section .e-speech-to-text.usecase-stt-btn {\n    width: 100px;\n    height: 100px;\n    position: relative;\n}\n\n.usecase-speechToText-section .usecase-stt-btn .e-btn-icon,\n.e-bigger .usecase-speechToText-section .usecase-stt-btn .e-btn-icon {\n    font-size: 50px;\n}\n\n.usecase-speechToText-section .transcript-container {\n    width: 30%;\n    height: 100%;\n}\n\n/* Create wave effect using pseudo-elements */\n.usecase-stt-btn::before,\n.usecase-stt-btn::after {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background: #9b9b9b;\n    transform: translate(-50%, -50%) scale(1);\n    opacity: 0;\n    pointer-events: none;\n}\n\n.usecase-speechToText-section .stt-listening-state::before {\n    animation: stt-wave-ring 1.5s infinite ease-out;\n}\n\n.usecase-speechToText-section .stt-listening-state::after {\n    animation: stt-wave-ring 1.5s 0.75s infinite ease-out; /* Slight delay for second wave */\n}\n\n@keyframes stt-wave-ring {\n    0% {\n        transform: translate(-50%, -50%) scale(1);\n        opacity: 0.8;\n    }\n    100% {\n        transform: translate(-50%, -50%) scale(2);\n        opacity: 0;\n    }\n}\n\n.usecase-speechToText-section .empty-chat {\n    width: 90%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 15px;\n    flex-direction: column;\n    gap: 10px;\n    text-align: center;\n    margin: auto;\n}\n\n.usecase-speechToText-section .empty-chat .e-multiple-comment {\n    font-size: 50px;\n}\n\n.usecase-speechToText-section #transcript-content.e-chat-ui .e-message-group {\n    max-width: 95%;\n}\n\n@media only screen and (max-width: 850px) {\n    .usecase-speechToText-section, \n    .e-bigger .usecase-speechToText-section {\n        flex-direction: column;\n        height: 70vh;\n    }\n    .usecase-speechToText-section .transcript-container {\n        width: 100%;\n        height: 70vh;\n        overflow: scroll;\n    }\n    .usecase-speechToText-section .stt-container {\n        width: 100%;\n        height: 55%;\n    }\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-interactive-chat\":\"*\",\"@syncfusion/ej2-angular-interactive-chat\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}