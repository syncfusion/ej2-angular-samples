{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","order.service.ts":"import { Injectable } from '@angular/core';\nimport { Sorts, DataStateChangeEventArgs } from '@syncfusion/ej2-angular-grids';\nimport { Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrdersService extends Subject<DataStateChangeEventArgs> {\n    private BASE_URL =\n        'https://services.odata.org/V4/Northwind/Northwind.svc/Orders';\n\n    constructor() {\n        super();\n    }\n\n    public execute(state: any): void {\n        this.getData(state).subscribe((x) => super.next(x));\n    }\n\n    protected getData(\n        state: DataStateChangeEventArgs\n    ): Observable<DataStateChangeEventArgs> {\n        const pageQuery = `$skip=${state.skip}&$top=${state.take}`;\n        let sortQuery: string = '';\n\n        if ((state.sorted || []).length) {\n            sortQuery =\n                `&$orderby=` +\n                state.sorted\n                    .map((obj: Sorts) => {\n                        return obj.direction === 'descending'\n                            ? `${obj.name} desc`\n                            : obj.name;\n                    })\n                    .reverse()\n                    .join(',');\n        }\n\n        return this.fetchData(\n            `${this.BASE_URL}?${pageQuery}${sortQuery}&$count=true`\n        ).pipe(\n            map((response: any) => {\n                const result = response['value'];\n                const count = response['@odata.count'];\n                return { result, count } as DataStateChangeEventArgs;\n            })\n        );\n    }\n\n    private fetchData(url: string): Observable<any> {\n        return new Observable((observer) => {\n            fetch(url)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error('Network response was not ok');\n                    }\n                    return response.json();\n                })\n                .then((data) => {\n                    observer.next(data);\n                    observer.complete();\n                })\n                .catch((error) => {\n                    observer.error(error);\n                });\n        });\n    }\n}\n","app.component.ts":"import { Component, OnInit, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OrdersService } from './order.service';\nimport { DataStateChangeEventArgs } from '@syncfusion/ej2-grids';\nimport { AsyncPipe } from '@angular/common';\n\n\nimport { GridModule, SortService, GroupService, PageService } from '@syncfusion/ej2-angular-grids';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    providers: [SortService, GroupService, PageService],\n    standalone: true,\n    imports: [\n        GridModule,\n        \n        \n        AsyncPipe,\n    ],\n})\nexport class AppComponent {\n    public data: Observable<DataStateChangeEventArgs>;\n    public pageOptions: Object;\n    public state: DataStateChangeEventArgs;\n\n    constructor( private service: OrdersService) {\n        \n        this.data = service;\n    }\n\n    public dataStateChange(state: DataStateChangeEventArgs): void {\n        this.service.execute(state);\n    }\n\n    public ngOnInit(): void {\n        this.pageOptions = { pageSize: 10, pageCount: 4 };\n        let state = { skip: 0, take: 10 };\n        this.service.execute(state);\n    }\n}\n\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <ejs-grid [dataSource]='data | async' allowPaging= 'true' [pageSettings]='pageOptions' allowSorting= 'true' allowGrouping= 'true' (dataStateChange)= 'dataStateChange($event)'>\n        <e-columns>\n            <e-column field= \"OrderID\" headerText=\"Order ID\" width=\"130\" [allowGrouping]=\"false\"></e-column>\n            <e-column field= \"CustomerID\" headerText=\"Customer Name\" width=\"150\"></e-column>\n            <e-column field= \"ShipName\" headerText=\"Ship Name\" width=\"200\"></e-column>\n            <e-column field= \"ShipCity\" headerText=\"Ship City\" width=\"150\"></e-column>\n        </e-columns>\n    </ejs-grid>\n\n\n</div>\n","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-compression\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-file-utils\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}