{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, OnInit, ViewChild } from '@angular/core';\nimport { DataManager, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, UrlAdaptor, Query } from '@syncfusion/ej2-data';\nimport { CheckBoxChangeEventArgs, ColumnModel, DataResult, DataStateChangeEventArgs, GridComponent, Sorts } from '@syncfusion/ej2-angular-grids';\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\nimport { DropDownListComponent } from '@syncfusion/ej2-angular-dropdowns';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\nimport { Ajax } from '@syncfusion/ej2-base';\nimport { enableRipple, addClass, removeClass } from '@syncfusion/ej2-base';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n})\nexport class AppComponent {\n  public data: DataManager;\n  @ViewChild('grid')\n  public grid: GridComponent;\n  @ViewChild('dropdown')\n  public serviceDropdown: DropDownListComponent;\n  @ViewChild('pageCheckbox')\n  public checkboxInstance: CheckBox;\n  public fields: Object = { text: 'text', value: 'value' };\n  public changedAdaptor: string = 'ODataV4Adaptor';\n  public selectedService: string = 'https://services.odata.org/V4/Northwind/Northwind.svc/Orders/';\n  public adaptorName: string = 'ODataV4Adaptor';\n  public defaultParam: string;\n  public defaultHeader: string;\n  public params: [string];\n  public header: [string];\n  public pagerCheckbox: CheckBox;\n  public ddwidth: string = 'auto';\n  public serviceURL: { [key: string]: Object }[] = [\n    {\n      text: 'https://services.odata.org/V4/Northwind/Northwind.svc/Orders/',\n      value: 'ODataV4Adaptor',\n    },\n    {\n      text: 'https://js.syncfusion.com/ejServices/Wcf/Northwind.svc/Orders/',\n      value: 'ODataAdaptor',\n    },\n    {\n      text: 'https://ej2services.syncfusion.com/js/development/api/Orders',\n      value: 'WebApiAdaptor',\n    },\n    {\n      text: 'https://ej2services.syncfusion.com/js/development/api/UrlDataSource',\n      value: 'UrlAdaptor',\n    },\n    {\n      text: 'https://js.syncfusion.com/demos/ejServices/Wcf/Northwind.svc/Orders',\n      value: 'Custom Binding',\n    },\n  ];\n  public defaultColumns: ColumnModel[] = [\n    { field: 'OrderID', headerText: 'Order ID', textAlign: 'Right', width: 120, type: 'number' },\n    { field: 'CustomerID', width: 140, headerText: 'Customer ID' },\n    { field: 'EmployeeID', headerText: 'Employee ID', width: 120, textAlign: 'Right' },\n    { field: 'ShipCity', headerText: 'Ship City', width: 140 },\n  ];\n  public empColumns: ColumnModel[] = [\n    {\n      field: 'EmployeeID',\n      headerText: 'Employee ID',\n      width: 130,\n      textAlign: 'Right',\n    },\n    { field: 'Employees', headerText: 'Employee Name', width: 150 },\n    { field: 'Designation', headerText: 'Designation', width: 130 },\n    {\n      field: 'CurrentSalary',\n      headerText: 'Current Salary',\n      format: 'C2',\n      textAlign: 'Right',\n      width: 140,\n    },\n  ];\n  public BASE_URL =\n    'https://js.syncfusion.com/demos/ejServices/Wcf/Northwind.svc/Orders';\n  public ajax: Ajax = new Ajax({\n    type: 'GET',\n    mode: true,\n    onFailure: (e: Error) => {\n      return false;\n    },\n  });\n  ngOnInit(): void {\n    this.data = new DataManager({\n      url: 'https://services.odata.org/V4/Northwind/Northwind.svc/Orders/',\n      adaptor: new ODataV4Adaptor(),\n      crossDomain: true\n    });\n    document.getElementById('payload-detail').innerHTML =\n      \"<b><u>Payload Information</u></b><br> Service URL: 'https://services.odata.org/V4/Northwind/Northwind.svc/Orders/' <br> Adaptor Type: ODataV4Adaptor\";\n  }\n\n  serviceChange(args: any): void {\n    this.selectedService = this.serviceDropdown.text as string;\n    this.changedAdaptor = this.serviceDropdown.value as string;\n    this.adaptorName = this.serviceDropdown.value as string;\n    let paramElements = document.querySelectorAll('.params_show_hide');\n    let headerElements = document.querySelectorAll('.header_show_hide');\n    removeClass(paramElements, 'hide_elem');\n    removeClass(headerElements, 'hide_elem');\n    if (this.changedAdaptor === 'Custom Binding') {\n        addClass(paramElements, 'hide_elem');\n    }\n    if (this.changedAdaptor === 'ODataAdaptor') {\n        addClass(headerElements, 'hide_elem');\n    }\n  }\n\n  parameterOnClick = (args: any) => {\n    this.httpAdditionalInfo('paramsKey', 'paramsValue', 'addParams');\n  };\n\n  headerOnClick = (args: any) => {\n    this.httpAdditionalInfo('hkey', 'hvalue', 'hdvalue');\n  };\n  httpAdditionalInfo = (name: string, val: string, btn: string) => {\n    let parameterKey = (document.getElementById(name) as any).value;\n    let parameterValue = (document.getElementById(val) as any).value;\n    parameterKey && parameterValue\n      ? ((\n        document.getElementById(btn) as any\n      ).value += `{\"${parameterKey}\": \"${parameterValue}\"}\\n`)\n      : null;\n    (document.getElementById(name) as any).value = '';\n    (document.getElementById(val) as any).value = '';\n  };\n\n  createObjectArray = (headers: any) => {\n    let result = headers\n      .trim()\n      .split('\\n')\n      .map((head: any) => JSON.parse(head));\n    return result;\n  };\n\n  getData = (state: DataStateChangeEventArgs): Promise<DataResult> => {\n    this.defaultParam = (document.getElementById('addParams') as any).value;\n    this.params = this.defaultParam\n      ? this.createObjectArray(this.defaultParam)\n      : [];\n    const pageQuery = `$skip=${state.skip}&$top=${state.take}`;\n    if (this.checkboxInstance.checked) {\n      this.ajax.url =\n        this.BASE_URL + '?' + pageQuery + '&$inlinecount=allpages&$format=json';\n    } else {\n      this.ajax.url =\n        this.BASE_URL + '?' + '&$inlinecount=allpages&$format=json';\n    }\n    this.ajax.data = Object.assign({}, ...this.params);\n    return this.ajax.send().then((response: any) => {\n      let data: any = JSON.parse(response);\n      return {\n        result: data['d']['results'],\n        count: parseInt(data['d']['__count'], 10),\n      };\n    });\n  };\n  async executeCustomData(state: DataStateChangeEventArgs) {\n    let result = await this.getData(state);\n    this.grid.changeDataSource(result, this.defaultColumns);\n  }\n  public dataStateChangeHandler(args: DataStateChangeEventArgs) {\n    // Define your custom event behavior here\n    this.executeCustomData(args);\n  }\n\n  connectOnclick(e: any) {\n    this.grid.query.params = [];\n    this.grid.query.queries = [];\n    this.defaultParam = (document.getElementById('addParams') as any).value;\n    this.defaultHeader = (document.getElementById('hdvalue') as any).value;\n    this.header = this.defaultHeader\n      ? this.createObjectArray(this.defaultHeader)\n      : [];\n    this.params = this.defaultParam\n      ? this.createObjectArray(this.defaultParam)\n      : [];\n    let newDataSource: any;\n    let checkboxState: boolean = this.checkboxInstance.checked;\n    let newQuery: Query = new Query();\n    this.params.forEach((obj: any) => {\n      for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          const value = obj[key];\n          newQuery.addParams(key, value);\n          if (\n            this.changedAdaptor !== 'UrlAdaptor' &&\n            this.changedAdaptor !== 'Custom Binding' &&\n            key === 'skip'\n          ) {\n            newQuery.skip(value);\n          } else if (\n            this.changedAdaptor !== 'UrlAdaptor' &&\n            this.changedAdaptor !== 'Custom Binding' &&\n            key === 'take'\n          ) {\n            newQuery.take(value);\n          }\n        }\n      }\n    });\n    this.grid.setProperties(\n      { query: newQuery, allowPaging: checkboxState },\n      true\n    );\n    if (this.changedAdaptor === 'Custom Binding') {\n      let state = { skip: 0, take: 12 };\n      this.executeCustomData(state);\n    } else {\n      let col = this.changedAdaptor === 'UrlAdaptor'\n        ? this.empColumns\n        : this.defaultColumns;\n      if (this.changedAdaptor === 'ODataV4Adaptor') {\n        newDataSource = new DataManager({\n          url: 'https://ej2services.syncfusion.com/production/web-services/api/Orders',\n          adaptor: new ODataV4Adaptor(),\n          headers: this.header,\n          crossDomain: true\n        });\n      } else if (this.changedAdaptor === 'UrlAdaptor') {\n        newDataSource = new DataManager({\n          url: 'https://ej2services.syncfusion.com/production/web-services/api/UrlDataSource',\n          adaptor: new UrlAdaptor(),\n          headers: this.header,\n          crossDomain: true\n        });\n      } else if (this.changedAdaptor === 'WebApiAdaptor') {\n        newDataSource = new DataManager({\n          url: 'https://ej2services.syncfusion.com/production/web-services/api/Orders',\n          adaptor: new WebApiAdaptor(),\n          headers: this.header,\n          crossDomain: true\n        });\n      } else if (this.changedAdaptor === 'ODataAdaptor') {\n        newDataSource = new DataManager({\n          url: 'https://js.syncfusion.com/demos/ejServices/Wcf/Northwind.svc/Orders',\n          adaptor: new ODataAdaptor(),\n          crossDomain: true\n        });\n      }\n      this.grid.changeDataSource(newDataSource, col);\n    }\n    let payloadInfo: string;\n    if (this.changedAdaptor === 'Custom Binding') {\n      payloadInfo = `<b>Payload Information</b> <br> Custom Binding <br> Service URL: ${this.selectedService} <br>`;\n    }\n    else if (this.changedAdaptor === 'ODataAdaptor') {\n      payloadInfo = `<b>Payload Information</b> <br> Service URL: ${this.selectedService} <br> Adaptor Type: ${this.changedAdaptor} <br> Additional Parameters: ${this.defaultParam}`;\n    }\n    else {\n      payloadInfo = `<b>Payload Information</b> <br> Service URL: ${this.selectedService} <br> Adaptor Type: ${this.changedAdaptor} <br> Additional Parameters: ${this.defaultParam} <br> Headers: ${this.defaultHeader}`;\n    }\n    document.getElementById('payload-detail').innerHTML = '';\n    document.getElementById('payload-detail').innerHTML += payloadInfo;\n    (document.getElementById('addParams') as any).value = '';\n    (document.getElementById('hdvalue') as any).value = '';\n  }\n}\n","app/app.module.ts":"import { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DatePickerAllModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxAllModule, RatingAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ CommonModule, ToolbarModule, GridAllModule, BrowserModule,       NumericTextBoxAllModule, RatingAllModule , DialogModule, DatePickerAllModule, DropDownListAllModule, ReactiveFormsModule, FormsModule, CheckBoxModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n  <div class=\"col-lg-9\">\n    <div id=\"payload-detail\"></div>\n    <ejs-grid #grid [dataSource]=\"data\" allowPaging=\"true\" (dataStateChange)=\"dataStateChangeHandler($event)\">\n      <e-columns>\n        <e-column field=\"OrderID\" headerText=\"Order ID\" width=\"120\" textAlign=\"Right\"></e-column>\n        <e-column field=\"CustomerID\" headerText=\"Customer ID\" width=\"140\"></e-column>\n        <e-column field=\"EmployeeID\" headerText=\"Employee ID\" width=\"120\" textAlign=\"Right\"></e-column>\n        <e-column field=\"ShipCity\" headerText=\"Ship City\" width=\"140\"></e-column>\n      </e-columns>\n    </ejs-grid>\n  </div>\n  <div class=\"col-lg-3 property-section\">\n    <div class=\"property-panel-section\">\n      <div class=\"property-panel-header\">Properties</div>\n      <div class=\"property-panel-content\">\n        <div>\n          <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n            <tr style=\"height: 50px\">\n              <td style=\"width: 50%\">\n                <div class=\"prop-name\">Service</div>\n              </td>\n              <td style=\"width: 50%\">\n                <div class=\"prop-value\">\n                  <ejs-dropdownlist id=\"service_drop\" #dropdown [dataSource]=\"serviceURL\"\n                    (change)=\"serviceChange($event)\" [fields]=\"fields\" [popupWidth]=\"ddwidth\"\n                    text=\"https://services.odata.org/V4/Northwind/Northwind.svc/Orders/\"></ejs-dropdownlist>\n                </div>\n              </td>\n            </tr>\n            <tr style=\"height: 50px\">\n              <td style=\"width: 50%\">\n                <div class=\"prop-name\">Adaptor</div>\n              </td>\n              <td style=\"width: 50%;\">\n                <div class=\"prop-value\">\n                  <input class=\"e-input\" readonly =\"true\" [value]=\"adaptorName\" style=\"width : 100%\" type=\"text\"\n                  />\n                </div>\n              </td>\n            </tr>\n            <tr style=\"height: 40px\">\n              <td colspan=\"2\">\n                <div class=\"prop-value\">\n                  <ejs-checkbox #pageCheckbox label=\"Enable Paging\" cssClass=\"prop_page\" [checked]=\"true\"></ejs-checkbox>\n                </div>\n              </td>\n            </tr>\n            <tr class=\"params_show_hide\" style=\"height: 40px\">\n              <td style=\"width: 50%\" colspan=\"2\">\n                <div class=\"prop-name\" style=\"font-size: 15px;\">\n                  Additional Parameters\n                </div>\n              </td>\n            </tr>\n            <tr class=\"params_show_hide\" style=\"height: 50px\">\n              <td style=\"width: 50%;\">\n                <div class=\"prop-name\">\n                  <input class=\"e-input\" style=\"width : 100%\" type=\"text\" id=\"paramsKey\" placeholder=\"Enter Name\" />\n                </div>\n              </td>\n              <td style=\"width: 50%;\">\n                <div>\n                  <input class=\"e-input\" style=\"width : 100%\" type=\"text\" id=\"paramsValue\" placeholder=\"Enter Value\" />\n                </div>\n              </td>\n            </tr>\n            <tr class=\"params_show_hide\" style=\"height: 50px\">\n              <td style=\"width: 50%\">\n                <div class=\"prop-name\">\n                  <button style=\" width :100%;\" data-ripple=\"true\" id=\"additionalParams\" ejs-button\n                    (click)=\"parameterOnClick($event)\" cssClass=\"samplebtn e-control e-btn e-primary\">\n                    Add\n                  </button>\n                </div>\n              </td>\n              <td style=\"width: 50%;\">\n                <div>\n                  <textarea style=\"width : 100%\" class=\"e-textbox\" rows=\"2\" id=\"addParams\" readonly></textarea>\n                </div>\n              </td>\n            </tr>\n            <tr class=\"params_show_hide header_show_hide\" style=\"height: 40px\">\n              <td style=\"width: 50%\" colspan=\"2\">\n                  <div class=\"prop-name\" style=\"font-size: 15px;\">HTTP Headers</div>\n              </td>\n          </tr>\n            <tr class=\"params_show_hide header_show_hide\" style=\"height: 50px\">\n              <td style=\"width: 50%;\">\n                <div class=\"prop-name\">\n                  <input class=\"e-input\" style=\"width : 100%\" type=\"text\" id=\"hkey\" placeholder=\"Enter Key\" />\n                </div>\n              </td>\n              <td style=\"width: 50%; \">\n                <div>\n                  <input class=\"e-input\" style=\"width : 100%\" type=\"text\" id=\"hvalue\" placeholder=\"Enter Value\" />\n                </div>\n              </td>\n            </tr>\n            <tr class=\"params_show_hide header_show_hide\" style=\"height: 50px\">\n              <td style=\"width: 50%\">\n                <div class=\"prop-name\">\n                  <button style=\"width : 100%\" data-ripple=\"true\" id=\"headerId\" ejs-button\n                    (click)=\"headerOnClick($event)\" cssClass=\"samplebtn e-control e-btn e-primary\">\n                    Add\n                  </button>\n                </div>\n              </td>\n              <td style=\"width: 50%;\">\n                <div>\n                  <textarea style=\"width : 100%\" class=\"e-textbox\" rows=\"2\" id=\"hdvalue\" readonly></textarea>\n                </div>\n              </td>\n            </tr>\n            <tr style=\"height: 50px\">\n              <td style=\"width: 50%;\" colspan=\"2\">\n                <div>\n                  <button style=\"width : 100%\" data-ripple=\"true\" id=\"validateSubmit\" ejs-button\n                    (click)=\"connectOnclick($event)\" cssClass=\"samplebtn e-control e-btn e-primary\">\n                    Connect\n                  </button>\n                </div>\n              </td>\n            </tr>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n</div>\n<style>\n  @media screen and (max-width: 590px) {\n    #property tr:nth-child(3) {\n      display: none;\n    }\n  }\n\n  #numericbox {\n    min-width: 130px;\n  }\n\n  .prop-name {\n    padding-right: 10px;\n  }\n\n  #payload-detail {\n    word-wrap: break-word;\n    margin-bottom: 10px;\n    border: 1px solid rgb(215, 215, 215);\n    padding: 10px;\n  }\n\n  .prop-value .prop_page {\n    padding-left: 0;\n  }\n\n  .hide_elem {\n    display: none;\n  }\n</style>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}