{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, OnInit, OnDestroy, ViewChild, ElementRef, ViewEncapsulation } from '@angular/core';\nimport { CommonModule, NgIf } from '@angular/common';\nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport { NodeModel, Node, NodeConstraints, SnapConstraints, HtmlModel, SelectorConstraints, IClickEventArgs, DiagramConstraints } from '@syncfusion/ej2-diagrams';\n\n\n\n/**\n * Sample for Interactive Puzzle Diagram\n */\n\ninterface ImageTheme {\n    [key: number]: string;\n}\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, CommonModule, NgIf, ]\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagramComponent!: DiagramComponent;\n    public constraints: DiagramConstraints = DiagramConstraints.Default &~ DiagramConstraints.UndoRedo;\n\n    // Game state properties\n    public moveCount: number = 0;\n    public timeDisplay: string = \"00:00\";\n    public showWinDialog: boolean = false;\n    private gameBoard: number[] = new Array(16);\n    private emptyIndex: number = 0;\n    private gameTimer: any = null;\n    private elapsedSeconds: number = 0;\n    private isPaused: boolean = false;\n    private gameStarted: boolean = false;\n    private showClue: boolean = false;\n    private isPuzzleSolved: boolean = false;\n    private diagramCreated: boolean = false;\n\n    // Image collections\n    private imageCollections: ImageTheme[] = [];\n    private currentImageMap!: ImageTheme;\n    private currentThemeIndex: number = 0;\n    private imageRandom = Math.random;\n\n    // Constants\n    private readonly TILE_WIDTH = 130;\n    private readonly TILE_HEIGHT = 130;\n    private readonly GRID_SIZE = 4;\n\n    // Diagram configuration\n    public diagramWidth = \"100%\";\n    public diagramHeight = \"750px\";\n    public nodes: NodeModel[] = [];\n    public snapSettings = { constraints: SnapConstraints.None };\n    public selectedItems = { constraints: SelectorConstraints.None };\n\n    ngOnInit(): void {\n        this.initializeImageCollections();\n        this.initializeGame();\n        this.setupTimer();\n    }\n\n    ngOnDestroy(): void {\n        if (this.gameTimer) {\n            clearInterval(this.gameTimer);\n        }\n    }\n\n    public onDiagramCreated(): void {\n        this.diagramCreated = true;\n        this.diagramComponent.fitToPage();\n    }\n\n    public onDiagramLoad(): void {\n        if (this.diagramCreated) {\n            setTimeout(() => this.diagramComponent.fitToPage(), 10);\n        }\n    }\n\n    public onDiagramClick(args: IClickEventArgs): void {\n        if (args.actualObject instanceof Node) {\n            const node: NodeModel = args.actualObject;\n            if (node.id === 'newgame') {\n                this.newGame();\n            }\n            else if (node.id === 'pause') {\n                this.togglePause();\n            }\n            else if (node.id === 'clue') {\n                this.toggleClue();\n            }\n            else if (node.id?.startsWith(\"tile\")) {\n                if (this.isPaused || this.isPuzzleSolved) return;\n\n                if (!this.gameStarted) {\n                    this.gameStarted = true;\n                    this.elapsedSeconds = 0;\n                    this.updateTimeDisplay();\n                }\n\n                const nodeId = node.id;\n                if (nodeId?.startsWith(\"tile\")) {\n                    const tileNumber = parseInt(nodeId.substring(4));\n                    this.moveTileToEmptySpace(tileNumber);\n                }\n            }\n        }\n    }\n\n    public closeWinDialog(): void {\n        this.showWinDialog = false;\n        this.newGame();\n    }\n\n    private initializeImageCollections(): void {\n        // bridge theme\n        const bridgeTheme: ImageTheme = {};\n        // Nature theme\n        const natureTheme: ImageTheme = {};\n        // Man theme\n        const manTheme: ImageTheme = {};\n\n        for (let i = 1; i <= 16; i++) {\n            const row = Math.ceil(i / 4);\n            const col = ((i - 1) % 4) + 1;\n            bridgeTheme[i] = `./assets/diagram/Images/puzzle/bridge${col}x${row}.png`;\n            natureTheme[i] = `./assets/diagram/Images/puzzle/image${col}x${row}.png`;\n            manTheme[i] = `./assets/diagram/Images/puzzle/man${col}x${row}.png`;\n        }\n\n        this.imageCollections = [bridgeTheme, natureTheme, manTheme];\n        this.currentImageMap = this.imageCollections[0];\n        this.currentThemeIndex = 0;\n    }\n\n    private createNodes(): void {\n        this.nodes = [];\n\n        // Background Node\n        const backgroundNode: NodeModel = {\n            id: \"backgroundNode\",\n            offsetX: 788,\n            offsetY: 392,\n            height: 755,\n            width: 639,\n            style: {\n                fill: \"#B0C4DE\",\n                opacity: 0.5\n            },\n            constraints: NodeConstraints.None,\n            shape: {\n                type: 'Basic',\n                shape: 'Rectangle',\n                cornerRadius: 5\n            }\n        };\n        this.nodes.push(backgroundNode);\n\n        // Moves counter node\n        const moveNode: NodeModel = {\n            id: \"moves\",\n            offsetX: 615,\n            offsetY: 80,\n            width: 160, height: 100,\n            constraints: NodeConstraints.None,\n            shape: {\n                type: 'HTML',\n                content: this.getMovesTemplate()\n            }\n        };\n        this.nodes.push(moveNode);\n\n        // Time node\n        const timeNode: NodeModel = {\n            id: \"time\",\n            offsetX: 976,\n            offsetY: 80,\n            width: 160, height: 100,\n            constraints: NodeConstraints.None,\n            shape: {\n                type: 'HTML',\n                content: this.getTimeTemplate()\n            }\n        };\n        this.nodes.push(timeNode);\n\n        // New game button\n        const newGameNode: NodeModel = {\n            id: \"newgame\",\n            offsetX: 610,\n            offsetY: 725,\n            width: 150, height: 50,\n            constraints: NodeConstraints.PointerEvents,\n            shape: {\n                type: 'HTML',\n                content: this.getNewGameTemplate()\n            }\n        };\n        this.nodes.push(newGameNode);\n\n        // Pause button\n        const pauseNode: NodeModel = {\n            id: \"pause\",\n            offsetX: 980,\n            offsetY: 725,\n            width: 150, height: 50,\n            constraints: NodeConstraints.PointerEvents,\n            shape: {\n                type: 'HTML',\n                content: this.getPauseTemplate()\n            }\n        };\n        this.nodes.push(pauseNode);\n\n        // Clue button\n        const clueNode: NodeModel = {\n            id: \"clue\",\n            offsetX: 795,\n            offsetY: 725,\n            width: 150, height: 50,\n            constraints: NodeConstraints.PointerEvents,\n            shape: {\n                type: 'HTML',\n                content: this.getClueTemplate()\n            }\n        };\n        this.nodes.push(clueNode);\n\n        // Create puzzle tiles\n        for (let i = 0; i < this.gameBoard.length; i++) {\n            if (this.gameBoard[i] !== 0) {\n                const pieceNumber = this.gameBoard[i];\n\n                const node: NodeModel = {\n                    id: `tile${pieceNumber}`,\n                    width: this.TILE_WIDTH,\n                    height: this.TILE_HEIGHT,\n                    offsetX: this.getTileX(i),\n                    offsetY: this.getTileY(i),\n                    annotations: [{\n                        id: `annotation${pieceNumber}`,\n                        width: 25,\n                        height: 25,\n                        template: this.getAnnotationTemplate(pieceNumber),\n                        visibility: false,\n                        offset: { x: 0.7, y: 0.1 },\n                        horizontalAlignment: 'Center',\n                        verticalAlignment: 'Center'\n                    }],\n                    style: {\n                        strokeColor: \"white\"\n                    },\n                    shape: {\n                        type: 'Image',\n                        source: this.getImageSourceForTile(pieceNumber)\n                    }\n                };\n\n                if (this.canMoveTile(i)) {\n                    node.constraints = NodeConstraints.PointerEvents;\n                } else {\n                    node.constraints = NodeConstraints.None;\n                }\n\n                this.nodes.push(node);\n            }\n        }\n    }\n\n    private getMovesTemplate(): string {\n        return `<div class=\"moves-counter\">\n                    <span class=\"label\">MOVES :</span>\n                    <span class=\"count\">${this.moveCount}</span>\n                </div>`;\n    }\n\n    private getTimeTemplate(): string {\n        return `<div class=\"timer\">\n                    <span class=\"label\">TIME :</span>\n                    <span class=\"time-display\">${this.timeDisplay}</span>\n                </div>`;\n    }\n\n    private getNewGameTemplate(): string {\n        return `<button class=\"new-game-btn\" id=\"newGameBtn\">\n                    <span class=\"icon\">🎮</span>\n                    NEW GAME\n                </button>`;\n    }\n\n    private getClueTemplate(): string {\n        return `<button class=\"clue-btn\" id=\"clueBtn\">\n                    <span class=\"icon\">💡</span>\n                    <span class=\"text\">${this.showClue ? \"HIDE CLUE\" : \"SHOW CLUE\"}</span>\n                </button>`;\n    }\n\n    private getPauseTemplate(): string {\n        return `<button class=\"pause-btn\" id=\"pauseBtn\">\n                    <span class=\"icon\">${this.isPaused ? \"▶️\" : \"⏸️\"}</span>\n                    <span class=\"text\">${this.isPaused ? \"RESUME\" : \"PAUSE\"}</span>\n                </button>`;\n    }\n\n    private getAnnotationTemplate(pieceNumber: number): string {\n        return `<div class=\"number-badge\">${pieceNumber}</div>`;\n    }\n\n    private initializeGame(): void {\n        // Initialize solved state\n        this.gameBoard[0] = 1; this.gameBoard[1] = 2; this.gameBoard[2] = 3; this.gameBoard[3] = 4;\n        this.gameBoard[4] = 5; this.gameBoard[5] = 6; this.gameBoard[6] = 7; this.gameBoard[7] = 8;\n        this.gameBoard[8] = 9; this.gameBoard[9] = 10; this.gameBoard[10] = 11; this.gameBoard[11] = 12;\n        this.gameBoard[12] = 13; this.gameBoard[13] = 14; this.gameBoard[14] = 15; this.gameBoard[15] = 0;\n\n        this.emptyIndex = 15;\n        this.shuffleBoard();\n        this.moveCount = 0;\n        this.isPuzzleSolved = false;\n        this.elapsedSeconds = 0;\n        this.updateTimeDisplay();\n        this.gameStarted = false;\n        this.createNodes();\n    }\n\n    private setupTimer(): void {\n        this.gameTimer = setInterval(() => {\n            this.onTimerElapsed();\n        }, 1000);\n    }\n\n    private onTimerElapsed(): void {\n        if (!this.isPaused && this.gameStarted && !this.isPuzzleSolved) {\n            this.elapsedSeconds++;\n            this.updateTimeDisplay();\n            this.updateUI();\n        }\n    }\n\n    private updateTimeDisplay(): void {\n        const minutes = Math.floor(this.elapsedSeconds / 60);\n        const seconds = this.elapsedSeconds % 60;\n        this.timeDisplay = this.padZero(minutes) + ':' + this.padZero(seconds);\n    }\n\n    private padZero(num: number): string {\n        return (num < 10 ? '0' : '') + num;\n    }\n\n    private getTileX(index: number): number {\n        const col = index % this.GRID_SIZE;\n        const startX = 600;\n        return startX + (col * this.TILE_WIDTH);\n    }\n\n    private getTileY(index: number): number {\n        const row = Math.floor(index / this.GRID_SIZE);\n        const startY = 200;\n        return startY + (row * this.TILE_HEIGHT);\n    }\n\n    private canMoveTile(tileIndex: number): boolean {\n        const tileRow = Math.floor(tileIndex / 4);\n        const tileCol = tileIndex % 4;\n        const emptyRow = Math.floor(this.emptyIndex / 4);\n        const emptyCol = this.emptyIndex % 4;\n\n        const isVerticallyAdjacent = (Math.abs(tileRow - emptyRow) === 1 && tileCol === emptyCol);\n        const isHorizontallyAdjacent = (Math.abs(tileCol - emptyCol) === 1 && tileRow === emptyRow);\n\n        return isVerticallyAdjacent || isHorizontallyAdjacent;\n    }\n\n    private addFinalPiece(): void {\n        const finalPiece: NodeModel = {\n            id: \"tile16final\",\n            width: 130,\n            height: 130,\n            offsetX: this.getTileX(15),\n            offsetY: this.getTileY(15),\n            style: {\n                fill: \"transparent\",\n                strokeColor: \"#FFD700\",\n                strokeWidth: 4\n            },\n            shape: {\n                type: 'Image',\n                source: this.getImageSourceForTile(16)\n            },\n            annotations: [{\n                id: \"annotation16\",\n                width: 25,\n                height: 25,\n                template: this.getAnnotationTemplate(16),\n                offset: { x: 0.9, y: 0.1 },\n                horizontalAlignment: 'Center',\n                verticalAlignment: 'Center'\n            }],\n            constraints: NodeConstraints.None\n        };\n\n        this.diagramComponent.add(finalPiece);\n    }\n\n    private checkPuzzleSolved(): void {\n        let solved = true;\n        for (let i = 0; i < 15; i++) {\n            if (this.gameBoard[i] !== i + 1) {\n                solved = false;\n                break;\n            }\n        }\n        if (solved && this.gameBoard[15] !== 0) {\n            solved = false;\n        }\n        if (solved && this.emptyIndex === 15) {\n            this.isPuzzleSolved = true;\n            if (this.gameTimer) {\n                clearInterval(this.gameTimer);\n            }\n\n            this.addFinalPiece();\n            this.showCompletionMessage();\n        }\n    }\n\n    private moveTileToEmptySpace(tileNumber: number): void {\n        const tileIndex = this.gameBoard.indexOf(tileNumber);\n        if (!this.canMoveTile(tileIndex)) return;\n\n        if (!this.gameStarted) {\n            this.gameStarted = true;\n            this.elapsedSeconds = 0;\n            this.updateTimeDisplay();\n        }\n\n        const oldEmptyIndex = this.emptyIndex;\n        this.gameBoard[this.emptyIndex] = tileNumber;\n        this.gameBoard[tileIndex] = 0;\n        this.emptyIndex = tileIndex;\n        this.moveCount++;\n\n        const node = this.diagramComponent.getObject(`tile${tileNumber}`) as NodeModel;\n        if (node) {\n            node.offsetX = this.getTileX(oldEmptyIndex);\n            node.offsetY = this.getTileY(oldEmptyIndex);\n            this.diagramComponent.dataBind();\n        }\n\n        this.enableAdjacentNodes();\n        this.checkPuzzleSolved();\n        this.updateUI();\n    }\n\n    private newGame(): void {\n        if (this.gameTimer) {\n            clearInterval(this.gameTimer);\n        }\n        this.selectRandomImageCollection();\n        this.moveCount = 0;\n        this.elapsedSeconds = 0;\n        this.gameStarted = false;\n        this.isPaused = false;\n        this.isPuzzleSolved = false;\n        this.showWinDialog = false;\n        this.showClue = false;\n\n        // Reset board\n        this.gameBoard[0] = 1; this.gameBoard[1] = 2; this.gameBoard[2] = 3; this.gameBoard[3] = 4;\n        this.gameBoard[4] = 5; this.gameBoard[5] = 6; this.gameBoard[6] = 7; this.gameBoard[7] = 8;\n        this.gameBoard[8] = 9; this.gameBoard[9] = 10; this.gameBoard[10] = 11; this.gameBoard[11] = 12;\n        this.gameBoard[12] = 13; this.gameBoard[13] = 14; this.gameBoard[14] = 15; this.gameBoard[15] = 0;\n        this.emptyIndex = 15;\n\n        this.updateTimeDisplay();\n        this.shuffleBoard();\n        this.clearDiagramNodes();\n        this.createNodes();\n        this.diagramComponent.nodes = this.nodes;\n        this.enableAdjacentNodes();\n        this.setupTimer();\n        this.updateUI();\n    }\n\n    private shuffleBoard(): void {\n        for (let i = 0; i < 1000; i++) {\n            const validMoves = this.getValidMoves();\n            if (validMoves.length > 0) {\n                const randomMove = validMoves[Math.floor(this.imageRandom() * validMoves.length)];\n                this.gameBoard[this.emptyIndex] = this.gameBoard[randomMove];\n                this.gameBoard[randomMove] = 0;\n                this.emptyIndex = randomMove;\n            }\n        }\n    }\n\n    private getValidMoves(): number[] {\n        const validMoves: number[] = [];\n        const emptyRow = Math.floor(this.emptyIndex / 4);\n        const emptyCol = this.emptyIndex % 4;\n        const directions = [-4, 4, -1, 1];\n\n        for (const dir of directions) {\n            const newIndex = this.emptyIndex + dir;\n            if (newIndex >= 0 && newIndex < 16) {\n                const newRow = Math.floor(newIndex / 4);\n                const newCol = newIndex % 4;\n                if ((dir === -1 || dir === 1) && Math.abs(newRow - emptyRow) === 0 && Math.abs(newCol - emptyCol) === 1) {\n                    validMoves.push(newIndex);\n                } else if ((dir === -4 || dir === 4) && Math.abs(newRow - emptyRow) === 1 && Math.abs(newCol - emptyCol) === 0) {\n                    validMoves.push(newIndex);\n                }\n            }\n        }\n\n        return validMoves;\n    }\n\n    private togglePause(): void {\n        this.isPaused = !this.isPaused;\n\n        if (this.isPaused) {\n            if (this.gameTimer) {\n                clearInterval(this.gameTimer);\n            }\n            this.disableAllNodes();\n        } else {\n            this.setupTimer();\n            this.enableAdjacentNodes();\n        }\n\n        this.updateUI();\n    }\n\n    private disableAllNodes(): void {\n        for (const node of this.diagramComponent.nodes) {\n            if (node.id?.startsWith(\"tile\")) {\n                node.constraints = NodeConstraints.None;\n            }\n        }\n        this.diagramComponent.dataBind();\n    }\n\n    private clearDiagramNodes(): void {\n        if (this.diagramComponent) {\n            const existingNodes = [...this.diagramComponent.nodes];\n            for (const node of existingNodes) {\n                this.diagramComponent.remove(node);\n            }\n        }\n        this.nodes = [];\n    }\n\n    private enableAdjacentNodes(): void {\n        for (const node of this.diagramComponent.nodes) {\n            if (node.id?.startsWith(\"tile\")) {\n                const tileNumber = parseInt(node.id.substring(4));\n                const tileIndex = this.gameBoard.indexOf(tileNumber);\n\n                if (this.canMoveTile(tileIndex)) {\n                    node.constraints = NodeConstraints.PointerEvents;\n                } else {\n                    node.constraints = NodeConstraints.None;\n                }\n            }\n        }\n        this.diagramComponent.dataBind();\n    }\n\n    private toggleClue(): void {\n        this.showClue = !this.showClue;\n        for (const node of this.diagramComponent.nodes) {\n            if (node.annotations && node.annotations.length > 0) {\n                node.annotations[0].visibility = this.showClue;\n            }\n        }\n        this.diagramComponent.dataBind();\n        this.updateUI();\n    }\n\n    private selectRandomImageCollection(): void {\n        if (this.imageCollections.length > 1) {\n            let newIndex: number;\n            do {\n                newIndex = Math.floor(this.imageRandom() * this.imageCollections.length);\n            } while (newIndex === this.currentThemeIndex);\n\n            this.currentThemeIndex = newIndex;\n            this.currentImageMap = this.imageCollections[this.currentThemeIndex];\n        }\n    }\n\n    private getImageSourceForTile(tileNumber: number): string {\n        return this.currentImageMap && this.currentImageMap[tileNumber]\n            ? this.currentImageMap[tileNumber]\n            : \"\";\n    }\n\n    private showCompletionMessage(): void {\n        this.showWinDialog = true;\n    }\n\n    private updateUI(): void {\n        // Update moves counter\n        const moveNode = this.diagramComponent.getObject('moves') as NodeModel;\n        if (moveNode && moveNode.shape && (moveNode.shape as HtmlModel).content) {\n            (moveNode.shape as HtmlModel).content = this.getMovesTemplate();\n        }\n\n        // Update timer\n        const timeNode = this.diagramComponent.getObject('time') as NodeModel;\n        if (timeNode && timeNode.shape && (timeNode.shape as HtmlModel).content) {\n            (timeNode.shape as HtmlModel).content = this.getTimeTemplate();\n        }\n\n        // Update pause button\n        const pauseNode = this.diagramComponent.getObject('pause') as NodeModel;\n        if (pauseNode && pauseNode.shape && (pauseNode.shape as HtmlModel).content) {\n            (pauseNode.shape as HtmlModel).content = this.getPauseTemplate();\n        }\n\n        // Update clue button\n        const clueNode = this.diagramComponent.getObject('clue') as NodeModel;\n        if (clueNode && clueNode.shape && (clueNode.shape as HtmlModel).content) {\n            (clueNode.shape as HtmlModel).content = this.getClueTemplate();\n        }\n\n        this.diagramComponent.dataBind();\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<div class=\"control-section diagram-puzzle-container\">\n    <div>\n        <ejs-diagram #diagram id=\"diagram\" class=\"puzzle-diagram\" [width]=\"diagramWidth\" [height]=\"diagramHeight\"\n        [nodes]=\"nodes\" [snapSettings]=\"snapSettings\" [selectedItems]=\"selectedItems\" (click)=\"onDiagramClick($event)\"\n        (created)=\"onDiagramCreated()\" (load)=\"onDiagramLoad()\" [constraints]=\"constraints\"></ejs-diagram>\n\n        <!-- Win Dialog (initially hidden) -->\n        <div *ngIf=\"showWinDialog\" id=\"winDialog\"  style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center; z-index: 1000;\">\n            <div style=\"background: #2c2c2c; padding: 40px; border-radius: 20px; text-align: center; box-shadow: 0 10px 30px rgba(0,0,0,0.5);\n                        color: white; font-family: Arial, sans-serif; position: relative; display: inline-block;\">\n                <!-- Close Icon -->\n                <div (click)=\"closeWinDialog()\" style=\"position: absolute; top: 15px; right: 20px; font-size: 24px; cursor: pointer; color: #ccc;\"\n                title=\"Close\" tabindex=\"0\" aria-label=\"Close dialog\">✕</div>\n                <!-- Celebration Icon -->\n                <div style=\"font-size: 80px; margin-bottom: 20px;\">🎉</div>\n                <!-- Congratulations Text -->\n                <h1 style=\"color: white; margin-bottom: 20px; font-size: 36px; font-weight: bold;\">\n                    Congratulations!\n                </h1>\n                <!-- Steps Text -->\n                <p style=\"color: #ccc; font-size: 18px; margin-bottom: 30px;\">\n                    you did it in <span>{{ moveCount }}</span> steps in {{ timeDisplay }}\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n","app.component.css":".diagram-puzzle-container .timer {\n    display: flex;\n    align-items: center;\n    background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);\n    color: white;\n    padding: 10px 20px;\n    border-radius: 14px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1), 0 0 15px rgba(173, 216, 230, 0.2);\n    border: 1px solid rgba(33, 150, 243, 0.3);\n    transition: all 0.2s ease-in-out;\n    justify-content: center;\n    gap: 10px;\n}\n\n.diagram-puzzle-container .moves-counter {\n    display: flex;\n    align-items: center;\n    background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);\n    color: white;\n    padding: 10px 20px;\n    border-radius: 14px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1), 0 0 15px rgba(144, 238, 144, 0.2);\n    border: 1px solid rgba(76, 175, 80, 0.3);\n    transition: all 0.2s ease-in-out;\n    justify-content: center;\n    gap: 10px;\n}\n\n.diagram-puzzle-container .moves-counter .label,\n.diagram-puzzle-container .timer .label {\n    font-weight: 700;\n    text-transform: uppercase;\n    font-size: 15px;\n    color: white;\n    padding: 0\n}\n\n.diagram-puzzle-container .moves-counter .count,\n.diagram-puzzle-container .timer .time-display {\n    font-size: 18px;\n    font-weight: 700;\n    letter-spacing: 0.5px;\n    color: white;\n}\n\n.diagram-puzzle-container .pause-btn {\n    background-color: #2196F3;\n    color: white;\n    border: none;\n    border-radius: 12px;\n    padding: 12px 24px;\n    font-size: 14px;\n    font-weight: bold;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 150px;\n    gap: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    transition: background-color 0.3s ease;\n}\n\n.diagram-puzzle-container .pause-btn:hover {\n    background-color: #1976D2;\n}\n\n.diagram-puzzle-container .pause-btn .icon {\n    font-size: 16px;\n}\n\n.diagram-puzzle-container .new-game-btn {\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 12px;\n    padding: 12px 24px;\n    font-size: 14px;\n    font-weight: bold;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 150px;\n    gap: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    transition: background-color 0.3s ease;\n    white-space: nowrap;\n}\n\n.diagram-puzzle-container .new-game-btn:hover {\n    background-color: #45a049;\n}\n\n.diagram-puzzle-container .new-game-btn .icon {\n    font-size: 16px;\n}\n\n.diagram-puzzle-container .number-badge {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 2px;\n    margin-left: 2px;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, #333333 0%, #000000 100%);\n    border: 3px solid #666;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5), inset 0 2px 4px rgba(255, 255, 255, 0.2), inset 0 -2px 4px rgba(0, 0, 0, 0.8);\n    font-family: 'Arial Black', Arial, sans-serif;\n    font-size: 18px;\n    font-weight: bold;\n    color: white;\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8), -1px -1px 1px rgba(255, 255, 255, 0.1);\n    position: relative;\n    overflow: hidden;\n}\n\n.diagram-puzzle-container .number-badge::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%);\n    transform: rotate(45deg);\n    pointer-events: none;\n}\n\n.diagram-puzzle-container .game-button {\n    padding: 12px 24px;\n    border: none;\n    border-radius: 8px;\n    font-size: 16px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    min-width: 140px;\n    position: relative;\n    overflow: hidden;\n}\n\n.diagram-puzzle-container .game-button::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s;\n}\n\n.diagram-puzzle-container .game-button:hover::before {\n    left: 100%;\n}\n\n.diagram-puzzle-container .new-game-btn {\n    background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);\n    color: white;\n    border: 2px solid #45a049;\n}\n\n.diagram-puzzle-container .new-game-btn:hover {\n    background: linear-gradient(135deg, #45a049 0%, #3d8b40 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 6px 12px rgba(76, 175, 80, 0.4);\n}\n\n.diagram-puzzle-container .new-game-btn:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(76, 175, 80, 0.4);\n}\n\n.diagram-puzzle-container .pause-btn {\n    background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);\n    color: white;\n    border: 2px solid #1976D2;\n}\n\n.diagram-puzzle-container .pause-btn:hover {\n    background: linear-gradient(135deg, #1976D2 0%, #1565C0 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 6px 12px rgba(33, 150, 243, 0.4);\n}\n\n.diagram-puzzle-container .pause-btn:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(33, 150, 243, 0.4);\n}\n\n.diagram-puzzle-container .game-button:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none !important;\n}\n\n.diagram-puzzle-container .game-button:disabled:hover {\n    transform: none;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n.diagram-puzzle-container .puzzle-tile {\n    position: relative;\n    width: 90px;\n    height: 90px;\n    background: linear-gradient(135deg, #d4a574 0%, #c49660 50%, #b8864d 100%);\n    border: 3px solid #8b6914;\n    border-radius: 8px;\n    box-shadow: inset 2px 2px 4px rgba(255, 255, 255, 0.3), inset -2px -2px 4px rgba(0, 0, 0, 0.2), 2px 2px 8px rgba(0, 0, 0, 0.3);\n    cursor: pointer;\n    transition: all 0.2s ease;\n    overflow: hidden;\n}\n\n.diagram-puzzle-container .puzzle-tile:hover {\n    transform: translateY(-2px);\n    box-shadow: inset 2px 2px 4px rgba(255, 255, 255, 0.4), inset -2px -2px 4px rgba(0, 0, 0, 0.3), 2px 4px 12px rgba(0, 0, 0, 0.4);\n}\n\n.diagram-puzzle-container .puzzle-tile.selected {\n    border-color: #ffd700;\n    box-shadow: 0 0 0 3px #ffd700, inset 2px 2px 4px rgba(255, 255, 255, 0.4), inset -2px -2px 4px rgba(0, 0, 0, 0.3), 2px 4px 12px rgba(255, 215, 0, 0.5);\n}\n\n.diagram-puzzle-container .tile-content {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: repeating-linear-gradient( 90deg, transparent, transparent 1px, rgba(139, 105, 20, 0.1) 1px, rgba(139, 105, 20, 0.1) 2px ), repeating-linear-gradient( 0deg, transparent, transparent 1px, rgba(139, 105, 20, 0.1) 1px, rgba(139, 105, 20, 0.1) 2px );\n}\n\n.diagram-puzzle-container .tile-number {\n    font-family: 'Arial Black', Arial, sans-serif;\n    font-size: 32px;\n    font-weight: bold;\n    color: #4a3728;\n    text-shadow: 1px 1px 0px rgba(255, 255, 255, 0.3), -1px -1px 0px rgba(0, 0, 0, 0.3);\n    user-select: none;\n}\n\n.diagram-puzzle-container .tile-highlight {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, transparent 50%);\n    pointer-events: none;\n    border-radius: 5px;\n}\n\n.diagram-puzzle-container .puzzle-tile::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: radial-gradient(circle at 20% 50%, rgba(139, 105, 20, 0.1) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(139, 105, 20, 0.1) 0%, transparent 50%), radial-gradient(circle at 40% 80%, rgba(139, 105, 20, 0.1) 0%, transparent 50%);\n    pointer-events: none;\n    border-radius: 5px;\n}\n\n.diagram-puzzle-container .puzzle-tile.disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none !important;\n}\n\n.diagram-puzzle-container .puzzle-tile.disabled:hover {\n    transform: none;\n    box-shadow: inset 2px 2px 4px rgba(255, 255, 255, 0.3), inset -2px -2px 4px rgba(0, 0, 0, 0.2), 2px 2px 8px rgba(0, 0, 0, 0.3);\n}\n\n.diagram-puzzle-container .diagram-panel {\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(135deg, #20B2AA 0%, #7B68EE 100%);\n    border-radius: 20px;\n    margin-right: 20px;\n    box-shadow: 0 15px 35px rgba(32, 178, 170, 0.4);\n    position: relative;\n    overflow: hidden;\n}\n\n.diagram-puzzle-container .diagram-panel::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: radial-gradient(circle, rgba(255, 255, 255, 0.1) 1px, transparent 1px);\n    background-size: 30px 30px;\n    pointer-events: none;\n}\n\n.diagram-puzzle-container .clue-btn {\n    background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);\n    color: white;\n    border: 2px solid #F57C00;\n    border-radius: 12px;\n    padding: 12px 24px;\n    font-size: 14px;\n    font-weight: bold;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 150px;\n    gap: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    white-space: nowrap;\n}\n\n.diagram-puzzle-container .clue-btn:hover {\n    background: linear-gradient(135deg, #F57C00 0%, #E65100 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 6px 12px rgba(255, 152, 0, 0.4);\n}\n\n.diagram-puzzle-container .clue-btn:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(255, 152, 0, 0.4);\n}\n\n.diagram-puzzle-container .clue-btn .icon {\n    font-size: 16px;\n}\n\n.diagram-puzzle-container .puzzle-diagram .e-diagram-selector {\n    stroke-width: 0;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}