{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * class-diagram sample\n */\n\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\nimport {\n  Diagram,\n  NodeModel,\n  ConnectorModel,\n  UmlClassifierShapeModel\n} from '@syncfusion/ej2-diagrams';\n\n/**\n * Sample for class diagram\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  public diagram: DiagramComponent;\n\n  public nodes: NodeModel[] = [\n    {\n      id: 'Patient',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Patient',\n          attributes: [\n            this.createProperty('accepted', 'Date'),\n            this.createProperty('sickness', 'History'),\n            this.createProperty('prescription', 'String[*]'),\n            this.createProperty('allergies', 'String[*]')\n          ],\n          methods: [this.createMethods('getHistory', 'History')]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 200,\n      offsetY: 250\n    },\n    {\n      id: 'Doctor',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Doctor',\n          attributes: [\n            this.createProperty('specialist', 'String[*]'),\n            this.createProperty('locations', 'String[*]')\n          ]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 240,\n      offsetY: 545\n    },\n    {\n      id: 'Person',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Person',\n          attributes: [\n            this.createProperty('name', 'Name'),\n            this.createProperty('title', 'String[*]'),\n            this.createProperty('gender', 'Gender')\n          ]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 405,\n      offsetY: 105\n    },\n    {\n      id: 'Hospital',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Hospital',\n          attributes: [\n            this.createProperty('name', 'Name'),\n            this.createProperty('address', 'Address'),\n            this.createProperty('phone', 'Phone')\n          ],\n          methods: [this.createMethods('getDepartment', 'String')]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 638,\n      offsetY: 100\n    },\n    {\n      id: 'Department',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Department',\n          methods: [this.createMethods('getStaffCount', 'Int')]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 638,\n      offsetY: 280\n    },\n    {\n      id: 'Staff',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Staff',\n          attributes: [\n            this.createProperty('joined', 'Date'),\n            this.createProperty('education', 'string[*]'),\n            this.createProperty('certification', 'string[*]'),\n            this.createProperty('languages', 'string[*]')\n          ],\n          methods: [\n            this.createMethods('isDoctor', 'bool'),\n            this.createMethods('getHistory', 'bool')\n          ]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 635,\n      offsetY: 455\n    },\n    this.createNode('OperationStaff', 410, 455, 'OperationStaff'),\n    this.createNode('Nurse', 410, 545, 'Nurse'),\n    this.createNode('Surgeon', 240, 665, 'Surgeon'),\n    this.createNode('AdministrativeStaff', 632, 605, 'AdministrativeStaff'),\n    this.createNode('FrontDeskStaff', 630, 695, 'FrontDeskStaff'),\n    this.createNode('TechnicalStaff', 928, 445, 'TechnicalStaff'),\n    this.createNode('Technician', 815, 535, 'Technician'),\n    this.createNode('Technologist', 1015, 535, 'Technologist'),\n    this.createNode('SurgicalTechnologist', 1015, 630, 'SurgicalTechnologist')\n  ];\n\n  public connectors: ConnectorModel[] = [\n    this.createConnector('connect1', 'Patient', 'Person'),\n    this.createConnector('connect2', 'Person', 'Hospital'),\n    this.createConnector('connect3', 'Department', 'Hospital'),\n    this.createConnector('connect4', 'OperationStaff', 'Patient'),\n    this.createConnector('connect5', 'Doctor', 'OperationStaff'),\n    this.createConnector('connect6', 'Nurse', 'OperationStaff'),\n    this.createConnector('connect7', 'Surgeon', 'Doctor'),\n    this.createConnector('connect8', 'FrontDeskStaff', 'AdministrativeStaff'),\n    this.createConnector('connect9', 'Technician', 'TechnicalStaff'),\n    this.createConnector('connect10', 'Technologist', 'TechnicalStaff'),\n    this.createConnector('connect11', 'SurgicalTechnologist', 'Technologist'),\n    this.createConnector('connect12', 'Staff', 'Department'),\n    this.createConnector('connect13', 'Staff', 'Person'),\n    this.createConnector('connect14', 'OperationStaff', 'Staff'),\n    this.createConnector('connect15', 'AdministrativeStaff', 'Staff'),\n    this.createConnector('connect16', 'TechnicalStaff', 'Staff')\n  ];\n\n  // Set the default values of nodes.\n  public getNodeDefaults(obj: NodeModel): NodeModel {\n    obj.style = { fill: '#26A0DA', strokeColor: 'white' };\n    return obj;\n  }\n  public created(): void {\n    this.diagram.fitToPage();\n  }\n  // Set the default values of connectors.\n  public getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n    connector.shape = {\n      type: 'UmlClassifier',\n      relationship: 'Association',\n      multiplicity: {\n          type: 'OneToOne'\n      }\n  };\n  return connector;\n  }\n\n  // Set an annoation style at runtime.\n  public setNodeTemplate(node: NodeModel): void {\n    if (node.annotations.length > 0) {\n      for (let i: number = 0; i < node.annotations.length; i++) {\n        node.annotations[i].style.color = 'white';\n      }\n    }\n  }\n\n  // Create a connector.\n  public createConnector( id: string, sourceID: string, targetID: string ): ConnectorModel {\n    let connector: ConnectorModel = {};\n    connector.id = id;\n    connector.sourceID = sourceID;\n    connector.targetID = targetID;\n    return connector;\n  }\n\n  // Create class Diagram shapes.\n  public createNode(id: string, offsetX: number, offsetY: number, className: string): NodeModel {\n    let node: NodeModel = {};\n    node.id = id;\n    node.offsetX = offsetX;\n    node.offsetY = offsetY;\n    node.shape = {\n      type: 'UmlClassifier',\n      classShape: {\n        name: className\n      },\n      classifier: 'Class'\n    } as UmlClassifierShapeModel;\n    return node;\n  }\n\n  // create class Property\n  public createProperty(name: string, type: string): object {\n    return { name: name, type: type };\n  }\n\n  // create class Methods\n  public createMethods(name: string, type: string): object {\n    return { name: name, type: type };\n  }\n}\n","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n  <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700\" [getNodeDefaults]=\"getNodeDefaults\"\n    [getConnectorDefaults]=\"getConnectorDefaults\" [setNodeTemplate]='setNodeTemplate' [nodes]='nodes' \n    [connectors]='connectors' (created)=\"created()\">\n  </ejs-diagram>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}