{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"/**\n * class-diagram sample\n */\n\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, IDragEnterEventArgs, SymbolInfo, MarginModel, SymbolPaletteModule, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n  Diagram,\n  NodeModel,\n  ConnectorModel,\n  Connector,\n  PaletteModel,\n  UmlClassifierShapeModel\n} from '@syncfusion/ej2-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\n\n\n\n/**\n * Sample for class diagram\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ SymbolPaletteModule, DiagramModule, ]\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  public diagram: DiagramComponent;\n\n  public expandMode: ExpandMode = 'Multiple';\n  // Initialize the palettes displayed in the symbol palette\n  public palettes: PaletteModel[] = [\n    {\n      id: 'UmlActivity', expanded: true, title: 'UML Classifier Nodes', symbols: [\n      {\n          id: 'class',\n          borderColor: 'white',\n          shape: {\n              type: 'UmlClassifier',\n              classShape: {\n                  attributes: [\n                      { name: 'accepted', type: 'Date', isSeparator: true },\n                      { name: 'sickness', type: 'History' },\n                      { name: 'prescription', type: 'String[*]' },\n                      { name: 'allergies', type: 'String[*]' }\n                  ],\n                  methods: [{ name: 'getHistory', style: {}, parameters: [{ name: 'Date', style: {} }], type: 'History' }],\n                  name: 'Patient'\n              },\n              classifier: 'Class'\n          },\n      },\n      {\n          id: 'Interface',\n           borderColor: 'white',\n          shape: {\n              type: 'UmlClassifier',\n              interfaceShape: {\n                  name: \"Bank Account\",\n                  attributes: [{\n                          name: \"owner\",\n                          type: \"String[*]\", style: {}\n                      },\n                      {\n                          name: \"balance\",\n                          type: \"Dollars\"\n                      }],\n                  methods: [{\n                          name: \"deposit\", style: {},\n                          parameters: [{\n                                  name: \"amount\",\n                                  type: \"Dollars\",\n                                  style: {}\n                              }],\n                      }]\n              },\n              classifier: 'Interface'\n          },\n      },\n      {\n          id: 'Enumeration',\n           borderColor: 'white',\n          shape: {\n              type: 'UmlClassifier',\n              enumerationShape: {\n                  name: 'AccountType',\n                  members: [\n                      {\n                          name: 'Checking Account', style: {}\n                      },\n                      {\n                          name: 'Savings Account'\n                      },\n                      {\n                          name: 'Credit Account'\n                      }\n                  ]\n              },\n              classifier: 'Enumeration'\n          },\n      },\n      ]\n  },\n  {\n    id: 'umlConnectorrs', expanded: true, title: 'UML Classifier Connectors', symbols: [\n      {\n        id: 'Composition',\n        sourcePoint: { x: 100, y: 200 },\n        targetPoint: { x: 200, y: 300 },\n        type: 'Straight',\n        shape: { type: 'UmlClassifier', relationship: 'Composition' }\n    },\n    {\n        id: 'BiDirectional',\n        type: 'Straight',\n        sourcePoint: { x: 300, y: 200 },\n        targetPoint: { x: 400, y: 300 },\n        shape: { type: 'UmlClassifier', relationship: 'Aggregation', associationType: 'BiDirectional' }\n    },\n    {\n        id: 'Directional',\n        type: 'Straight',\n        sourcePoint: { x: 500, y: 200 },\n        targetPoint: { x: 600, y: 300 },\n        shape: { type: 'UmlClassifier', relationship: 'Association', associationType: 'Directional' }\n    },\n    {\n        id: 'Association',\n        type: 'Straight',\n        sourcePoint: { x: 700, y: 200 },\n        targetPoint: { x: 800, y: 300 },\n        shape: { type: 'UmlClassifier', relationship: 'Association' }\n    },\n    {\n        id: 'Inheritance',\n        type: 'Straight',\n        sourcePoint: { x: 900, y: 200 },\n        targetPoint: { x: 1000, y: 300 },\n        shape: { type: 'UmlClassifier', relationship: 'Inheritance' }\n    },\n    {\n        id: 'Interfaces',\n        type: 'Straight',\n        sourcePoint: { x: 100, y: 400 },\n        targetPoint: { x: 200, y: 500 },\n        shape: { type: 'UmlClassifier', relationship: 'Interface' }\n    },\n    {\n        id: 'Dependency',\n        type: 'Straight',\n        sourcePoint: { x: 300, y: 400 },\n        targetPoint: { x: 400, y: 500 },\n        shape: { type: 'UmlClassifier', relationship: 'Dependency' }\n    },\n    {\n        id: 'Realization',\n        type: 'Straight',\n        sourcePoint: { x: 500, y: 400 },\n        targetPoint: { x: 600, y: 500 },\n        shape: { type: 'UmlClassifier', relationship: 'Realization' }\n    },\n    {\n        id: \"OneToMany\",\n        type: 'Straight',\n        sourcePoint: {\n            x: 700,\n            y: 400\n        },\n        targetPoint: {\n            x: 800,\n            y: 500\n        },\n        annotations: [{\n                margin: {\n                    top: 10,\n                    left: 10,\n                    right: 10,\n                    bottom: 20\n                }\n            }\n        ],\n        shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n                type: 'OneToMany',\n                source: {\n                    optional: true,\n                    lowerBounds: '89',\n                    upperBounds: '67'\n                },\n                target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n            }\n        }\n    },\n    {\n        id: \"ManyToMany\",\n        sourcePoint: {\n            x: 900,\n            y: 400\n        },\n        targetPoint: {\n            x: 1000,\n            y: 500\n        },\n        annotations: [{\n                margin: {\n                    top: 10,\n                    left: 10,\n                    right: 10,\n                    bottom: 20\n                }\n            }\n        ],\n        shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n                type: 'ManyToMany',\n                source: {\n                    optional: true,\n                    lowerBounds: '89',\n                    upperBounds: '67'\n                },\n                target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n            }\n        }\n    },\n    {\n        id: \"OneToOne\",\n        sourcePoint: { x: 100, y: 600 },\n        targetPoint: { x: 200, y: 700 },\n        annotations: [{\n                margin: {\n                    top: 10,\n                    left: 10,\n                    right: 10,\n                    bottom: 20\n                }\n            }\n        ],\n        shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n                type: 'OneToOne',\n                source: {\n                    optional: true,\n                    lowerBounds: '89',\n                    upperBounds: '67'\n                },\n                target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n            }\n        }\n    },\n    {\n        id: \"ManyToOne\",\n        sourcePoint: { x: 300, y: 600 },\n        targetPoint: { x: 400, y: 700 },\n        annotations: [{\n                margin: {\n                    top: 10,\n                    left: 10,\n                    right: 10,\n                    bottom: 20\n                }\n            }\n        ],\n        shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n                type: 'ManyToOne',\n                source: {\n                    optional: true,\n                    lowerBounds: '89',\n                    upperBounds: '67'\n                },\n                target: { optional: true, lowerBounds: '78', upperBounds: '90' }\n            }\n        }\n    },\n    {\n        id: \"OneToMany\",\n        sourcePoint: { x: 500, y: 600 },\n        targetPoint: { x: 600, y: 700 },\n        annotations: [{\n                margin: {\n                    top: 10,\n                    left: 10,\n                    right: 10,\n                    bottom: 20\n                }\n            }\n        ],\n        shape: {\n            type: \"UmlClassifier\",\n            relationship: 'Dependency',\n            multiplicity: {\n                type: 'OneToMany',\n            }\n        }\n    }\n    ]\n  }\n  ];\n //Initialize nodes for the diagram.\n  public nodes: NodeModel[] = [\n    {\n      id: 'Patient',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Patient',\n          attributes: [\n            this.createProperty('accepted', 'Date'),\n            this.createProperty('sickness', 'History'),\n            this.createProperty('prescription', 'String[*]'),\n            this.createProperty('allergies', 'String[*]')\n          ],\n          methods: [this.createMethods('getHistory', 'History')]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 200,\n      offsetY: 250\n    },\n    {\n      id: 'Doctor',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Doctor',\n          attributes: [\n            this.createProperty('specialist', 'String[*]'),\n            this.createProperty('locations', 'String[*]')\n          ]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 240,\n      offsetY: 545\n    },\n    {\n      id: 'Person',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Person',\n          attributes: [\n            this.createProperty('name', 'Name'),\n            this.createProperty('title', 'String[*]'),\n            this.createProperty('gender', 'Gender')\n          ]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 405,\n      offsetY: 105\n    },\n    {\n      id: 'Hospital',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Hospital',\n          attributes: [\n            this.createProperty('name', 'Name'),\n            this.createProperty('address', 'Address'),\n            this.createProperty('phone', 'Phone')\n          ],\n          methods: [this.createMethods('getDepartment', 'String')]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 638,\n      offsetY: 100\n    },\n    {\n      id: 'Department',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Department',\n          methods: [this.createMethods('getStaffCount', 'Int')]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 638,\n      offsetY: 280\n    },\n    {\n      id: 'Staff',\n      shape: {\n        type: 'UmlClassifier',\n        classShape: {\n          name: 'Staff',\n          attributes: [\n            this.createProperty('joined', 'Date'),\n            this.createProperty('education', 'string[*]'),\n            this.createProperty('certification', 'string[*]'),\n            this.createProperty('languages', 'string[*]')\n          ],\n          methods: [\n            this.createMethods('isDoctor', 'bool'),\n            this.createMethods('getHistory', 'bool')\n          ]\n        },\n        classifier: 'Class'\n      } as UmlClassifierShapeModel,\n      offsetX: 635,\n      offsetY: 455\n    },\n    this.createNode('OperationStaff', 410, 455, 'OperationStaff'),\n    this.createNode('Nurse', 410, 545, 'Nurse'),\n    this.createNode('Surgeon', 240, 665, 'Surgeon'),\n    this.createNode('AdministrativeStaff', 632, 605, 'AdministrativeStaff'),\n    this.createNode('FrontDeskStaff', 630, 695, 'FrontDeskStaff'),\n    this.createNode('TechnicalStaff', 928, 445, 'TechnicalStaff'),\n    this.createNode('Technician', 815, 535, 'Technician'),\n    this.createNode('Technologist', 1015, 535, 'Technologist'),\n    this.createNode('SurgicalTechnologist', 1015, 630, 'SurgicalTechnologist')\n  ];\n //Initialize connector for the diagram.\n  public connectors: ConnectorModel[] = [\n    this.createConnector('connect1', 'Patient', 'Person'),\n    this.createConnector('connect2', 'Person', 'Hospital'),\n    this.createConnector('connect3', 'Department', 'Hospital'),\n    this.createConnector('connect4', 'OperationStaff', 'Patient'),\n    this.createConnector('connect5', 'Doctor', 'OperationStaff'),\n    this.createConnector('connect6', 'Nurse', 'OperationStaff'),\n    this.createConnector('connect7', 'Surgeon', 'Doctor'),\n    this.createConnector('connect8', 'FrontDeskStaff', 'AdministrativeStaff'),\n    this.createConnector('connect9', 'Technician', 'TechnicalStaff'),\n    this.createConnector('connect10', 'Technologist', 'TechnicalStaff'),\n    this.createConnector('connect11', 'SurgicalTechnologist', 'Technologist'),\n    this.createConnector('connect12', 'Staff', 'Department'),\n    this.createConnector('connect13', 'Staff', 'Person'),\n    this.createConnector('connect14', 'OperationStaff', 'Staff'),\n    this.createConnector('connect15', 'AdministrativeStaff', 'Staff'),\n    this.createConnector('connect16', 'TechnicalStaff', 'Staff')\n  ];\n\n  // Set the default values of nodes.\n  public getNodeDefaults(node: NodeModel): NodeModel {\n    node.style = { fill: '#26A0DA', strokeColor: 'white' };\n    if (node.annotations.length > 0) {\n      for (let i: number = 0; i < node.annotations.length; i++) {\n        node.annotations[i].style.color = 'white';\n      }\n    }\n    return node;\n  }\n  public created(): void {\n    this.diagram.fitToPage();\n  }\n    // Set the default values of connectors.\n    public getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n      return connector;\n      }\n      public dragEnter(arg: IDragEnterEventArgs): void {\n        if(arg.element instanceof Connector){\n          arg.element.targetPoint.x += 100;\n          arg.element.targetPoint.y += 20\n        }\n      }\n  public getSymbolDefaults(symbol: NodeModel): void {\n    symbol.width = 100;\n    symbol.height = 100;\n  }\n\n\n  // Create and return a connector object with specified properties during initial rendering.\n  public createConnector( id: string, sourceID: string, targetID: string ): ConnectorModel {\n    let connector: ConnectorModel = {};\n    connector.id = id;\n    connector.sourceID = sourceID;\n    connector.targetID = targetID;\n    return connector;\n  }\n\n  // Create and return a node object with specified properties during initial rendering.\n  public createNode(id: string, offsetX: number, offsetY: number, className: string): NodeModel {\n    let node: NodeModel = {};\n    node.id = id;\n    node.offsetX = offsetX;\n    node.offsetY = offsetY;\n    node.shape = {\n      type: 'UmlClassifier',\n      classShape: {\n        name: className\n      },\n      classifier: 'Class'\n    } as UmlClassifierShapeModel;\n    return node;\n  }\n  public getSymbolInfo(symbol: NodeModel): SymbolInfo {\n    return { fit: true,description: { text: symbol.id, } ,tooltip: symbol.addInfo ? symbol.addInfo['tooltip'] : symbol.id };\n }\n public symbolMargin: MarginModel = {\n  left: 12, right: 12, top: 12, bottom: 12 \n};\n  // create class Property\n  public createProperty(name: string, type: string): object {\n    return { name: name, type: type };\n  }\n\n  // create class Methods\n  public createMethods(name: string, type: string): object {\n    return { name: name, type: type };\n  }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<div class=\"control-section\">\n    <style>\n         .e-toggle-palette::before {\n             content: \"\\e700\"\n         }\n\n         .diagram-umlclass .sb-mobile-palette {\n             width: 250px;\n             height: 559px;\n             float: left;\n         }\n\n         .diagram-umlclass .sb-mobile-palette-bar {\n             display: none;\n         }\n\n         .diagram-umlclass .sb-mobile-diagram {\n             width: calc(99% - 242px);\n             height: 559px;\n             float: left;\n             border: 1px solid rgba(0, 0, 0, 0.12);\n             border-left: none;\n         }\n\n          @media (max-width: 550px) {\n            .diagram-umlclass .sb-mobile-palette {\n                 z-index: 19;\n                 position: absolute;\n                 display: none;\n                 transition: transform 300ms linear, visibility 0s linear 300ms;\n                 width: 39%;\n                 height: 100%;\n             }\n             .diagram-umlclass .sb-mobile-diagram {\n                 width: 60%;\n                 height: 100%;\n                 float: left;\n                 left: 0px;\n             }\n             .diagram-umlclass .sb-mobile-palette-bar {\n                 display: block;\n                 width: 100%;\n                 background: #fafafa;\n                 padding: 10px 10px;\n                 border: 0.5px solid #e0e0e0;\n                 min-height: 40px;\n             }\n             #diagram-umlclass #palette-icon {\n                 font-size: 20px;\n             }\n         }\n\n         .diagram-umlclass .sb-mobile-palette-open {\n             position: absolute;\n             display: block;\n             right: 15px;\n         }\n\n     </style>\n  <div class=\"diagram-umlclass\" style=\"width: 100%;\" id=\"umlClassdiagram\">\n      <div class=\"sb-mobile-palette-bar\">\n          <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n      </div>\n      <div id=\"palette-space\" class=\"sb-mobile-palette\">\n         <!-- Template reference variable for the symbolpalette component instance -->\n          <ejs-symbolpalette id=\"symbolpalette\" [expandMode]='expandMode' [palettes]='palettes' [getSymbolInfo]='getSymbolInfo' width=\"100%\" height=\"100%\" [symbolHeight]=90\n              [symbolWidth]=90 [symbolMargin]=\"symbolMargin\" [getNodeDefaults]='getSymbolDefaults'>\n          </ejs-symbolpalette>\n      </div>\n      <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n         <!-- Template reference variable for the diagram component instance -->\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"100%\" [getNodeDefaults]=\"getNodeDefaults\"\n        [getConnectorDefaults]=\"getConnectorDefaults\"  [nodes]='nodes'\n          [connectors]='connectors' (created)=\"created()\" (dragEnter)=\"dragEnter($event)\">\n        </ejs-diagram>\n      </div>\n  </div>\n</div>\n\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}