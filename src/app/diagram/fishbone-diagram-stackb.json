{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    NodeModel, DecoratorModel, DiagramTools, ConnectorModel, SnapSettingsModel\n} from '@syncfusion/ej2-diagrams';\n\n/**\n * Sample for Fishbone functions\n */\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    public tool = DiagramTools.ZoomPan;\n    public nodes: NodeModel[] = [\n        {\n            id: 'Equipment', width: 120, height: 40, offsetX: 300, offsetY: 80,\n            annotations: [{ content: 'Equipment', style: { color: 'white' } }],\n            style: { fill: '#39AFA9' }, borderColor: '05776C',\n            shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' }\n        },\n        {\n            id: 'Environment', width: 120, height: 40, offsetX: 450, offsetY: 80,\n            annotations: [{ content: 'Environment', style: { color: 'white' } }],\n            style: { fill: '#39AFA9' }, borderColor: '05776C',\n            shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' }\n        },\n        {\n            id: 'Person', width: 120, height: 40, offsetX: 600, offsetY: 80,\n            annotations: [{ content: 'Person', style: { color: 'white' } }],\n            style: { fill: '#39AFA9' }, borderColor: '05776C',\n            shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' }\n        },\n        {\n            id: 'Materials', width: 120, height: 40, offsetX: 300, offsetY: 600,\n            annotations: [{ content: 'Materials', style: { color: 'white' } }],\n            style: { fill: '#39AFA9' }, borderColor: '05776C',\n            shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' }\n        },\n        {\n            id: 'Machine', width: 120, height: 40, offsetX: 450, offsetY: 600,\n            annotations: [{ content: 'Machine', style: { color: 'white' } }],\n            style: { fill: '#39AFA9' }, borderColor: '05776C',\n            shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' }\n        },\n        {\n            id: 'Methods', width: 120, height: 40, offsetX: 600, offsetY: 600,\n            annotations: [{ content: 'Methods', style: { color: 'white' } }],\n            style: { fill: '#39AFA9' }, borderColor: '05776C',\n            shape: {\n                type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z'\n            }\n        },\n        {\n            id: 'ellipse1', width: 20, height: 20, offsetX: 290, offsetY: 130,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse2', width: 20, height: 20, offsetX: 323, offsetY: 183,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse3', width: 20, height: 20, offsetX: 354, offsetY: 237,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse4', width: 20, height: 20, offsetX: 440, offsetY: 130,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse5', width: 20, height: 20, offsetX: 470, offsetY: 182,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse6', width: 20, height: 20, offsetX: 590, offsetY: 130,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse7', width: 20, height: 20, offsetX: 622, offsetY: 179,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse8', width: 20, height: 20, offsetX: 660, offsetY: 221,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse9', width: 20, height: 20, offsetX: 694, offsetY: 264,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse10', width: 20, height: 20, offsetX: 354, offsetY: 460,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse11', width: 20, height: 20, offsetX: 590, offsetY: 530,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse12', width: 20, height: 20, offsetX: 660, offsetY: 460,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse13', width: 20, height: 20, offsetX: 440, offsetY: 530,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse14', width: 20, height: 20, offsetX: 510, offsetY: 460,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'ellipse15', width: 20, height: 20, offsetX: 290, offsetY: 530,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'Colorellipse1', width: 50, height: 50, offsetX: 717, offsetY: 310,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'Colorellipse2', width: 50, height: 50, offsetX: 560, offsetY: 310,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'Colorellipse3', width: 50, height: 50, offsetX: 390, offsetY: 310,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'Colorellipse4', width: 50, height: 50, offsetX: 220, offsetY: 310,\n            annotations: [{ content: ' ', style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' }, style: { strokeColor: '#A52A2A' }\n        },\n        {\n            id: 'Colorellipse5', width: 140, height: 90, offsetX: 900, offsetY: 310,\n            annotations: [{ content: 'Productivity Increase', style: { color: 'white' } }],\n            style: { fill: '#39AFA9' }, borderColor: '05776C',\n            shape: { type: 'Basic', shape: 'Ellipse' }\n        },\n        {\n            id: 'TextPrograms', width: 90, height: 20, offsetX: 189, offsetY: 130,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Text Programs' }\n        },\n        {\n            id: 'Ventilatorssound', width: 120, height: 20, offsetX: 359, offsetY: 130,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Ventilators Sound' }\n        },\n        {\n            id: 'Education', width: 70, height: 20, offsetX: 500, offsetY: 130,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Education' }\n        },\n        {\n            id: 'DataBooks', width: 70, height: 20, offsetX: 213, offsetY: 183,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'DataBooks' }\n        },\n        {\n            id: 'Fixtures', width: 70, height: 20, offsetX: 240, offsetY: 237,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Fixtures' }\n        },\n        {\n            id: 'Noise', width: 70, height: 20, offsetX: 390, offsetY: 182,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Noise' }\n        },\n        {\n            id: 'Motivation', width: 70, height: 20, offsetX: 535, offsetY: 182,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Motivation' }\n        },\n        {\n            id: 'Tiredness', width: 70, height: 20, offsetX: 565, offsetY: 224,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Tiredness' }\n        },\n        {\n            id: 'Storer', width: 70, height: 20, offsetX: 606, offsetY: 264,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Storer' }\n        },\n        {\n            id: 'Computer', width: 70, height: 20, offsetX: 260, offsetY: 460,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Computer' }\n        },\n        {\n            id: 'Quality', width: 120, height: 20, offsetX: 417, offsetY: 460,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Quality of Element' }\n        },\n        {\n            id: 'Order', width: 70, height: 20, offsetX: 562, offsetY: 460,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Order' }\n        },\n        {\n            id: 'Software', width: 70, height: 20, offsetX: 225, offsetY: 530,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Software' }\n        },\n        {\n            id: 'Procurement', width: 70, height: 20, offsetX: 358, offsetY: 530,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Procurement' }\n        },\n        {\n            id: 'Standardization', width: 90, height: 20, offsetX: 501, offsetY: 530,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: 'Standardization' }\n        },\n    ];\n    public snapSettings: SnapSettingsModel = { constraints: 0 };\n\n    public diagramCreate(args: Object): void {\n        this.diagram.fitToPage({ mode: 'Height' });\n    }\n    //Initializes the Connectors for the diagram\n    public connectors: ConnectorModel[] = [\n        this.CreateConnector('equipellise', '5,5', 'Equipment', 'ellipse1', '#A52A2A', 2),\n        this.CreateConnector('connect12', '5,5', 'ellipse1', 'ellipse2', '#A52A2A', 2),\n        this.CreateConnector('connect13', '5,5', 'ellipse2', 'ellipse3', '#A52A2A', 2),\n        this.CreateConnector('connect14', '5,5', 'ellipse3', 'Colorellipse3', '#A52A2A', 2),\n        this.CreateConnector('connect15', '5,5', 'Environment', 'ellipse4', '#A52A2A', 2),\n        this.CreateConnector('connect16', '5,5', 'ellipse4', 'ellipse5', '#A52A2A', 2),\n        this.CreateConnector('connect17', '5,5', 'ellipse4', 'ellipse5', '#A52A2A', 2),\n        this.CreateConnector('connect18', '5,5', 'ellipse5', 'Colorellipse2', '#A52A2A', 2),\n        this.CreateConnector('connect19', '5,5', 'Person', 'ellipse6', '#A52A2A', 2),\n        this.CreateConnector('connect20', '5,5', 'ellipse6', 'ellipse7', '#A52A2A', 2),\n        this.CreateConnector('connect21', '5,5', 'ellipse7', 'ellipse8', '#A52A2A', 2),\n        this.CreateConnector('connect22', '5,5', 'ellipse8', 'ellipse9', '#A52A2A', 2),\n        this.CreateConnector('connect23', '5,5', 'ellipse9', 'Colorellipse1', '#A52A2A', 2),\n        this.CreateConnector('connect24', '5,5', 'Materials', 'ellipse15', '#A52A2A', 2),\n        this.CreateConnector('connect25', '5,5', 'ellipse15', 'ellipse10', '#A52A2A', 2),\n        this.CreateConnector('connect26', '5,5', 'ellipse10', 'Colorellipse3', '#A52A2A', 2),\n        this.CreateConnector('connect27', '5,5', 'Machine', 'ellipse13', '#A52A2A', 2),\n        this.CreateConnector('connect28', '5,5', 'ellipse13', 'ellipse14', '#A52A2A', 2),\n        this.CreateConnector('connect29', '5,5', 'ellipse14', 'Colorellipse2', '#A52A2A', 2),\n        this.CreateConnector('connect30', '5,5', 'Methods', 'ellipse11', '#A52A2A', 2),\n        this.CreateConnector('connect31', '5,5', 'ellipse11', 'ellipse12', '#A52A2A', 2),\n        this.CreateConnector('connect32', '5,5', 'ellipse12', 'Colorellipse1', '#A52A2A', 2),\n        this.CreateConnector('connect33', '', 'Colorellipse4', 'Colorellipse3', '#000000', 2),\n        this.CreateConnector('connect34', '', 'Colorellipse3', 'Colorellipse2', '#000000', 2),\n        this.CreateConnector('connect35', '', 'Colorellipse2', 'Colorellipse1', '#000000', 2),\n        this.CreateConnector('connect36', '', 'Colorellipse1', 'Colorellipse5', '#000000', 2),\n        this.CreateConnector('connect37', '5,5', 'TextPrograms', 'ellipse1', '#A52A2A', 2),\n        this.CreateConnector('connect38', '5,5', 'DataBooks', 'ellipse2', '#A52A2A', 2),\n        this.CreateConnector('connect39', '5,5', 'Fixtures', 'ellipse3', '#A52A2A', 2),\n        this.CreateConnector('connect40', '5,5', 'Ventilatorssound', 'ellipse4', '#A52A2A', 2),\n        this.CreateConnector('connect41', '5,5', 'Noise', 'ellipse5', '#A52A2A', 2),\n        this.CreateConnector('connect42', '5,5', 'Education', 'ellipse6', '#A52A2A', 2),\n        this.CreateConnector('connect43', '5,5', 'Motivation', 'ellipse7', '#A52A2A', 2),\n        this.CreateConnector('connect44', '5,5', 'Tiredness', 'ellipse8', '#A52A2A', 2),\n        this.CreateConnector('connect45', '5,5', 'Storer', 'ellipse9', '#A52A2A', 2),\n        this.CreateConnector('connect46', '5,5', 'Software', 'ellipse15', '#A52A2A', 2),\n        this.CreateConnector('connect47', '5,5', 'Computer', 'ellipse10', '#A52A2A', 2),\n        this.CreateConnector('connect48', '5,5', 'Procurement', 'ellipse13', '#A52A2A', 2),\n        this.CreateConnector('connect49', '5,5', 'Quality', 'ellipse14', '#A52A2A', 2),\n        this.CreateConnector('connect50', '5,5', 'Order', 'ellipse12', '#A52A2A', 2),\n        this.CreateConnector('connect51', '5,5', 'Standardization', 'ellipse11', '#A52A2A', 2)\n    ];\n\n    public CreateConnector(\n        name: string, lineDashArray: string, source: string, target: string, lineColor: string, lineWidth: number): ConnectorModel {\n        let connector: ConnectorModel = {};\n        connector.id = name;\n        connector.sourceID = source;\n        connector.targetID = target;\n        connector.style = {\n            strokeColor: lineColor,\n            strokeWidth: lineWidth,\n            strokeDashArray: lineDashArray,\n        };\n        return connector;\n    }\n\n    public getConnectorDefaults(connector: ConnectorModel): void {\n        connector.targetDecorator = { shape: 'Arrow', width: 5, height: 5 } as DecoratorModel;\n        if (connector.id !== 'connect33' && connector.id !== 'connect34' &&\n            connector.id !== 'connect35' && connector.id !== 'connect36') {\n            connector.targetDecorator.style = { strokeColor: '#A52A2A', fill: '#A52A2A' };\n        }\n    }\n}","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<style>\n    .diagram-key-board-functions .container-fluid {\n        padding-left: 0px;\n    }\n</style>\n<div class=\"control-section diagram-key-board-functions\">\n    <div class=\"col-xs-12 control-section\" style=\"float:left;\">\n        <div class=\"content-wrapper\">\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [nodes]=\"nodes\" [connectors]=\"connectors\" [snapSettings]=\"snapSettings\"\n                [tool]=\"tool\" (created)=\"diagramCreate($event)\" [getConnectorDefaults]=\"getConnectorDefaults\">\n            </ejs-diagram>\n        </div>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}