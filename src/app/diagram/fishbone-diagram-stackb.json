{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"/**\n * Fishbone Diagram sample\n */\n\n// Importing needed dependencies for diagram\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    NodeModel, DecoratorModel, DiagramTools, ConnectorModel, SnapSettingsModel\n} from '@syncfusion/ej2-diagrams';\n\n\n\n/**\n * Component for displaying a Fishbone Diagram.\n * Manages the presentation and behavior of the diagram using Syncfusion's Angular Diagram component.\n */\n@Component({\n    selector: 'app-root',  // Angular component selector\n    templateUrl: 'app.component.html',  // HTML template file for the component\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,  // No view encapsulation\n    standalone: true,  // Indicates it's a standalone component\n    imports: [ DiagramModule, ]  // Importing necessary Angular modules and components\n})\n\nexport class AppComponent {\n\n    // ViewChild to get a reference to the DiagramComponent named 'diagram'\n    @ViewChild('diagram')\n\n    // Define a variable to hold an instance of the DiagramComponent\n    public diagram: DiagramComponent;\n\n    // Define a variable to hold an instance of the DiagramTool ZoomPan\n    public tool = DiagramTools.ZoomPan;\n\n    // Function to create a node\n    public createNode(id: string, height: number, width: number, offsetX: number, offsetY: number, content: string): NodeModel {\n        return {\n            id: id,\n            height: height,\n            width: width,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            annotations: [{ content: content, style: { color: 'white' } }],\n            shape: { type: 'Path', data: 'M 10 0 L 166 0 L 156 44 L 0 44 z' },\n            style: { fill: '#39AFA9', strokeColor: 'black' }\n        }\n    };\n    // Function to create an ellipse\n    public createEllipseNode(id: string, height: number, width: number, offsetX: number, offsetY: number, content: string = \"\", fill: string = \"white\", strokeColor = '#A52A2A'): NodeModel {\n        return {\n            id: id,\n            height: height,\n            width: width,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            annotations: [{ content: content, style: { color: 'white' } }],\n            shape: { type: 'Basic', shape: 'Ellipse' },\n            style: { fill: fill, strokeColor: strokeColor }\n        }\n    };\n\n    // Function to create an Text Node\n    public createTextNode(id: string, height: number, width: number, offsetX: number, offsetY: number, content: string): NodeModel {\n        return {\n            id: id,\n            height: height,\n            width: width,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            style: { fill: 'transparent', strokeWidth: 0 },\n            shape: { type: 'Text', content: content }\n        }\n    };\n  \n  \n  //Initializes the nodes for the diagram.\n  public nodes:NodeModel[]  = [\n    this.createNode('Equipment', 40, 120, 300, 80, 'Equipment'),\n    this.createNode('Environment', 40, 120, 450, 80, 'Environment'),\n    this.createNode('Person', 40, 120, 600, 80, 'Person'),\n    this.createNode('Materials', 40, 120, 300, 600, 'Materials'),\n    this.createNode('Machine', 40, 120, 450, 600, 'Machine'),\n    this.createNode('Methods', 40, 120, 600, 600, 'Methods'),\n    this.createEllipseNode('ellipse1', 20, 20, 290, 130),\n    this.createEllipseNode('ellipse2', 20, 20, 323, 183),\n    this.createEllipseNode('ellipse3', 20, 20, 354, 237),\n    this.createEllipseNode('ellipse4', 20, 20, 440, 130),\n    this.createEllipseNode('ellipse5', 20, 20, 470, 182),\n    this.createEllipseNode('ellipse6', 20, 20, 590, 130),\n    this.createEllipseNode('ellipse7', 20, 20, 622, 179),\n    this.createEllipseNode('ellipse8', 20, 20, 660, 221),\n    this.createEllipseNode('ellipse9', 20, 20, 694, 264),\n    this.createEllipseNode('ellipse10', 20, 20,354, 460),\n    this.createEllipseNode('ellipse11', 20, 20, 590, 530),\n    this.createEllipseNode('ellipse12', 20, 20, 660, 460),\n    this.createEllipseNode('ellipse13', 20, 20, 440, 530),\n    this.createEllipseNode('ellipse14', 20, 20, 510, 460),\n    this.createEllipseNode('ellipse15', 20, 20, 290, 530),\n    this.createEllipseNode('Colorellipse1', 50, 50, 717, 310),\n    this.createEllipseNode('Colorellipse2', 50, 50, 560, 310),\n    this.createEllipseNode('Colorellipse3', 50, 50, 390, 310),\n    this.createEllipseNode('Colorellipse4', 50, 50, 220, 310),\n    this.createEllipseNode('Colorellipse5', 90, 140, 900, 310,'Productivity Increase',\"#39AFA9\", 'black'),\n    this.createTextNode('TextPrograms',20,90,189,130,'Text Programs'),\n    this.createTextNode('VentilatorsSound',20,120,359,130,'Ventilators Sound'),\n    this.createTextNode('Education',20,70,500,130,'Education'),\n    this.createTextNode('DataBooks',20,70,213,183,'DataBooks'),\n    this.createTextNode('Fixtures',20,70,240,237,'Fixtures'),\n    this.createTextNode('Noise',20,70,390,182,'Noise'),\n    this.createTextNode('Motivation',20,70,535,182,'Motivation'),\n    this.createTextNode('Tiredness',20,70,565,224,'Tiredness'),\n    this.createTextNode('Storer',20,70,606,264,'Storer'),\n    this.createTextNode('Computer',20,70,260,460,'Computer'),\n    this.createTextNode('Quality',20,120,417,460,'Quality of Element'),\n    this.createTextNode('Order',20,70,562,460,'Order'),\n    this.createTextNode('Software',20,70, 225, 530,'Software'),\n    this.createTextNode('Procurement', 20, 70, 358, 530,'Procurement'),\n    this.createTextNode('Standardization',20, 90, 501, 530,'Standardization'),\n  \n  ];\n   \n\n    // Specify constraints for snapping behavior \n    public snapSettings: SnapSettingsModel = { constraints: 0 };\n\n    // Creates a diagram based on the provided arguments.\n    public diagramCreate(args: Object): void {\n        // Adjusts the diagram to fit the page based on height.\n        this.diagram.fitToPage({ mode: 'Height' });\n    }\n\n\n    // Function to create a connector model.\n    public createConnector(\n        id: string, lineDashArray: string, source: string, target: string, strokeColor: string): ConnectorModel {\n        return {\n            id: id,\n            sourceID: source,\n            targetID: target,\n            style: {\n                strokeColor: strokeColor,\n                strokeWidth: 2,\n                strokeDashArray: lineDashArray,\n            }\n        }\n    }\n\n    //Initializes the Connectors for the diagram\n    public connectors: ConnectorModel[] = [\n        this.createConnector('connector01', '5,5', 'Equipment', 'ellipse1', '#A52A2A' ),\n        this.createConnector('connector02', '5,5', 'ellipse1', 'ellipse2', '#A52A2A' ),\n        this.createConnector('connector03', '5,5', 'ellipse2', 'ellipse3', '#A52A2A' ),\n        this.createConnector('connector04', '5,5', 'ellipse3', 'Colorellipse3', '#A52A2A' ),\n        this.createConnector('connector05', '5,5', 'Environment', 'ellipse4', '#A52A2A' ),\n        this.createConnector('connector06', '5,5', 'ellipse4', 'ellipse5', '#A52A2A' ),\n        this.createConnector('connector07', '5,5', 'ellipse4', 'ellipse5', '#A52A2A' ),\n        this.createConnector('connector08', '5,5', 'ellipse5', 'Colorellipse2', '#A52A2A' ),\n        this.createConnector('connector09', '5,5', 'Person', 'ellipse6', '#A52A2A' ),\n        this.createConnector('connector10', '5,5', 'ellipse6', 'ellipse7', '#A52A2A' ),\n        this.createConnector('connector11', '5,5', 'ellipse7', 'ellipse8', '#A52A2A' ),\n        this.createConnector('connector12', '5,5', 'ellipse8', 'ellipse9', '#A52A2A' ),\n        this.createConnector('connector13', '5,5', 'ellipse9', 'Colorellipse1', '#A52A2A' ),\n        this.createConnector('connector14', '5,5', 'Materials', 'ellipse15', '#A52A2A' ),\n        this.createConnector('connector15', '5,5', 'ellipse15', 'ellipse10', '#A52A2A' ),\n        this.createConnector('connector16', '5,5', 'ellipse10', 'Colorellipse3', '#A52A2A' ),\n        this.createConnector('connector17', '5,5', 'Machine', 'ellipse13', '#A52A2A' ),\n        this.createConnector('connector18', '5,5', 'ellipse13', 'ellipse14', '#A52A2A' ),\n        this.createConnector('connector19', '5,5', 'ellipse14', 'Colorellipse2', '#A52A2A' ),\n        this.createConnector('connector20', '5,5', 'Methods', 'ellipse11', '#A52A2A' ),\n        this.createConnector('connector21', '5,5', 'ellipse11', 'ellipse12', '#A52A2A' ),\n        this.createConnector('connector22', '5,5', 'ellipse12', 'Colorellipse1', '#A52A2A' ),\n        this.createConnector('connector23', '', 'Colorellipse4', 'Colorellipse3', '#000000' ),\n        this.createConnector('connector24', '', 'Colorellipse3', 'Colorellipse2', '#000000' ),\n        this.createConnector('connector25', '', 'Colorellipse2', 'Colorellipse1', '#000000' ),\n        this.createConnector('connector26', '', 'Colorellipse1', 'Colorellipse5', '#000000' ),\n        this.createConnector('connector27', '5,5', 'TextPrograms', 'ellipse1', '#A52A2A' ),\n        this.createConnector('connector28', '5,5', 'DataBooks', 'ellipse2', '#A52A2A' ),\n        this.createConnector('connector29', '5,5', 'Fixtures', 'ellipse3', '#A52A2A' ),\n        this.createConnector('connector30', '5,5', 'VentilatorsSound', 'ellipse4', '#A52A2A' ),\n        this.createConnector('connector31', '5,5', 'Noise', 'ellipse5', '#A52A2A' ),\n        this.createConnector('connector32', '5,5', 'Education', 'ellipse6', '#A52A2A' ),\n        this.createConnector('connector33', '5,5', 'Motivation', 'ellipse7', '#A52A2A' ),\n        this.createConnector('connector34', '5,5', 'Tiredness', 'ellipse8', '#A52A2A' ),\n        this.createConnector('connector35', '5,5', 'Storer', 'ellipse9', '#A52A2A' ),\n        this.createConnector('connector36', '5,5', 'Software', 'ellipse15', '#A52A2A' ),\n        this.createConnector('connector37', '5,5', 'Computer', 'ellipse10', '#A52A2A' ),\n        this.createConnector('connector38', '5,5', 'Procurement', 'ellipse13', '#A52A2A' ),\n        this.createConnector('connector39', '5,5', 'Quality', 'ellipse14', '#A52A2A' ),\n        this.createConnector('connector40', '5,5', 'Order', 'ellipse12', '#A52A2A'),\n        this.createConnector('connector41', '5,5', 'Standardization', 'ellipse11', '#A52A2A')\n    ];\n\n\n    // Function to define defaults for connectors\n    public getConnectorDefaults(connector: ConnectorModel): void {\n        connector.targetDecorator = { shape: 'Arrow', width: 5, height: 5 } as DecoratorModel;\n        // Condition to set target decorator style based on connector ID\n        if (connector.id !== 'connector23' && connector.id !== 'connector24' &&\n        connector.id !== 'connector25' && connector.id !== 'connector26') {\n            connector.targetDecorator.style = { strokeColor: '#A52A2A', fill: '#A52A2A' };\n        }\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<style>\n    .diagram-key-board-functions .container-fluid {\n        padding-left: 0px;\n    }\n</style>\n<div class=\"control-section diagram-key-board-functions\">\n    <div class=\"col-xs-12 control-section\">\n        <div class=\"content-wrapper\">\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [nodes]=\"nodes\" [connectors]=\"connectors\" [snapSettings]=\"snapSettings\"\n                [tool]=\"tool\" (created)=\"diagramCreate($event)\" [getConnectorDefaults]=\"getConnectorDefaults\">\n            </ejs-diagram>\n        </div>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}