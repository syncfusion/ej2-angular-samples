{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, Segments, Direction, PathAnnotationModel, OrthogonalSegmentModel, PointPortModel, ShapeAnnotationModel, SnapConstraints, ISelectionChangeEventArgs, Node, FlowShapeModel, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    NodeModel, DecoratorModel, DiagramTools, ConnectorModel, SnapSettingsModel\n} from '@syncfusion/ej2-diagrams';\nimport { ChangeEventArgs } from \"@syncfusion/ej2-angular-calendars\";\n\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\n/**\n * Sample for Fishbone publics\n */\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [DiagramModule, RadioButtonModule,  ]\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    public snapSettings = { constraints: SnapConstraints.None };\n\n    //Initialize the connectors object with basic properties.\n    public createConnector(\n        name: string, source: string, target: string, content: string, type?: Segments,\n        direction?: Direction, targePort?: string, length?: number): ConnectorModel {\n\n        let connector: ConnectorModel = {};\n        connector.id = name;\n        connector.sourceID = source;\n        connector.targetID = target;\n        connector.style = { strokeWidth: 2 };\n        let annotation: PathAnnotationModel = {};\n        annotation.content = content;\n        if (content) {\n            annotation.style = { fill: 'white' };\n        }\n        connector.annotations = [annotation];\n        connector.style.strokeColor = '#8D8D8D';\n        connector.targetDecorator = {};\n        connector.targetDecorator.style = {};\n        connector.targetDecorator.style.strokeColor = '#8D8D8D';\n        connector.targetDecorator.style.fill = '#8D8D8D';\n        if (targePort) {\n            connector.targetPortID = targePort;\n        }\n        let segment: OrthogonalSegmentModel = {};\n        if (type) {\n            connector.type = type;\n            segment.direction = direction;\n            segment.type = type;\n            segment.length = length;\n            connector.segments = [segment];\n        }\n        return connector;\n    }\n    \n    //Initialize the node object with basic properties.\n    public createNodes(\n        name: string, offsetX: number, offsetY: number, shape: string, content: string,\n        width: number, height: number, ports?: PointPortModel[]): NodeModel {\n        let node: NodeModel = {};\n        node.id = name;\n        node.offsetX = offsetX;\n        node.width = 150;\n        node.height = 50;\n        node.offsetY = offsetY;\n        let annotations: ShapeAnnotationModel = {};\n        annotations.content = content;\n        node.annotations = [annotations];\n        node.shape = { type: 'Flow', shape: shape } as FlowShapeModel;\n        node.style = { fill: '#FBF6E1', strokeColor: '#E8DFB6', strokeWidth: 2 };\n        if (ports) {\n            node.ports = ports;\n        }\n        return node;\n    }\n\n\n    public port1: PointPortModel = { id: 'port1', offset: { x: 0.5, y: 1 } };\n    public port: PointPortModel = { id: 'port', offset: { x: 1, y: 0.5 } };\n\n    public nodes: NodeModel[] = [\n        this.createNodes('node1', 100, 125, 'Terminator', 'Begin', 100, 35),\n        this.createNodes('node2', 300, 125, 'Process', 'Specify collection', 120, 25, [this.port]),\n        this.createNodes('node3', 500, 125, 'Decision', 'Particulars \\n required?', 100, 50, [this.port1]),\n        this.createNodes('node4', 730, 125, 'Process', 'Specify particulars', 90, 25),\n        this.createNodes('node5', 500, 225, 'Process', 'Design collection', 100, 25, [this.port]),\n        this.createNodes('node6', 500, 320, 'Process', 'Cluster of events', 100, 25),\n        this.createNodes('node7', 500, 420, 'Process', 'Start the process', 100, 25),\n        this.createNodes('node8', 730, 320, 'Process', 'Record and analyze \\n results', 170, 25, [this.port]),\n        this.createNodes('node9', 730, 420, 'Terminator', 'End ', 100, 35)\n    ];\n    public connectors: ConnectorModel[] = [\n        this.createConnector('connector1', 'node1', 'node2', ''),\n        this.createConnector('connector2', 'node2', 'node3', ''),\n        this.createConnector('connector3', 'node3', 'node4', 'Yes'),\n        this.createConnector('connector4', 'node3', 'node5', 'No'),\n        this.createConnector('connector5', 'node5', 'node6', ''),\n        this.createConnector('connector6', 'node6', 'node7', ''),\n        this.createConnector('connector7', 'node8', 'node6', ''),\n        this.createConnector('connector8', 'node7', 'node9', ''),\n        this.createConnector('connector10', 'node4', 'node5', '', 'Orthogonal', 'Bottom', 'port', 220)\n    ];\n\n    public highLightedObjects: string[] = [];\n    public currentButton: string = 'unhighlightAll';\n    public buttonChange(args: ChangeEventArgs): void {\n        this.currentButton = (args.event.srcElement as any).defaultValue;\n        this.applyChanges((args.event.srcElement as any).defaultValue);\n    }\n    //Function to apply changes based on selection.\n    public applyChanges(id: string): void {\n        this.unhighlight();\n        switch (id) {\n            case 'linksInto':\n                this.linkedIn();\n                break;\n            case 'linksOutOf':\n                this.linksOut();\n                break;\n            case 'linksConnected':\n                this.linksConnector();\n                break;\n            case 'nodesInto':\n                this.nodesIn();\n                break;\n            case 'nodesOutOf':\n                this.nodesOut();\n                break;\n            case 'nodesConnected':\n                this.nodesConnect();\n                break;\n            case 'nodesReachable':\n                this.nodeReachable();\n                break;\n        }\n    }\n    // Function to display outgoing connectors.\n    public linkedIn(): void {\n        if (this.diagram.selectedItems.nodes.length) {\n            let node: string[] = (this.diagram.selectedItems.nodes[0] as Node).inEdges;\n            for (let i: number = 0; i < node.length; i++) {\n                let index: number = this.diagram.connectors.indexOf(this.diagram.nameTable[node[i]]);\n                this.highLightedObjects.push(node[i]);\n                let connector = this.diagram.connectors[index];\n                connector.style.strokeColor = '#1413F8';\n                connector.targetDecorator.style.strokeColor = '#1413F8';\n                connector.targetDecorator.style.fill = '#1413F8';\n                this.diagram.dataBind();\n            }\n        }\n    }\n\n    // Function to display outgoing connectors.\n    public linksOut(): void {\n        if (this.diagram.selectedItems.nodes.length) {\n            let node: string[] = (this.diagram.selectedItems.nodes[0] as Node).outEdges;\n            for (let i: number = 0; i < node.length; i++) {\n                let index: number = this.diagram.connectors.indexOf(this.diagram.nameTable[node[i]]);\n                this.highLightedObjects.push(node[i]);\n                let connector = this.diagram.connectors[index];\n                connector.style.strokeColor = '#1413F8';\n                connector.targetDecorator.style.strokeColor = '#1413F8';\n                connector.targetDecorator.style.fill = '#1413F8';\n                this.diagram.dataBind();\n            }\n        }\n    }\n    // Function to display both the incoming and outgoing connectors.\n    public linksConnector(): void {\n        this.linksOut();\n        this.linkedIn();\n    }\n\n    // Function to display incoming nodes.\n    public nodesIn(): void {\n        if (this.diagram.selectedItems.nodes.length) {\n            let node: string[] = (this.diagram.selectedItems.nodes[0] as Node).inEdges;\n            for (let i: number = 0; i < node.length; i++) {\n                let nodeId: string = this.diagram.nameTable[node[i]].sourceID;\n                this.highLightedObjects.push(nodeId);\n                let index: number = this.diagram.nodes.indexOf(this.diagram.nameTable[nodeId]);\n                this.diagram.nodes[index].style.strokeColor = '#1413F8';\n                this.diagram.dataBind();\n            }\n        }\n    }\n\n    // Function to display the outgoing nodes.\n    public nodesOut(): void {\n        if (this.diagram.selectedItems.nodes.length) {\n            let node: string[] = (this.diagram.selectedItems.nodes[0] as Node).outEdges;\n            for (let i: number = 0; i < node.length; i++) {\n                let nodeId: string = this.diagram.nameTable[node[i]].targetID;\n                this.highLightedObjects.push(nodeId);\n                let index: number = this.diagram.nodes.indexOf(this.diagram.nameTable[nodeId]);\n                this.diagram.nodes[index].style.strokeColor = '#1413F8';\n                this.diagram.dataBind();\n            }\n        }\n    }\n\n    // Function to display both the incoming and outgoing nodes.\n    public nodesConnect(): void {\n        this.nodesOut();\n        this.nodesIn();\n    }\n\n    //Function to display the flow of execution.\n    public nodeReachable(): void {\n        if (this.diagram.selectedItems.nodes.length) {\n            let connectors: string[] = (this.diagram.selectedItems.nodes[0] as Node).outEdges;\n            let nodeList: string[] = this.foundNode(connectors, []);\n            for (let i: number = 0; i < nodeList.length; i++) {\n                let index: number = this.diagram.connectors.indexOf(this.diagram.nameTable[nodeList[i]]);\n                this.highLightedObjects.push(nodeList[i]);\n                let connector = this.diagram.connectors[index];\n                connector.style.strokeColor = '#1413F8';\n                connector.targetDecorator.style.strokeColor = '#1413F8';\n                connector.targetDecorator.style.fill = '#1413F8';\n                this.diagram.dataBind();\n            }\n        }\n    }\n\n    //Function to find the connected nodes.\n    public foundNode(list: string[], nodeList: string[]): string[] {\n        for (let i: number = 0; i < list.length; i++) {\n            let connector: ConnectorModel = this.diagram.nameTable[list[i]];\n            if (nodeList.indexOf(connector.id) > -1) {\n                break;\n            }\n            if (!connector.annotations[0] || (connector.annotations[0] && connector.annotations[0].content !== 'No')) {\n                nodeList.push(connector.id);\n            }\n            if (this.diagram.nameTable[connector.targetID].outEdges.length) {\n                if (list.indexOf(connector.targetID) === -1) {\n                    this.foundNode(this.diagram.nameTable[connector.targetID].outEdges, nodeList);\n                }\n            }\n        }\n        return nodeList;\n    }\n\n    //Function to unhighlight the highlighted objects.\n    public unhighlight(): void {\n        for (let i: number = this.highLightedObjects.length - 1; i >= 0; i--) {\n            if (this.diagram.nameTable[this.highLightedObjects[i]] instanceof Node) {\n                let index: number = this.diagram.nodes.indexOf(this.diagram.nameTable[this.highLightedObjects[i]]);\n                this.diagram.nodes[index].style.strokeColor = '#E8DFB6';\n                this.diagram.dataBind();\n            } else {\n                let index: number = this.diagram.connectors.indexOf(this.diagram.nameTable[this.highLightedObjects[i]]);\n                let connector = this.diagram.connectors[index];\n                connector.style.strokeColor = '#8D8D8D';\n                connector.targetDecorator.style.strokeColor = '#8D8D8D';\n                connector.targetDecorator.style.fill = '#8D8D8D';\n                this.diagram.dataBind();\n            }\n        }\n        this.highLightedObjects = [];\n    }\n\n    public selectionChange(arg: ISelectionChangeEventArgs): void {\n        this.applyChanges(this.currentButton);\n    };\n    public created(): void {\n        this.diagram.select([this.diagram.nodes[2]])\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section\" style=\"border-right: 1px solid #D7D7D7\">\n    <style>\n        #flowExecitionPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            width: 300;\n        }\n\n        #flowExecitionPropertySection .col-xs-7 {\n            padding-left: 0px;\n            padding-right: 0px;\n        }\n\n        #flowExecitionControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n    </style>\n\n    <div id=\"flowExecitionControlSection\" class=\"content-wrapper\" style=\"width: 100%;\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"580px\" [nodes]=\"nodes\" [connectors]=\"connectors\" (selectionChange)=\"selectionChange($event)\"\n            (created)=\"created()\" [snapSettings]=\"snapSettings\"></ejs-diagram>\n    </div>\n</div>\n<div id=\"flowExecitionPropertySection\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\">\n        Choose a flow\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row property-panel-content\">\n            <div class=\"row\">\n                <div class=\"col-xs-7\">\n                    <ejs-radiobutton id=\"UnhighlightAll\" label='None' value=\"unhighlightAll\" name=\"radio\" (change)=\"buttonChange($event)\"\n                        checked=\"true\"></ejs-radiobutton>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <ejs-radiobutton id=\"LinksInto\" label='Incoming connections' value=\"linksInto\" name=\"radio\" (change)=\"buttonChange($event)\"></ejs-radiobutton>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <ejs-radiobutton id=\"LinksOutOf\" label='Outgoing connections' value=\"linksOutOf\" name=\"radio\" (change)=\"buttonChange($event)\"></ejs-radiobutton>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <ejs-radiobutton id=\"LinksConnected\" label='Incoming and outgoing connections' value=\"linksConnected\" name=\"radio\" (change)=\"buttonChange($event)\"></ejs-radiobutton>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <ejs-radiobutton id=\"NodesInto\" label='Incoming nodes' value=\"nodesInto\" name=\"radio\" (change)=\"buttonChange($event)\" (checked)=true></ejs-radiobutton>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <ejs-radiobutton id=\"NodesOutOf\" label='Outgoing nodes' value=\"nodesOutOf\" name=\"radio\" (change)=\"buttonChange($event)\"></ejs-radiobutton>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <ejs-radiobutton id=\"NodesConnected\" label='Incoming and outgoing nodes' value=\"nodesConnected\" name=\"radio\" (change)=\"buttonChange($event)\"></ejs-radiobutton>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px\">\n                <div class=\"col-xs-7\">\n                    <ejs-radiobutton id=\"NodesReachable\" label='Flow of Execution' value=\"nodesReachable\" name=\"radio\" (change)=\"buttonChange($event)\"></ejs-radiobutton>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}