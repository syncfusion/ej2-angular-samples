{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n  Diagram, NodeModel, UndoRedo, ConnectorModel, Connector, SnapSettingsModel, PortVisibility, SnapConstraints, DiagramTools\n} from '@syncfusion/ej2-diagrams';\n\n\nDiagram.Inject(UndoRedo);\n\n/**\n * Default FlowShape sample\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  //Diagram Properties\n  public diagram: DiagramComponent;\n  constructor() {​​​​​​​\n    \n}​​​​​​​\n\n//Function to Create nodes by the parameters\npublic createNode(id: string, width: number, height: number, offsetX: number, offsetY: number, \n  content: string, fill: string, bold: boolean): NodeModel {\n  return {\n      id: id,\n      width: width,\n      height: height,\n      offsetX: offsetX,\n      offsetY: offsetY,\n      shape: { type: \"Text\", content: content },\n      style: { fill: fill, bold: bold }\n  };\n}\n//Function to Create connectors by the parameters\npublic createConnector(id:string, sourceX:number, sourceY:number, targetX:number, targetY:number):ConnectorModel {\n  return {\n      id: id,\n      type: 'Straight',\n      sourcePoint: { x: sourceX, y: sourceY },\n      targetPoint: { x: targetX, y: targetY },\n      targetDecorator: { shape: 'None' },\n      style: { strokeColor: '#A5A6A7' }\n  };\n}\n// Array of nodes with their respective properties\npublic nodes : NodeModel[] = [\n  // Call to createNode method to generate nodes\n  this.createNode('employee', 100, 60, 100, 100, 'Employee', 'transparent', true),\n  this.createNode('teamLead', 100, 60, 350, 100, 'Team Lead', 'transparent', true),\n  this.createNode('dashboard', 100, 60, 600, 100, 'Dashboard', 'transparent', true),\n  this.createNode('manager', 100, 60, 850, 100, 'Manager', 'transparent', true),\n  this.createNode('leaveRequest', 100, 60, 225, 250, 'Leave Request', 'transparent', false),\n  this.createNode('leaveApproval', 100, 60, 225, 484, 'Leave Approval', 'transparent', false),\n  this.createNode('checkEmplyeeAvail', 175, 30, 470, 345, 'Check Employee availability and task status', 'transparent', false),\n  this.createNode('forwardLeaveMssg', 150, 30, 600, 420, 'Forward Leave Request', 'transparent', false),\n  this.createNode('noObjection', 150, 30, 600, 460, 'No Objection', 'transparent', false),\n  // Custom node for special operation\n  {\n      id:'employeeNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:250,offsetX:100,offsetY:350,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:1,y:0.05},visibility:PortVisibility.Hidden},\n              {id:'p2',offset:{x:1,y:0.97},visibility:PortVisibility.Hidden},]\n  },\n  {\n      id:'teamLeadNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:190,offsetX:350,offsetY:320,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.07},visibility:PortVisibility.Hidden},\n      {id:'p2',offset:{x:1,y:0.92},visibility:PortVisibility.Hidden},\n      {id:'p3',offset:{x:1,y:0.5},visibility:PortVisibility.Hidden},]\n  },\n  {\n      id:'dashboardNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:25,offsetX:600,offsetY:320,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.5},visibility:PortVisibility.Hidden}]\n  },\n  {\n      id:'managerNode',shape:{type:'Basic',shape:'Rectangle'},width:10,height:50,offsetX:850,offsetY:420,\n      style:{fill:'orange',strokeColor:'orange'},\n      ports:[{id:'p1',offset:{x:0,y:0.1},visibility:PortVisibility.Hidden},\n      {id:'p2',offset:{x:0,y:0.9},visibility:PortVisibility.Hidden},]\n  },\n\n];\n// Array of connectors between nodes\npublic connectors : ConnectorModel[] = [\n  // Call to createConnector method to generate straight connectors\n  this.createConnector('employeeCon1', 100, 120, 100, 225),\n  this.createConnector('employeeCon2', 100, 475, 100, 600),\n  this.createConnector('teamLeanCon1', 350, 120, 350, 225),\n  this.createConnector('teamLeanCon2', 350, 415, 350, 600),\n  this.createConnector('dashboardCon1', 600, 120, 600, 307),\n  this.createConnector('dashboardCon2', 600, 333, 600, 600),\n  this.createConnector('managerCon1', 850, 120, 850, 395),\n  this.createConnector('managerCon2', 850, 445, 850, 600),\n  // Custom connectors between specific nodes\n  {\n      id:'empToTeamLead',type:'Straight',sourceID:'employeeNode',sourcePortID:'p1',\n      targetID:'teamLeadNode',targetPortID:'p1'\n  },\n  {\n      id:'teamLeadToEmp',type:'Straight',sourcePoint:{x:350,y:465},style:{strokeDashArray:'4 4'},\n      targetID:'employeeNode',targetPortID:'p2'\n  },\n  {\n      id:'teamLeadToDash',type:'Straight',sourceID:'teamLeadNode',sourcePortID:'p3',\n      targetID:'dashboardNode',targetPortID:'p1'\n  },\n  {\n      id:'teamLeadToManager',type:'Straight',sourceID:'teamLeadNode',sourcePortID:'p2',\n      targetID:'managerNode',targetPortID:'p1'\n  },\n  {\n      id:'managerToTeamLead',type:'Straight',sourceID:'managerNode',sourcePortID:'p2',\n      targetPoint:{x:350,y:440},style:{strokeDashArray:'4 4'}\n  },\n];\n  // Default settings for connectors\n  public connectorDefaults(connector: Connector): void {\n    connector.targetDecorator.style = {fill:'#489ECC',strokeColor:'#489ECC'};\n    if(connector.targetDecorator.shape === 'Arrow'){\n    connector.style = {strokeColor:'#489ECC',strokeWidth:2};\n    }\n  }\n  // Method to handle initialization logic when the component is created\n  public created(args : any): void {\n    this.diagram.fitToPage();\n  }\n  // Tools used for the diagram\n  public tools = DiagramTools.ZoomPan;\n  // Snap settings configuration for the diagram\n  public snapSettings: SnapSettingsModel = {\n    constraints : SnapConstraints.None\n  };\n\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<script src=\"script/diagram-common.ts\"></script>\n<style>\n   \n</style>\n<div class=\"control-section\">\n    <div style=\"width: 100%\">\n            <div class=\"content-wrapper\">\n                <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [nodes]= \"nodes\" [connectors]=\"connectors\" [snapSettings]='snapSettings' (created)=\"created($event)\" [getConnectorDefaults]='connectorDefaults' [tool] = \"tools\">\n                </ejs-diagram>\n            </div>\n    </div>\n</div>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}