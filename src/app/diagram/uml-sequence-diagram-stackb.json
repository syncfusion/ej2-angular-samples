{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation, OnInit } from '@angular/core';\nimport {\n  DiagramComponent,\n  DiagramModule\n} from '@syncfusion/ej2-angular-diagrams';\nimport {\n  Diagram,\n  UmlSequenceParticipant,\n  UmlSequenceActivationBox,\n  UmlSequenceMessageType,\n  UmlSequenceFragmentType,\n  SnapConstraints,\n  DiagramTools,\n  Connector,\n  SnapSettingsModel,\n  UndoRedo\n} from '@syncfusion/ej2-diagrams';\n\n\n\n\nDiagram.Inject(UndoRedo);\n\n/**\n * Sequence Diagram using diagram model\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  public diagram: DiagramComponent;\n  public tools = DiagramTools.ZoomPan;\n  public snapSettings: SnapSettingsModel = {\n    constraints: SnapConstraints.None\n  };\n\n  public sequenceModel: any;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    // Define the sequence diagram model with participants, messages, and fragments\n    this.sequenceModel = {\n      // Space between each participant in the diagram\n      spaceBetweenParticipants: 250,\n      // List of participants in the sequence diagram\n      participants: [\n        {\n          id: \"User\",\n          content: \"User\",\n          // Indicates that User is an actor\n          isActor: true\n        },\n        {\n          id: \"Transaction\",\n          content: \"Transaction\",\n          // Activation periods for the Transaction participant\n          activationBoxes: [\n            { id: \"act1\", startMessageID: 'msg1', endMessageID: 'msg4' }\n          ]\n        },\n        {\n          id: \"FraudDetectionSystem\",\n          content: \"Fraud Detection System\",\n          // Activation periods for the Fraud Detection System participant\n          activationBoxes: [\n            { id: \"act2\", startMessageID: 'msg2', endMessageID: 'msg3' },\n            { id: \"act3\", startMessageID: 'msg5', endMessageID: 'msg6' }\n          ]\n        }\n      ],\n      // List of messages exchanged between participants\n      messages: [\n          { id: 'msg1', content: \"Initiate Transaction\", fromParticipantID: \"User\", toParticipantID: \"Transaction\", type: UmlSequenceMessageType.Synchronous },\n          { id: 'msg2', content: \"Send Transaction Data\", fromParticipantID: \"Transaction\", toParticipantID: \"FraudDetectionSystem\", type: UmlSequenceMessageType.Synchronous },\n          { id: 'msg3', content: \"Validate Transaction\", fromParticipantID: \"FraudDetectionSystem\", toParticipantID: \"Transaction\", type: UmlSequenceMessageType.Reply },\n          { id: 'msg4', content: \"Transaction Approved\", fromParticipantID: \"Transaction\", toParticipantID: \"User\", type: UmlSequenceMessageType.Asynchronous },\n          { id: 'msg5', content: \"Flag Transaction\", fromParticipantID: \"Transaction\", toParticipantID: \"FraudDetectionSystem\", type: UmlSequenceMessageType.Synchronous },\n          { id: 'msg6', content: \"Fraud Detected\", fromParticipantID: \"FraudDetectionSystem\", toParticipantID: \"User\", type: UmlSequenceMessageType.Reply },\n          { id: 'msg7', content: \"Cancel Transaction\", fromParticipantID: \"User\", toParticipantID: \"Transaction\", type: UmlSequenceMessageType.Synchronous },\n          { id: 'msg8', content: \"Complete Transaction\", fromParticipantID: \"User\", toParticipantID: \"Transaction\", type: UmlSequenceMessageType.Synchronous }\n      ],\n      // Conditional fragments within the sequence\n      fragments: [\n          {\n              id: 1,\n              // Represents alternative fragment\n              type: UmlSequenceFragmentType.Alternative,\n              conditions: [\n                  // Condition when fraud is detected\n                  {\n                      // Content of condition\n                      content: \"Fraud Detected\",\n                      // Messages part of this condition\n                      messageIds: ['msg5', 'msg6', 'msg7']\n                  },\n                  {\n                      content: \"No Fraud Detected\",\n                      messageIds: ['msg8']\n                  }\n              ]\n          }\n      ]\n    };\n  }\n\n  // Define default properties for connectors used in the diagram\npublic connectorDefaults(connector: Connector): void {\n  const message = this.sequenceModel.messages.find(\n    (msg: any) => msg.id === connector.id\n  );\n\n  if (message) {\n    connector.targetDecorator.style = {\n      fill: '#489ECC',\n      strokeColor: '#489ECC'\n    };\n    connector.style = {\n      strokeColor: '#489ECC',\n      strokeWidth: 2\n    };\n  }\n}\n\n\n  // Default settings for nodes\n  public nodeDefaults(node: any): void {\n    // participant node\n    if (node.data instanceof UmlSequenceParticipant) {\n      if (!node.data.isActor) {\n        node.annotations[0].style.color = 'white';\n      }\n    }\n    // activation node\n    else if (node.data instanceof UmlSequenceActivationBox) {\n      node.style = { fill: 'orange', strokeColor: 'orange' };\n    }\n  }\n\n  // Diagram created event\n  public created(args: any): void {\n    this.diagram.fitToPage();\n  }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<script src=\"script/diagram-common.ts\"></script>\n<style>\n\n</style>\n<div class=\"control-section\">\n    <div style=\"width: 100%\">\n            <div class=\"content-wrapper\">\n                <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [tool]=\"tools\" [snapSettings]=\"snapSettings\"\n                    [model]=\"sequenceModel\" [getNodeDefaults]=\"nodeDefaults.bind(this)\"\n                    [getConnectorDefaults]=\"connectorDefaults.bind(this)\" (created)=\"created($event)\">\n                </ejs-diagram>\n            </div>\n    </div>\n</div>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}