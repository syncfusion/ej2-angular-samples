{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    Diagram, NodeModel, UndoRedo, ConnectorModel,\n    SymbolInfo, IDragEnterEventArgs, IDragLeaveEventArgs,\n    PaletteModel,\n    IDragOverEventArgs, IClickEventArgs, IHistoryChangeArgs, IDoubleClickEventArgs,\n    ITextEditEventArgs, IScrollChangeEventArgs, ISelectionChangeEventArgs, ISizeChangeEventArgs,\n    IConnectionChangeEventArgs, IEndChangeEventArgs, IPropertyChangeEventArgs, IDraggingEventArgs, IRotationEventArgs,\n    ICollectionChangeEventArgs,\n    IMouseEventArgs, DiagramContextMenu, Snapping, SnapConstraints, SnapSettingsModel, ContextMenuSettingsModel, MarginModel,\n    DiagramBeforeMenuOpenEventArgs,\n    NodeConstraints\n} from '@syncfusion/ej2-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { MenuEventArgs } from '@syncfusion/ej2-splitbuttons';\nimport { ListView } from '@syncfusion/ej2-lists';\n\nDiagram.Inject(UndoRedo, DiagramContextMenu, Snapping);\n\n/**\n * Sample for events\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n\n    public getSymbolDefaults(symbol: NodeModel): void {\n        symbol.width = 50;\n        symbol.height = 50;\n        symbol.constraints = NodeConstraints.Default | NodeConstraints.AllowDrop;\n        symbol.style.strokeColor = '#757575';\n    }\n\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n\n    public symbolMargin: MarginModel = { left: 15, right: 15, top: 15, bottom: 15 };\n\n    public expandMode: ExpandMode = 'Multiple';\n\n    public getSymbolInfo(symbol: NodeModel): SymbolInfo {\n        return { fit: true };\n    }\n\n    public dragEnter(args: IDragEnterEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public dragLeave(args: IDragLeaveEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public dragOver(args: IDragOverEventArgs): void {\n        if (args.target) {\n            this.getEventDetails(args);\n        }\n    }\n\n    public click(args: IClickEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public historyChange(args: IHistoryChangeArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public doubleClick(args: IDoubleClickEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public textEdit(args: ITextEditEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public scrollChange(args: IScrollChangeEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public selectionChange(args: ISelectionChangeEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public sizeChange(args: ISizeChangeEventArgs): void {\n        if (args.state === 'Completed') {\n            this.getEventDetails(args);\n        }\n    }\n\n    public connectionChange(args: IConnectionChangeEventArgs): void {\n        if (args.state === 'Changed') {\n            this.getEventDetails(args);\n        }\n    }\n\n    public sourcePointChange(args: IEndChangeEventArgs): void {\n        if (args.state === 'Completed') {\n            this.getEventDetails(args);\n        }\n    }\n\n    public targetPointChange(args: IEndChangeEventArgs): void {\n        if (args.state === 'Completed') {\n            this.getEventDetails(args);\n        }\n    }\n\n    public propertyChange(args: IPropertyChangeEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public positionChange(args: IDraggingEventArgs): void {\n        if (args.state === 'Completed') {\n            this.getEventDetails(args);\n        }\n    }\n\n    public rotateChange(args: IRotationEventArgs): void {\n        if (args.state === 'Completed') {\n            this.getEventDetails(args);\n        }\n    }\n\n    public collectionChange(args: ICollectionChangeEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public mouseEnter(args: IMouseEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public mouseLeave(args: IMouseEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public mouseOver(args: IMouseEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public contextMenuOpen(args: DiagramBeforeMenuOpenEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public contextMenuBeforeItemRender(args: MenuEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public contextMenuClick(args: MenuEventArgs): void {\n        this.getEventDetails(args);\n    }\n\n    public data: { [key: string]: Object }[] = [\n        { text: 'Drag enter', id: 'dragEnter' },\n        { text: 'Drag leave', id: 'dragLeave' },\n        { text: 'Drag over', id: 'dragOver' },\n        { text: 'Click', id: 'click', isChecked: true },\n        { text: 'History change', id: 'historyChange', isChecked: true },\n        { text: 'Double click', id: 'doubleClick' },\n        { text: 'Text edit', id: 'textEdit', isChecked: true },\n        { text: 'Scroll change', id: 'scrollChange' },\n        { text: 'Selection change', id: 'selectionChange', isChecked: true },\n        { text: 'Size change', id: 'sizeChange', isChecked: true },\n        { text: 'Connection change', id: 'connectionChange', isChecked: true },\n        { text: 'SourcePoint change', id: 'sourcePointChange' },\n        { text: 'TargetPoint change', id: 'targetPointChange' },\n        { text: 'Position change', id: 'positionChange', isChecked: true },\n        { text: 'Rotate change', id: 'rotateChange', isChecked: true },\n        { text: 'Collection change', id: 'collectionChange', isChecked: true },\n        { text: 'Mouse enter', id: 'mouseEnter' },\n        { text: 'Mouse leave', id: 'mouseLeave' },\n        { text: 'Mouse over', id: 'mouseOver' },\n        { text: 'Context menu open', id: 'contextMenuOpen' },\n        { text: 'Context menu before item render', id: 'contextMenuBeforeItemRender' },\n        { text: 'Context menu click', id: 'contextMenuClick' }\n    ];\n\n    //Initialize the basicshapes for the symbol palatte\n    public basicShapes: NodeModel[] = [\n        { id: 'Rectangle', shape: { type: 'Basic', shape: 'Rectangle' } },\n        { id: 'Ellipse', shape: { type: 'Basic', shape: 'Ellipse' } },\n        { id: 'Parallelogram', shape: { type: 'Basic', shape: 'Parallelogram' } },\n        { id: 'Triangle', shape: { type: 'Basic', shape: 'Triangle' } },\n        { id: 'Hexagon', shape: { type: 'Basic', shape: 'Hexagon' } },\n        { id: 'Pentagon', shape: { type: 'Basic', shape: 'Pentagon' } },\n        { id: 'Cylinder', shape: { type: 'Basic', shape: 'Cylinder' } },\n        { id: 'Plus', shape: { type: 'Basic', shape: 'Plus' } },\n        { id: 'Heptagon', shape: { type: 'Basic', shape: 'Heptagon' } },\n        { id: 'Octagon', shape: { type: 'Basic', shape: 'Octagon' } },\n        { id: 'Trapezoid', shape: { type: 'Basic', shape: 'Trapezoid' } },\n        { id: 'Decagon', shape: { type: 'Basic', shape: 'Decagon' } },\n        { id: 'RightTriangle', shape: { type: 'Basic', shape: 'RightTriangle' } },\n        { id: 'Diamond', shape: { type: 'Basic', shape: 'Diamond' } },\n        { id: 'Star', shape: { type: 'Basic', shape: 'Star' } }\n    ];\n\n    //Initializes connector symbols for the symbol palette\n    public connectorSymbols: ConnectorModel[] = [\n        {\n            id: 'Link1', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style: {strokeColor: '#757575', fill: '#757575'} }, style: { strokeWidth: 1, strokeColor: '#757575' }\n        },\n        {\n            id: 'link3', type: 'Orthogonal', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            style: { strokeWidth: 1, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'Link21', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            targetDecorator: { shape: 'Arrow', style: {strokeColor: '#757575', fill: '#757575'} }, style: { strokeWidth: 1, strokeColor: '#757575' }\n        },\n        {\n            id: 'link23', type: 'Straight', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            style: { strokeWidth: 1, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n        {\n            id: 'link33', type: 'Bezier', sourcePoint: { x: 0, y: 0 }, targetPoint: { x: 60, y: 60 },\n            style: { strokeWidth: 1, strokeColor: '#757575' }, targetDecorator: { shape: 'None' }\n        },\n    ];\n\n    public palettes: PaletteModel[] = [\n        { id: 'basic', expanded: true, symbols: this.basicShapes, iconCss: 'e-ddb-icons e-basic', title: 'Basic Shapes' },\n        { id: 'connectors', expanded: true, symbols: this.connectorSymbols, iconCss: 'e-ddb-icons e-connector', title: 'Connectors' }\n    ];\n\n    public contextMenu: ContextMenuSettingsModel = {\n        show: true,\n    }\n\n    public getEventDetails(args: any): void {\n        let listView: any = document.getElementById('listview-def');\n        if (listView && listView.ej2_instances) {\n            let listViewComponent: ListView = listView.ej2_instances[0];\n            let selectedItems: any = listViewComponent.getSelectedItems();\n            if (selectedItems.data.length > 0) {\n                let elementName: boolean = this.getName(selectedItems, args);\n                if (elementName) {\n                    this.eventInformation(args);\n                }\n            } else {\n                this.eventInformation(args);\n            }\n        }\n    }\n\n    public getName(selectedItems: any, args: any): boolean {\n        for (let i: number = 0; i < selectedItems.data.length; i++) {\n            let eventName: string = selectedItems.data[i].id;\n            if (eventName === args.name) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public created() {\n        this.clearEventLog();\n\n    }\n    public clearEventLog(): void {\n        let data: HTMLElement = document.getElementById('EventLog');\n        data.innerHTML = '';\n    }\n    public eventInformation(args: any): void {\n        let span: HTMLElement = document.createElement('span');\n        span.innerHTML = 'Diagram ' + args.name.bold() + ' event called' + '<hr>';\n        let log: HTMLElement = document.getElementById('EventLog');\n        log.insertBefore(span, log.firstChild);\n    }\n\n\n    onClick = (args: MouseEvent) => {\n        let data: HTMLElement = document.getElementById('EventLog');\n        for (let i: number = data.childNodes.length - 1; i >= 0; i--) {\n            data.removeChild(data.childNodes[i]);\n        }\n    }\n}","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-8 control-section\" style=\"border-right: 1px solid #D7D7D7\">\n    <style>\n        #diagramEventsControlSection .sb-mobile-palette {\n          width: 200px;\n          height: 100%;\n          float: left;\n        }\n    \n       #diagramEventsControlSection .sb-mobile-palette-bar {\n          display: none;\n        }\n    \n       #diagramEventsControlSection .sb-mobile-diagram {\n          width: calc(100% - 200px);\n          height: 100%;\n          float: left;\n          border: 1px solid #d9dedd;\n        }\n        \n        .material #diagramEventsControlSection  #palette-space .e-accordion {\n            border: none;\n        }\n        .material #diagramEventsControlSection #palette-space {\n           border: 1px solid rgba(0, 0, 0, 0.12);\n        }\n    \n        @media (max-width: 550px) {\n          #diagramEventsControlSection .sb-mobile-palette {\n            z-index: 19;\n            position: absolute;\n            display: none;\n            transition: transform 300ms linear, visibility 0s linear 300ms;\n            width: 39%;\n            height: 100%;\n          }\n    \n          #diagramEventsControlSection .sb-mobile-palette-bar {\n            display: block;\n            width: 100%;\n            background: #fafafa;\n            padding: 10px 10px;\n            border: 0.5px solid #e0e0e0;\n            min-height: 40px;\n          }\n    \n          #diagramEventsControlSection .sb-mobile-diagram {\n            width: 100%;\n            height: 100%;\n            float: left;\n            left: 0px;\n          }\n    \n          #diagramEventsControlSection #palette-icon {\n            font-size: 20px;\n          }\n        }\n    \n        #diagramEventsControlSection .sb-mobile-palette-open {\n          position: absolute;\n          display: block;\n          right: 15px;\n        }\n    \n        @font-face {\n          font-family: \"e-ddb-icons1\";\n          src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA)\n            format(\"truetype\");\n          font-weight: normal;\n          font-style: normal;\n        }\n    \n        .e-ddb-icons1 {\n          font-family: \"e-ddb-icons1\";\n          speak: none;\n          font-size: 16px;\n          font-style: normal;\n          font-weight: normal;\n          font-variant: normal;\n          text-transform: none;\n          line-height: 1;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n    \n        #diagramEventsControlSection .e-toggle-palette::before {\n          content: \"\\e700\";\n        }\n    \n        \n        #diagramEventsPropertySection .event-tracer {\n          width: 240px;\n          height: 700px;\n          min-height: 700px;\n          float: left;\n        }\n    \n       #diagramEventsPropertySection .heading {\n          color: #807f7f;\n          font-size: 15px;\n          height: 50px;\n          width: 100%;\n          border-bottom: 1px solid #d9dedd;\n          padding: 10px;\n        }\n    \n        .property-section {\n          padding-top: 20px;\n          padding-bottom: 20px;\n          height: 740px;\n          padding-right: 0px;\n        }\n    \n        #diagramEventsPropertySection .evtbtn { \n          float: right; \n        }\n    \n        #diagramEventsPropertySection .listbox {\n          width: 100%;\n          height: 50%;\n        }\n    \n       #diagramEventsPropertySection .event-tracer .prop-grid {\n          width: 100%;\n          height: 50%;\n        }\n    \n       #diagramEventsPropertySection #EventLog {\n          height: calc(100% - 50px);\n          padding: 15px;\n          overflow: auto;\n          width: 100%;\n        }\n\n        #EventLog b {\n         color: #388e3c;\n        }\n\n         hr {\n          margin: 1px 10px 1px 0px;\n          border-top: 1px solid #eee;\n         }\n\n      </style>\n   <div id=\"diagramEventsControlSection\" class=\"content-wrapper\" style=\"width:100%;background: white\">\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <ejs-symbolpalette #symbolpalette id=\"symbolpalette\" [expandMode]=\"expandMode\" [palettes]=\"palettes\" \n        width=\"100%\" height=\"700px\" [symbolHeight]=60 [symbolWidth]=60 [symbolMargin]=\"symbolMargin\"\n        [getNodeDefaults]=\"getSymbolDefaults\" [getSymbolInfo]=\"getSymbolInfo\">\n        </ejs-symbolpalette>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [contextMenuSettings]=\"contextMenu\" [snapSettings]='snapSettings' (dragEnter)=\"dragEnter($event)\"\n        (dragLeave)=\"dragLeave($event)\" (dragOver)=\"dragOver($event)\" (click)=\"click($event)\" (historyChange)=\"historyChange($event)\" (doubleClick)=\"doubleClick($event)\"\n        (textEdit)=\"textEdit($event)\" (scrollChange)=\"scrollChange($event)\" (selectionChange)=\"selectionChange($event)\" (sizeChange)=\"sizeChange($event)\"\n        (connectionChange)=\"connectionChange($event)\" (sourcePointChange)=\"sourcePointChange($event)\" (targetPointChange)=\"targetPointChange($event)\"\n        (propertyChange)=\"propertyChange($event)\" (positionChange)=\"positionChange($event)\" (rotateChange)=\"rotateChange($event)\" (collectionChange)=\"collectionChange($event)\"\n        (mouseEnter)=\"mouseEnter($event)\" (mouseLeave)=\"mouseLeave($event)\" (mouseOver)=\"mouseOver($event)\" (contextMenuOpen)=\"contextMenuOpen($event)\" (contextMenuBeforeItemRender)=\"contextMenuBeforeItemRender($event)\"\n        (contextMenuClick)=\"contextMenuClick($event)\" (created)=\"created()\">\n        </ejs-diagram>\n    </div>\n  </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n  <div id=\"diagramEventsPropertySection\" style=\"height:100%;border: 1px solid #e0e0e0\">\n    <div class=\"listbox\">\n      <div class=\"heading\" style=\"height:40px\"><span>Client-side events</span></div>\n      <ejs-listview id='listview-def' [dataSource]='data' [showCheckBox]='true' height=\"calc(100% - 40px)\"></ejs-listview>\n    </div>\n    <div class=\"prop-grid content\" style=\"height:50%; border-top: 1px solid #e0e0e0\">\n      <div class=\"heading\">\n        <span style=\"display: inline-block;margin-top: 5px;\">Event Trace</span> \n        <div class=\"evtbtn\">\n            <button id=\"clearbtn\" ejs-button (click)='onClick($event)'>Clear</button>\n        </div>\n      </div>\n      <div id=\"EventLog\">\n      </div>\n    </div>\n  </div>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}