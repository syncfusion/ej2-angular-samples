{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n    DiagramComponent, Diagram, ConnectorEditing, ConnectorModel,\n    LineRouting, DiagramConstraints, NodeModel, ShapeAnnotationModel,\n    PointPortModel, PortVisibility, Snapping, SnapConstraints, DiagramModule,\n    SnapSettingsModel, AvoidLineOverlapping, DiagramTools\n} from '@syncfusion/ej2-angular-diagrams';\n\n\nDiagram.Inject(LineRouting, AvoidLineOverlapping, ConnectorEditing, Snapping);\n/**\n * Sample for Avoid Connector Overlap Diagram\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    public tool: DiagramTools = DiagramTools.ZoomPan;\n\n    private create1to16Node(id: string, x: number, y: number, width: number, height: number): NodeModel {\n        const node = this.createNode(id, x, y, width, height);\n        this.addShape(node, 1, 16);\n        this.addPorts(node, 1, 'in');\n        this.addPorts(node, 16, 'out');\n        this.addPortsLabels(node, 16, 'out');\n        return node;\n    }\n\n    private create16to1Node(id: string, x: number, y: number, width: number, height: number): NodeModel {\n        const node = this.createNode(id, x, y, width, height);\n        this.addShape(node, 16, 1);\n        this.addPorts(node, 16, 'in');\n        this.addPorts(node, 1, 'out');\n        this.addPortsLabels(node, 16, 'in');\n        return node;\n    }\n\n    private create9to5Node(id: string, x: number, y: number, width: number, height: number): NodeModel {\n        const leftLabels = ['A_0', 'A_1', 'A_2', 'A_3', 'B_0', 'B_1', 'B_2', 'B_3', 'Cin'];\n        const rightLabels = ['S_0', 'S_1', 'S_2', 'S_3', 'Cout'];\n        const node = this.createNode(id, x, y, width, height, '4 Bit\\nRCA');\n        this.addShape(node, 9, 5);\n        this.addPorts(node, 9, 'in');\n        this.addPorts(node, 5, 'out', 9);\n        this.addPortsLabels(node, 9, 'in', leftLabels);\n        this.addPortsLabels(node, 5, 'out', rightLabels, 9);\n        return node;\n    }\n\n    private createInputNode(id: string, x: number, y: number, width: number, height: number, label: string): NodeModel {\n        const node = this.createNode(id, x, y, width, height, label);\n        this.addShape(node, 0, 1);\n        this.addPorts(node, 1, 'out');\n        const annotation = node.annotations[0];\n        annotation.offset = { x: (width - 25) / (2 * width), y: 0.5 };\n        return node;\n    }\n\n    private createOutputNode(id: string, x: number, y: number, width: number, height: number, label: string): NodeModel {\n        const node = this.createNode(id, x, y, width, height, label);\n        this.addShape(node, 1, 0);\n        this.addPorts(node, 1, 'in');\n        const annotation = node.annotations[0];\n        annotation.offset = { x: 1 - ((width - 25) / (2 * width)), y: 0.5 };\n        return node;\n    }\n\n    private addShape(node: NodeModel, inCount: number, outCount: number): void {\n        const maxCount = Math.max(inCount, outCount);\n        const rightX = outCount === 0 ? node.width : node.width - 25;\n        let pathData = `M ${rightX} 0 `;\n        if (outCount > 1) {\n            for (let i = 1; i <= outCount; i++) {\n                const portY = ((i / maxCount) - (1 / (2 * maxCount))) * node.height;\n                pathData += `L ${rightX} ${portY} L ${node.width} ${portY} L ${rightX} ${portY} `;\n            }\n        } else if (outCount === 1) {\n            pathData += `L ${rightX} ${node.height * 0.5} L ${node.width} ${node.height * 0.5} L ${rightX} ${node.height * 0.5} `;\n        }\n\n        const leftX = inCount === 0 ? 0 : 25;\n        pathData += `L ${rightX} ${node.height} L ${leftX} ${node.height} `;\n        if (inCount > 1) {\n            for (let i = inCount; i >= 1; i--) {\n                const portY = ((i / maxCount) - (1 / (2 * maxCount))) * node.height;\n                pathData += `L ${leftX} ${portY} L 0 ${portY} L ${leftX} ${portY} `;\n            }\n        } else if (inCount === 1) {\n            pathData += `L ${leftX} ${node.height * 0.5} L 0 ${node.height * 0.5} L ${leftX} ${node.height * 0.5} `;\n        }\n\n        pathData += `L ${leftX} 0 Z`;\n        node.shape = { type: 'Path', data: pathData };\n    }\n\n    private addPorts(node: NodeModel, count: number, side: string, factor?: number): void {\n        if (factor === undefined) {\n            factor = count;\n        }\n        if (count > 1) {\n            for (let i = 1; i <= count; i++) {\n                const port: PointPortModel = {\n                    id: `${node.id}_${side}_${(i - 1)}`,\n                    offset: { x: side === 'out' ? 1 : 0, y: (i / factor) - (1 / (2 * factor)) },\n                    visibility: PortVisibility.Visible,\n                    shape: 'Circle',\n                    style: { fill: 'black' },\n                    width: 8,\n                    height: 8\n                };\n                node.ports.push(port);\n            }\n        } else {\n            const port: PointPortModel = {\n                id: `${node.id}_${side}_0`,\n                offset: { x: side === 'out' ? 1 : 0, y: 0.5 },\n                visibility: PortVisibility.Visible,\n                shape: 'Circle',\n                style: { fill: 'black' },\n                width: 8,\n                height: 8\n            };\n            node.ports.push(port);\n        }\n    }\n\n    private addPortsLabels(node: NodeModel, count: number, side: string, labels?: string[], factor?: number): void {\n        if (factor === undefined) {\n            factor = count;\n        }\n        const x = side === 'out' ? (node.width - 25 * 0.5) / node.width : (25 * 0.5) / node.width;\n        for (let i = 1; i <= count; i++) {\n            const label: ShapeAnnotationModel = {\n                content: labels ? labels[i - 1] : `${i - 1}`,\n                offset: { x: x, y: (i / factor) - (1 / (2 * factor)) },\n                style: { fontSize: 7 },\n                verticalAlignment:'Bottom',\n                margin:{bottom: 2}\n            };\n            node.annotations.push(label);\n        }\n    }\n\n    private createNode(id: string, x: number, y: number, width: number, height: number, label?: string): NodeModel {\n        const shapeStyle = { strokeColor: \"black\", strokeWidth: 2 };\n        const diagramNode: NodeModel = {\n            id: id,\n            offsetX: x,\n            offsetY: y,\n            width: width,\n            height: height,\n            style: shapeStyle,\n            shape: { type: 'Basic' },\n            ports: [] as PointPortModel[],\n            annotations: [] as ShapeAnnotationModel[]\n        };\n        if (label) {\n            const annotation: ShapeAnnotationModel = { content: label, style: { fontSize: 14 }  };\n            diagramNode.annotations.push(annotation);\n        }\n        return diagramNode;\n    }\n\n    private createConnector(id: string, sourceId: string, targetId: string, sourcePortIndex: number, targetPortIndex: number,\n        strokeColor: string | null = null): ConnectorModel {\n        let color = strokeColor ? strokeColor : \"green\";\n        if (color === 'lightGreen') {\n            color = '#1AD81A'\n        } else if (color === 'green') {\n            color = '#005100'\n        }\n        const diagramConnector: ConnectorModel = {\n            id: id,\n            cornerRadius: 5,\n            sourceID: sourceId,\n            targetID: targetId,\n            sourcePortID: sourceId + '_out_' + sourcePortIndex,\n            targetPortID: targetId + '_in_' + targetPortIndex,\n            type: 'Orthogonal',\n            segments: [{ type: 'Orthogonal' }],\n            style: { strokeColor: color, strokeWidth: 2 },\n            targetDecorator: { shape: 'None' }\n        };\n        return diagramConnector;\n    }\n    public nodes: NodeModel[] = [\n        this.create1to16Node('node1', 205, 180, 80, 240),\n        this.create1to16Node('node2', 205, 427.5, 80, 240),\n        this.create9to5Node('node3', 415, 127.5, 100, 135),\n        this.create9to5Node('node4', 415, 367.5, 100, 135),\n        this.create9to5Node('node5', 615, 127.5, 100, 135),\n        this.create9to5Node('node6', 615, 367.5, 100, 135),\n        this.create16to1Node('node7', 820, 240, 80, 240),\n        this.createInputNode('node8', 70, 40, 80, 30, 'Cin'),\n        this.createInputNode('node9', 70, 180, 80, 30, 'A'),\n        this.createInputNode('node10', 70, 427.5, 80, 30, 'B'),\n        this.createOutputNode('node11', 950, 240, 80, 30, 'S'),\n        this.createOutputNode('node12', 950, 367.5, 80, 30, 'Cout')\n    ];\n    public connectors: ConnectorModel[] = [\n        this.createConnector('connector01', 'node8', 'node3', 0, 8, 'lightGreen'),\n        this.createConnector('connector02', 'node9', 'node1', 0, 0, 'orange'),\n        this.createConnector('connector03', 'node10', 'node2', 0, 0, 'orange'),\n        this.createConnector('connector04', 'node7', 'node11', 0, 0, 'orange'),\n        this.createConnector('connector05', 'node6', 'node12', 4, 0),\n        this.createConnector('connector06', 'node3', 'node5', 4, 8),\n        this.createConnector('connector07', 'node5', 'node4', 4, 8, 'lightGreen'),\n        this.createConnector('connector08', 'node4', 'node6', 4, 8),\n\n        this.createConnector('connector1', 'node1', 'node3', 0, 0),\n        this.createConnector('connector2', 'node1', 'node3', 1, 1),\n        this.createConnector('connector3', 'node1', 'node3', 2, 2),\n        this.createConnector('connector4', 'node1', 'node3', 3, 3),\n        this.createConnector('connector5', 'node1', 'node5', 4, 0, 'lightGreen'),\n        this.createConnector('connector6', 'node1', 'node5', 5, 1),\n        this.createConnector('connector7', 'node1', 'node5', 6, 2),\n        this.createConnector('connector8', 'node1', 'node5', 7, 3, 'lightGreen'),\n        this.createConnector('connector9', 'node1', 'node4', 8, 0, 'lightGreen'),\n        this.createConnector('connector10', 'node1', 'node4', 9, 1, 'lightGreen'),\n        this.createConnector('connector11', 'node1', 'node4', 10, 2),\n        this.createConnector('connector12', 'node1', 'node4', 11, 3, 'lightGreen'),\n        this.createConnector('connector13', 'node1', 'node6', 12, 0),\n        this.createConnector('connector14', 'node1', 'node6', 13, 1, 'lightGreen'),\n        this.createConnector('connector15', 'node1', 'node6', 14, 2, 'lightGreen'),\n        this.createConnector('connector16', 'node1', 'node6', 15, 3),\n        this.createConnector('connector17', 'node2', 'node3', 0, 4, 'lightGreen'),\n        this.createConnector('connector18', 'node2', 'node3', 1, 5, 'lightGreen'),\n        this.createConnector('connector19', 'node2', 'node3', 2, 6),\n        this.createConnector('connector20', 'node2', 'node3', 3, 7),\n        this.createConnector('connector21', 'node2', 'node5', 4, 4, 'lightGreen'),\n        this.createConnector('connector22', 'node2', 'node5', 5, 5, 'lightGreen'),  \n        this.createConnector('connector23', 'node2', 'node5', 6, 6, 'lightGreen'),  \n        this.createConnector('connector24', 'node2', 'node5', 7, 7, 'lightGreen'),  \n        this.createConnector('connector25', 'node2', 'node4', 8, 4),\n        this.createConnector('connector26', 'node2', 'node4', 9, 5, 'lightGreen'),\n        this.createConnector('connector27', 'node2', 'node4', 10, 6),\n        this.createConnector('connector28', 'node2', 'node4', 11, 7),\n        this.createConnector('connector29', 'node2', 'node6', 12, 4, 'lightGreen'),\n        this.createConnector('connector30', 'node2', 'node6', 13, 5),\n        this.createConnector('connector31', 'node2', 'node6', 14, 6),\n        this.createConnector('connector32', 'node2', 'node6', 15, 7),\n        this.createConnector('connector33', 'node3', 'node7', 0, 0),\n        this.createConnector('connector34', 'node3', 'node7', 1, 1),\n        this.createConnector('connector35', 'node3', 'node7', 2, 2, 'lightGreen'),\n        this.createConnector('connector36', 'node3', 'node7', 3, 3),\n    \n        this.createConnector('connector37', 'node5', 'node7', 0, 4),\n        this.createConnector('connector38', 'node5', 'node7', 1, 5),\n        this.createConnector('connector39', 'node5', 'node7', 2, 6),\n        this.createConnector('connector40', 'node5', 'node7', 3, 7, 'lightGreen'),\n      \n        this.createConnector('connector41', 'node4', 'node7', 0, 8),\n        this.createConnector('connector42', 'node4', 'node7', 1, 9),\n        this.createConnector('connector43', 'node4', 'node7', 2, 10, 'lightGreen'),\n        this.createConnector('connector44', 'node4', 'node7', 3, 11),\n        \n        this.createConnector('connector45', 'node6', 'node7', 0, 12),\n        this.createConnector('connector46', 'node6', 'node7', 1, 13),\n        this.createConnector('connector47', 'node6', 'node7', 2, 14),\n        this.createConnector('connector48', 'node6', 'node7', 3, 15, 'lightGreen')\n\n    ];\n    public constraints: DiagramConstraints = DiagramConstraints.Default | DiagramConstraints.LineRouting | DiagramConstraints.AvoidLineOverlapping\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public created(): void {\n        this.diagram.fitToPage();\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"600px\" [nodes]=nodes [connectors]=\"connectors\"\n    [constraints]=\"constraints\" [tool]=tool [snapSettings]=snapSettings (created)='created()' >\n    </ejs-diagram>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}