{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    NodeModel,\n    DecoratorModel,\n    DiagramTools,\n    ConnectorModel,\n    SnapConstraints,\n    HistoryEntry\n} from '@syncfusion/ej2-diagrams';\nimport {\n    DropDownList\n} from '@syncfusion/ej2-dropdowns';\n\n/**\n * Sample for history manager\n */\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    public tool = DiagramTools.ZoomPan;\n    public snapSettings = { constraints: SnapConstraints.None };\n    public created(): void {\n        this.diagram.fitToPage();\n    }\n    public nodes: NodeModel[] = [\n        {\n            id: 'node1', offsetX: 400, offsetY: 30, style: { fill: '#FFB2B2', strokeColor: '#FFB2B2' }, width: 70, height: 40,\n            shape: { type: 'Flow', shape: 'Terminator' },\n            annotations: [{ id: 'label1', content: 'Start' }],\n        },\n        {\n            id: 'node2', offsetX: 400, offsetY: 100, style: { fill: '#DCDCDC', strokeColor: '#DCDCDC' },\n            shape: { type: 'Flow', shape: 'Process' }, annotations: [{ id: 'label1', content: 'Design' }],\n            ports: [{ id: 'designPort', offset: { x: 0, y: 0.5 } }]\n        },\n        {\n            id: 'node3', offsetX: 400, offsetY: 180, style: { fill: '#DCDCDC', strokeColor: '#DCDCDC' },\n            annotations: [{ id: 'label1', content: 'Coding' }],\n            shape: { type: 'Flow', shape: 'Process' }, ports: [{ id: 'codingPort', offset: { x: 0, y: 0.5 } }]\n        },\n        {\n            id: 'node4', offsetX: 400, offsetY: 260, style: { fill: '#DCDCDC', strokeColor: '#DCDCDC' },\n            annotations: [{ id: 'label1', content: 'Testing' }], shape: { type: 'Flow', shape: 'Process' }\n        },\n        {\n            id: 'node5', offsetX: 400, offsetY: 340, style: { fill: '#A2D8B0', strokeColor: '#A2D8B0' }, width: 80, height: 60,\n            annotations: [{ id: 'label1', content: 'Errors?' }], shape: { type: 'Flow', shape: 'Decision' }\n        },\n        {\n            id: 'node6', offsetX: 400, offsetY: 430, style: { fill: '#FFB2B2', strokeColor: '#FFB2B2' }, width: 70, height: 40,\n            annotations: [{ id: 'label1', content: 'End' }], shape: { type: 'Flow', shape: 'Terminator' }\n        },\n        {\n            id: 'node7', width: 100, offsetX: 220, offsetY: 180, style: { fill: '#A2D8B0', strokeColor: '#A2D8B0' }, height: 60,\n            annotations: [{ id: 'label1', content: 'Design Error?' }], shape: { type: 'Flow', shape: 'Decision' },\n            ports: [\n                { id: 'porterror', offset: { x: 0.5, y: 0 } },\n                { id: 'portcoding', offset: { x: 1, y: 0.5 } },\n                { id: 'portdesign', offset: { x: 0.5, y: 1 } }\n            ]\n        }\n    ];\n\n    public connectors: ConnectorModel[] = [\n        { id: 'connector1', sourceID: 'node1', targetID: 'node2' },\n        { id: 'connector2', sourceID: 'node2', targetID: 'node3' },\n        { id: 'connector3', sourceID: 'node3', targetID: 'node4' },\n        { id: 'connector4', sourceID: 'node4', targetID: 'node5' },\n        {\n            id: 'connector5', sourceID: 'node5', targetID: 'node6',\n            annotations: [{ content: 'No', style: { fill: 'white' } }]\n        },\n        {\n            id: 'connector6', sourceID: 'node5', targetID: 'node7', type: 'Orthogonal',\n            segments: [{ type: 'Orthogonal', length: 150, direction: 'Left' }],\n            annotations: [{ content: 'Yes', style: { fill: 'white' } }]\n        },\n        {\n            id: 'connector7', sourceID: 'node7', targetID: 'node3', sourcePortID: 'portcoding',\n            targetPortID: 'codingPort', type: 'Orthogonal',\n            segments: [{ type: 'Orthogonal', length: 10, direction: 'Left' }],\n            annotations: [{ content: 'No', style: { fill: 'white' } }]\n        },\n        {\n            id: 'connector8', sourceID: 'node7', targetID: 'node2', sourcePortID: 'porterror',\n            targetPortID: 'designPort', type: 'Orthogonal',\n            annotations: [{ content: 'Yes', style: { fill: 'white' } }]\n        }\n    ];\n    //initialization of the Diagram.\n\n    public getNodeDefaults(obj: NodeModel): NodeModel {\n        obj.annotations[0].style.color = '#111111';\n        return obj;\n    }\n    public getValue(): void {\n        let undoStack: HistoryEntry[] = this.diagram.historyManager.undoStack;\n        let redoStack: HistoryEntry[] = this.diagram.historyManager.redoStack;\n        let undo: {}[] = [];\n        for (let i: number = 0; i < undoStack.length; i++) {\n            undo.push({ 'text': undoStack[i].type, 'value': undoStack[i].type });\n        }\n\n        let redo: {}[] = [];\n        for (let i: number = 0; i < redoStack.length; i++) {\n            redo.push({ 'text': redoStack[i].type, 'value': redoStack[i].type });\n        }\n        let undoButton = (document.getElementById('undo') as any).ej2_instances[0];\n        let redoButton = (document.getElementById('redo') as any).ej2_instances[0];\n\n        undoButton.disabled = undo.length ? false : true;\n        redoButton.disabled = redo.length ? false : true;\n        let itemsCount: number = this.diagram.historyManager.stackLimit ? this.diagram.historyManager.stackLimit : 0;\n        let undoList: DropDownList = (document.getElementById('undoList') as any).ej2_instances[0];\n        undoList.dataSource = undo;\n        undoList.fields = { text: 'text', value: 'text' };\n        undoList.index = 0;\n        undoList.dataBind();\n\n        let redoList: DropDownList = (document.getElementById('redoList') as any).ej2_instances[0];\n        redoList.dataSource = redo;\n        redoList.fields = { text: 'text', value: 'text' };\n        redoList.index = 0;\n        redoList.dataBind();\n    }\n\n    public stackLimit(args): void {\n        this.diagram.setStackLimit(args.value);\n\n    }\n\n    public redoButton(): void {\n        this.diagram.redo();\n    };\n\n    public undoButton(): void {\n        this.diagram.undo();\n    };\n\n    public clearHistory(): void {\n        this.diagram.clearHistory();\n        this.getValue();\n    };\n\n    public startGroupAction(): void {\n        let startGroupAction = (document.getElementById('startGroupAction') as any).ej2_instances[0];\n        if (startGroupAction.element.textContent === 'Start Group Action') {\n            startGroupAction.content = 'End Group Action';\n            this.diagram.startGroupAction();\n        } else {\n            this.diagram.endGroupAction();\n            startGroupAction.content = 'Start Group Action';\n        }\n        this.diagram.dataBind();\n    };\n    public endGroupAction(): void {\n        this.diagram.endGroupAction();\n    };\n    public historyChange(): void {\n        this.getValue();\n    };\n}","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-8 control-section\" style=\"border-right: 1px solid #D7D7D7\">\n    <style>\n        #historyPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #historyControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n\n        #historyPropertySection .listbox {\n            width: 100%;\n            height: 50%;\n        }\n\n        #historyPropertySection .heading {\n            color: #807f7f;\n            font-size: 15px;\n            height: 50px;\n            width: 100%;\n            border-bottom: 1px solid #d9dedd;\n            padding: 10px;\n        }\n    </style>\n\n    <div id=\"historyControlSection\" class=\"content-wrapper\" style=\"width: 100%\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"580px\" [nodes]=\"nodes\" [connectors]=\"connectors\" (getNodeDefaults)=\"getNodeDefaults\"\n            [snapSettings]=\"snapSettings\" (historyChange)=\"historyChange()\"  (created)=\"created()\"></ejs-diagram>\n    </div>\n</div>\n<div id=\"historyPropertySection\" class=\"col-lg-4 property-section\" style=\"padding-right: 0px\">\n    <div class=\"property-panel-header\">\n        History manager settings\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row property-panel-content\">\n            <div class=\"row\">\n                <div class=\"listbox\" style=\"height:100%;border: 1px solid #e0e0e0\">\n                    <div class=\"heading\" style=\"height:40px\">\n                        <span>\n                            Undo Stack\n                        </span>\n                        <div style=\"float: right; margin-top: -5px\">\n                            <button ejs-button id=\"undo\" style=\"width:100%\" disabled=true (click)=\"undoButton()\">\n                                Undo\n                            </button>\n                        </div>\n                    </div>\n                    <ejs-listview #undoList id=\"undoList\" height=\"180px\"></ejs-listview>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div class=\"listbox\" style=\"height:100%;border: 1px solid #e0e0e0\">\n                    <div class=\"heading\" style=\"height:40px\">\n                        <span>\n                            Redo Stack\n                        </span>\n                        <div style=\"float: right; margin-top: -5px\">\n                            <button ejs-button id=\"redo\" style=\"width:100%\" disabled=true (click)=\"redoButton()\">\n                                Redo\n                            </button >\n                        </div>\n                    </div>\n                    <ejs-listview #redoList id=\"redoList\" height=\"180px\"></ejs-listview>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div style=\"display: table;height: 35px; padding-left: 0px\" class=\"col-xs-6\">\n                    <div style=\"display: table-cell; vertical-align: middle\">Stack Limit</div>\n                </div>\n                <div class=\"col-xs-6\" style=\"padding-left: 0px; padding-right: 0px\">\n                    <ejs-numerictextbox id=\"StackLimit\" value=\"0\" step=\"1\" format=\"###.##\" (change)=\"stackLimit($event)\" [min]=\"0\"></ejs-numerictextbox>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div class=\"col-xs-6\" style=\"padding-left: 0px\">\n                    <button ejs-button title=\"startGroupAction\" id=\"startGroupAction\" [isToggle]=\"true\" (click)=\"startGroupAction()\" type=\"Button\" style=\"width:100%;overflow: hidden;text-overflow: ellipsis\">Start Group Action</button></div>\n                        <div class=\"col-xs-6\" style=\"padding-left: 0px; padding-right: 0px\">\n                            <button ejs-button title=\"ClearHistory\" id=\"ClearHistory\" type=\"Button\" (click)=\"clearHistory()\">Clear History</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}