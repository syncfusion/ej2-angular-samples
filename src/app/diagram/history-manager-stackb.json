{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    NodeModel,\n    DiagramTools,\n    ConnectorModel,\n    SnapConstraints,\n    HistoryEntry,\n    FlowShapes,\n    UndoRedo,\n    Diagram,\n} from '@syncfusion/ej2-diagrams';\nimport {\n    DropDownList\n} from '@syncfusion/ej2-dropdowns';\n\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { ListViewModule } from '@syncfusion/ej2-angular-lists';\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\nDiagram.Inject(UndoRedo);\n/**\n * Sample for history manager\n */\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [DiagramModule, ButtonModule, ListViewModule, NumericTextBoxModule,  ]\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    public tool = DiagramTools.ZoomPan;\n    public snapSettings = { constraints: SnapConstraints.None };\n    public created(): void {\n        this.diagram.fitToPage();\n    }\n\n    // Helper function to create a NodeModel with default parameters\n    private createNode(\n        id: string,\n        offsetX: number,\n        offsetY: number,\n        fill: string,\n        strokeColor: string,\n        shape: FlowShapes,\n        content: string,\n        width: number = 70,\n        height: number = 40,\n        ports: any[] = []): NodeModel {\n        return {\n            id,\n            offsetX,\n            offsetY,\n            style: { fill, strokeColor },\n            width,\n            height,\n            shape: { type: 'Flow', shape: shape },\n            annotations: [{ content }],\n            ports\n        };\n    }\n\n    // Initialize Diagram Nodes using the createNode function\n    public nodes: NodeModel[] = [\n        this.createNode('node1', 400, 30, '#FFB2B2', '#FFB2B2', 'Terminator', 'Start'),\n        this.createNode('node2', 400, 100, '#DCDCDC', '#DCDCDC', 'Process', 'Design', undefined, undefined, [{ id: 'designPort', offset: { x: 0, y: 0.5 } }]),\n        this.createNode('node3', 400, 180, '#DCDCDC', '#DCDCDC', 'Process', 'Coding', undefined, undefined, [{ id: 'codingPort', offset: { x: 0, y: 0.5 } }]),\n        this.createNode('node4', 400, 260, '#DCDCDC', '#DCDCDC', 'Process', 'Testing'),\n        this.createNode('node5', 400, 340, '#A2D8B0', '#A2D8B0', 'Decision', 'Errors?', 80, 60),\n        this.createNode('node6', 400, 430, '#FFB2B2', '#FFB2B2', 'Terminator', 'End'),\n        this.createNode('node7', 220, 180, '#A2D8B0', '#A2D8B0', 'Decision', 'Design Error?', 100, 60, [\n            { id: 'porterror', offset: { x: 0.5, y: 0 } },\n            { id: 'portcoding', offset: { x: 1, y: 0.5 } },\n            { id: 'portdesign', offset: { x: 0.5, y: 1 } }\n        ])\n    ];\n\n    // Helper function to create a ConnectorModel with default parameters\n    private createConnector(\n        id: string,\n        sourceID: string,\n        targetID: string,\n        annotations: any[],\n        segments: any[] = [],\n        sourcePortID: string = '',\n        targetPortID: string = ''): ConnectorModel {\n        return {\n            id,\n            sourceID,\n            targetID,\n            annotations,\n            type: 'Orthogonal',\n            segments,\n            sourcePortID,\n            targetPortID\n        };\n    }\n\n    // Common labels for connectors\n    public noLabel = [{ content: 'No', style: { fill: 'white' } }];\n    public yesLabel = [{ content: 'Yes', style: { fill: 'white' } }];\n\n    // Initialize Diagram Connectors using the createConnector function\n    public connectors: ConnectorModel[] = [\n        this.createConnector('connector1', 'node1', 'node2', []),\n        this.createConnector('connector2', 'node2', 'node3', []),\n        this.createConnector('connector3', 'node3', 'node4', []),\n        this.createConnector('connector4', 'node4', 'node5', []),\n        this.createConnector('connector5', 'node5', 'node6', this.noLabel),\n        this.createConnector('connector6', 'node5', 'node7', this.yesLabel, [{ type: 'Orthogonal', length: 150, direction: 'Left' }]),\n        this.createConnector('connector7', 'node7', 'node3', this.noLabel, [{ type: 'Orthogonal', length: 10, direction: 'Left' }], 'portcoding', 'codingPort'),\n        this.createConnector('connector8', 'node7', 'node2', this.yesLabel, [], 'porterror', 'designPort')\n    ];\n    // Gets default properties for a node\n    public getNodeDefaults(obj: NodeModel): NodeModel {\n        obj.annotations[0].style.color = '#111111';\n        return obj;\n    }\n    // Retrieves undo and redo stacks and updates UI\n    public updateHistoryLists(): void {\n        const { undoStack, redoStack } = this.diagram.historyManager;\n\n        const undo = this.mapHistoryEntriesToDataSource(undoStack);\n        const redo = this.mapHistoryEntriesToDataSource(redoStack);\n\n        this.updateButtonState('undo', undo.length > 0);\n        this.updateButtonState('redo', redo.length > 0);\n\n        this.updateDropDownList('undoList', undo);\n        this.updateDropDownList('redoList', redo);\n    }\n\n    private mapHistoryEntriesToDataSource(entries: HistoryEntry[]): { text: string, value: string }[] {\n        return entries.map(entry => ({ text: entry.type, value: entry.type }));\n    }\n\n    private updateButtonState(id: string, isEnabled: boolean): void {\n        const button = (document.getElementById(id) as any)?.ej2_instances[0];\n        if (button) {\n            button.disabled = !isEnabled;\n        }\n    }\n\n    private updateDropDownList(id: string, dataSource: { text: string, value: string }[]): void {\n        const list = (document.getElementById(id) as any)?.ej2_instances[0] as DropDownList;\n        if (list) {\n            list.dataSource = dataSource;\n            list.fields = { text: 'text', value: 'value' };\n            list.index = 0;\n            list.dataBind();\n        }\n    }\n    // Sets stack limit for diagram history\n    public stackLimit(args): void {\n        this.diagram.setStackLimit(args.value);\n\n    }\n    // Redoes the last action\n    public redoButton(): void {\n        this.diagram.redo();\n    };\n    // Undo the last action\n    public undoButton(): void {\n        this.diagram.undo();\n    };\n    // Clears the entire history\n    public clearHistory(): void {\n        this.diagram.clearHistory();\n        this.updateHistoryLists();\n    };\n    // Toggle between starting and ending a group action\n    public startGroupAction(): void {\n        let startGroupAction = (document.getElementById('startGroupAction') as any).ej2_instances[0];\n        if (startGroupAction.element.textContent === 'Start Group Action') {\n            startGroupAction.content = 'End Group Action';\n            this.diagram.startGroupAction();\n        } else {\n            this.diagram.endGroupAction();\n            startGroupAction.content = 'Start Group Action';\n        }\n        this.diagram.dataBind();\n    };\n    // Ends a group action\n    public endGroupAction(): void {\n        this.diagram.endGroupAction();\n    };\n\n    // Handles history change events\n    public historyChange(): void {\n        this.updateHistoryLists();\n    };\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section\" style=\"border-right: 1px solid #D7D7D7\">\n    <style>\n        #historyPropertySection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #historyControlSection.content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n\n        #historyPropertySection .listbox {\n            width: 100%;\n            height: 50%;\n        }\n\n        #historyPropertySection .heading {\n            color: #807f7f;\n            font-size: 15px;\n            height: 50px;\n            width: 100%;\n            border-bottom: 1px solid #d9dedd;\n            padding: 10px;\n        }\n    </style>\n\n    <div id=\"historyControlSection\" class=\"content-wrapper\" style=\"width: 100%\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"580px\" [nodes]=\"nodes\" [connectors]=\"connectors\" (getNodeDefaults)=\"getNodeDefaults\"\n            [snapSettings]=\"snapSettings\" (historyChange)=\"historyChange()\"  (created)=\"created()\"></ejs-diagram>\n    </div>\n</div>\n<div id=\"historyPropertySection\" class=\"col-lg-4 property-section\" style=\"padding-right: 0px\">\n    <div class=\"property-panel-header\">\n        History manager settings\n    </div>\n    <div class=\"row property-panel-content\" id=\"appearance\">\n        <div class=\"row property-panel-content\">\n            <div class=\"row\">\n                <div class=\"listbox\" style=\"height:100%;border: 1px solid #e0e0e0\">\n                    <div class=\"heading\" style=\"height:40px\">\n                        <span>\n                            Undo Stack\n                        </span>\n                        <div style=\"float: right; margin-top: -5px\">\n                            <button ejs-button id=\"undo\" style=\"width:100%\" disabled=true (click)=\"undoButton()\">\n                                Undo\n                            </button>\n                        </div>\n                    </div>\n                    <ejs-listview #undoList id=\"undoList\" height=\"180px\"></ejs-listview>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div class=\"listbox\" style=\"height:100%;border: 1px solid #e0e0e0\">\n                    <div class=\"heading\" style=\"height:40px\">\n                        <span>\n                            Redo Stack\n                        </span>\n                        <div style=\"float: right; margin-top: -5px\">\n                            <button ejs-button id=\"redo\" style=\"width:100%\" disabled=true (click)=\"redoButton()\">\n                                Redo\n                            </button >\n                        </div>\n                    </div>\n                    <ejs-listview #redoList id=\"redoList\" height=\"180px\"></ejs-listview>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div style=\"display: table;height: 35px; padding-left: 0px\" class=\"col-xs-6\">\n                    <div style=\"display: table-cell; vertical-align: middle\">Stack Limit</div>\n                </div>\n                <div class=\"col-xs-6\" style=\"padding-left: 0px; padding-right: 0px\">\n                    <ejs-numerictextbox id=\"StackLimit\" value=\"0\" step=\"1\" format=\"###.##\" (change)=\"stackLimit($event)\" [min]=\"0\"></ejs-numerictextbox>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 10px\">\n                <div class=\"col-xs-6\" style=\"padding-left: 0px\">\n                    <button ejs-button title=\"startGroupAction\" id=\"startGroupAction\" [isToggle]=\"true\" (click)=\"startGroupAction()\" type=\"Button\" style=\"width:100%;overflow: hidden;text-overflow: ellipsis\">Start Group Action</button></div>\n                        <div class=\"col-xs-6\" style=\"padding-left: 0px; padding-right: 0px\">\n                            <button ejs-button title=\"ClearHistory\" id=\"ClearHistory\" type=\"Button\" (click)=\"clearHistory()\">Clear History</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}