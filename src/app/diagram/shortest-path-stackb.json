{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport {\n    DiagramComponent, DiagramModule,\n    Node, NodeConstraints, NodeModel, AnnotationConstraints, ConnectorConstraints,\n    ConnectorModel, SnapConstraints, IClickEventArgs, IMouseEventArgs, SnapSettingsModel,\n    DiagramConstraints\n} from '@syncfusion/ej2-angular-diagrams';\nimport { SwitchModule } from '@syncfusion/ej2-angular-buttons';\nimport { ChangeEventArgs } from '@syncfusion/ej2-buttons';\n\n\n\n/**\n * Sample for Shortest path visualization\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, SwitchModule, ]\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram!: DiagramComponent;\n    public constraints: DiagramConstraints = DiagramConstraints.Default &~ DiagramConstraints.UndoRedo;\n    // Constants for colors and styles\n    private readonly nodeHighlightFill = '#6495ED';\n    private readonly nodeHighlightStroke = '#4472C4';\n    private readonly nodeDefaultFill = 'white';\n    private readonly nodeDefaultStroke = '#333333';\n    private readonly nodeErrorFill = '#FF6565';\n    private readonly nodeErrorStroke = '#EE3636';\n    private readonly connectorHighlightStroke = '#4472C4';\n    private readonly connectorDefaultStroke = '#333333';\n\n    // Diagram configuration\n    public diagramWidth: string = '100%';\n    public diagramHeight: string = '700px';\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n\n    private isDirectedGraph: boolean = true;\n    private dashIntervals: Map<string, any> = new Map();\n    private graph: Map<string, string[]> = new Map();\n    private selectedNode: string = 'A';\n    private highlightedNodes: NodeModel[] = [];\n    private highlightedConnectors: ConnectorModel[] = [];\n    private previousNode: NodeModel | null = null;\n\n\n    ngOnInit(): void {\n        this.buildGraph();\n    }\n\n    ngOnDestroy(): void {\n        // Clean up intervals\n        this.dashIntervals.forEach(interval => clearInterval(interval));\n        this.dashIntervals.clear();\n    }\n\n    public onDiagramCreated(): void {\n        this.diagram.fitToPage();\n    }\n\n    private createNode(id: string, x: number, y: number): NodeModel {\n        const isSelected = id === 'A';\n        return {\n            id: id,\n            offsetX: x,\n            offsetY: y,\n            width: 50,\n            height: 50,\n            constraints: (NodeConstraints.Default | NodeConstraints.Tooltip) & ~NodeConstraints.Select,\n            tooltip: {\n                openOn: 'Custom',\n                relativeMode: 'Object'\n            },\n            shape: {\n                type: 'Basic',\n                shape: 'Ellipse'\n            },\n            style: isSelected ? {\n                strokeColor: this.nodeHighlightStroke,\n                strokeWidth: 3,\n                fill: this.nodeHighlightFill\n            } : {\n                fill: this.nodeDefaultFill,\n            },\n            annotations: [{\n                content: id,\n                constraints: AnnotationConstraints.ReadOnly,\n                style: {\n                    color: 'black',\n                    fontSize: 16\n                }\n            }]\n        };\n    }\n\n    public createNodes: NodeModel[] = [\n        this.createNode('A', 75, 75),\n        this.createNode('B', 384, 300),\n        this.createNode('C', 700, 200),\n        this.createNode('D', 100, 300),\n        this.createNode('E', 825, 20),\n        this.createNode('F', 90, 440),\n        this.createNode('G', 460, 660),\n        this.createNode('H', 270, 530),\n        this.createNode('I', 750, 350),\n        this.createNode('J', 1000, 450),\n        this.createNode('K', 750, 450),\n        this.createNode('L', 929, 210),\n        this.createNode('X', 420, 100),\n        this.createNode('Y', 850, 620)\n    ];\n\n    private createConnector(sourceId: string, targetId: string): ConnectorModel {\n        return {\n            id: `${sourceId}${targetId}`,\n            sourceID: sourceId,\n            targetID: targetId,\n            type: 'Straight',\n            style: {\n                strokeColor: this.connectorDefaultStroke,\n                strokeWidth: 2,\n                strokeDashArray: '5,5'\n            },\n            annotations: [{\n                content: '',\n                style: {\n                    color: 'white',\n                    fontSize: 12,\n                    bold: true,\n                    fill: 'transparent'\n                },\n                offset: 0.5,\n                constraints: AnnotationConstraints.ReadOnly,\n                alignment: 'Center',\n                width: 20,\n                height: 20\n            }],\n            constraints: ConnectorConstraints.ReadOnly,\n            targetDecorator: {\n                shape: 'Arrow'\n            }\n        };\n    }\n\n    public createConnectors: ConnectorModel[] = [\n        this.createConnector('A', 'B'),\n        this.createConnector('A', 'D'),\n        this.createConnector('A', 'X'),\n        this.createConnector('B', 'D'),\n        this.createConnector('B', 'H'),\n        this.createConnector('B', 'X'),\n        this.createConnector('C', 'L'),\n        this.createConnector('C', 'X'),\n        this.createConnector('D', 'F'),\n        this.createConnector('E', 'X'),\n        this.createConnector('G', 'H'),\n        this.createConnector('G', 'Y'),\n        this.createConnector('H', 'F'),\n        this.createConnector('I', 'J'),\n        this.createConnector('I', 'K'),\n        this.createConnector('I', 'L'),\n        this.createConnector('J', 'L'),\n        this.createConnector('K', 'Y'),\n        this.createConnector('B', 'K'),\n        this.createConnector('B', 'C'),\n        this.createConnector('G', 'K'),\n        this.createConnector('H', 'I')\n    ];\n\n    private buildGraph(): void {\n        const nodeIds = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'X', 'Y'];\n\n        // Initialize graph\n        nodeIds.forEach(nodeId => {\n            this.graph.set(nodeId, []);\n        });\n\n        const edges = [\n            { from: 'A', to: 'B' }, { from: 'A', to: 'D' }, { from: 'A', to: 'X' },\n            { from: 'B', to: 'D' }, { from: 'B', to: 'H' }, { from: 'B', to: 'X' },\n            { from: 'B', to: 'C' }, { from: 'B', to: 'K' }, { from: 'C', to: 'L' },\n            { from: 'C', to: 'X' }, { from: 'D', to: 'F' }, { from: 'E', to: 'X' },\n            { from: 'F', to: 'H' }, { from: 'G', to: 'H' }, { from: 'G', to: 'Y' },\n            { from: 'G', to: 'K' }, { from: 'H', to: 'I' }, { from: 'I', to: 'J' },\n            { from: 'I', to: 'K' }, { from: 'I', to: 'L' }, { from: 'J', to: 'L' },\n            { from: 'K', to: 'Y' }\n        ];\n\n        // Build bidirectional adjacency list\n        edges.forEach(edge => {\n            this.graph.get(edge.from)?.push(edge.to);\n            this.graph.get(edge.to)?.push(edge.from);\n        });\n    }\n\n    public onGraphTypeChanged(args: ChangeEventArgs): void {\n        this.isDirectedGraph = args.checked as boolean;\n\n        this.diagram.connectors.forEach(connector => {\n            // Update stroke style & decorator\n            if (this.isDirectedGraph) {\n                connector.targetDecorator!.shape = 'Arrow';\n                connector.style!.strokeWidth = 2;\n                connector.style!.strokeDashArray = '5,5';\n                connector.style!.strokeColor = this.connectorDefaultStroke;\n            }\n            else {\n                connector.targetDecorator!.shape = 'None';\n                connector.style!.strokeColor = this.connectorDefaultStroke;\n                connector.style!.strokeDashArray = '';\n                connector.style!.strokeWidth = 2;\n                // Stop animation for undirected graph\n                this.removeConnectorDash(connector.id + '_path');\n            }\n        });\n\n        this.diagram.dataBind();\n    }\n\n    public onMouseEnter(args: IMouseEventArgs): void {\n        if (args.actualObject && args.actualObject instanceof Node) {\n            const hoverNode = args.actualObject as NodeModel;\n            this.previousNode = hoverNode;\n\n            if (hoverNode.id !== this.selectedNode) {\n                this.removeStepNumbers();\n                this.resetStyles();\n                const { path, distance } = this.findShortestPath(this.selectedNode, hoverNode.id!);\n\n                if (path.length > 0) {\n                    const pathString = path.map(p => this.getNodeLabel(p)).join(\" → \");\n                    // Update tooltip\n                    hoverNode.tooltip!.content = pathString;\n                    this.diagram.showTooltip(hoverNode);\n                    this.highlightNodes(path);\n                    this.addStepNumbersToConnectors(path);\n                    this.highlightPath(path);\n                }\n                else {\n                    hoverNode.tooltip!.content = 'No path found';\n                    this.diagram.showTooltip(hoverNode);\n                    // Show error state\n                    hoverNode.style!.fill = this.nodeErrorFill;\n                    hoverNode.style!.strokeColor = this.nodeErrorStroke;\n                    if (!this.highlightedNodes.some((node: NodeModel) => node.id === hoverNode.id)) {\n                        this.highlightedNodes.push(hoverNode);\n                    }\n                    const rootNode = this.diagram.getObject(this.selectedNode) as NodeModel;\n                    if (rootNode) {\n                        rootNode.style!.fill = this.nodeErrorFill;\n                        rootNode.style!.strokeColor = this.nodeErrorStroke;\n                    }\n                }\n                this.diagram.dataBind();\n            }\n        }\n    }\n\n    public onMouseLeave(args: IMouseEventArgs): void {\n        if (this.previousNode) {\n            this.diagram.hideTooltip(this.previousNode);\n\n            const selectedNodeObj = this.diagram.getObject(this.selectedNode) as NodeModel;\n            if (selectedNodeObj) {\n                selectedNodeObj.style!.strokeColor = this.nodeHighlightStroke;\n                selectedNodeObj.style!.fill = this.nodeHighlightFill;\n                selectedNodeObj.style!.strokeWidth = 4;\n            }\n\n            this.resetStyles();\n            this.removeStepNumbers();\n            this.diagram.dataBind();\n        }\n    }\n\n    public onNodeClicked(args: IClickEventArgs): void {\n        if (args.element && args.element instanceof Node) {\n            const clickedNode: NodeModel = args.element as any;\n\n            this.previousSelectedNodeUpdated();\n            this.selectedNode = clickedNode.id!;\n\n            clickedNode.style!.strokeColor = this.nodeHighlightStroke;\n            clickedNode.style!.strokeWidth = 3;\n\n            this.resetStyles();\n            this.removeStepNumbers();\n            this.diagram.dataBind();\n        }\n    }\n\n    private previousSelectedNodeUpdated(): void {\n        const previousSelectedNode = this.diagram.nodes.find((node: NodeModel) => node.id === this.selectedNode);\n        if (previousSelectedNode) {\n            previousSelectedNode.style!.strokeColor = this.nodeDefaultStroke;\n            previousSelectedNode.style!.strokeWidth = 2;\n            previousSelectedNode.style!.fill = this.nodeDefaultFill;\n        }\n    }\n\n    private resetStyles(): void {\n        // Reset highlighted connectors\n        this.highlightedConnectors.forEach(connector => {\n            connector.style!.strokeColor = this.connectorDefaultStroke;\n            connector.style!.strokeWidth = 2;\n            if (this.isDirectedGraph) {\n                connector.style!.strokeDashArray = '5,5';\n                this.removeMovingDash(connector.id + '_path');\n            }\n        });\n        this.highlightedConnectors = [];\n\n        // Reset highlighted nodes\n        this.highlightedNodes.forEach(node => {\n            if (node.id !== this.selectedNode) {\n                node.style!.fill = this.nodeDefaultFill;\n                node.style!.strokeColor = this.nodeDefaultStroke;\n                node.style!.strokeWidth = 2;\n            }\n        });\n        this.highlightedNodes = [];\n    }\n\n    private getNeighbors(nodeId: string, directed: boolean): string[] {\n        if (!directed) {\n            // For undirected graph, return all connected nodes\n            return this.graph.get(nodeId) || [];\n        } else {\n            // For directed graph, only return nodes that this node points to\n            const neighbors: string[] = [];\n            const outgoingConnectors = this.diagram.connectors.filter((connector: ConnectorModel) => connector.sourceID === nodeId);\n            outgoingConnectors.forEach(connector => {\n                if (connector.targetID) {\n                    neighbors.push(connector.targetID);\n                }\n            });\n            return neighbors;\n        }\n    }\n\n    private findShortestPath(start: string, end: string): { path: string[], distance: number } {\n        if (!this.graph.has(start) || !this.graph.has(end)) {\n            return { path: [], distance: 0 };\n        }\n\n        if (start === end) {\n            return { path: [start], distance: 0 };\n        }\n\n        const queue: string[] = [start];\n        const visited = new Set<string>([start]);\n        const previous = new Map<string, string>();\n        const distances = new Map<string, number>();\n        distances.set(start, 0);\n\n        while (queue.length > 0) {\n            const current = queue.shift()!;\n            const neighbors = this.getNeighbors(current, this.isDirectedGraph);\n\n            for (const neighbor of neighbors) {\n                if (!visited.has(neighbor)) {\n                    visited.add(neighbor);\n                    previous.set(neighbor, current);\n                    distances.set(neighbor, distances.get(current)! + 1);\n                    queue.push(neighbor);\n\n                    if (neighbor === end) {\n                        break;\n                    }\n                }\n            }\n\n            if (visited.has(end)) {\n                break;\n            }\n        }\n\n        const path: string[] = [];\n        if (visited.has(end)) {\n            let currentNode: string | undefined = end;\n            while (currentNode !== undefined) {\n                path.unshift(currentNode);\n                currentNode = previous.get(currentNode);\n            }\n        }\n\n        return { path, distance: path.length > 0 ? path.length - 1 : 0 };\n    }\n\n    private highlightNodes(path: string[]): void {\n        path.forEach(nodeId => {\n            const node = this.diagram.getObject(nodeId) as NodeModel;\n            if (node) {\n                node.style!.fill = this.nodeHighlightFill;\n                node.style!.strokeColor = this.nodeHighlightStroke;\n                node.style!.strokeWidth = 3;\n                this.highlightedNodes.push(node);\n            }\n        });\n    }\n\n    private findConnector(sourceId: string, targetId: string): ConnectorModel | undefined {\n        return this.diagram.connectors.find((connector: ConnectorModel) =>\n            (connector.sourceID === sourceId && connector.targetID === targetId) ||\n            (!this.isDirectedGraph && connector.sourceID === targetId && connector.targetID === sourceId)\n        );\n    }\n\n    private highlightPath(path: string[]): void {\n        for (let i = 0; i < path.length - 1; i++) {\n            const connector = this.findConnector(path[i], path[i + 1]);\n            if (connector) {\n                connector.style!.strokeColor = this.connectorHighlightStroke;\n                connector.style!.strokeWidth = 4;\n                this.highlightedConnectors.push(connector);\n\n                if (this.isDirectedGraph) {\n                    connector.style!.strokeDashArray = '8,4';\n                    this.applyMovingDash(connector.id + '_path');\n                }\n            }\n        }\n    }\n\n    private addStepNumbersToConnectors(path: string[]): void {\n        for (let i = 0; i < path.length - 1; i++) {\n            const connector = this.findConnector(path[i], path[i + 1]);\n            if (connector && connector.annotations && connector.annotations.length > 0) {\n                connector.annotations[0].content = (i + 1).toString();\n                connector.annotations[0].style!.fill = this.nodeHighlightStroke;\n            }\n        }\n    }\n\n    private removeStepNumbers(): void {\n        this.diagram.connectors.forEach(connector => {\n            if (connector.annotations && connector.annotations.length > 0) {\n                connector.annotations[0].content = '';\n                connector.annotations[0].style!.fill = 'transparent';\n            }\n        });\n    }\n\n    private getNodeLabel(nodeId: string): string {\n        const node = this.diagram.nodes.find(n => n.id === nodeId);\n        return node?.annotations?.[0]?.content ?? nodeId;\n    }\n\n    private applyMovingDash(pathId: string): void {\n        // Wait for the path to exist in the DOM\n        const applyAnimationInterval: any = setInterval(() => {\n            const element = document.getElementById(pathId);\n            if (element) {\n                let offset = 0;\n                // Store the interval reference for this pathId\n                const interval = setInterval(() => {\n                    offset -= 1;\n                    element.setAttribute('stroke-dashoffset', offset.toString());\n                }, 50);\n                this.dashIntervals.set(pathId, interval);\n                clearInterval(applyAnimationInterval);\n            }\n        }, 10);\n    }\n\n    private removeMovingDash(pathId: string): void {\n        // Wait for the path to exist in the DOM for cleanup\n        const removeAnimationInterval: any = setInterval(() => {\n            const element = document.getElementById(pathId);\n            if (element) {\n                // Clear dash animation interval if it exists\n                const interval = this.dashIntervals.get(pathId);\n                if (interval) {\n                    clearInterval(interval);\n                    this.dashIntervals.delete(pathId);\n                }\n                element.removeAttribute('stroke-dashoffset');\n                clearInterval(removeAnimationInterval);\n            }\n        }, 10);\n    }\n\n    private removeConnectorDash(pathId: string): void {\n        const element = document.querySelector(`[id='${pathId}']`) as SVGPathElement;\n        if (element) {\n            const interval = this.dashIntervals.get(pathId);\n            if (interval) {\n                clearInterval(interval);\n                this.dashIntervals.delete(pathId);\n            }\n            element.removeAttribute('stroke-dashoffset');\n        }\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<div class=\"control-section\" style=\"width: 100%\">\n  <div class=\"switch-container\" style=\"display: flex; align-items: center; justify-content: center; margin: 20px;\">\n    <ejs-switch #graphswitch id=\"graphSwitch\" [checked]=\"true\" (change)=\"onGraphTypeChanged($event)\">\n    </ejs-switch>\n    <label for=\"graphSwitch\" class=\"switch-label\" style=\"margin-left: 10px; font-size: 18px; font-weight: 500;\">Directed Graph</label>\n  </div>\n\n    <ejs-diagram #diagram [width]=\"diagramWidth\" [height]=\"diagramHeight\" [nodes]=\"createNodes\"\n    [connectors]=\"createConnectors\" [snapSettings]=\"snapSettings\" (mouseEnter)=\"onMouseEnter($event)\"\n    (mouseLeave)=\"onMouseLeave($event)\" (click)=\"onNodeClicked($event)\" (created)=\"onDiagramCreated()\"\n    [constraints]=\"constraints\">\n    </ejs-diagram>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}