{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild,Inject } from '@angular/core';\nimport {\n    DiagramComponent, OrthogonalSegmentModel, PaletteModel, PortVisibility,\n    SnapConstraints, SnapSettingsModel, UmlActivityShapeModel, UmlActivityFlows,\n    Diagram, NodeModel, UndoRedo, ConnectorModel, DiagramContextMenu, Rect,\n    StrokeStyleModel, DecoratorModel, PointModel, SymbolInfo, PointPortModel\n} from '@syncfusion/ej2-angular-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { MarginModel } from '@syncfusion/ej2-lineargauge';\nDiagram.Inject(UndoRedo, DiagramContextMenu);\n\n/**\n * Default FlowShape sample\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    constructor() {​​​​​​​\n        \n    }​​​​​​​\n    public initialNode: UmlActivityShapeModel = { type: 'UmlActivity', shape: 'InitialNode' };\n    public action: UmlActivityShapeModel = { type: 'UmlActivity', shape: 'Action' };\n    public forkNode: UmlActivityShapeModel = { type: 'UmlActivity', shape: 'ForkNode' };\n    public decision: UmlActivityShapeModel = { type: 'UmlActivity', shape: 'Decision' };\n    public mergeNode: UmlActivityShapeModel = { type: 'UmlActivity', shape: 'MergeNode' };\n    public joinNode: UmlActivityShapeModel = { type: 'UmlActivity', shape: 'JoinNode' };\n    public finalNode: UmlActivityShapeModel = { type: 'UmlActivity', shape: 'FinalNode' };\n    public objectFlow: UmlActivityFlows = 'Object';\n    public segments1: OrthogonalSegmentModel = [{\n        type: 'Orthogonal', length: 20, direction: 'Bottom' },\n        { type: 'Orthogonal', length: 50, direction: 'Left' }\n    ];\n    public segments2: OrthogonalSegmentModel = [\n        { type: 'Orthogonal', length: 20, direction: 'Bottom' },\n        { type: 'Orthogonal', length: 50, direction: 'Right' }\n    ];\n    public segments3: OrthogonalSegmentModel = [\n        { type: 'Orthogonal', length: 50, direction: 'Bottom' }\n    ];\n    public segments4: OrthogonalSegmentModel = [\n        { type: 'Orthogonal', length: 265, direction: 'Bottom' },\n        { type: 'Orthogonal', length: 50, direction: 'Left' }\n    ];\n\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public expandMode: ExpandMode = 'Multiple';\n    public diagramCreate(args: Object): void {\n        this.addEvents();\n        let rect: Rect = document.getElementById('diagram-space').getBoundingClientRect() as any;\n        let panX: number = (rect.width - rect.x)/ 2;\n        this.diagram.pan(panX, 0);\n    };\n    public symbolMargin: MarginModel = { left: 15, right: 15, top: 15, bottom: 15 };\n\n\n    public umlActivityShapes: NodeModel[] = [\n        { id: 'Action', shape: { type: 'UmlActivity', shape: 'Action' } },\n        { id: 'Decision', shape: { type: 'UmlActivity', shape: 'Decision' } },\n        { id: 'MergeNode', shape: { type: 'UmlActivity', shape: 'MergeNode' } },\n        { id: 'InitialNode', shape: { type: 'UmlActivity', shape: 'InitialNode' } },\n        { id: 'FinalNode', shape: { type: 'UmlActivity', shape: 'FinalNode' } },\n        { id: 'ForkNode', shape: { type: 'UmlActivity', shape: 'ForkNode' } },\n        { id: 'JoinNode', shape: { type: 'UmlActivity', shape: 'JoinNode' } },\n        { id: 'TimeEvent', shape: { type: 'UmlActivity', shape: 'TimeEvent' } },\n        { id: 'AcceptingEvent', shape: { type: 'UmlActivity', shape: 'AcceptingEvent' } },\n        { id: 'SendSignal', shape: { type: 'UmlActivity', shape: 'SendSignal' } },\n        { id: 'ReceiveSignal', shape: { type: 'UmlActivity', shape: 'ReceiveSignal' } },\n        { id: 'StructuredNode', shape: { type: 'UmlActivity', shape: 'StructuredNode' } },\n        { id: 'Note', shape: { type: 'UmlActivity', shape: 'Note' } }\n    ];\n    //Initialize the flowshapes for the symbol palatte\n    public palettes: PaletteModel[] = [\n        { id: 'umlActivity', expanded: true, symbols: this.umlActivityShapes, title: 'UML Shapes' },\n        { id: 'Connector', expanded: true, symbols: this.getConnectors(), title: 'Connectors' },\n    ];\n    public getSymbolInfo(symbol: NodeModel): SymbolInfo {\n        return { fit: true };\n    }\n    public getConnectorStyle(dashArrayed?: boolean) {\n        let style: StrokeStyleModel = {};\n        if (dashArrayed) {\n            style = { strokeWidth: 2, strokeColor: '#757575', strokeDashArray: '4 4', };\n        } else {\n            style = { strokeWidth: 2, strokeColor: '#757575' };\n        }\n        return style;\n    }\n\n    // create and add ports for node.\n    public setPaletteNodeDefaults(symbol: NodeModel): NodeModel {\n        if (symbol.id === 'JoinNode') {\n            symbol.width = 20; symbol.height = 50;\n        } else if (symbol.id === 'ForkNode') {\n            symbol.width = 50; symbol.height = 20;\n        } else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n            symbol.width = 50; symbol.height = 40;\n        } else {\n            symbol.width = 50; symbol.height = 50;\n        }\n        if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n            symbol.style.fill = '#757575';\n        }\n        symbol.style.strokeColor = '#757575';\n        return symbol;\n    }\n\n    // initializes connector symbols to the connector palette in the symbol palette\n    private getConnectors(): ConnectorModel[] {\n        let sourcePoint: PointModel = { x: 0, y: 0 };\n        let targetPoint: PointModel = { x: 40, y: 40 };\n        let targetDecorator: DecoratorModel = { shape: 'Arrow', style: { fill: '#757575', strokeColor: '#757575' } }\n        let connectorSymbols: ConnectorModel[] = [\n            {\n                id: 'Link2', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Orthogonal', style: this.getConnectorStyle(true), targetDecorator: targetDecorator,\n            },\n            {\n                id: 'Link1', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Orthogonal', style: this.getConnectorStyle(), targetDecorator: targetDecorator,\n            },\n            {\n                id: 'Link3', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Straight', style: this.getConnectorStyle(), targetDecorator: targetDecorator,\n            }\n        ];\n        return connectorSymbols;\n    }\n\n    private addEvents(): void {\n        let isMobile: boolean = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            let paletteIcon: HTMLElement = document.getElementById('palette-icon') as HTMLElement;\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', this.openPalette, false);\n            }\n        }\n    }\n    // custom code start\n    private openPalette(): void {\n        let paletteSpace: HTMLElement = document.getElementById('palette-space') as HTMLElement;\n        let isMobile: boolean = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            } else {\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n    // custom code end\n    //Sets the default values of connector\n    public getConnectorDefaults (obj: ConnectorModel): void  {\n        if (obj.id.indexOf('connector') !== -1) {\n            obj.type = 'Orthogonal'; obj.cornerRadius = 10;\n            obj.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n        }\n    }\n    //Sets the default values of node\n    public getNodeDefaults (obj: NodeModel): NodeModel  {\n        obj.ports = getNodePorts(obj);\n        if (obj.ports) {\n            for (let i: number = 0; i < obj.ports.length; i++) {\n                obj.ports[i].visibility = PortVisibility.Hidden;\n            }\n        }\n        if (obj.id === 'Start' || obj.id === 'node2' || obj.id === 'node9' || obj.id === 'node11') {\n            obj.style.fill = '#444';\n        }\n        obj.style.strokeColor = '#444';\n        return obj;\n    }\n}\n\nfunction  getNodePorts(obj: NodeModel): PointPortModel[] {\n    if (obj.id === 'node2' || obj.id === 'node9') {\n        let node2Ports: PointPortModel[] = [\n            { id: 'port1', offset: { x: 0.2, y: 1 } },\n            { id: 'port2', offset: { x: 0.8, y: 1 } },\n            { id: 'port3', offset: { x: 0.2, y: 0 } },\n            { id: 'port4', offset: { x: 0.8, y: 0 } },\n        ];\n        return node2Ports;\n    } else {\n        let ports: PointPortModel[] = [\n            { id: 'portLeft', offset: { x: 0, y: 0.5 } },\n            { id: 'portRight', offset: { x: 1, y: 0.5 } },\n            { id: 'portBottom', offset: { x: 0.5, y: 1 } },\n            { id: 'portTop', offset: { x: 0.5, y: 0 } },\n        ];\n        return ports;\n    }\n}\n","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<script src=\"script/diagram-common.ts\"></script>\n\n<div class=\"control-section\">\n<style>\n    #umlActivityDiagram .sb-mobile-palette {\n        width: 210px;\n        height: 100%;\n        float: left;\n    }\n\n    #umlActivityDiagram .sb-mobile-palette-bar {\n        display: none;\n    }\n\n    #umlActivityDiagram .sb-mobile-diagram {\n        width: calc(100% - 212px);\n        height: 100%;\n        float: left;\n        border: 1px solid rgba(0, 0, 0, 0.12);\n        border-left: none;\n    }\n\n    .container-fluid {\n        padding-bottom: 15px;\n    }\n\n    @media (max-width: 550px) {\n\n        #umlActivityDiagram .sb-mobile-palette {\n            z-index: 19;\n            position: absolute;\n            display: none;\n            transition: transform 300ms linear, visibility 0s linear 300ms;\n            width: 39%;\n            height: 100%;\n        }\n\n        #umlActivityDiagram .sb-mobile-palette-bar {\n            display: block;\n            width: 100%;\n            background: #fafafa;\n            padding: 10px 10px;\n            border: 0.5px solid #e0e0e0;\n            min-height: 40px;\n        }\n\n       #umlActivityDiagram .sb-mobile-diagram {\n            width: 100%;\n            height: 100%;\n            float: left;\n            left: 0px;\n        }\n\n        #palette-icon {\n            font-size: 20px;\n        }\n    }\n\n    #umlActivityDiagram .sb-mobile-palette-open {\n        position: absolute;\n        display: block;\n        right: 15px;\n    }\n\n    @font-face {\n        font-family: 'e-ddb-icons1';\n        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');\n        font-weight: normal;\n        font-style: normal;\n    }\n\n    .e-ddb-icons1 {\n        font-family: 'e-ddb-icons1';\n        speak: none;\n        font-size: 16px;\n        font-style: normal;\n        font-weight: normal;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    .e-toggle-palette::before {\n        content: \"\\e700\"\n    }\n\n    .material #umlActivityDiagram #palette-space .e-accordion {\n        border: none;\n    }\n\n    .material #umlActivityDiagram #palette-space {\n        border: 1px solid rgba(0, 0, 0, 0.12);\n    }\n\n    .bootstrap #umlActivityDiagram .sb-mobile-diagram {\n        height: calc(100% - 17px);\n        margin-top: 5px;\n        border-radius: 4px;\n        border-left: 1px solid rgba(0, 0, 0, 0.12);\n    }\n\n    .fabric #umlActivityDiagram .sb-mobile-diagram {\n        border-left: 1px solid rgba(0, 0, 0, 0.12);\n    }\n</style>\n <div id=\"umlActivityDiagram\" style=\"width: 100%; height: 521px\">\n    <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n    </div>\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <ejs-symbolpalette #symbolpalette id=\"symbolpalette\" [expandMode]=\"expandMode\" [palettes]=\"palettes\" width=\"100%\"\n            height=\"100%\" [symbolHeight]=55 [symbolWidth]=55 [symbolMargin]=\"symbolMargin\" [getNodeDefaults]='setPaletteNodeDefaults'\n            [getSymbolInfo]='getSymbolInfo'>\n        </ejs-symbolpalette>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"100%\" [snapSettings]=snapSettings (created)=\"diagramCreate($event)\"\n            [getConnectorDefaults]='getConnectorDefaults' [getNodeDefaults]='getNodeDefaults'>\n            <e-nodes>\n                <e-node id='Start' [height]=40 [width]=40 [offsetX]=300 [offsetY]=20 [shape]=initialNode>\n                </e-node>\n                <e-node id='ReceiveCall' [height]=40 [width]=105 [shape]=action [offsetX]=300 [offsetY]=100>\n                    <e-node-annotations>\n                        <e-node-annotation content='Receive Customer Call'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='node2' [height]=10 [width]=70 [shape]=forkNode [offsetX]=300 [offsetY]=170>\n                </e-node>\n                <e-node id='Determine' [height]=40 [width]=105 [shape]=action [offsetX]=190 [offsetY]=250>\n                    <e-node-annotations>\n                        <e-node-annotation content='Determine Type of Call'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='Log' [height]=40 [width]=105 [shape]=action [offsetX]=410 [offsetY]=250>\n                    <e-node-annotations>\n                        <e-node-annotation content='Customer Logging a Call'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='node5' [height]=50 [width]=50 [shape]=decision [offsetX]=190 [offsetY]=350>\n                </e-node>\n                <e-node id='transfer_sales' [height]=40 [width]=105 [shape]=action [offsetX]=100 [offsetY]=450>\n                    <e-node-annotations>\n                        <e-node-annotation content='Transfer the Call to Sales'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='transfer_desk' [height]=40 [width]=105 [shape]=action [offsetX]=280 [offsetY]=450>\n                    <e-node-annotations>\n                        <e-node-annotation content='Transfer the Call to Help Desk'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='node8' [height]=50 [width]=50 [shape]=mergeNode [offsetX]=190 [offsetY]=540>\n                </e-node>\n                <e-node id='node9' [height]=10 [width]=70 [shape]=joinNode [offsetX]=300 [offsetY]=630>\n                </e-node>\n                <e-node id='CloseCall' [height]=40 [width]=105 [shape]=action [offsetX]=300 [offsetY]=710>\n                    <e-node-annotations>\n                        <e-node-annotation content='Close Call'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='node11' [height]=40 [width]=40 [shape]=finalNode [offsetX]=300 [offsetY]=800>\n                </e-node>\n            </e-nodes>\n            <e-connectors>\n                <e-connector id='connector1' sourceID='Start' targetID='ReceiveCall'>\n                </e-connector>\n                <e-connector id='connector2' sourceID='ReceiveCall' targetID='node2'>\n                </e-connector>\n                <e-connector id='connector3' sourceID='node2' targetID='Determine' sourcePortID='port1' targetPortID='portTop'\n                    [segments]='segments1'>\n                </e-connector>\n                <e-connector id='connector4' sourceID='node2' targetID='Log' sourcePortID='port2' targetPortID='portTop'\n                    [segments]='segments2'>\n                </e-connector>\n                <e-connector id='connector5' sourceID='Determine' targetID='node5'>\n                </e-connector>\n                <e-connector id='connector6' sourceID='node5' targetID='transfer_sales' sourcePortID='portLeft'\n                    targetPortID='portTop' [shape]=objectFlow>\n                    <e-connector-annotations>\n                        <e-connector-annotation content='Type = New Customer'>\n                        </e-connector-annotation>\n                    </e-connector-annotations>\n                </e-connector>\n                <e-connector id='connector7' sourceID='node5' targetID='transfer_desk' sourcePortID='portRight'\n                    targetPortID='portTop' [shape]=objectFlow>\n                    <e-connector-annotations>\n                        <e-connector-annotation content='Type = Existing Customer'>\n                        </e-connector-annotation>\n                    </e-connector-annotations>\n                </e-connector>\n                <e-connector id='connector8' sourceID='transfer_sales' targetID='node8' sourcePortID='portBottom'\n                    targetPortID='portLeft' [segments]='segments3'>\n                </e-connector>\n                <e-connector id='connector9' sourceID='transfer_desk' targetID='node8' sourcePortID='portBottom'\n                    targetPortID='portRight' [segments]='segments3'>\n                </e-connector>\n                <e-connector id='connector10' sourceID='node8' targetID='node9' sourcePortID='portBottom' targetPortID='port3'>\n                </e-connector>\n                <e-connector id='connector11' sourceID='Log' targetID='node9' sourcePortID='portBottom' targetPortID='port4'\n                    [segments]='segments4'>\n                </e-connector>\n                <e-connector id='connector12' sourceID='node9' targetID='CloseCall'>\n                </e-connector>\n                <e-connector id='connector13' sourceID='CloseCall' targetID='node11'>\n                </e-connector>\n            </e-connectors>\n        </ejs-diagram>\n    </div>\n  </div>\n</div>\n","app.component.css":".sb-mobile-palette {\n    width:240px;\n    height:100%;\n    float:left;\n}\n\n.sb-mobile-palette-bar {\n    display: none;\n}\n\n.sb-mobile-diagram {\n    width:calc(100% - 242px);\n    height: 100%;\n    float: left;\n}\n\n@media (max-width: 550px) {\n\n    .sb-mobile-palette {\n        z-index: 19;\n        position: absolute;\n        display: none;\n        transition: transform 300ms linear, visibility 0s linear 300ms;\n        width:39%;\n        height:100%;\n    }\n    \n    .sb-mobile-palette-bar {\n        display: block;\n        width: 100%;\n        background:#fafafa;\n        padding: 10px 10px;\n        border:0.5px solid #e0e0e0;\n        min-height: 40px;\n    }\n    \n    .sb-mobile-diagram {\n        width: 100%;\n        height: 100%;\n        float: left;\n        left: 0px;\n    }\n\n    #palette-icon {\n        font-size: 20px; \n    }\n}\n    \n.sb-mobile-palette-open {\n    position: absolute;\n    display: block;\n    right: 15px;\n}\n\n@font-face {\n    font-family: 'e-ddb-icons1';\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n.e-ddb-icons1 {\n    font-family: 'e-ddb-icons1';\n    speak: none;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.e-toggle-palette::before {\n    content: \"\\e700\"\n}"}