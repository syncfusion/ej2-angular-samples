{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"/**\n* UML Activity sample\n*/\n\n// Importing needed dependencies for diagram\nimport { Component, ViewEncapsulation, ViewChild, Inject } from '@angular/core';\nimport { DiagramComponent, OrthogonalSegmentModel, PaletteModel, PortVisibility,\n    SnapConstraints, SnapSettingsModel, UmlActivityShapeModel, UmlActivityFlows,\n    Diagram, NodeModel, UndoRedo, ConnectorModel, DiagramContextMenu, StrokeStyleModel,\n    DecoratorModel, PointModel, SymbolInfo, PointPortModel, SymbolPaletteModule,\n    DiagramModule, UmlActivityShapes, Direction } from '@syncfusion/ej2-angular-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { MarginModel } from '@syncfusion/ej2-lineargauge';\n\n\nDiagram.Inject(UndoRedo, DiagramContextMenu);\n\n/**\n * Component for displaying a Symmetric Layout sample.\n * Manages the presentation and behavior of the diagram using Syncfusion's Angular Diagram component.\n */\n@Component({\n    selector: 'app-root', // Angular component selector\n    templateUrl: 'app.component.html', // HTML template file for the component\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,  // No view encapsulation\n    standalone: true,  // Indicates it's a standalone component\n    imports: [ SymbolPaletteModule, DiagramModule, ] // Importing necessary Angular modules and components\n})\n/**\n * Represents a diagram component with UML Activity\n */\nexport class AppComponent {\n    // Reference to the diagram component\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    // Constructor to inject source files\n    constructor() {\n        \n    }\n\n    // Function to create Node shapes for UML Activity\n    private createUmlNodeShape(shape: UmlActivityShapes): UmlActivityShapeModel {\n        return { type: 'UmlActivity', shape: shape };\n    }\n\n    // Initializing UML Activity shapes\n    public initialNode = this.createUmlNodeShape('InitialNode');\n    public action = this.createUmlNodeShape('Action');\n    public forkNode = this.createUmlNodeShape('ForkNode');\n    public decision = this.createUmlNodeShape('Decision');\n    public mergeNode = this.createUmlNodeShape('MergeNode');\n    public joinNode = this.createUmlNodeShape('JoinNode');\n    public finalNode = this.createUmlNodeShape('FinalNode');\n\n    public objectFlow: UmlActivityFlows = 'Object';\n\n    // Function to create Segment models\n    private createSegments(segments: { length: number, direction: Direction }[]): OrthogonalSegmentModel[] {\n        return segments.map(segment => ({ type: 'Orthogonal', length: segment.length, direction: segment.direction }));\n    }\n    // Initializing Segment models\n    public segments1 = this.createSegments([{ length: 20, direction: 'Bottom' }, { length: 50, direction: 'Left' }]);\n    public segments2 = this.createSegments([{ length: 20, direction: 'Bottom' }, { length: 50, direction: 'Right' }]);\n    public segments3 = this.createSegments([{ length: 50, direction: 'Bottom' }]);\n    public segments4 = this.createSegments([{ length: 265, direction: 'Bottom' }, { length: 50, direction: 'Left' }]);\n\n    // Snap settings\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n\n    // Expand mode\n    public expandMode: ExpandMode = 'Multiple';\n    public diagramCreate(args: Object): void {\n        // Function to add mobile events\n        this.addEvents();\n    };\n\n    // Symbol margin\n    public symbolMargin: MarginModel = { left: 15, right: 15, top: 15, bottom: 15 };\n\n    // Initializes the uml activity symbols to the UML Shapes in the symbol palette\n\n    // Function to create Segment models\n    private createUmlActivityShape = (id: string, shape: UmlActivityShapes): NodeModel => ({\n        id: id,\n        shape: { type: 'UmlActivity', shape: shape }\n    });\n\n    // Initialize UML activity shapes\n    public umlActivityShapes: NodeModel[] = [\n        this.createUmlActivityShape('Action', 'Action'),\n        this.createUmlActivityShape('Decision', 'Decision'),\n        this.createUmlActivityShape('MergeNode', 'MergeNode'),\n        this.createUmlActivityShape('InitialNode', 'InitialNode'),\n        this.createUmlActivityShape('FinalNode', 'FinalNode'),\n        this.createUmlActivityShape('ForkNode', 'ForkNode'),\n        this.createUmlActivityShape('JoinNode', 'JoinNode'),\n        this.createUmlActivityShape('TimeEvent', 'TimeEvent'),\n        this.createUmlActivityShape('AcceptingEvent', 'AcceptingEvent'),\n        this.createUmlActivityShape('SendSignal', 'SendSignal'),\n        this.createUmlActivityShape('ReceiveSignal', 'ReceiveSignal'),\n        this.createUmlActivityShape('StructuredNode', 'StructuredNode'),\n        this.createUmlActivityShape('Note', 'Note')\n    ];\n    //Initialize the flowshapes for the symbol palatte\n    public palettes: PaletteModel[] = [\n        { id: 'umlActivity', expanded: true, symbols: this.umlActivityShapes, title: 'UML Shapes' },\n        { id: 'Connector', expanded: true, symbols: this.getConnectors(), title: 'Connectors' },\n    ];\n    // Getting symbol info\n    public getSymbolInfo(symbol: NodeModel): SymbolInfo {\n        return { fit: true };\n    }\n    // Getting connector style\n    public getConnectorStyle(dashArrayed?: boolean): StrokeStyleModel {\n        return {\n            strokeWidth: 2,\n            strokeColor: '#757575',\n            strokeDashArray: dashArrayed ? '4 4' : ''\n        };\n    }\n\n    // create and add ports for node.\n    public setPaletteNodeDefaults(symbol: NodeModel): NodeModel {\n        if (symbol.id === 'JoinNode') {\n            symbol.width = 20; symbol.height = 50;\n        } else if (symbol.id === 'ForkNode') {\n            symbol.width = 50; symbol.height = 20;\n        } else if (symbol.id === 'Decision' || symbol.id === 'MergeNode') {\n            symbol.width = 50; symbol.height = 40;\n        } else {\n            symbol.width = 50; symbol.height = 50;\n        }\n        if (symbol.id === 'InitialNode' || symbol.id === 'FinalNode' || symbol.id === 'JoinNode' || symbol.id === 'ForkNode') {\n            symbol.style.fill = '#757575';\n        }\n        symbol.style.strokeColor = '#757575';\n        return symbol;\n    }\n\n    // initializes connector symbols to the connector palette in the symbol palette\n    private getConnectors(): ConnectorModel[] {\n        let sourcePoint: PointModel = { x: 0, y: 0 };\n        let targetPoint: PointModel = { x: 40, y: 40 };\n        let targetDecorator: DecoratorModel = { shape: 'Arrow', style: { fill: '#757575', strokeColor: '#757575' } }\n        let connectorSymbols: ConnectorModel[] = [\n            {\n                id: 'Link2', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Orthogonal', style: this.getConnectorStyle(true), targetDecorator: targetDecorator,\n            },\n            {\n                id: 'Link1', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Orthogonal', style: this.getConnectorStyle(), targetDecorator: targetDecorator,\n            },\n            {\n                id: 'Link3', sourcePoint: sourcePoint, targetPoint: targetPoint,\n                type: 'Straight', style: this.getConnectorStyle(), targetDecorator: targetDecorator,\n            }\n        ];\n        return connectorSymbols;\n    }\n\n    // Function to add mobile events\n    private addEvents(): void {\n        let isMobile: boolean = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            let paletteIcon: HTMLElement = document.getElementById('palette-icon') as HTMLElement;\n            if (paletteIcon) {\n                paletteIcon.addEventListener('click', this.openPalette, false);\n            }\n        }\n    }\n    // Function to open palette\n    private openPalette(): void {\n        let paletteSpace: HTMLElement = document.getElementById('palette-space') as HTMLElement;\n        let isMobile: boolean = window.matchMedia('(max-width:550px)').matches;\n        if (isMobile) {\n            if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n                // Open palette\n                paletteSpace.classList.add('sb-mobile-palette-open');\n            } else {\n                // Close palette\n                paletteSpace.classList.remove('sb-mobile-palette-open');\n            }\n        }\n    }\n\n    //Sets the default values of connector\n    public getConnectorDefaults(connector: ConnectorModel): void {\n        if (connector.id.indexOf('connector') !== -1) {\n            connector.type = 'Orthogonal'; connector.cornerRadius = 10;\n            connector.targetDecorator = { shape: 'OpenArrow', style: { strokeColor: '#444', fill: '#444' } };\n        }\n    }\n    //Sets the default values of node\n    public getNodeDefaults(node: NodeModel): NodeModel {\n        node.ports = getNodePorts(node);\n        if (node.ports) {\n            for (let i: number = 0; i < node.ports.length; i++) {\n                node.ports[i].visibility = PortVisibility.Hidden;\n            }\n        }\n        if (node.id === 'Start' || node.id === 'ForkNode' || node.id === 'JoinNode' || node.id === 'FinalNode') {\n            node.style.fill = '#444';\n        }\n        node.style.strokeColor = '#444';\n        return node;\n    }\n}\n\n// Getting node ports based on the type of node\nfunction getNodePorts(node: NodeModel): PointPortModel[] {\n    if (node.id === 'ForkNode' || node.id === 'JoinNode') {\n        return [\n            { id: 'port1', offset: { x: 0.2, y: 1 } },\n            { id: 'port2', offset: { x: 0.8, y: 1 } },\n            { id: 'port3', offset: { x: 0.2, y: 0 } },\n            { id: 'port4', offset: { x: 0.8, y: 0 } },\n        ];\n    } else {\n        return[\n            { id: 'portLeft', offset: { x: 0, y: 0.5 } },\n            { id: 'portRight', offset: { x: 1, y: 0.5 } },\n            { id: 'portBottom', offset: { x: 0.5, y: 1 } },\n            { id: 'portTop', offset: { x: 0.5, y: 0 } },\n        ];\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<script src=\"script/diagram-common.ts\"></script>\n\n<div class=\"control-section\">\n<style>\n    /* CSS styles for layout and mobile responsiveness */\n\n    #umlActivityDiagram .sb-mobile-palette {\n        width: 210px;\n        height: 100%;\n        float: left;\n    }\n\n    #umlActivityDiagram .sb-mobile-palette-bar {\n        display: none;\n    }\n\n    #umlActivityDiagram .sb-mobile-diagram {\n        width: calc(100% - 212px);\n        height: 100%;\n        float: left;\n        border: 1px solid rgba(0, 0, 0, 0.12);\n        border-left: none;\n    }\n\n    @media (max-width: 550px) {\n\n        #umlActivityDiagram .sb-mobile-palette {\n            z-index: 19;\n            position: absolute;\n            display: none;\n            transition: transform 300ms linear, visibility 0s linear 300ms;\n            width: 39%;\n            height: 100%;\n        }\n\n        #umlActivityDiagram .sb-mobile-palette-bar {\n            display: block;\n            width: 100%;\n            background: #fafafa;\n            padding: 10px 10px;\n            border: 0.5px solid #e0e0e0;\n            min-height: 40px;\n        }\n\n       #umlActivityDiagram .sb-mobile-diagram {\n            width: 100%;\n            height: 100%;\n            float: left;\n            left: 0px;\n        }\n\n        #umlActivityDiagram #palette-icon {\n            font-size: 20px;\n        }\n    }\n\n    #umlActivityDiagram .sb-mobile-palette-open {\n        position: absolute;\n        display: block;\n        right: 15px;\n    }\n\n    @font-face {\n        font-family: 'e-ddb-icons1';\n        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');\n        font-weight: normal;\n        font-style: normal;\n    }\n\n    .e-ddb-icons1 {\n        font-family: 'e-ddb-icons1';\n        font-size: 16px;\n        font-style: normal;\n        font-weight: normal;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n    }\n\n    .e-toggle-palette::before {\n        content: \"\\e700\"\n    }\n\n</style>\n <div id=\"umlActivityDiagram\" style=\"width: 100%; height: 521px\">\n    <div class=\"sb-mobile-palette-bar\">\n        <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n    </div>\n    <div id=\"palette-space\" class=\"sb-mobile-palette\">\n        <ejs-symbolpalette #symbolpalette id=\"symbolpalette\" [expandMode]=\"expandMode\" [palettes]=\"palettes\" width=\"100%\"\n            height=\"100%\" [symbolHeight]=55 [symbolWidth]=55 [symbolMargin]=\"symbolMargin\" [getNodeDefaults]='setPaletteNodeDefaults'\n            [getSymbolInfo]='getSymbolInfo'>\n        </ejs-symbolpalette>\n    </div>\n    <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"100%\" [snapSettings]=snapSettings (created)=\"diagramCreate($event)\"\n            [getConnectorDefaults]='getConnectorDefaults' [getNodeDefaults]='getNodeDefaults'>\n            <e-nodes>\n                <e-node id='Start' [height]=40 [width]=40 [offsetX]=300 [offsetY]=20 [shape]=initialNode>\n                </e-node>\n                <e-node id='ReceiveCall' [height]=40 [width]=105 [shape]=action [offsetX]=300 [offsetY]=100>\n                    <e-node-annotations>\n                        <e-node-annotation content='Receive Customer Call'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='ForkNode' [height]=10 [width]=70 [shape]=forkNode [offsetX]=300 [offsetY]=170>\n                </e-node>\n                <e-node id='Determine' [height]=40 [width]=105 [shape]=action [offsetX]=190 [offsetY]=250>\n                    <e-node-annotations>\n                        <e-node-annotation content='Determine Type of Call'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='Log' [height]=40 [width]=105 [shape]=action [offsetX]=410 [offsetY]=250>\n                    <e-node-annotations>\n                        <e-node-annotation content='Customer Logging a Call'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='Decision' [height]=50 [width]=50 [shape]=decision [offsetX]=190 [offsetY]=350>\n                </e-node>\n                <e-node id='transfer_sales' [height]=40 [width]=105 [shape]=action [offsetX]=100 [offsetY]=450>\n                    <e-node-annotations>\n                        <e-node-annotation content='Transfer the Call to Sales'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='transfer_desk' [height]=40 [width]=105 [shape]=action [offsetX]=280 [offsetY]=450>\n                    <e-node-annotations>\n                        <e-node-annotation content='Transfer the Call to Help Desk'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='MergeNode' [height]=50 [width]=50 [shape]=mergeNode [offsetX]=190 [offsetY]=540>\n                </e-node>\n                <e-node id='JoinNode' [height]=10 [width]=70 [shape]=joinNode [offsetX]=300 [offsetY]=630>\n                </e-node>\n                <e-node id='CloseCall' [height]=40 [width]=105 [shape]=action [offsetX]=300 [offsetY]=710>\n                    <e-node-annotations>\n                        <e-node-annotation content='Close Call'>\n                        </e-node-annotation>\n                    </e-node-annotations>\n                </e-node>\n                <e-node id='FinalNode' [height]=40 [width]=40 [shape]=finalNode [offsetX]=300 [offsetY]=800>\n                </e-node>\n            </e-nodes>\n            <e-connectors>\n                <e-connector id='connector1' sourceID='Start' targetID='ReceiveCall'>\n                </e-connector>\n                <e-connector id='connector2' sourceID='ReceiveCall' targetID='ForkNode'>\n                </e-connector>\n                <e-connector id='connector3' sourceID='ForkNode' targetID='Determine' sourcePortID='port1' targetPortID='portTop'\n                    [segments]='segments1'>\n                </e-connector>\n                <e-connector id='connector4' sourceID='ForkNode' targetID='Log' sourcePortID='port2' targetPortID='portTop'\n                    [segments]='segments2'>\n                </e-connector>\n                <e-connector id='connector5' sourceID='Determine' targetID='Decision'>\n                </e-connector>\n                <e-connector id='connector6' sourceID='Decision' targetID='transfer_sales' sourcePortID='portLeft'\n                    targetPortID='portTop' [shape]=objectFlow>\n                    <e-connector-annotations>\n                        <e-connector-annotation content='Type = New Customer'>\n                        </e-connector-annotation>\n                    </e-connector-annotations>\n                </e-connector>\n                <e-connector id='connector7' sourceID='Decision' targetID='transfer_desk' sourcePortID='portRight'\n                    targetPortID='portTop' [shape]=objectFlow>\n                    <e-connector-annotations>\n                        <e-connector-annotation content='Type = Existing Customer'>\n                        </e-connector-annotation>\n                    </e-connector-annotations>\n                </e-connector>\n                <e-connector id='connector8' sourceID='transfer_sales' targetID='MergeNode' sourcePortID='portBottom'\n                    targetPortID='portLeft' [segments]='segments3'>\n                </e-connector>\n                <e-connector id='connector9' sourceID='transfer_desk' targetID='MergeNode' sourcePortID='portBottom'\n                    targetPortID='portRight' [segments]='segments3'>\n                </e-connector>\n                <e-connector id='connector10' sourceID='MergeNode' targetID='JoinNode' sourcePortID='portBottom' targetPortID='port3'>\n                </e-connector>\n                <e-connector id='connector11' sourceID='Log' targetID='JoinNode' sourcePortID='portBottom' targetPortID='port4'\n                    [segments]='segments4'>\n                </e-connector>\n                <e-connector id='connector12' sourceID='JoinNode' targetID='CloseCall'>\n                </e-connector>\n                <e-connector id='connector13' sourceID='CloseCall' targetID='FinalNode'>\n                </e-connector>\n            </e-connectors>\n        </ejs-diagram>\n    </div>\n  </div>\n</div>\n","app.component.css":".sb-mobile-palette {\n    width:240px;\n    height:100%;\n    float:left;\n}\n\n.sb-mobile-palette-bar {\n    display: none;\n}\n\n.sb-mobile-diagram {\n    width:calc(100% - 242px);\n    height: 100%;\n    float: left;\n}\n\n@media (max-width: 550px) {\n\n    .sb-mobile-palette {\n        z-index: 19;\n        position: absolute;\n        display: none;\n        transition: transform 300ms linear, visibility 0s linear 300ms;\n        width:39%;\n        height:100%;\n    }\n    \n    .sb-mobile-palette-bar {\n        display: block;\n        width: 100%;\n        background:#fafafa;\n        padding: 10px 10px;\n        border:0.5px solid #e0e0e0;\n        min-height: 40px;\n    }\n    \n    .sb-mobile-diagram {\n        width: 100%;\n        height: 100%;\n        float: left;\n        left: 0px;\n    }\n\n    #palette-icon {\n        font-size: 20px; \n    }\n}\n    \n.sb-mobile-palette-open {\n    position: absolute;\n    display: block;\n    right: 15px;\n}\n\n@font-face {\n    font-family: 'e-ddb-icons1';\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n.e-ddb-icons1 {\n    font-family: 'e-ddb-icons1';\n    speak: none;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.e-toggle-palette::before {\n    content: \"\\e700\"\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}