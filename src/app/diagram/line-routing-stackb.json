{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, NodeModel, ConnectorModel, PortVisibility, UndoRedo, LineRouting, ConnectorBridging, Diagram, SnapConstraints, SnapSettingsModel, DiagramConstraints, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\n\n\nDiagram.Inject(UndoRedo, LineRouting, ConnectorBridging);\n/**\n * Sample for Nodes Component\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\n\nexport class AppComponent {\n  @ViewChild('diagram') public diagram: DiagramComponent;\n  public nodes: NodeModel[];\n  public connectors: ConnectorModel[];\n  public constraints: DiagramConstraints;\n  public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n  // Used to set default values of nodes\n  public getNodeDefaults(node: NodeModel): NodeModel {\n    node.height = 50;\n    if (node.id === 'decision') {\n      node.height = 70;\n    }\n    node.width = 120;\n    node.style = { strokeColor: 'transparent' };\n    return node;\n  }\n   // Used to set default values of connector\n  public getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n    connector.type = 'Orthogonal';\n    connector.style = { strokeColor: '#707070 ', strokeWidth: 1.25 };\n    connector.targetDecorator = { style: { fill: '#707070 ', strokeColor: '#707070 ' } };\n    return connector;\n  }\n  public create(args: Object): void {\n    this.diagram.fitToPage();\n  }\n  ngOnInit(): void {\n    this.constraints = DiagramConstraints.Default | (DiagramConstraints.Bridging | DiagramConstraints.LineRouting);\n    //Initialize the diagram nodes\n    this.nodes = [\n      {\n        id: 'start', offsetX: 115, offsetY: 110, shape: { type: 'Flow', shape: 'Terminator' },\n        ports: [{ id: 'port1', offset: { x: 0.5, y: 0 }, visibility: PortVisibility.Hidden }],\n        style: { fill: '#D5535D' }, annotations: [{ content: 'Start', style: { color: 'white' } }]\n      },\n      {\n        id: 'process', offsetX: 115, offsetY: 255, shape: { type: 'Flow', shape: 'Process' },\n        style: { fill: '#65B091' }, annotations: [{ content: 'Process', style: { color: 'white' } }]\n      },\n      {\n        id: 'document', offsetX: 115, offsetY: 400, shape: { type: 'Flow', shape: 'Document' },\n        ports: [{ id: 'port1', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden }],\n        annotations: [{ content: 'Document', style: { color: 'white' } }], style: { fill: '#5BA5F0' }\n      },\n      {\n        id: 'decision', offsetX: 390, offsetY: 110, shape: { type: 'Flow', shape: 'Decision' },\n        style: { fill: '#9A8AF7' }, annotations: [{ content: 'Decision', style: { color: 'white' } }]\n      },\n      {\n        id: 'document2', offsetX: 390, offsetY: 255, shape: { type: 'Flow', shape: 'Document' },\n        style: { fill: '#5BA5F0' }, annotations: [{ content: 'Document', style: { color: 'white' } }]\n      },\n      {\n        id: 'end', offsetX: 390, offsetY: 400, shape: { type: 'Flow', shape: 'Terminator' },\n        style: { fill: '#D5535D' }, annotations: [{ content: 'End', style: { color: 'white' } }]\n      },\n      {\n        id: 'process2', offsetX: 640, offsetY: 110, shape: { type: 'Flow', shape: 'Process' },\n        style: { fill: '#65B091' }, annotations: [{ content: 'Process', style: { color: 'white' } }]\n      },\n      {\n        id: 'card', offsetX: 640, offsetY: 255,\n        shape: { type: 'Flow', shape: 'Card' },\n        style: { fill: '#76C3F0' },\n        annotations: [{ content: 'Card', style: { color: 'white' } }],\n        ports: [\n          { id: 'port1', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n          { id: 'port2', offset: { x: 0.5, y: 1 }, visibility: PortVisibility.Hidden }\n        ],\n      }\n    ];\n    //Initialize the diagram connectors\n    this.connectors = [\n      { id: 'Connector1', sourceID: 'start', targetID: 'process', },\n      { id: 'Connector2', sourceID: 'process', targetID: 'document' },\n      { id: 'Connector3', sourceID: 'document', targetID: 'end' },\n      { id: 'Connector4', sourceID: 'start', targetID: 'decision' },\n      { id: 'Connector5', sourceID: 'decision', targetID: 'process2' },\n      { id: 'Connector6', sourceID: 'process2', targetID: 'card' },\n      { id: 'Connector7', sourceID: 'process', targetID: 'document2' },\n      { id: 'Connector8', sourceID: 'document2', targetID: 'card' },\n      { id: 'Connector9', sourceID: 'start', sourcePortID: 'port1', targetID: 'card', targetPortID: 'port1' },\n      { id: 'Connector10', sourceID: 'card', sourcePortID: 'port2', targetID: 'document', targetPortID: 'port1' }\n    ];\n  }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div class=\"col-lg-8 control-section\" style=\"width: 100%;\">\n        <div class=\"content-wrapper\">\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"500px\" [nodes]=\"nodes\" [connectors]=\"connectors\"\n                [constraints]=\"constraints\" [snapSettings]='snapSettings' [getConnectorDefaults]='getConnectorDefaults'\n                (created)='create($event)' [getNodeDefaults]='getNodeDefaults'>\n            </ejs-diagram>\n        </div>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}