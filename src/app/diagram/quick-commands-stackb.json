{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n  DiagramComponent, FlowShapeModel, ConnectorModel, DataBinding, SelectorModel,\n  IElement, randomId, cloneObject, UserHandleModel, SelectorConstraints, ToolBase,\n  MouseEventArgs, NodeModel, MindMap, HierarchicalTree, MoveTool, Node, SnapSettingsModel,\n  SnapConstraints, Diagram\n} from '@syncfusion/ej2-angular-diagrams';\nDiagram.Inject(DataBinding, MindMap, HierarchicalTree);\n\n/**\n * Sample for UserHandle\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n  @ViewChild('diagram') public diagram: DiagramComponent;\n  public terminator: FlowShapeModel = { type: 'Flow', shape: 'Terminator' };\n  public process: FlowShapeModel = { type: 'Flow', shape: 'Process' };\n  public decision: FlowShapeModel = { type: 'Flow', shape: 'Decision' };\n  public card: FlowShapeModel = { type: 'Flow', shape: 'Card' };\n\n  public create(args: Object): void {\n    this.diagram.fitToPage();\n    this.diagram.dataBind();\n    this.diagram.select([this.diagram.nodes[0]]);\n  }\n  //Defines the user handle collection for nodes in diagram\n  public handles: UserHandleModel[] = [\n    {\n      name: 'clone',\n      pathData:\n        'M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,' +\n        '0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z ' +\n        'M68.5,72.5h-30V34.4h30V72.5z',\n      visible: true,\n      offset: 0,\n      side: 'Bottom',\n      margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    }\n  ];\n  public snapSettings: SnapSettingsModel = {\n    constraints: SnapConstraints.None\n  };\n  public selectedItems: SelectorModel = {\n    constraints: SelectorConstraints.UserHandle,\n    userHandles: this.handles\n  };\n  public getNodeDefaults(node: Node): NodeModel {\n    let obj: NodeModel = {\n      style: { fill: '#578CA9', strokeColor: 'none' },\n      annotations: [{ style: { color: 'white' } }]\n    };\n    return obj;\n  }\n\n  ngOnInit(): void {\n    document.getElementById('alignment').onclick = this.documentClick.bind(this);\n    document.getElementById('pattern').onclick = this.documentPatternClick.bind(this);\n  }\n\n  private documentClick(args: MouseEvent): void {\n    let target: HTMLElement = args.target as HTMLElement;\n    if (target.className === 'image-pattern-style' || target.className === 'image-pattern-style e-selected-style') {\n      switch (target.id) {\n        case 'left':\n          this.diagram.selectedItems.userHandles[0].offset = 0;\n          this.diagram.selectedItems.userHandles[0].side = 'Bottom';\n          break;\n        case 'right':\n          this.diagram.selectedItems.userHandles[0].offset = 1;\n          this.diagram.selectedItems.userHandles[0].side = 'Bottom';\n          break;\n        case 'topr':\n          this.diagram.selectedItems.userHandles[0].offset = 0;\n          this.diagram.selectedItems.userHandles[0].side = 'Right';\n          break;\n      }\n      // custom code start\n      target.classList.add('e-selected-style');\n      // custom code end\n    }\n    this.diagram.dataBind();\n  }\n  private documentPatternClick(args: MouseEvent): void {\n    let target: HTMLElement = args.target as HTMLElement;\n    if (target.className === 'image-pattern-style' || target.className === 'image-pattern-style e-selected-style') {\n      switch (target.id) {\n        case 'pattern1':\n          this.diagram.selectedItems.userHandles[0].backgroundColor = '#1E90FF';\n          break;\n        case 'pattern2':\n          this.diagram.selectedItems.userHandles[0].backgroundColor = '#3CB371';\n          break;\n        case 'pattern3':\n          this.diagram.selectedItems.userHandles[0].backgroundColor = '#FF6347';\n          break;\n      }\n      this.diagram.selectedItems.userHandles[0].pathColor = 'white';\n      // custom code start\n      target.classList.add('e-selected-style');\n      // custom code end\n    }\n    this.diagram.dataBind();\n  }\n  public getCustomTool: Function = this.getTool.bind(this);\n  public getTool(action: string): ToolBase {\n    let tool: ToolBase;\n    if (action === 'clone') {\n      let cloneTool: CloneTool = new CloneTool(this.diagram.commandHandler);\n      cloneTool.diagram = this.diagram;\n      return cloneTool;\n    }\n    return tool;\n  }\n}\n\n//Defines the clone tool used to copy Node/Connector\nclass CloneTool extends MoveTool {\n  public diagram: Diagram = null;\n  public mouseDown(args: MouseEventArgs): void {\n    let newObject: NodeModel | ConnectorModel;\n    if (this.diagram.selectedItems.nodes.length > 0) {\n      newObject = cloneObject(this.diagram.selectedItems.nodes[0]) as NodeModel;\n    } else {\n      newObject = cloneObject(\n        this.diagram.selectedItems.connectors[0]\n      ) as ConnectorModel;\n    }\n    newObject.id += randomId();\n    this.diagram.paste([newObject]);\n    args.source = this.diagram.nodes[this.diagram.nodes.length - 1] as IElement;\n    args.sourceWrapper = args.source.wrapper;\n    super.mouseDown(args);\n    this.inAction = true;\n  }\n}\n","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<style>\n    .diagram-userhandle .image-pattern-style {\n        background-color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 50px;\n        width: calc((100% - 18px) / 3);\n        cursor: pointer;\n        border: 1px solid #D5D5D5;\n        background-position: center;\n        float: left;\n    }\n    \n    .diagram-userhandle .row {\n        margin: 10px 0px 0px 0px;\n    }\n    \n    .diagram-userhandle .row-header {\n        font-size: 15px;\n        font-weight: 500;\n        margin-top: 10px\n    }\n    \n    .diagram-userhandle .e-checkbox-wrapper .e-label {\n        font-size: 12px;\n    }\n    \n    .diagram-userhandle .col-xs-6 {\n        padding-left: 0px;\n        padding-right: 0px;\n        padding-top: 5px;\n    }\n    \n    .diagram-userhandle .sb-child-row {\n        padding-top: 8px;\n    }\n</style>\n\n<div class=\"control-section diagram-userhandle\">\n    <div class=\"col-lg-8 control-section\">\n        <div class=\"content-wrapper\">\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [selectedItems]='selectedItems' [getNodeDefaults]='getNodeDefaults' [snapSettings]='snapSettings' [getCustomTool]='getCustomTool' (created)='create($event)'>\n                <e-nodes>\n                    <e-node id='NewIdea' [width]=150 [height]=60 [offsetX]=300 [offsetY]=60 [shape]=terminator>\n                        <e-node-annotations>\n                            <e-node-annotation content='New idea identified'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Meeting' [width]=150 [height]=60 [offsetX]=300 [offsetY]=155 [shape]=process>\n                        <e-node-annotations>\n                            <e-node-annotation content='Meeting with board'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='BoardDecision' [width]=150 [height]=110 [offsetX]=300 [offsetY]=280 [shape]=decision>\n                        <e-node-annotations>\n                            <e-node-annotation content='Board decides \\n whether to proceed'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Project' [width]=150 [height]=60 [offsetX]=300 [offsetY]=430 [shape]=decision>\n                        <e-node-annotations>\n                            <e-node-annotation content='Find Project manager'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='End' [width]=150 [height]=60 [offsetX]=300 [offsetY]=555 [shape]=process>\n                        <e-node-annotations>\n                            <e-node-annotation content='Implement and Deliver'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Decision' [width]=250 [height]=60 [offsetX]=530 [offsetY]=60 [shape]=card>\n                        <e-node-annotations>\n                            <e-node-annotation content='Decision process for new software ideas'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Reject' [width]=150 [height]=60 [offsetX]=550 [offsetY]=280 [shape]=process>\n                        <e-node-annotations>\n                            <e-node-annotation content='Reject'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Resources' [width]=150 [height]=60 [offsetX]=550 [offsetY]=430 [shape]=process>\n                        <e-node-annotations>\n                            <e-node-annotation content='Hire new resources'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                </e-nodes>\n                <e-connectors>\n                    <e-connector id='connector1' sourceID='NewIdea' targetID='Meeting'>\n                    </e-connector>\n                    <e-connector id='connector2' sourceID='Meeting' targetID='BoardDecision'>\n                    </e-connector>\n                    <e-connector id='connector3' sourceID='BoardDecision' targetID='Project'>\n                    </e-connector>\n                    <e-connector id='connector4' sourceID='Project' targetID='End'>\n                    </e-connector>\n                    <e-connector id='connector5' sourceID='BoardDecision' targetID='Reject'>\n                    </e-connector>\n                    <e-connector id='connector6' sourceID='Project' targetID='Resources'>\n                    </e-connector>\n                </e-connectors>\n            </ejs-diagram>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">\n                Properties\n            </div>\n            <div class=\"row property-panel-content\" id=\"alignment\">\n                <div class=\"row row-header1 sb-child-row\">\n                    Alignment\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"image-pattern-style\" id=\"left\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/bottoml.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"right\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/bottomr.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"topr\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/topr.png);\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\" id=\"pattern\">\n                <div class=\"row row-header1 sb-child-row\">\n                    Appearance\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"image-pattern-style\" id=\"pattern1\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/pattern1.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern2\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/pattern2.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern3\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/pattern3.png);\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}