{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, FlowShapeModel, ConnectorModel, DataBinding, SelectorModel, IElement, randomId, cloneObject, UserHandleModel, SelectorConstraints, ToolBase, MouseEventArgs, NodeModel, MindMap, HierarchicalTree, MoveTool, Node, SnapSettingsModel, SnapConstraints, Diagram, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\n\n\nDiagram.Inject(DataBinding, MindMap, HierarchicalTree);\n\n/**\n * Sample for UserHandle\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\n\nexport class AppComponent {\n  @ViewChild('diagram') public diagram: DiagramComponent;\n  // FlowShapeModel definitions for different shapes used in the diagram.\n  public terminator: FlowShapeModel = { type: 'Flow', shape: 'Terminator' };\n  public process: FlowShapeModel = { type: 'Flow', shape: 'Process' };\n  public decision: FlowShapeModel = { type: 'Flow', shape: 'Decision' };\n  public card: FlowShapeModel = { type: 'Flow', shape: 'Card' };\n\n  public create(args: Object): void {\n    this.diagram.fitToPage();\n    this.diagram.dataBind();\n    this.diagram.select([this.diagram.nodes[0]]);\n  }\n  //Defines the user handle collection for nodes in diagram\n  public handles: UserHandleModel[] = [\n    {\n      name: 'clone',\n      pathData:\n        'M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,' +\n        '0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z ' +\n        'M68.5,72.5h-30V34.4h30V72.5z',\n      visible: true,\n      offset: 0,\n      side: 'Bottom',\n      margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    }\n  ];\n  public snapSettings: SnapSettingsModel = {\n    constraints: SnapConstraints.None\n  };\n  public selectedItems: SelectorModel = {\n    constraints: SelectorConstraints.UserHandle,\n    userHandles: this.handles\n  };\n  //set default property for nodes\n  public getNodeDefaults(node: Node): NodeModel {\n    let obj: NodeModel = {\n      style: { fill: '#578CA9', strokeColor: 'none' },\n      annotations: [{ style: { color: 'white' } }]\n    };\n    return obj;\n  }\n  ngOnInit(): void {\n    document.getElementById('alignment').onclick = this.documentClick.bind(this);\n    document.getElementById('pattern').onclick = this.documentPatternClick.bind(this);\n  }\n  //Change the postion of the UserHandle\n  private documentClick(args: MouseEvent): void {\n    let target: HTMLElement = args.target as HTMLElement;\n    if (target.className === 'image-pattern-style' || target.className === 'image-pattern-style e-selected-style') {\n      switch (target.id) {\n        case 'left':\n          this.diagram.selectedItems.userHandles[0].offset = 0;\n          this.diagram.selectedItems.userHandles[0].side = 'Bottom';\n          break;\n        case 'right':\n          this.diagram.selectedItems.userHandles[0].offset = 1;\n          this.diagram.selectedItems.userHandles[0].side = 'Bottom';\n          break;\n        case 'topr':\n          this.diagram.selectedItems.userHandles[0].offset = 0;\n          this.diagram.selectedItems.userHandles[0].side = 'Right';\n          break;\n      }\n      // custom code start\n      target.classList.add('e-selected-style');\n      // custom code end\n    }\n    this.diagram.dataBind();\n  }\n   //Change the appearence of the UserHandle\n  private documentPatternClick(args: MouseEvent): void {\n    let target: HTMLElement = args.target as HTMLElement;\n    if (target.className === 'image-pattern-style' || target.className === 'image-pattern-style e-selected-style') {\n      switch (target.id) {\n        case 'pattern1':\n          this.diagram.selectedItems.userHandles[0].backgroundColor = '#1E90FF';\n          break;\n        case 'pattern2':\n          this.diagram.selectedItems.userHandles[0].backgroundColor = '#3CB371';\n          break;\n        case 'pattern3':\n          this.diagram.selectedItems.userHandles[0].backgroundColor = '#FF6347';\n          break;\n      }\n      this.diagram.selectedItems.userHandles[0].pathColor = 'white';\n      // custom code start\n      target.classList.add('e-selected-style');\n      // custom code end\n    }\n    this.diagram.dataBind();\n  }\n  public getCustomTool: Function = this.getTool.bind(this);\n  public getTool(action: string): ToolBase {\n    let tool: ToolBase;\n    if (action === 'clone') {\n      let cloneTool: CloneTool = new CloneTool(this.diagram.commandHandler);\n      cloneTool.diagram = this.diagram;\n      return cloneTool;\n    }\n    return tool;\n  }\n\n  //Defines the click event for fixedUserHandle\n  public fixedUserHandleClick(args){\n    this.diagram.select([ this.diagram.nameTable['Decision']]);\n    this.diagram.remove();\n  }\n\n  public fixedUserHandleOffset = {x : 1.1, y : 0.5 };\n\n}\n\n//Defines the clone tool used to copy node or connector\nclass CloneTool extends MoveTool {\n  public diagram: Diagram = null;\n  public mouseDown(args: MouseEventArgs): void {\n    let newObject: NodeModel | ConnectorModel;\n    if (this.diagram.selectedItems.nodes.length > 0) {\n      newObject = cloneObject(this.diagram.selectedItems.nodes[0]) as NodeModel;\n    } else {\n      newObject = cloneObject(\n        this.diagram.selectedItems.connectors[0]\n      ) as ConnectorModel;\n    }\n    newObject.id += randomId();\n    this.diagram.paste([newObject]);\n    if(this.diagram.selectedItems.connectors.length > 0)\n    {\n      args.source = this.diagram.connectors[this.diagram.connectors.length - 1] as IElement;\n    }\n    else\n    {\n      args.source = this.diagram.nodes[this.diagram.nodes.length - 1] as IElement;\n    }\n    args.sourceWrapper = args.source.wrapper;\n    super.mouseDown(args);\n    this.inAction = true;\n  }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<style>\n    .diagram-userhandle .image-pattern-style {\n        background-color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 50px;\n        width: calc((100% - 18px) / 3);\n        cursor: pointer;\n        border: 1px solid #D5D5D5;\n        background-position: center;\n        float: left;\n    }\n    \n    .diagram-userhandle .row {\n        margin: 10px 0px 0px 0px;\n    }\n    \n    .diagram-userhandle .row-header {\n        font-size: 15px;\n        font-weight: 500;\n        margin-top: 10px\n    }\n    \n    .diagram-userhandle .col-xs-6 {\n        padding-left: 0px;\n        padding-right: 0px;\n        padding-top: 5px;\n    }\n    \n    .diagram-userhandle .sb-child-row {\n        padding-top: 8px;\n    }\n</style>\n\n<div class=\"control-section diagram-userhandle\">\n    <div class=\"col-lg-8 control-section\">\n        <div class=\"content-wrapper\">\n            <!-- Template reference variable for the diagram component instance -->\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [selectedItems]='selectedItems' [getNodeDefaults]='getNodeDefaults' [snapSettings]='snapSettings' [getCustomTool]='getCustomTool' [fixedUserHandleTemplate]='fixeduserhandleTemplate' (created)='create($event)' (fixedUserHandleClick)='fixedUserHandleClick($event)'>\n                <e-nodes>\n                    <e-node id='NewIdea' [width]=150 [height]=60 [offsetX]=300 [offsetY]=60 [shape]=terminator>\n                        <e-node-annotations>\n                            <e-node-annotation content='New idea identified'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Meeting' [width]=150 [height]=60 [offsetX]=300 [offsetY]=155 [shape]=process>\n                        <e-node-annotations>\n                            <e-node-annotation content='Meeting with board'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='BoardDecision' [width]=150 [height]=110 [offsetX]=300 [offsetY]=280 [shape]=decision>\n                        <e-node-annotations>\n                            <e-node-annotation content='Board decides \\n whether to proceed'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Project' [width]=150 [height]=60 [offsetX]=300 [offsetY]=430 [shape]=decision>\n                        <e-node-annotations>\n                            <e-node-annotation content='Find Project manager'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='End' [width]=150 [height]=60 [offsetX]=300 [offsetY]=555 [shape]=process>\n                        <e-node-annotations>\n                            <e-node-annotation content='Implement and Deliver'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Decision' [width]=250 [height]=60 [offsetX]=530 [offsetY]=60 [shape]=card>\n                        <e-node-fixeduserhandles>\n                            <e-node-fixeduserhandle  [width]=20 [height]=20 [offset]=\"fixedUserHandleOffset\">\n                            </e-node-fixeduserhandle>\n                        </e-node-fixeduserhandles>\n                        <e-node-annotations>\n                            <e-node-annotation content='Decision process for new software ideas'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Reject' [width]=150 [height]=60 [offsetX]=550 [offsetY]=280 [shape]=process>\n                        <e-node-annotations>\n                            <e-node-annotation content='Reject'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='Resources' [width]=150 [height]=60 [offsetX]=550 [offsetY]=430 [shape]=process>\n                        <e-node-annotations>\n                            <e-node-annotation content='Hire new resources'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                </e-nodes>\n                <e-connectors>\n                    <e-connector id='connector1' sourceID='NewIdea' targetID='Meeting'>\n                    </e-connector>\n                    <e-connector id='connector2' sourceID='Meeting' targetID='BoardDecision'>\n                    </e-connector>\n                    <e-connector id='connector3' sourceID='BoardDecision' targetID='Project'>\n                    </e-connector>\n                    <e-connector id='connector4' sourceID='Project' targetID='End'>\n                    </e-connector>\n                    <e-connector id='connector5' sourceID='BoardDecision' targetID='Reject'>\n                    </e-connector>\n                    <e-connector id='connector6' sourceID='Project' targetID='Resources'>\n                    </e-connector>\n                </e-connectors>\n                <ng-template #fixeduserhandleTemplate>\n                    <div style=\"width: 100%; height: 100%\">\n                        <button style=\"border-radius: 50%; width: 25px; height: 25px; border: none; cursor: context-menu; padding: 0; display: flex; align-items: center; justify-content: center; background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/delete.png); background-size: cover; background-position: center;\">\n                        </button>\n                      </div>\n                </ng-template>\n            </ejs-diagram>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">\n                Properties\n            </div>\n            <div class=\"row property-panel-content\" id=\"alignment\">\n                <div class=\"row row-header sb-child-row\">\n                    Alignment\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"image-pattern-style\" id=\"left\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/bottoml.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"right\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/bottomr.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"topr\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/topr.png);\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\" id=\"pattern\">\n                <div class=\"row row-header sb-child-row\">\n                    Appearance\n                </div>\n                <div class=\"row sb-child-row\">\n                    <div class=\"image-pattern-style\" id=\"pattern1\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/pattern1.png); margin-right: 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern2\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/pattern2.png); margin: 0px 4px\">\n                    </div>\n                    <div class=\"image-pattern-style\" id=\"pattern3\" style=\"background-image: url(https://ej2.syncfusion.com/angular/demos/assets/diagram/Images/user-handle/pattern3.png);\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}