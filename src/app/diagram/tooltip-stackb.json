{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, NodeModel, ConnectorModel, DiagramModule, Diagram, BpmnDiagrams } from '@syncfusion/ej2-angular-diagrams';\nimport { NodeConstraints, SnapConstraints, SnapSettingsModel } from '@syncfusion/ej2-diagrams';\nimport { ChangeEventArgs as CheckBoxChangeEventArgs } from '@syncfusion/ej2-buttons';\nimport { TooltipModel } from '@syncfusion/ej2-angular-popups';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nDiagram.Inject(BpmnDiagrams);\n\n/**\n * Sample for tooltip\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, DropDownListModule, NumericTextBoxModule, CheckBoxModule, ]\n})\n\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    public dropdownIndex: number = 0;\n\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public tooltip: any = {\n        content: this.getContent(), position: 'TopLeft', relativeMode: 'Object',\n        animation: { open: { effect: 'FadeZoomIn', delay: 0 }, close: { effect: 'FadeZoomOut', delay: 0 } }\n    };\n    //Initializes diagram nodes\n    public nodes: NodeModel[] = [\n            {\n                id: 'node1', width: 60, height: 60, offsetX: 35, offsetY: 120,\n                annotations: [{ content: 'Customer query', offset: { x: 0.5, y: 1 }, margin: { top: 15 } }],\n                tooltip: { content: 'Queries from the customer' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\n            },\n            {\n                id: 'node2', width: 75, height: 70, offsetX: 140, offsetY: 120,\n                annotations: [{ content: 'Enough details?', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Whether the provided information is enough?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\n            },\n            {\n                id: 'node3', width: 60, height: 50, offsetX: 270, offsetY: 120,\n                annotations: [{ content: 'Analyse', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Analysing the query' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n            },\n            {\n                id: 'node4', width: 75, height: 70, offsetX: 370, offsetY: 120, shape: {\n                    type: 'Bpmn', shape: 'Gateway',\n                    gateway: { type: 'Exclusive' }\n                },\n                tooltip: { content: 'proceed to validate?' },\n            },\n            {\n                id: 'node5', width: 75, height: 70, offsetX: 570, offsetY: 120,\n                annotations: [{ content: 'Validate', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Whether the reported/requested bug/feature is valid?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\n            },\n            {\n                id: 'node6', width: 60, height: 60, offsetX: 720, offsetY: 120,\n                tooltip: { content: 'Send the invalid message to customer' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node7', width: 60, height: 50, offsetX: 140, offsetY: 280,\n                annotations: [{ content: 'Request', offset: { x: 0.50, y: 0.50 }, margin: { top: 5 } }],\n                tooltip: { content: 'Requesting for more information' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task', task: { type: 'Send' } } }\n            },\n            {\n                id: 'node8', width: 60, height: 60, offsetX: 370, offsetY: 280,\n                tooltip: { content: 'Share the User Guide/Knowledge Base link' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\n            },\n            {\n                id: 'node9', width: 70, height: 50, offsetX: 570, offsetY: 280,\n                annotations: [{ content: 'Log bug/feature', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Log the bug/feature' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } }\n            },\n            {\n                id: 'node10', width: 75, height: 55, offsetX: 390, offsetY: 430,\n                annotations: [{ content: 'Implement', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Fix the bug/Add the feature' },\n                shape: {\n                    type: 'Bpmn', shape: 'Activity', activity: {\n                        activity: 'SubProcess', subProcess: {\n                            collapsed: false,\n                            events: [{ event: 'Intermediate', trigger: 'Timer', offset: { x: 0.5, y: 1 }, width: 25, height: 25 }]\n                        }\n                    }\n                }\n            },\n            {\n                id: 'node12', width: 60, height: 60, offsetX: 265, offsetY: 430, tooltip: { content: 'Provide the solution' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node13', width: 60, height: 60, offsetX: 720, offsetY: 430, tooltip: { content: 'Share the task details' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node14', width: 60, height: 60, offsetX: 570, offsetY: 430, shape: {\n                    type: 'Bpmn', shape: 'Gateway',\n                    gateway: { type: 'Parallel' }\n                },\n                tooltip: { content: 'can log?' },\n            },\n    ];\n    //Initializes diagram connectors\n    public connectors: ConnectorModel[] = [\n        { id: 'connector1', sourceID: 'node1', targetID: 'node2' },\n        { id: 'connector2', sourceID: 'node2', targetID: 'node3' },\n        { id: 'connector3', sourceID: 'node3', targetID: 'node4' },\n        {\n            id: 'connector4', sourceID: 'node4', targetID: 'node5',\n            annotations: [{ content: 'Feature/Bug', offset: 0.5, style: { fill: 'white', textWrapping: 'Wrap' } }]\n        },\n        {\n            id: 'connector5', sourceID: 'node5', targetID: 'node6',\n            annotations: [{ content: 'Invalid', offset: 0.5, style: { fill: 'white' } }]\n        },\n        { id: 'connector6', sourceID: 'node2', targetID: 'node7' },\n        {\n            id: 'connector7', sourceID: 'node4', targetID: 'node8',\n            annotations: [{ content: 'How to?', offset: 0.5, style: { fill: 'white' } }]\n        },\n        { id: 'connector8', sourceID: 'node5', targetID: 'node9' },\n        { id: 'connector9', sourceID: 'node14', targetID: 'node13' },\n        {\n            id: 'connector10', sourceID: 'node7', targetID: 'node3', type: 'Orthogonal',\n            segments: [{ type: 'Orthogonal', length: 100, direction: 'Right' }, { type: 'Orthogonal', length: 100, direction: 'Top' }]\n        },\n        { id: 'connector11', sourceID: 'node14', targetID: 'node10' },\n        { id: 'connector12', sourceID: 'node10', targetID: 'node12' },\n        { id: 'connector13', sourceID: 'node9', targetID: 'node14' },\n    ];\n    //Collection of relative modes for tooltip\n    public modeValue: { [key: string]: Object }[] = [\n        { type: 'Object', text: 'Object' },\n        { type: 'Mouse', text: 'Mouse' },\n    ];\n\n    //Collection of positions for tooltip\n    public PositionValue: { [key: string]: Object }[] = [\n        { type: 'TopLeft', text: 'Top Left' },\n        { type: 'TopCenter', text: 'Top Center' },\n        { type: 'TopRight', text: 'Top Right' },\n        { type: 'BottomLeft', text: 'Bottom Left' },\n        { type: 'BottomCenter', text: 'Bottom Center' },\n        { type: 'BottomRight', text: 'Bottom Right' },\n        { type: 'LeftTop', text: 'Left Top' },\n        { type: 'LeftCenter', text: 'Left Center' },\n        { type: 'LeftBottom', text: 'Left Bottom' },\n        { type: 'RightTop', text: 'Right Top' },\n        { type: 'RightCenter', text: 'Right Center' },\n        { type: 'RightBottom', text: 'Right Bottom' },\n    ];\n\n    //Collection of effects for tooltip\n    public EffectValue: { [key: string]: Object }[] = [\n        { type: 'FadeIn', text: 'Fade In' },\n        { type: 'FadeOut', text: 'Fade Out' },\n        { type: 'FadeZoomIn', text: 'Fade Zoom In' },\n        { type: 'FadeZoomOut', text: 'Fade Zoom Out' },\n        { type: 'FlipXDownIn', text: 'FlipX Down In' },\n        { type: 'FlipXDownOut', text: 'FlipX Down Out' },\n        { type: 'FlipXUpIn', text: 'FlipX Up In' },\n        { type: 'FlipXUpOut', text: 'FlipX Up Out' },\n        { type: 'FlipYLeftIn', text: 'FlipY Left In' },\n        { type: 'FlipYLeftOut', text: 'FlipY Left Out' },\n        { type: 'FlipYRightIn', text: 'FlipY Right In' },\n        { type: 'FlipYRightOut', text: 'FlipY Right Out' },\n        { type: 'ZoomIn', text: 'Zoom In' },\n        { type: 'ZoomOut', text: 'Zoom Out' },\n        { type: 'None', text: 'None' },\n    ];\n\n    public fields: Object = { value: 'type', text: 'text' };\n\n    //set content for diagram tooltip\n    public getContent(): HTMLElement {\n        let tooltipContent: HTMLElement = document.createElement('div');\n        tooltipContent.innerHTML = '<div style=\"background-color: #f4f4f4; color: black; border-width:1px;border-style: solid;border-color: #d3d3d3; border-radius: 8px;white-space: nowrap;\"> <span style=\"margin: 10px;\"> Tooltip !!! </span> </div>';\n        return tooltipContent;\n    }\n\n    //set default value for connectors.\n    public getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n        connector.type = 'Orthogonal';\n        return connector;\n    }\n    //set default value for Nodes.\n    public getNodeDefaults(obj: NodeModel): NodeModel {\n        obj.offsetX += 0.5;\n        obj.offsetY += 0.5;\n        obj.constraints = NodeConstraints.Default | NodeConstraints.Tooltip;\n        obj.style = { strokeWidth: 2 };\n        return obj;\n    }\n\n    //Change relative mode for tooltip\n    public relativeModeChange(args: any): void {\n        if (args.value === 'Mouse') {\n            this.diagram.tooltip.relativeMode = 'Mouse';\n        } else {\n            this.diagram.tooltip.relativeMode = 'Object';\n        }\n    }\n\n    //Change position for tooltip\n    public positionChange(args: any): void {\n        let nodes: NodeModel[] = this.diagram.nodes;\n        for (let i: number = 0; i < nodes.length; i++) {\n            if (nodes[i].tooltip) {\n                nodes[i].tooltip.position = args.value;\n                this.diagram.dataBind();\n            }\n        }\n    }\n\n    //Change effect for tooltip\n    public effectChange(args: any): void {\n        this.diagram.tooltip.animation.open.effect = args.value;\n        this.diagram.tooltip.animation.close.effect = args.value;\n    }\n\n    //Change animation for tooltip\n    public animationChange(args: any): void {\n        this.diagram.tooltip.animation.close.duration = args.value;\n        this.diagram.tooltip.animation.open.duration = args.value;\n    }\n    public created(): void {\n        this.diagram.fitToPage({ mode: 'Width' });\n    }\n    //Enable or disable the sticky mode\n    public isStickyChange(args: CheckBoxChangeEventArgs): void {\n        for (let i: number = 0; i < this.diagram.nodes.length; i++) {\n            let node: NodeModel = this.diagram.nodes[i];\n            if (args.checked) {\n                (this.diagram.tooltipObject as TooltipModel).isSticky = true;\n                (node.tooltip as TooltipModel).isSticky = true;\n            } else {\n                (this.diagram.tooltipObject as TooltipModel).isSticky = false;\n                (node.tooltip as TooltipModel).isSticky = false;\n            }\n            this.diagram.dataBind();\n        }\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section\" style=\"border-right: 1px solid #D7D7D7\">\n    <style>\n\n        #diagramtooltipPropertySection .property-panel-header {\n            margin-left: 10px;\n        }\n        #diagramtooltipPropertySection td{\n            width: 50%;\n            padding-top: 5px;\n        }\n        #tooltipDiagramSection .content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n    </style>\n    <div id=\"tooltipDiagramSection\" class=\"content-wrapper\" style=\"width: 100%\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"645px\" [nodes]='nodes' [connectors]='connectors' [snapSettings]='snapSettings' (created)=\"created()\"\n            [tooltip]='tooltip' [getNodeDefaults]='getNodeDefaults' [getConnectorDefaults]='getConnectorDefaults'>\n        </ejs-diagram>\n    </div>\n</div>\n<div id=\"diagramtooltipPropertySection\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\" style=\"margin-left:0px\">\n        Properties\n    </div>\n    <div class=\"property-panel-content\">\n    <table id=\"property\" title=\"Properties\">\n        <tr>\n            <td>\n                <div>\n                    Relative mode\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-dropdownlist id=\"mode\" #mode [index]=\"dropdownIndex\" [dataSource]=\"modeValue\" [fields]=\"fields\" popupWidth='150' width='85%'\n                        (change)=\"relativeModeChange($event)\">\n                    </ejs-dropdownlist>\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Position\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-dropdownlist id=\"position\" #position [index]=\"dropdownIndex\" [dataSource]=\"PositionValue\" [fields]=\"fields\" popupWidth='150' width='85%'\n                        (change)=\"positionChange($event)\">\n                    </ejs-dropdownlist>\n                </div>\n            </td>\n        </tr>\n\n        <tr>\n            <td>\n                <div>\n                    Animation\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-numerictextbox id=\"duration\" value=\"100\" min=\"100\" max=\"2000\" step=\"100\" width=\"85%\" (change)=\"animationChange($event)\"></ejs-numerictextbox>\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Effect\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-dropdownlist id=\"effect\" #effect [dataSource]=\"EffectValue\" [index]=\"dropdownIndex\" [fields]=\"fields\"  popupWidth='150' width='85%'\n                        (change)=\"effectChange($event)\">\n                    </ejs-dropdownlist>\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Sticky Mode\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-checkbox id=\"isSticky\" #isSticky [checked]=\"false\" (change)=\"isStickyChange($event)\" ></ejs-checkbox>\n                </div>\n            </td>\n        </tr>\n    </table>\n</div>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}