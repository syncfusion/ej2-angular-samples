{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, NodeModel, ConnectorModel } from '@syncfusion/ej2-angular-diagrams';\nimport { NodeConstraints, SnapConstraints, SnapSettingsModel } from '@syncfusion/ej2-diagrams';\n\n/**\n * Sample for tooltip\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    public dropdownIndex: number = 0;\n\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public tooltip: any = {\n        content: this.getcontent(), position: 'TopLeft', relativeMode: 'Object',\n        animation: { open: { effect: 'FadeZoomIn', delay: 0 }, close: { effect: 'FadeZoomOut', delay: 0 } }\n    };\n\n    public nodes: NodeModel[] = [\n            {\n                id: 'node1', width: 60, height: 60, offsetX: 35, offsetY: 120,\n                annotations: [{ content: 'Customer query', offset: { x: 0.5, y: 1 }, margin: { top: 15 } }],\n                tooltip: { content: 'Queries from the customer' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\n            },\n            {\n                id: 'node2', width: 75, height: 70, offsetX: 140, offsetY: 120,\n                annotations: [{ content: 'Enough details?', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Whether the provided information is enough?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\n            },\n            {\n                id: 'node3', width: 60, height: 50, offsetX: 270, offsetY: 120,\n                annotations: [{ content: 'Analyse', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Analysing the query' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n            },\n            {\n                id: 'node4', width: 75, height: 70, offsetX: 370, offsetY: 120, shape: {\n                    type: 'Bpmn', shape: 'Gateway',\n                    gateway: { type: 'Exclusive' }\n                },\n                tooltip: { content: 'proceed to validate?' },\n            },\n            {\n                id: 'node5', width: 75, height: 70, offsetX: 570, offsetY: 120,\n                annotations: [{ content: 'Validate', offset: { x: 0.50, y: 0.50 } }],\n                tooltip: { content: 'Whether the reported/requested bug/feature is valid?' }, shape: { type: 'Bpmn', shape: 'Gateway' }\n            },\n            {\n                id: 'node6', width: 60, height: 60, offsetX: 720, offsetY: 120,\n                tooltip: { content: 'Send the invalid message to customer' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node7', width: 60, height: 50, offsetX: 140, offsetY: 280,\n                annotations: [{ content: 'Request', offset: { x: 0.50, y: 0.50 }, margin: { top: 5 } }],\n                tooltip: { content: 'Requesting for more information' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task', task: { type: 'Send' } } }\n            },\n            {\n                id: 'node8', width: 60, height: 60, offsetX: 370, offsetY: 280,\n                tooltip: { content: 'Share the User Guide/Knowledge Base link' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'Start', trigger: 'Message' } }\n            },\n            {\n                id: 'node9', width: 70, height: 50, offsetX: 570, offsetY: 280,\n                annotations: [{ content: 'Log bug/feature', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Log the bug/feature' },\n                shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } }\n            },\n            {\n                id: 'node10', width: 75, height: 55, offsetX: 390, offsetY: 430,\n                annotations: [{ content: 'Implement', offset: { x: 0.50, y: 0.50 } }], tooltip: { content: 'Fix the bug/Add the feature' },\n                shape: {\n                    type: 'Bpmn', shape: 'Activity', activity: {\n                        activity: 'SubProcess', subProcess: {\n                            collapsed: false,\n                            events: [{ event: 'Intermediate', trigger: 'Timer', offset: { x: 0.5, y: 1 }, width: 25, height: 25 }]\n                        }\n                    }\n                }\n            },\n            {\n                id: 'node12', width: 60, height: 60, offsetX: 265, offsetY: 430, tooltip: { content: 'Provide the solution' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node13', width: 60, height: 60, offsetX: 720, offsetY: 430, tooltip: { content: 'Share the task details' },\n                shape: { type: 'Bpmn', shape: 'Event', event: { event: 'End', trigger: 'Message' } }\n            },\n            {\n                id: 'node14', width: 60, height: 60, offsetX: 570, offsetY: 430, shape: {\n                    type: 'Bpmn', shape: 'Gateway',\n                    gateway: { type: 'Parallel' }\n                },\n                tooltip: { content: 'can log?' },\n            },\n    ];\n\n    public connectors: ConnectorModel[] = [\n        { id: 'connector1', sourceID: 'node1', targetID: 'node2' },\n        { id: 'connector2', sourceID: 'node2', targetID: 'node3' },\n        { id: 'connector3', sourceID: 'node3', targetID: 'node4' },\n        {\n            id: 'connector4', sourceID: 'node4', targetID: 'node5',\n            annotations: [{ content: 'Feature/Bug', offset: 0.5, style: { fill: 'white', textWrapping: 'Wrap' } }]\n        },\n        {\n            id: 'connector5', sourceID: 'node5', targetID: 'node6',\n            annotations: [{ content: 'Invalid', offset: 0.5, style: { fill: 'white' } }]\n        },\n        { id: 'connector6', sourceID: 'node2', targetID: 'node7' },\n        {\n            id: 'connector7', sourceID: 'node4', targetID: 'node8',\n            annotations: [{ content: 'How to?', offset: 0.5, style: { fill: 'white' } }]\n        },\n        { id: 'connector8', sourceID: 'node5', targetID: 'node9' },\n        { id: 'connector9', sourceID: 'node14', targetID: 'node13' },\n        {\n            id: 'connector10', sourceID: 'node7', targetID: 'node3', type: 'Orthogonal',\n            segments: [{ type: 'Orthogonal', length: 100, direction: 'Right' }, { type: 'Orthogonal', length: 100, direction: 'Top' }]\n        },\n        { id: 'connector11', sourceID: 'node14', targetID: 'node10' },\n        { id: 'connector12', sourceID: 'node10', targetID: 'node12' },\n        { id: 'connector13', sourceID: 'node9', targetID: 'node14' },\n    ];\n    // FontType Collection\n    public modevalue: { [key: string]: Object }[] = [\n        { type: 'Object', text: 'Object' },\n        { type: 'Mouse', text: 'Mouse' },\n    ];\n\n    // FontType Collection\n    public PositionValue: { [key: string]: Object }[] = [\n        { type: 'TopLeft', text: 'TopLeft' },\n        { type: 'TopCenter', text: 'TopCenter' },\n        { type: 'TopRight', text: 'TopRight' },\n        { type: 'BottomLeft', text: 'BottomLeft' },\n        { type: 'BottomCenter', text: 'BottomCenter' },\n        { type: 'BottomRight', text: 'BottomRight' },\n        { type: 'LeftTop', text: 'LeftTop' },\n        { type: 'LeftCenter', text: 'LeftCenter' },\n        { type: 'LeftBottom', text: 'LeftBottom' },\n        { type: 'RightTop', text: 'RightTop' },\n        { type: 'RightCenter', text: 'RightCenter' },\n        { type: 'RightBottom', text: 'RightBottom' },\n    ];\n\n    //FontType Collection\n    public EffectValue: { [key: string]: Object }[] = [\n        { type: 'FadeIn', text: 'FadeIn' },\n        { type: 'FadeOut', text: 'FadeOut' },\n        { type: 'FadeZoomIn', text: 'FadeZoomIn' },\n        { type: 'FadeZoomOut', text: 'FadeZoomOut' },\n        { type: 'FlipXDownIn', text: 'FlipXDownIn' },\n        { type: 'FlipXDownOut', text: 'FlipXDownOut' },\n        { type: 'FlipXUpIn', text: 'FlipXUpIn' },\n        { type: 'FlipXUpOut', text: 'FlipXUpOut' },\n        { type: 'FlipYLeftIn', text: 'FlipYLeftIn' },\n        { type: 'FlipYLeftOut', text: 'FlipYLeftOut' },\n        { type: 'FlipYRightIn', text: 'FlipYRightIn' },\n        { type: 'FlipYRightOut', text: 'FlipYRightOut' },\n        { type: 'ZoomIn', text: 'ZoomIn' },\n        { type: 'ZoomOut', text: 'ZoomOut' },\n        { type: 'None', text: 'None' },\n    ];\n\n    public contentValue: { [key: string]: Object }[] = [\n        { type: 'HTML Element', text: 'HTML Element' },\n        { type: 'Text', text: 'Text' },\n    ];\n\n    public fields: Object = { value: 'type', text: 'text' };\n\n    public getcontent(): HTMLElement {\n        let tooltipContent: HTMLElement = document.createElement('div');\n        tooltipContent.innerHTML = '<div style=\"background-color: #f4f4f4; color: black; border-width:1px;border-style: solid;border-color: #d3d3d3; border-radius: 8px;white-space: nowrap;\"> <span style=\"margin: 10px;\"> Tooltip !!! </span> </div>';\n        return tooltipContent;\n    }\n\n    public getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n        connector.type = 'Orthogonal';\n        return connector;\n    }\n    public getNodeDefaults(obj: NodeModel): NodeModel {\n        obj.offsetX += 0.5;\n        obj.offsetY += 0.5;\n        obj.constraints = NodeConstraints.Default | NodeConstraints.Tooltip;\n        obj.style = { strokeWidth: 2 };\n        return obj;\n    }\n\n    public relativeModeChange(args: any): void {\n        if (args.value === 'Mouse') {\n            this.diagram.tooltip.relativeMode = 'Mouse';\n        } else {\n            this.diagram.tooltip.relativeMode = 'Object';\n        }\n    }\n\n    public positionChange(args: any): void {\n        let nodes: NodeModel[] = this.diagram.nodes;\n        for (let i: number = 0; i < nodes.length; i++) {\n            if (nodes[i].tooltip) {\n                nodes[i].tooltip.position = args.value;\n                this.diagram.dataBind();\n            }\n        }\n    }\n\n    public effectChange(args: any): void {\n        this.diagram.tooltip.animation.open.effect = args.value;\n        this.diagram.tooltip.animation.close.effect = args.value;\n    }\n\n    public htmlChange(args: any): void {\n        let tooltipContent: HTMLDivElement = document.createElement('div');\n        let Description: any = args.value.toString();\n        tooltipContent.innerHTML = '<div style=\"background-color: #f4f4f4; color: black; border-width:1px;border-style: solid;border-color: #d3d3d3; border-radius: 8px;corner-radius:2px;white-space: nowrap;\"> <span style=\"margin: 10px;\"> ' + Description + ' </span>';\n        this.diagram.tooltip.content = tooltipContent;\n        this.diagram.dataBind();\n    }\n\n    public textChange(args: any): void {\n        this.diagram.tooltip.content = args.value.toString();\n        this.diagram.dataBind();\n    }\n\n    public contentChange(args: any): void {\n        let HtmlBlock: HTMLElement = document.getElementById('htmlContentDiv')\n        let textBlock: HTMLElement = document.getElementById('textContentDiv')\n        if (args.value === 'HTML Element') {\n            textBlock.style.display = 'block';\n            HtmlBlock.style.display = 'none';\n        } else {\n            HtmlBlock.style.display = 'block';\n            textBlock.style.display = 'none';\n        }\n    }\n\n    public animationChange(args: any): void {\n        this.diagram.tooltip.animation.close.duration = args.value;\n        this.diagram.tooltip.animation.open.duration = args.value;\n    }\n    public created(): void {\n        this.diagram.fitToPage({ mode: 'Width' });\n    }\n}","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-8 control-section\" style=\"border-right: 1px solid #D7D7D7\">\n    <style>\n         #tooltipDiagramSection .image-pattern-style {\n            background-color: white;\n            background-size: contain;\n            background-repeat: no-repeat;\n            height: 75px;\n            width: calc((100% - 12px) / 3);\n            cursor: pointer;\n            border: 1px solid #D5D5D5;\n            background-position: center;\n            float: left;\n        }\n\n        #tooltipDiagramSection .image-pattern-style:hover {\n            border-color: gray;\n            border-width: 2px;\n        }\n\n        #tooltipDiagramSection .row {\n            margin-left: 0px;\n            margin-right: 0px;\n        }\n\n        #tooltipDiagramSection .row-header {\n            font-size: 13px;\n            font-weight: 500;\n        }\n\n        #tooltipDiagramSection .e-selected-style {\n            border-color: #006CE6;\n            border-width: 2px;\n        }\n\n        #tooltipDiagramSection .e-checkbox-wrapper .e-label {\n            font-size: 12px;\n        }\n\n        #tooltipPropertySection .property-panel-header {\n            margin-left: 10px;\n        }\n\n        .content-wrapper {\n            border: 1px solid #D7D7D7;\n        }\n    </style>\n    <div id=\"tooltipDiagramSection\" class=\"content-wrapper\" style=\"width: 100%\">\n        <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"645px\" [nodes]='nodes' [connectors]='connectors' [snapSettings]='snapSettings' (created)=\"created()\"\n            [tooltip]='tooltip' [getNodeDefaults]='getNodeDefaults' [getConnectorDefaults]='getConnectorDefaults'>\n        </ejs-diagram>\n    </div>\n</div>\n<div id=\"tooltipPropertySection\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\" style=\"margin-left:0px\">\n        Properties\n    </div>\n    <div class=\"property-panel-content\">\n    <table id=\"property\" title=\"Properties\">\n        <tr>\n            <td>\n                <div>\n                    Relative mode\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-dropdownlist id=\"mode\" #mode [index]=\"dropdownIndex\" [dataSource]=\"modevalue\" [fields]=\"fields\" popupWidth='150' width='100%' placeholder='select a relative mode'\n                        (change)=\"relativeModeChange($event)\">\n                    </ejs-dropdownlist>\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Position\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-dropdownlist id=\"position\" #position [index]=\"dropdownIndex\" [dataSource]=\"PositionValue\" [fields]=\"fields\" popupWidth='150' width='100%' placeholder='select a position'\n                        (change)=\"positionChange($event)\">\n                    </ejs-dropdownlist>\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td></td>\n            <td>\n                <div id=\"textContentDiv\" class=\"row\" style=\"display: none\">\n                    <div>\n                        <ejs-textbox id=\"textContent\" placeholder=\"Enter text content\" floatLabelType=\"Auto\" (change)=\"textChange\"></ejs-textbox>\n                    </div>\n                </div>\n                <div id=\"htmlContentDiv\" class=\"row\" style=\"display: none\">\n                    <div>\n                        <ejs-textbox id=\"htmlContent\" placeholder=\"Enter html content\" floatLabelType=\"Auto\" (change)=\"htmlChange\"></ejs-textbox>\n                    </div>\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Animation\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-numerictextbox id=\"duration\" value=\"1000\" min=\"1000\" max=\"6000\" step=\"100\" (change)=\"animationChange\"></ejs-numerictextbox>\n                </div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <div>\n                    Effect\n                </div>\n            </td>\n            <td>\n                <div style=\"margin-left:15px\">\n                    <ejs-dropdownlist id=\"effect\" #effect [dataSource]=\"EffectValue\" [index]=\"dropdownIndex\" [fields]=\"fields\" popupWidth='150' width='100%' placeholder='select a effect type'\n                        (change)=\"effectChange($event)\">\n                    </ejs-dropdownlist>\n                </div>\n            </td>\n        </tr>\n    </table>\n</div>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}"}