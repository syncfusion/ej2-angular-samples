{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n    Diagram, ConnectorModel, Node, DataBinding, NodeConstraints, HierarchicalTree, randomId, NodeModel, Connector,\n    ISelectionChangeEventArgs, IEndChangeEventArgs, SnapConstraints, SnapSettingsModel, TextBounds\n} from '@syncfusion/ej2-diagrams';\nimport { ClickEventArgs } from '@syncfusion/ej2-navigations';\nimport { ChangeEventArgs, DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport { DialogComponent, DialogModule } from '@syncfusion/ej2-angular-popups';\nimport { ToolbarComponent, ToolbarModule } from '@syncfusion/ej2-angular-navigations';\nimport { TextBox } from '@syncfusion/ej2-inputs';\nimport { Ajax } from '@syncfusion/ej2-base';\n\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\n\nDiagram.Inject(DataBinding, HierarchicalTree);\n/**\n * Sample for serialization\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ ToolbarModule, DiagramModule, DialogModule, TextBoxModule, DropDownListModule, ]\n})\n\nexport class AppComponent {\n\n    public fields: Object = { text: 'Label', value: 'Name' };\n    public dlgButtons: Object[] = [{ click: this.dlgButtonClick.bind(this), buttonModel: { content: 'Update', isPrimary: true } }];\n    public nodeData: { [key: string]: Object; }[] = [];\n    public sourceID: string;\n    public targetID: string;\n\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n\n    @ViewChild('dialog')\n    public dialog: DialogComponent;\n\n    @ViewChild('toolbar')\n    public toolbar: ToolbarComponent;\n\n    @ViewChild('SourceId')\n    public sourceDropDown: DropDownList;\n\n    @ViewChild('TargetId')\n    public targetDropDown: DropDownList;\n\n    @ViewChild('Description1')\n    public description: TextBox;\n\n    @ViewChild('Color')\n    public color: TextBox;\n\n    public layout: Object = {\n        type: 'HierarchicalTree', verticalSpacing: 40\n    };\n\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n\n    public data: Object = {\n      id: 'Name',\n      // Define URL to perform CRUD operations with nodes records in database.\n      crudAction: {\n        read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetNodes',\n        create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddNodes',\n        update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateNodes',\n        destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteNodes',\n        customFields: ['Id', 'Description', 'Color']\n      },\n      connectionDataSource: {\n        id: 'Name',\n        sourceID: 'SourceNode',\n        targetID: 'TargetNode',\n        // Define URL to perform CRUD operations with connector records in database.\n        crudAction: {\n          read: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/GetConnectors',\n          create: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/AddConnectors',\n          update: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/UpdateConnectors',\n          destroy: 'https://js.syncfusion.com/demos/ejServices/api/Diagram/DeleteConnectors',\n          customFields: ['Id']\n        }\n      }\n    };\n    // Set connector default properties.\n    public getConnectorDefaults(connector: ConnectorModel, diagram: Diagram): ConnectorModel {\n        connector.type = 'Orthogonal';\n        connector.style.fill = '#707070';\n        connector.style.strokeColor = '#707070';\n        connector.targetDecorator = {\n            style: {\n                strokeColor: '#707070',\n                fill: '#707070'\n            },\n        };\n        return connector;\n    }\n\n    // Set node default properties.\n    public getNodeDefaults(obj: Node, diagram: Diagram): NodeModel {\n        obj.width = 100;\n        obj.height = 50;\n        obj.shape = { type: 'Basic', shape: 'Rectangle' };\n        obj.style = { strokeWidth: 1, strokeColor: '#DDDDDD' };\n        return obj;\n    }\n\n    // custom code start\n    public dlgButtonClick(evt: Event): void {\n        let dialogHeader: string = this.dialog.header as string;\n        let description: string = this.description.value;\n        let color: string = this.color.value;\n        let selectedItem: NodeModel | ConnectorModel;\n        if (this.diagram.selectedItems.nodes.length > 0) {\n            selectedItem = this.diagram.selectedItems.nodes[0];\n        }\n        if (this.diagram.selectedItems.connectors.length > 0) {\n            selectedItem = this.diagram.selectedItems.connectors[0];\n        }\n        if (dialogHeader === 'Add') {\n            let node: NodeModel | DataInfo = {\n                id: 'node' + randomId(),\n                style: { fill: color }, Description: description, Color: color, Id: Math.floor((Math.random() * 1000) + 100),\n            };\n            let connector: ConnectorModel | DataInfo = {\n                id: 'connector' + randomId(),\n                sourceID: selectedItem.id, targetID: (node as Node).id, Id: Math.floor((Math.random() * 1000) + 100),\n            };\n            this.diagram.add(node as NodeModel);\n            this.diagram.add(connector as ConnectorModel);\n            this.diagram.doLayout();\n            // Insert newly added elements into the database.\n            this.diagram.insertData();\n            this.nodeData.push({ Name: (node as Node).id, Label: description });\n            this.sourceDropDown.dataSource = this.getDataSource();\n            this.sourceDropDown.dataBind();\n            this.targetDropDown.dataSource = this.getDataSource();\n            this.targetDropDown.dataBind();\n        } else {\n            if (selectedItem instanceof Connector) {\n                // Update sourceNode and targetNode at runtime.\n                selectedItem.sourceID = this.sourceID ? this.sourceID : selectedItem.sourceID;\n                selectedItem.targetID = this.targetID ? this.targetID : selectedItem.targetID;\n                this.diagram.dataBind();\n                this.diagram.doLayout();\n            } else {\n                // update an node text and node bgColor.\n                (selectedItem as DataInfo).Description = description;\n                (selectedItem as DataInfo).Color = color;\n                selectedItem.annotations[0].content = description;\n                selectedItem.style.fill = color;\n                this.diagram.dataBind();\n            }\n            this.diagram.updateData();\n        }\n        this.dialog.hide();\n    }\n\n    public toolbarCreate(args: Event): void {\n        this.enableToolbarItems(false);\n    }\n\n    // Set an sourceId of an selected Connector.\n    public sourceDropdownChange(args: ChangeEventArgs): void {\n        this.sourceID = args.value as string;\n    }\n\n    // Set an targetId of an selected Connector.\n    public targetDropdownChange(args: ChangeEventArgs): void {\n        this.targetID = args.value as string;\n    }\n\n    // Displays nodes name in dropdown.\n    public sourceDropdownCreate(args: Event): void {\n        if (this.sourceDropDown) {\n            this.sourceDropDown.dataSource = this.getDataSource();\n            this.sourceDropDown.dataBind();\n        }\n    }\n\n    // Displays nodes name in dropdown.\n    public targetDropdownCreate(args: Event): void {\n        if (this.targetDropDown) {\n            this.targetDropDown.dataSource = this.getDataSource();\n            this.targetDropDown.dataBind();\n        }\n    }\n    // custom code end\n\n    // Disable or Enable the toolbar items based on element selection.\n    public selectionChange(args: ISelectionChangeEventArgs): void {\n        if (args.state === 'Changing') {\n            if (args.newValue.length > 0) {\n                if (args.newValue[0] instanceof Node) {\n                    this.enableToolbarItems(true);\n                } else {\n                    this.toolbar.enableItems(document.getElementById(this.toolbar.items[0].id).parentElement, false);\n                    this.toolbar.enableItems(document.getElementById(this.toolbar.items[2].id).parentElement, true);\n                    this.toolbar.enableItems(document.getElementById(this.toolbar.items[4].id).parentElement, false);\n                }\n            } else {\n                this.enableToolbarItems(false);\n            }\n        }\n    }\n\n    // custom code start\n    // Enable or disable the toolbar items.\n    public enableToolbarItems(isEnableItem: boolean): void {\n        this.toolbar.enableItems(document.getElementById(this.toolbar.items[0].id).parentElement, isEnableItem);\n        this.toolbar.enableItems(document.getElementById(this.toolbar.items[2].id).parentElement, isEnableItem);\n        this.toolbar.enableItems(document.getElementById(this.toolbar.items[4].id).parentElement, isEnableItem);\n    }\n    // custom code end\n\n    public connectionChange(args: IEndChangeEventArgs): void {\n        if (args.state === 'Completed') {\n            if (!args.connector.targetID || !args.connector.sourceID) {\n                args.cancel = true;\n            }\n        }\n    }\n\n    // Set an label for each node.\n    public setNodeTemplate(obj: NodeModel): void {\n        obj.annotations = [{ style: { color: 'black' } }];\n        obj.annotations[0].content = (obj as DataInfo).Description;\n        obj.style = { fill: (obj as DataInfo).Color };\n        if ((obj as DataInfo).Id === 1) {\n            // Restrict Delete Constraints for root node.\n            obj.constraints = NodeConstraints.Default & ~NodeConstraints.Delete;\n        }\n    }\n\n    // custom code start\n    // Opens a dialog with textbox and dropdown control based on toolbar clicked items.\n    public toolbarClick(args: ClickEventArgs): void {\n        let selectedItem: NodeModel | ConnectorModel;\n        if (this.diagram.selectedItems.nodes.length > 0) {\n            selectedItem = this.diagram.selectedItems.nodes[0];\n        }\n        if (this.diagram.selectedItems.connectors.length > 0) {\n            selectedItem = this.diagram.selectedItems.connectors[0];\n        }\n        if (selectedItem) {\n            switch (args.item.tooltipText) {\n                case 'Add':\n                    this.openDialog('Add', '', '', true);\n                    break;\n                case 'Edit':\n                    if (selectedItem instanceof Connector) {\n                        let sourceNode: NodeModel = this.diagram.getObject(selectedItem.sourceID);\n                        let targetNode: NodeModel = this.diagram.getObject(selectedItem.targetID);\n                        this.openDialog('Edit', sourceNode.id, targetNode.id, false);\n                    } else {\n                        this.openDialog('Edit', (selectedItem as DataInfo).Description, (selectedItem as DataInfo).Color, true);\n                    }\n                    break;\n                case 'Delete':\n                    this.diagram.remove(selectedItem);\n                    this.diagram.doLayout();\n                    // Delete an selected items from database.\n                    this.diagram.removeData();\n                    let element: object = { Name: selectedItem.id, Label: (selectedItem as DataInfo).Description };\n                    let index: number = this.nodeData.indexOf(element as { [key: string]: Object; });\n                    this.nodeData.splice(index, 1);\n                    this.sourceDropDown.dataSource = this.getDataSource();\n                    this.sourceDropDown.dataBind();\n                    this.targetDropDown.dataSource = this.getDataSource();\n                    this.targetDropDown.dataBind();\n            }\n        }\n        switch (args.item.tooltipText) {\n            case 'Reset':\n                let callback = new Ajax(\"https://js.syncfusion.com/demos/ejServices/api/Diagram/ResetData\", 'POST');\n                callback.send().then();\n                this.diagram.refreshDiagram();\n                this.diagram.refresh();\n        }\n    }\n\n    public openDialog(title: string, description: string, color: string, isNode: boolean): void {\n        this.dialog.header = title as string;\n        if (isNode) {\n            this.hideClassElement('.showDropdown', 'none');\n            this.hideClassElement('.showLabel', 'block');\n            this.description.value = description;\n            this.color.value = color;\n        } else {\n            this.hideClassElement('.showDropdown', 'block');\n            this.hideClassElement('.showLabel', 'none');\n            this.sourceDropDown.value = description;\n            this.targetDropDown.value = color;\n        }\n        this.dialog.show();\n    }\n\n    // Show or Hide the Textbox and Dropdown in dialog control\n    public hideClassElement(className: string, display: string): void {\n        let i: number;\n        let showDropdown: NodeListOf<HTMLElement> = document.querySelectorAll(className);\n        for (i = 0; i < showDropdown.length; i++) {\n            showDropdown[i].style.display = display;\n        }\n    }\n    // custom code end\n\n    // Returns an node text collection in diagram.\n    public getDataSource(): { [key: string]: Object; }[] {\n        let i: number;\n        this.nodeData = [];\n        for (i = 0; i < this.diagram.nodes.length; i++) {\n            let node: NodeModel = this.diagram.nodes[i];\n            let element: object = { Name: node.id, Label: (node as DataInfo).Description };\n            this.nodeData.push(element as { [key: string]: Object; });\n        }\n        return this.nodeData;\n    }\n}\ninterface DataInfo {\n    Description: string;\n    Color: string;\n    Id: number;\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class='control-section'>\n    <div style='width: 100%;height: 10%'>\n        <!-- Initializes ToolBar control. -->\n    <ejs-toolbar #toolbar id='toolbar' (clicked)='toolbarClick($event)' (created)='toolbarCreate($event)'>\n        <e-items>\n            <e-item id='Add' tooltipText='Add' prefixIcon='e-ddb-icons e-add' text='Add'></e-item>\n            <e-item type='Separator'></e-item>\n            <e-item id='Edit' tooltipText='Edit' prefixIcon='e-ddb-icons e-update' text='Edit'></e-item>\n            <e-item type='Separator'></e-item>\n            <e-item id='Delete' tooltipText='Delete' prefixIcon='e-ddb-icons e-delete' text='Delete'></e-item>\n            <e-item type='Separator'></e-item>\n            <e-item id='Reset' tooltipText='Reset' prefixIcon='e-ddb-icons e-reset' text='Reset'></e-item>\n        </e-items>\n    </ejs-toolbar>\n</div>\n<div style='width: 100%;height: 80%;border-width: 0 1px 1px 1px; border-style: solid; border-color:#D7D7D7'>\n    <div id='diagram-space' class='sb-mobile-diagram'>\n        <!-- Initializes Diagram control. -->\n    <ejs-diagram #diagram id='diagram' width='100%' height='600px' [layout]='layout' [dataSourceSettings]='data' [snapSettings]='snapSettings' [getConnectorDefaults]='getConnectorDefaults' [getNodeDefaults]='getNodeDefaults' [setNodeTemplate]='setNodeTemplate' (selectionChange)='selectionChange($event)'\n        (sourcePointChange)='connectionChange($event)' (targetPointChange)='connectionChange($event)'>\n    </ejs-diagram>\n   </div>\n  </div>\n</div>\n<!-- Initialize Dialog control -->\n<ejs-dialog #dialog id='editDialog' [buttons]='dlgButtons' width='300px' [visible]='false' isModal='true' showCloseIcon='true'>\n    <ng-template #content>\n            <div class='showLabel'>\n                <!-- Initialize Textbox control -->\n                <ejs-textbox #Description1 id='Description1' placeholder='Enter Description' floatLabelType='Always'></ejs-textbox>\n            </div>\n            <div class='showLabel' style='padding-top: 14px'>\n                <!-- Initialize Textbox control -->\n                <ejs-textbox #Color id='Color' placeholder='Enter Color' floatLabelType='Always'></ejs-textbox>\n            </div>\n            <div class='showDropdown'>\n                <!-- Initialize Dropdownlist control to display an sourceNodes in diagram. -->\n                <ejs-dropdownlist #SourceId id='SourceId' placeholder='select sourceId' [fields]='fields'\n                    popupHeight='220px' (change)='sourceDropdownChange($event)'(created)='sourceDropdownCreate($event)'>\n                </ejs-dropdownlist>\n            </div>\n            <div class='showDropdown' style='padding-top: 14px'>\n                <!-- Initialize Dropdownlist control to display an targetNodes in diagram. -->\n                <ejs-dropdownlist #TargetId id='TargetId' placeholder='select targetId' [fields]='fields'\n                    popupHeight='220px' (change)='targetDropdownChange($event)' (created)='targetDropdownCreate($event)'>\n                </ejs-dropdownlist>\n            </div>\n    </ng-template>\n</ejs-dialog>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}