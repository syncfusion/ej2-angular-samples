{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\", \"core-js\": \"2.6.9\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\nlet isMobile: boolean;\n\nexport function paletteIconClick() {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', showPaletteIcon, false);\n        }\n    }\n}\n\nexport function showPaletteIcon(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild,Inject } from '@angular/core';\nimport { DiagramComponent } from '@syncfusion/ej2-angular-diagrams';\nimport {\n  Diagram, NodeModel, UndoRedo, ConnectorModel, PointPortModel, Connector, FlowShapeModel,\n  SymbolInfo, IDragEnterEventArgs, SnapSettingsModel, MarginModel, TextStyleModel, StrokeStyleModel,\n  OrthogonalSegmentModel, Node, PaletteModel\n} from '@syncfusion/ej2-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { paletteIconClick } from './script/diagram-common';\nDiagram.Inject(UndoRedo);\n\n/**\n * Default FlowShape sample\n */\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  //Diagram Properties\n  public diagram: DiagramComponent;\n  constructor() {​​​​​​​\n    \n}​​​​​​​\n  public terminator: FlowShapeModel = { type: 'Flow', shape: 'Terminator' };\n  public process: FlowShapeModel = { type: 'Flow', shape: 'Process' };\n  public decision: FlowShapeModel = { type: 'Flow', shape: 'Decision' };\n  public data: FlowShapeModel = { type: 'Flow', shape: 'Data' };\n  public directdata: FlowShapeModel = { type: 'Flow', shape: 'DirectData' };\n\n  public margin: MarginModel = { left: 25, right: 25 };\n  public connAnnotStyle: TextStyleModel = { fill: 'white' };\n  public strokeStyle: StrokeStyleModel = { strokeDashArray: '2,2' };\n\n  public segments: OrthogonalSegmentModel = [{ type: 'Orthogonal', direction: 'Top', length: 120 }];\n  public segments1: OrthogonalSegmentModel = [\n    { type: 'Orthogonal', direction: 'Right', length: 100 }\n  ];\n\n  public nodeDefaults(node: NodeModel): NodeModel {\n    let obj: NodeModel = {};\n    if (obj.width === undefined) {\n      obj.width = 145;\n    } else {\n      let ratio: number = 100 / obj.width;\n      obj.width = 100;\n      obj.height *= ratio;\n    }\n    obj.style = { fill: '#357BD2', strokeColor: 'white' };\n    obj.annotations = [{ style: { color: 'white', fill: 'transparent' } }];\n    obj.ports = getPorts(node);\n    return obj;\n  }\n  public connDefaults(obj: Connector): void {\n    if (obj.id.indexOf('connector') !== -1) {\n      obj.type = 'Orthogonal';\n      obj.targetDecorator = { shape: 'Arrow', width: 10, height: 10 };\n    }\n  }\n  public created(): void {\n    this.diagram.fitToPage();\n  }\n  public interval: number[] = [\n    1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25,\n    9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75\n  ];\n\n  public snapSettings: SnapSettingsModel = {\n    horizontalGridlines: { lineColor: '#e0e0e0', lineIntervals: this.interval },\n    verticalGridlines: { lineColor: '#e0e0e0', lineIntervals: this.interval }\n  };\n\n  public dragEnter(args: IDragEnterEventArgs): void {\n    let obj: NodeModel = args.element as NodeModel;\n    if (obj && obj.width && obj.height) {\n      let oWidth: number = obj.width;\n      let oHeight: number = obj.height;\n      let ratio: number = 100 / obj.width;\n      obj.width = 100;\n      obj.height *= ratio;\n      obj.offsetX += (obj.width - oWidth) / 2;\n      obj.offsetY += (obj.height - oHeight) / 2;\n      obj.style = { fill: '#357BD2', strokeColor: 'white' };\n    }\n  }\n\n  //SymbolPalette Properties\n  public symbolMargin: MarginModel = { left: 15, right: 15, top: 15, bottom: 15 };\n  public expandMode: ExpandMode = 'Multiple';\n  //Initialize the flowshapes for the symbol palatte\n  private flowshapes: NodeModel[] = [\n    { id: 'Terminator', shape: { type: 'Flow', shape: 'Terminator' } },\n    { id: 'Process', shape: { type: 'Flow', shape: 'Process' } },\n    { id: 'Decision', shape: { type: 'Flow', shape: 'Decision' } },\n    { id: 'Document', shape: { type: 'Flow', shape: 'Document' } },\n    { id: 'PreDefinedProcess', shape: { type: 'Flow', shape: 'PreDefinedProcess' } },\n    { id: 'PaperTap', shape: { type: 'Flow', shape: 'PaperTap' } },\n    { id: 'DirectData', shape: { type: 'Flow', shape: 'DirectData' } },\n    { id: 'SequentialData', shape: { type: 'Flow', shape: 'SequentialData' } },\n    { id: 'Sort', shape: { type: 'Flow', shape: 'Sort' } },\n    { id: 'MultiDocument', shape: { type: 'Flow', shape: 'MultiDocument' } },\n    { id: 'Collate', shape: { type: 'Flow', shape: 'Collate' } },\n    { id: 'SummingJunction', shape: { type: 'Flow', shape: 'SummingJunction' } },\n    { id: 'Or', shape: { type: 'Flow', shape: 'Or' } },\n    {\n      id: 'InternalStorage',\n      shape: { type: 'Flow', shape: 'InternalStorage' }\n    },\n    { id: 'Extract', shape: { type: 'Flow', shape: 'Extract' } },\n    {\n      id: 'ManualOperation',\n      shape: { type: 'Flow', shape: 'ManualOperation' }\n    },\n    { id: 'Merge', shape: { type: 'Flow', shape: 'Merge' } },\n    {\n      id: 'OffPageReference',\n      shape: { type: 'Flow', shape: 'OffPageReference' }\n    },\n    {\n      id: 'SequentialAccessStorage',\n      shape: { type: 'Flow', shape: 'SequentialAccessStorage' }\n    },\n    { id: 'Annotation', shape: { type: 'Flow', shape: 'Annotation' } },\n    { id: 'Annotation2', shape: { type: 'Flow', shape: 'Annotation2' } },\n    { id: 'Data', shape: { type: 'Flow', shape: 'Data' } },\n    { id: 'Card', shape: { type: 'Flow', shape: 'Card' } },\n    { id: 'Delay', shape: { type: 'Flow', shape: 'Delay' } }\n  ];\n\n  //Initializes connector symbols for the symbol palette\n  private connectorSymbols: ConnectorModel[] = [\n    {\n      id: 'Link1',\n      type: 'Orthogonal',\n      sourcePoint: { x: 0, y: 0 },\n      targetPoint: { x: 60, y: 60 },\n      targetDecorator: { shape: 'Arrow', style: {strokeColor: '#757575', fill: '#757575'} },\n      style: { strokeWidth: 1, strokeColor: '#757575' }\n    },\n    {\n      id: 'link3',\n      type: 'Orthogonal',\n      sourcePoint: { x: 0, y: 0 },\n      targetPoint: { x: 60, y: 60 },\n      style: { strokeWidth: 1, strokeColor: '#757575' },\n      targetDecorator: { shape: 'None' }\n    },\n    {\n      id: 'Link21',\n      type: 'Straight',\n      sourcePoint: { x: 0, y: 0 },\n      targetPoint: { x: 60, y: 60 },\n      targetDecorator: { shape: 'Arrow', style: {strokeColor: '#757575', fill: '#757575'} },\n      style: { strokeWidth: 1, strokeColor: '#757575' }\n    },\n    {\n      id: 'link23',\n      type: 'Straight',\n      sourcePoint: { x: 0, y: 0 },\n      targetPoint: { x: 60, y: 60 },\n      style: { strokeWidth: 1, strokeColor: '#757575' },\n      targetDecorator: { shape: 'None' }\n    },\n    {\n      id: 'link33',\n      type: 'Bezier',\n      sourcePoint: { x: 0, y: 0 },\n      targetPoint: { x: 60, y: 60 },\n      style: { strokeWidth: 1, strokeColor: '#757575' },\n      targetDecorator: { shape: 'None' }\n    }\n  ];\n\n  public palettes: PaletteModel[] = [\n    {\n      id: 'flow',\n      expanded: true,\n      symbols: this.flowshapes,\n      iconCss: 'shapes',\n      title: 'Flow Shapes'\n    },\n    {\n      id: 'connectors',\n      expanded: true,\n      symbols: this.connectorSymbols,\n      iconCss: 'shapes',\n      title: 'Connectors'\n    }\n  ];\n\n  public getSymbolInfo(symbol: NodeModel): SymbolInfo {\n    return { fit: true };\n  }\n\n  public getSymbolDefaults(symbol: NodeModel): void {\n    symbol.style.strokeColor = '#757575';\n    if (symbol.id === 'Terminator' || symbol.id === 'Process') {\n      symbol.width = 80;\n      symbol.height = 40;\n    } else if (\n      symbol.id === 'Decision' ||\n      symbol.id === 'Document' ||\n      symbol.id === 'PreDefinedProcess' ||\n      symbol.id === 'PaperTap' ||\n      symbol.id === 'DirectData' ||\n      symbol.id === 'MultiDocument' ||\n      symbol.id === 'Data'\n    ) {\n      symbol.width = 50;\n      symbol.height = 40;\n    } else {\n      symbol.width = 50;\n      symbol.height = 50;\n    }\n  }\n\n  \n\n  public diagramCreate(args: Object): void {\n    paletteIconClick();\n  }\n}\n\nfunction getPorts(obj: NodeModel): PointPortModel[] {\n  let ports: PointPortModel[] = [\n    { id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 } },\n    { id: 'port2', shape: 'Circle', offset: { x: 0.5, y: 1 } },\n    { id: 'port3', shape: 'Circle', offset: { x: 1, y: 0.5 } },\n    { id: 'port4', shape: 'Circle', offset: { x: 0.5, y: 0 } }\n  ];\n  return ports;\n}","app/app.module.ts":"import { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { AccumulationChartModule } from '@syncfusion/ej2-angular-charts';\n\nimport { AccumulationAnnotationService, AccumulationDataLabelService, AccumulationLegendService, AccumulationTooltipService, ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DiagramAllModule, SymbolPaletteAllModule, OverviewAllModule } from '@syncfusion/ej2-angular-diagrams';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { DateRangePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxModule, ColorPickerModule, UploaderModule, TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { ButtonModule, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ DiagramAllModule, ChartAllModule, GridAllModule, SymbolPaletteAllModule, OverviewAllModule, ButtonModule,       ColorPickerModule,  DateRangePickerModule, CheckBoxModule, AccumulationChartModule, BrowserModule,ToolbarModule, DropDownButtonModule, UploaderModule, CircularGaugeModule, DropDownListAllModule, ListViewAllModule,       DialogAllModule, TextBoxModule, RadioButtonModule,       MultiSelectModule, NumericTextBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<script src=\"script/diagram-common.ts\"></script>\n<style>\n    .e-symbolpalette {\n        display: block;\n    }\n</style>\n<div class=\"control-section\">\n    <div style=\"width: 100%\">\n        <div class=\"sb-mobile-palette-bar\">\n            <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n        </div>\n        <div id=\"palette-space\" class=\"sb-mobile-palette\">\n            <ejs-symbolpalette id=\"symbolpalette\" [expandMode]='expandMode' [palettes]='palettes' width=\"100%\" height=\"700px\" [symbolHeight]=60 [symbolWidth]=60 [symbolMargin]='symbolMargin' [getSymbolInfo]='getSymbolInfo' [getNodeDefaults]='getSymbolDefaults'>\n            </ejs-symbolpalette>\n        </div>\n        <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n            <div class=\"content-wrapper\">\n                <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [snapSettings]='snapSettings' (created)=\"created()\" [getConnectorDefaults]='connDefaults' [getNodeDefaults]='nodeDefaults' (dragEnter)=\"dragEnter($event)\" (created)=\"diagramCreate($event)\">\n                    <e-nodes>\n                        <e-node id='NewIdea' [height]=60 [offsetX]=300 [offsetY]=80 [shape]='terminator'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Place Order'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Meeting' [height]=60 [offsetX]=300 [offsetY]=160 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Start Transaction'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='BoardDecision' [height]=60 [offsetX]=300 [offsetY]=240 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Verification'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Project' [height]=60 [offsetX]=300 [offsetY]=330 [shape]='decision'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Credit card valid?'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='End' [height]=60 [offsetX]=300 [offsetY]=430 [shape]='decision'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Funds available?'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='node11' [height]=60 [offsetX]=530 [offsetY]=330 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Enter payment method'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='transcation_entered' [height]=60 [offsetX]=300 [offsetY]=630 [shape]='terminator'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Log transaction'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='node12' [height]=60 [offsetX]=480 [offsetY]=630 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Reconcile the entries'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='transaction_completed' [height]=60 [offsetX]=300 [offsetY]=530 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Complete Transaction'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Data' [height]=45 [offsetX]=110 [offsetY]=530 [shape]='data'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Send e-mail' [margin]=margin>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='node10' [height]=70 [offsetX]=475 [offsetY]=530 [shape]='directdata'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Customer Database' [margin]='margin'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                    </e-nodes>\n                    <e-connectors>\n                        <e-connector id='connector1' sourceID='NewIdea' targetID='Meeting'>\n                        </e-connector>\n                        <e-connector id='connector2' sourceID='Meeting' targetID='BoardDecision'>\n                        </e-connector>\n                        <e-connector id='connector3' sourceID='BoardDecision' targetID='Project'>\n                        </e-connector>\n                        <e-connector id='connector4' sourceID='Project' targetID='End'>\n                            <e-connector-annotations>\n                                <e-connector-annotation content='Yes' [style]=connAnnotStyle>\n                                </e-connector-annotation>\n                            </e-connector-annotations>\n                        </e-connector>\n                        <e-connector id='connector5' sourceID='End' targetID='transaction_completed'>\n                            <e-connector-annotations>\n                                <e-connector-annotation content='Yes' [style]=connAnnotStyle>\n                                </e-connector-annotation>\n                            </e-connector-annotations>\n                        </e-connector>\n                        <e-connector id='connector6' sourceID='transaction_completed' targetID='transcation_entered'>\n                        </e-connector>\n                        <e-connector id='connector7' sourceID='transaction_completed' targetID='Data'>\n                        </e-connector>\n                        <e-connector id='connector8' sourceID='transaction_completed' targetID='node10'>\n                        </e-connector>\n                        <e-connector id='connector9' sourceID='node11' targetID='Meeting' [segments]='segments'>\n                        </e-connector>\n                        <e-connector id='connector10' sourceID='End' targetID='node11' [segments]='segments1'>\n                            <e-connector-annotations>\n                                <e-connector-annotation content='No' [style]=connAnnotStyle>\n                                </e-connector-annotation>\n                            </e-connector-annotations>\n                        </e-connector>\n                        <e-connector id='connector11' sourceID='Project' targetID='node11'>\n                            <e-connector-annotations>\n                                <e-connector-annotation content='No' [style]=connAnnotStyle>\n                                </e-connector-annotation>\n                            </e-connector-annotations>\n                        </e-connector>\n                        <e-connector id='connector12' sourceID='transcation_entered' targetID='node12' [style]=strokeStyle>\n                        </e-connector>\n                    </e-connectors>\n                </ejs-diagram>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".sb-mobile-palette {\n    width:240px;\n    height:100%;\n    float:left;\n}\n\n.sb-mobile-palette-bar {\n    display: none;\n}\n\n.sb-mobile-diagram {\n    width:calc(100% - 242px);\n    height: 100%;\n    float: left;\n}\n\n@media (max-width: 550px) {\n\n    .sb-mobile-palette {\n        z-index: 19;\n        position: absolute;\n        display: none;\n        transition: transform 300ms linear, visibility 0s linear 300ms;\n        width:39%;\n        height:100%;\n    }\n    \n    .sb-mobile-palette-bar {\n        display: block;\n        width: 100%;\n        background:#fafafa;\n        padding: 10px 10px;\n        border:0.5px solid #e0e0e0;\n        min-height: 40px;\n    }\n    \n    .sb-mobile-diagram {\n        width: 100%;\n        height: 100%;\n        float: left;\n        left: 0px;\n    }\n\n    #palette-icon {\n        font-size: 20px; \n    }\n}\n    \n.sb-mobile-palette-open {\n    position: absolute;\n    display: block;\n    right: 15px;\n}\n\n@font-face {\n    font-family: 'e-ddb-icons1';\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n.e-ddb-icons1 {\n    font-family: 'e-ddb-icons1';\n    speak: none;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.e-toggle-palette::before {\n    content: \"\\e700\"\n}"}