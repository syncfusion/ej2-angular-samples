{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\nlet isMobile: boolean;\n\nexport function paletteIconClick() {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', showPaletteIcon, false);\n        }\n    }\n}\n\nexport function showPaletteIcon(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, Inject } from '@angular/core';\nimport { ConnectorConstraints, DiagramComponent, DiagramTools, IExportOptions, IHistoryChangeArgs, ISelectionChangeEventArgs, NodeConstraints, ZoomOptions, SymbolPaletteModule, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport { ToolbarComponent, ToolbarModule } from '@syncfusion/ej2-angular-navigations';\nimport { ClickEventArgs, ItemModel, MenuEventArgs, SplitButtonModule } from '@syncfusion/ej2-angular-splitbuttons';\nimport {\n  Diagram, NodeModel, UndoRedo, ConnectorModel, PointPortModel, Connector, FlowShapeModel,\n  SymbolInfo, IDragEnterEventArgs, SnapSettingsModel, MarginModel, TextStyleModel, StrokeStyleModel,\n  OrthogonalSegmentModel, Node, PaletteModel\n} from '@syncfusion/ej2-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { paletteIconClick } from './script/diagram-common';\nimport { AsyncSettingsModel } from '@syncfusion/ej2-inputs';\n\nimport { UploaderModule } from '@syncfusion/ej2-angular-inputs';\n\nDiagram.Inject(UndoRedo);\n\n/**\n * Default FlowShape sample\n */\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [ ToolbarModule, SplitButtonModule, SymbolPaletteModule, DiagramModule, UploaderModule, ]\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  //Diagram Properties\n  public diagram: DiagramComponent;\n  @ViewChild('toolbar')\n  public toolbar: ToolbarComponent;\n  constructor() {\n    \n  }\n  public terminator: FlowShapeModel = { type: 'Flow', shape: 'Terminator' };\n  public process: FlowShapeModel = { type: 'Flow', shape: 'Process' };\n  public decision: FlowShapeModel = { type: 'Flow', shape: 'Decision' };\n  public data: FlowShapeModel = { type: 'Flow', shape: 'Data' };\n  public directdata: FlowShapeModel = { type: 'Flow', shape: 'DirectData' };\n\n  public margin: MarginModel = { left: 25, right: 25 };\n  public connAnnotStyle: TextStyleModel = { fill: 'white' };\n  public strokeStyle: StrokeStyleModel = { strokeDashArray: '2,2' };\n\n  public segments: OrthogonalSegmentModel = [{ type: 'Orthogonal', direction: 'Top', length: 120 }];\n  public segments1: OrthogonalSegmentModel = [\n    { type: 'Orthogonal', direction: 'Right', length: 100 }\n  ];\n  public drawingObject: any;\n  public asyncSettings: AsyncSettingsModel = {\n    saveUrl: 'https://services.syncfusion.com/angular/production/api/FileUploader/Save',\n    removeUrl: 'https://services.syncfusion.com/angular/production/api/FileUploader/Remove'\n  };\n  //Sets the default values of a node\n  public nodeDefaults(node: NodeModel): NodeModel {\n    if (node.width === undefined) {\n      node.width = 145;\n    }\n    node.style = { fill: '#357BD2', strokeColor: 'white' };\n    for (let i: number = 0; i < node.annotations.length; i++) {\n      node.annotations[i].style = {\n        color: 'white',\n        fill: 'transparent',\n      };\n    }\n    node.ports = getPorts(node);\n    return node;\n  }\n  //Sets the default values of a connector\n  public connectorDefaults(obj: Connector): void {\n    if (obj.id.indexOf('connector') !== -1) {\n      obj.targetDecorator = { shape: 'Arrow', width: 10, height: 10 };\n    }\n  }\n  public created(): void {\n    this.diagram.fitToPage();\n  }\n  public interval: number[] = [\n    1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25,\n    9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75\n  ];\n\n  public snapSettings: SnapSettingsModel = {\n    horizontalGridlines: { lineColor: '#e0e0e0', lineIntervals: this.interval },\n    verticalGridlines: { lineColor: '#e0e0e0', lineIntervals: this.interval }\n  };\n  //Sets the Node style for DragEnter element.\n  public dragEnter(args: IDragEnterEventArgs): void {\n    let obj: NodeModel = args.element as NodeModel;\n    if (obj && obj.width && obj.height) {\n      let objWidth: number = obj.width;\n      let objHeight: number = obj.height;\n      let ratio: number = 100 / obj.width;\n      obj.width = 100;\n      obj.height *= ratio;\n      obj.offsetX += (obj.width - objWidth) / 2;\n      obj.offsetY += (obj.height - objHeight) / 2;\n      obj.style = { fill: '#357BD2', strokeColor: 'white' };\n    }\n  }\n\n  //SymbolPalette Properties\n  public symbolMargin: MarginModel = { left: 15, right: 15, top: 15, bottom: 15 };\n  public expandMode: ExpandMode = 'Multiple';\n\n  //Function to get flowshapes.\n  public getFlowShape(id: string, shapeType: any): NodeModel {\n    let flowshape: NodeModel = { id: id, shape: { type: 'Flow', shape: shapeType } };\n    return flowshape;\n  }\n  //Initialize the flowshapes for the symbol palatte\n  private flowshapes: NodeModel[] = [\n    this.getFlowShape('Terminator', 'Terminator'),\n    this.getFlowShape('Process', 'Process'),\n    this.getFlowShape('Decision', 'Decision'),\n    this.getFlowShape('Document', 'Document'),\n    this.getFlowShape('PreDefinedProcess', 'PreDefinedProcess'),\n    this.getFlowShape('PaperTap', 'PaperTap'),\n    this.getFlowShape('DirectData', 'DirectData'),\n    this.getFlowShape('SequentialData', 'SequentialData'),\n    this.getFlowShape('Sort', 'Sort'),\n    this.getFlowShape('MultiDocument', 'MultiDocument'),\n    this.getFlowShape('Collate', 'Collate'),\n    this.getFlowShape('Or', 'Or'),\n    this.getFlowShape('Extract', 'Extract'),\n    this.getFlowShape('Merge', 'Merge'),\n    this.getFlowShape('OffPageReference', 'OffPageReference'),\n    this.getFlowShape('SequentialAccessStorage', 'SequentialAccessStorage'),\n    this.getFlowShape('Annotation', 'Annotation'),\n    this.getFlowShape('Annotation2', 'Annotation2'),\n    this.getFlowShape('Data', 'Data'),\n    this.getFlowShape('Card', 'Card'),\n    this.getFlowShape('Delay', 'Delay'),\n  ];\n\n  // Function to create connector symbols\n  private createConnectorSymbol(id: string, type: any, targetDecoratorShape: any, strokeColor: string = '#757575'): ConnectorModel {\n    return {\n      id: id,\n      type: type,\n      sourcePoint: { x: 0, y: 0 },\n      targetPoint: { x: 60, y: 60 },\n      style: { strokeWidth: 1, strokeColor: strokeColor },\n      targetDecorator: { shape: targetDecoratorShape, style: { strokeColor: strokeColor, fill: strokeColor } }\n    };\n  }\n\n  // Initializes connector symbols for the symbol palette\n  private connectorSymbols: ConnectorModel[] = [\n    this.createConnectorSymbol('Link1', 'Orthogonal', 'Arrow'),\n    this.createConnectorSymbol('Link2', 'Orthogonal', 'None'),\n    this.createConnectorSymbol('Link3', 'Straight', 'Arrow'),\n    this.createConnectorSymbol('Link4', 'Straight', 'None'),\n    this.createConnectorSymbol('Link5', 'Bezier', 'None')\n  ];\n  //To Initialise Symbol palette\n  public palettes: PaletteModel[] = [\n    {\n      id: 'flow',\n      expanded: true,\n      symbols: this.flowshapes,\n      iconCss: 'shapes',\n      title: 'Flow Shapes'\n    },\n    {\n      id: 'connectors',\n      expanded: true,\n      symbols: this.connectorSymbols,\n      iconCss: 'shapes',\n      title: 'Connectors'\n    }\n  ];\n\n  public getSymbolInfo(symbol: NodeModel): SymbolInfo {\n    return { fit: true };\n  }\n  //To set Default values for symbol palette\n  public getSymbolDefaults(symbol: NodeModel): void {\n    symbol.style.strokeColor = '#757575';\n    if (symbol.id === 'Terminator' || symbol.id === 'Process') {\n      symbol.width = 80;\n      symbol.height = 40;\n    } else if (\n      symbol.id === 'Decision' ||\n      symbol.id === 'Document' ||\n      symbol.id === 'PreDefinedProcess' ||\n      symbol.id === 'PaperTap' ||\n      symbol.id === 'DirectData' ||\n      symbol.id === 'MultiDocument' ||\n      symbol.id === 'Data'\n    ) {\n      symbol.width = 50;\n      symbol.height = 40;\n    } else {\n      symbol.width = 50;\n      symbol.height = 50;\n    }\n  }\n  //To enable and disable the toolbar items based on selection.\n  public selectionChange(args: ISelectionChangeEventArgs): void {\n    if (args.state === 'Changed') {\n      var selectedItems = this.diagram.selectedItems.nodes;\n      selectedItems = selectedItems.concat(this.diagram.selectedItems.connectors as any);\n      if (selectedItems.length === 0) {\n        const itemIds = ['Cut', 'Copy', 'Lock', 'Delete', 'Order', 'Rotate', 'Flip'];\n        itemIds.forEach(itemId => {\n          const item = this.toolbar.items.find(item => item.id === itemId);\n          if (item) {\n            item.disabled = true;\n          }\n        });\n        this.disableMultiselectedItems();\n      }\n      if (selectedItems.length === 1) {\n        this.enableItems();\n        this.disableMultiselectedItems();\n\n        if (selectedItems[0].children !== undefined && selectedItems[0].children.length > 0) {\n          var Index = this.toolbar.items.findIndex(item => item.id === 'Group');\n          if (Index !== -1) {\n            this.toolbar.items[Index].disabled = false;\n          }\n        }\n        else {\n          var Index = this.toolbar.items.findIndex(item => item.id === 'Group');\n          if (Index !== -1) {\n            this.toolbar.items[Index].disabled = true;\n          }\n        }\n\n      }\n\n      if (selectedItems.length > 1) {\n        this.enableItems();\n        const itemIds = ['Align_objects', 'Group'];\n        itemIds.forEach(itemId => {\n          const item = this.toolbar.items.find(item => item.id === itemId);\n          if (item) {\n            item.disabled = false;\n          }\n        });\n        //To enable distribute objcets when selected items length is greater than 2\n        if (selectedItems.length > 2) {\n          var Index = this.toolbar.items.findIndex(item => item.id === 'Distribute_objects');\n          if (Index !== -1) {\n            this.toolbar.items[Index].disabled = false;\n          }\n        }\n        else {\n          var Index = this.toolbar.items.findIndex(item => item.id === 'Distribute_objects');\n          if (Index !== -1) {\n            this.toolbar.items[Index].disabled = true;\n          }\n        }\n      }\n\n    }\n  }\n  //To enable and disable undo/redo button.\n  public historyChange(args: IHistoryChangeArgs): void {\n    const undoItem = this.toolbar.items.find(item => item.id === 'Undo');\n    if (undoItem) {\n      undoItem.disabled = this.diagram.historyManager.undoStack.length > 0 ? false : true;\n    }\n    const redoItem = this.toolbar.items.find(item => item.id === 'Redo');\n    if (redoItem) {\n      redoItem.disabled = this.diagram.historyManager.redoStack.length > 0 ? false : true;\n    }\n  }\n  // Function to update the toolbar state based on selected nodes constraints\n  public updateToolbarState(isLocked) {\n    const itemIds = ['Cut', 'Copy', 'Delete', 'Order', 'Rotate', 'Flip'];\n    itemIds.forEach(itemId => {\n      const item = this.toolbar.items.find(item => item.id === itemId);\n      if (item) {\n        item.disabled = isLocked;\n      }\n    });\n    var Index = this.toolbar.items.findIndex(item => item.id === 'Lock');\n    if (Index !== -1) {\n      this.toolbar.items[Index].disabled = false;\n    }\n\n  }\n  // To enable toolbar items\n  public enableItems() {\n    const itemIds = ['Cut', 'Copy', 'Lock', 'Delete', 'Order', 'Rotate', 'Flip'];\n    itemIds.forEach(itemId => {\n        const item = this.toolbar.items.find(item => item.id === itemId);\n        if (item) {\n            item.disabled = false;\n        }\n    });\n  }\n  //To disable toolbar items\n  public disableMultiselectedItems() {\n    const itemIds = ['Align_objects', 'Distribute_objects', 'Group'];\n    itemIds.forEach(itemId => {\n        const item = this.toolbar.items.find(item => item.id === itemId);\n        if (item) {\n            item.disabled = true;\n        }\n    });\n  }\n  // To handle toolbar click\n  public clicked(args: ClickEventArgs) {\n    var item = (args as any).item.tooltipText;\n    switch (item) {\n      case 'Undo':\n        this.diagram.undo();\n        break;\n      case 'Redo':\n        this.diagram.redo();\n        break;\n      case 'Lock':\n        this.lockObject();\n        break;\n      case 'Cut':\n        this.diagram.cut();\n        var pasteIndex =  this.toolbar.items.findIndex(item => item.id === 'Paste');\n                if (pasteIndex !== -1) {\n                  this.toolbar.items[pasteIndex].disabled = false;\n                }\n        break;\n      case 'Copy':\n        this.diagram.copy();\n        var pasteIndex = this.toolbar.items.findIndex(item => item.id === 'Paste');\n        if (pasteIndex !== -1) {\n          this.toolbar.items[pasteIndex].disabled = false;\n        }\n        break;\n      case 'Paste':\n        this.diagram.paste();\n        break;\n      case 'Delete':\n        this.diagram.remove();\n        break;\n      case 'Select Tool':\n        this.diagram.clearSelection();\n        this.diagram.tool = DiagramTools.Default;\n        break;\n      case 'Text Tool':\n        this.diagram.clearSelection();\n        this.diagram.selectedItems.userHandles = [];\n        this.diagram.drawingObject = { shape: { type: 'Text' }, };\n        this.diagram.tool = DiagramTools.ContinuousDraw;\n        break;\n      case 'Pan Tool':\n        this.diagram.clearSelection();\n        this.diagram.tool = DiagramTools.ZoomPan;\n        break;\n      case 'New Diagram':\n        this.diagram.clear();\n        this.historyChange(args as any);\n        break;\n      case 'Print Diagram':\n        this.printDiagram(args);\n        break;\n      case 'Save Diagram':\n        this.download(this.diagram.saveDiagram());\n        break;\n      case 'Open Diagram':\n        document.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();\n        break;\n    }\n    this.diagram.dataBind();\n  }\n\n  //Icons for Zoom Items\n  public zoomMenuItems = [\n    { text: 'Zoom In' },\n    { text: 'Zoom Out' }, { text: 'Zoom to Fit' },\n    { text: 'Zoom to 50%' },\n    { text: 'Zoom to 100%' },\n    { text: 'Zoom to 200%' },\n  ]\n\n  // To perform zoom operation\n  public zoomChange(args) {\n    var currentZoom = this.diagram.scrollSettings.currentZoom;\n    var zoom: ZoomOptions = {};\n    switch (args.item.text) {\n      case 'Zoom In':\n        this.diagram.zoomTo({ type: 'ZoomIn', zoomFactor: 0.2 });\n        break;\n      case 'Zoom Out':\n        this.diagram.zoomTo({ type: 'ZoomOut', zoomFactor: 0.2 });\n        break;\n      case 'Zoom to Fit':\n        zoom.zoomFactor = 1 / currentZoom - 1;\n        this.diagram.zoomTo(zoom);\n        break;\n      case 'Zoom to 50%':\n        if (currentZoom === 0.5) {\n          currentZoom = 0;\n          zoom.zoomFactor = (0.5 / currentZoom) - 1;\n          this.diagram.zoomTo(zoom);\n\n        }\n        else {\n          zoom.zoomFactor = (0.5 / currentZoom) - 1;\n          this.diagram.zoomTo(zoom);\n        }\n        break;\n\n      case 'Zoom to 100%':\n        if (currentZoom === 1) {\n          currentZoom = 0;\n          zoom.zoomFactor = (1 / currentZoom) - 1;\n          this.diagram.zoomTo(zoom);\n        }\n        else {\n          zoom.zoomFactor = (1 / currentZoom) - 1;\n          this.diagram.zoomTo(zoom);\n        }\n        break;\n      case 'Zoom to 200%':\n        if (currentZoom === 2) {\n          currentZoom = 0;\n          zoom.zoomFactor = (2 / currentZoom) - 1;\n          this.diagram.zoomTo(zoom);\n        }\n        else {\n          zoom.zoomFactor = (2 / currentZoom) - 1;\n          this.diagram.zoomTo(zoom);\n        }\n        break;\n    }\n  }\n  //To handle selection of connectors.\n  public onConnectorSelect(args: any) {\n    debugger\n    this.diagram.clearSelection();\n    this.diagram.drawingObject = { type: args.item.text };\n    this.diagram.tool = DiagramTools.ContinuousDraw;\n    this.diagram.selectedItems.userHandles = [];\n    this.diagram.dataBind();\n  }\n  //Connector Icons\n  public conTypeItems = [\n    { text: 'Straight', iconCss: 'e-icons e-line' },\n    { text: 'Orthogonal', iconCss: 'sf-icon-orthogonal' },\n    { text: 'Bezier', iconCss: 'sf-icon-bezier' }\n  ];\n  //Shape Icons\n  public shapesItems = [\n    { text: 'Rectangle', iconCss: 'e-rectangle e-icons' },\n    { text: 'Ellipse', iconCss: ' e-circle e-icons' },\n    { text: 'Polygon', iconCss: 'e-line e-icons' }\n  ];\n  //To handle selection of shapes.\n  public onShapesSelect(args) {\n    this.diagram.clearSelection();\n    this.diagram.drawingObject = { shape: { shape: args.item.text } };\n    this.diagram.tool = DiagramTools.ContinuousDraw;\n    this.diagram.selectedItems.userHandles = [];\n    this.diagram.dataBind();\n  }\n  //Icons to Group and ungroup\n  public groupItems = [\n    { text: 'Group', iconCss: 'e-icons e-group-1' },\n    { text: 'Ungroup', iconCss: 'e-icons e-ungroup-1' }\n  ];\n  //Group and ungroup the diagraming object.\n  public onSelectGroup(args) {\n    if (args.item.text === 'Group') {\n      this.diagram.group();\n    }\n    else if (args.item.text === 'Ungroup') {\n      this.diagram.unGroup();\n    }\n  }\n  //Icons to align items\n  public alignItems = [\n    { iconCss: 'sf-icon-align-left-1', text: 'Align Left' },\n    { iconCss: 'sf-icon-align-center-1', text: 'Align Center' },\n    { iconCss: 'sf-icon-align-right-1', text: 'Align Right' },\n    { iconCss: 'sf-icon-align-top-1', text: 'Align Top' },\n    { iconCss: 'sf-icon-align-middle-1', text: 'Align Middle' },\n    { iconCss: 'sf-icon-align-bottom-1', text: 'Align Bottom' },\n  ];\n  //To align selelcted diagram objects.\n  public onSelectAlignObjects(args) {\n    var item = args.item.text;\n    var alignType = item.replace('Align', '');\n    var alignType1 = alignType.charAt(0).toUpperCase() + alignType.slice(1);\n    this.diagram.align(alignType1.trim());\n  }\n  //Icon to distributeItems\n  public distributeItems = [\n    { iconCss: 'sf-icon-distribute-vertical', text: 'Distribute Objects Vertically', },\n    { iconCss: 'sf-icon-distribute-horizontal', text: 'Distribute Objects Horizontally', },\n  ];\n  //To distribute selected objects horizontally and vertically.\n  public onSelectDistributeObjects(args) {\n    this.diagram.distribute(args.item.text === 'Distribute Objects Vertically' ? 'BottomToTop' : 'RightToLeft');\n  }\n  //OrderItem Icons\n  public orderItems = [\n    { iconCss: 'e-icons e-bring-forward', text: 'Bring Forward' },\n    { iconCss: 'e-icons e-bring-to-front', text: 'Bring To Front' },\n    { iconCss: 'e-icons e-send-backward', text: 'Send Backward' },\n    { iconCss: 'e-icons e-send-to-back', text: 'Send To Back' }\n  ];\n  //To execute order commands\n  public onSelectOrder(args) {\n    switch (args.item.text) {\n      case 'Bring Forward':\n        this.diagram.moveForward();\n        break;\n      case 'Bring To Front':\n        this.diagram.bringToFront();\n        break;\n      case 'Send Backward':\n        this.diagram.sendBackward();\n        break;\n      case 'Send To Back':\n        this.diagram.sendToBack();\n        break;\n    }\n  }\n  //Icons for rotate button\n  public rotateItems = [\n    { iconCss: 'e-icons e-transform-right', text: 'Rotate Clockwise' },\n    { iconCss: 'e-icons e-transform-left', text: 'Rotate Counter-Clockwise' }\n  ];\n\n  //To rotate the selected objects.\n  public onSelectRotate(args) {\n\n    this.diagram.rotate(this.diagram.selectedItems, args.item.text === 'Rotate Clockwise' ? 90 : -90);\n  }\n  //Flip Icons\n  public flipItems = [\n    { iconCss: 'e-icons e-flip-horizontal', text: 'Flip Horizontal' },\n    { iconCss: 'e-icons e-flip-vertical', text: 'Flip Vertical' }\n  ];\n  public onSelectFlip(args) {\n    this.flipObjects(args.item.text);\n  }\n\n  // To flip diagram objects\n  public flipObjects(flipType) {\n    var selectedObjects = this.diagram.selectedItems.nodes.concat(this.diagram.selectedItems.connectors as any);\n    for (let i: number = 0; i < selectedObjects.length; i++) {\n      selectedObjects[i].flip = flipType === 'Flip Horizontal' ? 'Horizontal' : 'Vertical';\n    }\n    this.diagram.dataBind();\n  }\n  //To lock the selected diagram object.\n  public lockObject() {\n    let isChecked;\n    for (let i: number = 0; i < this.diagram.selectedItems.nodes.length; i++) {\n      let node = this.diagram.selectedItems.nodes[i];\n      if (node.constraints & NodeConstraints.Drag) {\n        node.constraints = NodeConstraints.PointerEvents | NodeConstraints.Select | NodeConstraints.ReadOnly;\n        isChecked = true;\n      } else {\n        node.constraints = NodeConstraints.Default;\n        isChecked = false;\n      }\n    }\n    for (let j: number = 0; j < this.diagram.selectedItems.connectors.length; j++) {\n      let connector = this.diagram.selectedItems.connectors[j];\n      if (connector.constraints & ConnectorConstraints.Drag) {\n        connector.constraints = ConnectorConstraints.PointerEvents | ConnectorConstraints.Select | ConnectorConstraints.ReadOnly;\n        isChecked = true;\n      } else {\n        connector.constraints = ConnectorConstraints.Default;\n        isChecked = false;\n      }\n    }\n    this.updateToolbarState(isChecked);\n    this.diagram.dataBind();\n  }\n  public zoomContent() {\n    return Math.round(this.diagram.scrollSettings.currentZoom * 100) + ' %'\n  };\n  // Set up print options and initiate printing of the diagram.\n  public printDiagram(args) {\n    var options: IExportOptions = {};\n    options.mode = 'Download';\n    options.region = 'Content';\n    options.multiplePage = this.diagram.pageSettings.multiplePage;\n    options.pageHeight = this.diagram.pageSettings.height;\n    options.pageWidth = this.diagram.pageSettings.width;\n    this.diagram.print(options);\n  }\n  //Export the diagraming object based on the format.\n  public onselectExport(args) {\n    var exportOptions: IExportOptions = {};\n    exportOptions.format = args.item.text;\n    exportOptions.mode = 'Download';\n    exportOptions.region = 'PageSettings';\n    exportOptions.fileName = 'Export';\n    exportOptions.margin = { left: 0, top: 0, bottom: 0, right: 0 };\n    this.diagram.exportDiagram(exportOptions);\n  }\n  // To save the diagram.\n  public download(data: string): void {\n    if ((window.navigator as any).msSaveBlob) {\n      let blob: Blob = new Blob([data], { type: 'data:text/json;charset=utf-8,' });\n      (window.navigator as any).msSaveOrOpenBlob(blob, 'Diagram.json');\n    } else {\n      let dataStr: string = 'data:text/json;charset=utf-8,' + encodeURIComponent(data);\n      let a: HTMLAnchorElement = document.createElement('a');\n      a.href = dataStr;\n      a.download = 'Diagram.json';\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n    }\n  }\n  //set up uploaded file and call loadDiagram\n  public onUploadSuccess(args: { [key: string]: Object }): void {\n    debugger\n    let file1: { [key: string]: Object } = args.file as { [key: string]: Object };\n    let file: Blob = file1.rawFile as Blob;\n    let reader: FileReader = new FileReader();\n    reader.readAsText(file);\n    reader.onloadend = this.loadDiagram.bind(this);\n  }\n  //To load diagram \n  public loadDiagram(event: ProgressEvent): void {\n    this.diagram.loadDiagram((event.target as FileReader).result.toString());\n  }\n\n  public items: ItemModel[] = [\n    { text: 'JPG' }, { text: 'PNG' }, { text: 'SVG' }\n\n  ];\n  public addDisabled(args: MenuEventArgs) {\n    this.onselectExport(args);\n  }\n\n  public diagramCreate(args: Object): void {\n    paletteIconClick();\n  }\n}\n//Create and add ports for node.\nfunction getPorts(obj: NodeModel): PointPortModel[] {\n  let ports: PointPortModel[] = [\n    { id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 } },\n    { id: 'port2', shape: 'Circle', offset: { x: 0.5, y: 1 } },\n    { id: 'port3', shape: 'Circle', offset: { x: 1, y: 0.5 } },\n    { id: 'port4', shape: 'Circle', offset: { x: 0.5, y: 0 } }\n  ];\n  return ports;\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<script src=\"script/diagram-common.ts\"></script>\n<style>\n      .e-symbolpalette {\n        display: block;\n    }\n    \n</style>\n<div class=\"control-section\">\n    <div style=\"width: 100%\">\n        <ejs-toolbar #toolbar overflowMode='Scrollable' id=\"toolbar_scrollable\" (clicked) = \"clicked($event)\">\n            <e-items>\n                <e-item prefixIcon='e-icons e-circle-add' tooltipText='New Diagram'  id='New_Diagram' ></e-item>\n                <e-item prefixIcon='e-icons e-folder-open' tooltipText='Open Diagram' id='Open_diagram'>\n                </e-item>\n                <e-item prefixIcon='e-icons e-save' tooltipText='Save Diagram' id='Save' ></e-item>\n                <e-item prefixIcon='e-print e-icons' tooltipText='Print Diagram' id='Print'></e-item>\n                <e-item type='Input' tooltipText='Export Diagram' id='Export'>\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='items' iconCss=\"e-export e-icons\" (select)='addDisabled($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item type='Separator'></e-item>\n                <e-item prefixIcon='e-cut e-icons' tooltipText='Cut' cssClass=\"tb-item-middle tb-item-lock-category\" disabled=true  id='Cut'></e-item>\n                <e-item prefixIcon='e-copy e-icons' tooltipText='Copy' cssClass=\"tb-item-middle tb-item-lock-category\" disabled=true  id='Copy'></e-item>\n                <e-item prefixIcon='e-icons e-paste' tooltipText='Paste' disabled=true  id='Paste'></e-item>\n                <e-item type='Separator'></e-item>\n                <e-item prefixIcon='e-icons e-undo tb-icons' tooltipText='Undo' disabled=true id='Undo'></e-item>\n                <e-item prefixIcon='e-icons e-redo tb-icons' tooltipText='Redo' disabled=true  id='Redo'></e-item>\n                <e-item type='Separator'></e-item>\n                <e-item prefixIcon='e-pan e-icons' tooltipText='Pan Tool' cssClass ='tb-item-start pan-item' id='Pan_tool'></e-item>\n                <e-item prefixIcon='e-mouse-pointer e-icons' tooltipText='Select Tool' cssClass ='tb-item-middle tb-item-selected' id='Select_tool'></e-item>\n                <e-item  tooltipText='Draw Connectors' id='Draw_con'>\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='conTypeItems' iconCss=\"e-ddb-icons e-diagram-connector e-icons\" (select)='onConnectorSelect($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item  tooltipText='Draw Shapes' id='Draw_shapes'>\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='shapesItems' iconCss=\"e-shapes e-icons\" (select)='onShapesSelect($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item prefixIcon='e-caption e-icons' tooltipText='Text Tool' cssClass='tb-item-end' id='Text_tool'></e-item>\n                <e-item type='Separator'></e-item>\n                <e-item disabled=true  prefixIcon= 'e-icons e-lock' tooltipText= 'Lock' cssClass='tb-item-middle tb-item-lock-category' id='Lock' ></e-item>\n                <e-item disabled=true  prefixIcon= 'e-trash e-icons' tooltipText= 'Delete'cssClass='tb-item-middle tb-item-lock-category' id='Delete'></e-item>\n                <e-item type='Separator'></e-item>\n                <e-item disabled=true  type= 'Input' tooltipText= 'Align Objects' id='Align_objects'>\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='alignItems' iconCss=\"sf-icon-align-center-1\" (select)='onSelectAlignObjects($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item disabled=true  type= 'Input' tooltipText= 'Distribute Objects' id='Distribute_objects' >\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='distributeItems' iconCss=\"sf-icon-distribute-vertical\" (select)='onSelectDistributeObjects($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item type='Separator'></e-item>\n                <e-item disabled=true  type= 'Input' tooltipText= 'Order Commands'  id='Order' >\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='orderItems' iconCss=\"e-icons e-order\" (select)='onSelectOrder($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item type='Separator'></e-item>\n                <e-item disabled=true  type= 'Input' tooltipText= 'Group/Ungroup'  id='Group'  >\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='groupItems' iconCss=\"e-icons e-group-1\" (select)='onSelectGroup($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item type='Separator'></e-item>\n                <e-item disabled=true  type= 'Input' tooltipText= 'Rotate' id='Rotate'>\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='rotateItems' iconCss=\"e-icons e-repeat\" (select)='onSelectRotate($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item type='Separator'></e-item>\n                <e-item disabled=true  type= 'Input' tooltipText= 'Flip' id='Flip' >\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='flipItems' iconCss=\"e-icons e-flip-horizontal\" (select)='onSelectFlip($event)'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n                <e-item type='Separator'></e-item>\n                <e-item>\n                    <ng-template #template>\n                        <ejs-splitbutton [items]='zoomMenuItems' [content]=\"zoomContent()\" (select)='zoomChange($event)' id='Zoom'></ejs-splitbutton>\n                    </ng-template>\n                </e-item>\n              \n            </e-items>\n        </ejs-toolbar>\n        <div class=\"sb-mobile-palette-bar\">\n            <div id=\"palette-icon\" style=\"float: right;\" role=\"button\" class=\"e-ddb-icons1 e-toggle-palette\"></div>\n        </div>\n        <div id=\"palette-space\" class=\"sb-mobile-palette\">\n            <ejs-symbolpalette id=\"symbolpalette\" [expandMode]='expandMode' [palettes]='palettes' width=\"100%\" height=\"700px\" [symbolHeight]=60 [symbolWidth]=60 [symbolMargin]='symbolMargin' [getSymbolInfo]='getSymbolInfo' [getNodeDefaults]='getSymbolDefaults' [enableSearch]='true'>\n            </ejs-symbolpalette>\n        </div>\n        <div id=\"diagram-space\" class=\"sb-mobile-diagram\">\n            <div class=\"content-wrapper\">\n                <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"700px\" [snapSettings]='snapSettings' (created)=\"created()\" [getConnectorDefaults]='connectorDefaults' [getNodeDefaults]='nodeDefaults' (dragEnter)=\"dragEnter($event)\" (created)=\"diagramCreate($event)\" (selectionChange)=\"selectionChange($event)\" (historyChange)=\"historyChange($event)\" [drawingObject] =\"drawingObject\">\n                    <e-nodes>\n                        <e-node id='NewIdea' [height]=60 [offsetX]=300 [offsetY]=80 [shape]='terminator'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Place Order'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Meeting' [height]=60 [offsetX]=300 [offsetY]=160 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Start Transaction'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='BoardDecision' [height]=60 [offsetX]=300 [offsetY]=240 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Verification'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Project' [height]=60 [offsetX]=300 [offsetY]=330 [shape]='decision'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Credit card valid?'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='End' [height]=60 [offsetX]=300 [offsetY]=430 [shape]='decision'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Funds available?'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Payment_method' [height]=60 [offsetX]=530 [offsetY]=330 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Enter payment method'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='transcation_entered' [height]=60 [offsetX]=300 [offsetY]=630 [shape]='terminator'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Log transaction'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Reconcile_entries' [height]=60 [offsetX]=480 [offsetY]=630 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Reconcile the entries'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='transaction_completed' [height]=60 [offsetX]=300 [offsetY]=530 [shape]='process'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Complete Transaction'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Data' [height]=45 [offsetX]=110 [offsetY]=530 [shape]='data'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Send e-mail' [margin]=margin>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                        <e-node id='Database' [height]=70 [offsetX]=475 [offsetY]=530 [shape]='directdata'>\n                            <e-node-annotations>\n                                <e-node-annotation content='Customer Database' [margin]='margin'>\n                                </e-node-annotation>\n                            </e-node-annotations>\n                        </e-node>\n                    </e-nodes>\n                    <e-connectors>\n                        <e-connector id='connector1' sourceID='NewIdea' targetID='Meeting'>\n                        </e-connector>\n                        <e-connector id='connector2' sourceID='Meeting' targetID='BoardDecision'>\n                        </e-connector>\n                        <e-connector id='connector3' sourceID='BoardDecision' targetID='Project'>\n                        </e-connector>\n                        <e-connector id='connector4' sourceID='Project' targetID='End'>\n                            <e-connector-annotations>\n                                <e-connector-annotation content='Yes' [style]=connAnnotStyle>\n                                </e-connector-annotation>\n                            </e-connector-annotations>\n                        </e-connector>\n                        <e-connector id='connector5' sourceID='End' targetID='transaction_completed'>\n                            <e-connector-annotations>\n                                <e-connector-annotation content='Yes' [style]=connAnnotStyle>\n                                </e-connector-annotation>\n                            </e-connector-annotations>\n                        </e-connector>\n                        <e-connector id='connector6' sourceID='transaction_completed' targetID='transcation_entered'>\n                        </e-connector>\n                        <e-connector id='connector7' sourceID='transaction_completed' targetID='Data'>\n                        </e-connector>\n                        <e-connector id='connector8' sourceID='transaction_completed' targetID='Database'>\n                        </e-connector>\n                        <e-connector id='connector9' sourceID='Payment_method' targetID='Meeting' [segments]='segments' type= 'Orthogonal'>\n                        </e-connector>\n                        <e-connector id='connector10' sourceID='End' targetID='Payment_method' [segments]='segments1' type= 'Orthogonal'>\n                            <e-connector-annotations>\n                                <e-connector-annotation content='No' [style]=connAnnotStyle>\n                                </e-connector-annotation>\n                            </e-connector-annotations>\n                        </e-connector>\n                        <e-connector id='connector11' sourceID='Project' targetID='Payment_method' type='Orthogonal'>\n                            <e-connector-annotations>\n                                <e-connector-annotation content='No' [style]=connAnnotStyle>\n                                </e-connector-annotation>\n                            </e-connector-annotations>\n                        </e-connector>\n                        <e-connector id='connector12' sourceID='transcation_entered' targetID='Reconcile_entries' [style]=strokeStyle>\n                        </e-connector>\n                    </e-connectors>\n                </ejs-diagram>\n            </div>\n            <div style=\"display:none;\">\n            <ejs-uploader #defaultupload id='fileupload' (success)='onUploadSuccess($event)' [asyncSettings]='asyncSettings'></ejs-uploader>\n        </div>\n        </div>\n    </div>\n</div>","app.component.css":"@font-face {\n    font-family: 'e-ddb-icons';\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n\n.e-ddb-icons {\n    font-family: 'e-ddb-icons';\n    speak: none;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n@font-face {\nfont-family: 'Bootstrap5 Diagram Builder';\nsrc:\nurl(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');\nfont-weight: normal;\nfont-style: normal;\n}\n\n[class^=\"sf-icon-\"], [class*=\" sf-icon-\"] {\nfont-family: 'Bootstrap5 Diagram Builder' !important;\nspeak: none;\nfont-size: 55px;\nfont-style: normal;\nfont-weight: normal;\nfont-variant: normal;\ntext-transform: none;\nline-height: 1;\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;\n}\n\n.sf-icon-align-left-1:before { content: \"\\e8bc\"; }\n.sf-icon-align-middle-1:before { content: \"\\e8bd\"; }\n.sf-icon-align-right-1:before { content: \"\\e8be\"; }\n.sf-icon-align-top-1:before { content: \"\\e8bf\"; }\n.sf-icon-align-center-1:before { content: \"\\e8c0\"; }\n.sf-icon-align-bottom-1:before { content: \"\\e8c1\"; }\n.sf-icon-distribute-vertical:before { content: \"\\e8c2\"; }\n.sf-icon-distribute-horizontal:before { content: \"\\e8c3\"; }\n.sf-icon-elipse:before { content: \"\\e8c4\"; }\n.sf-icon-line-1:before { content: \"\\e8c5\"; }\n.sf-icon-orthogonal:before { content: \"\\e8c6\"; }\n.sf-icon-bezier:before { content: \"\\e8c7\"; }\n.sf-icon-same-width:before { content: \"\\e8c8\"; }\n.sf-icon-same-height:before { content: \"\\e8c9\"; }\n.sf-icon-same-size:before { content: \"\\e8ca\"; }\n\n\n.e-basic::before {\n    content: \"\\e726\";\n}\n\n.e-flow::before {\n    content: \"\\e724\";\n}\n\n.e-diagram-connector::before {\n    content: \"\\e725\";\n}\n\n    .sb-mobile-palette {\n        width:240px;\n        height:100%;\n        float:left;\n    }\n    \n    .sb-mobile-palette-bar {\n        display: none;\n    }\n    \n    .sb-mobile-diagram {\n        width:calc(100% - 242px);\n        height: 100%;\n        float: left;\n    }\n    \n    @media (max-width: 550px) {\n    \n        .sb-mobile-palette {\n            z-index: 19;\n            position: absolute;\n            display: none;\n            transition: transform 300ms linear, visibility 0s linear 300ms;\n            width:39%;\n            height:100%;\n        }\n        \n        .sb-mobile-palette-bar {\n            display: block;\n            width: 100%;\n            background:#fafafa;\n            padding: 10px 10px;\n            border:0.5px solid #e0e0e0;\n            min-height: 40px;\n        }\n        \n        .sb-mobile-diagram {\n            width: 100%;\n            height: 100%;\n            float: left;\n            left: 0px;\n        }\n    \n        #palette-icon {\n            font-size: 20px; \n        }\n    }\n        \n    .sb-mobile-palette-open {\n        position: absolute;\n        display: block;\n        right: 15px;\n    }\n    .diagram-print-export .e-export::before {\n        content: \"\\e711\";\n    }","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}