{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { DiagramComponent, DiagramModule ,NodeModel, ConnectorModel, DiagramTools, SnapConstraints, NodeConstraints, ConnectorConstraints, SnapSettingsModel, DiagramConstraints } from '@syncfusion/ej2-angular-diagrams';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',   // <-- this is your HTML template file\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [DiagramModule,]\n})\nexport class AppComponent {\n  @ViewChild('diagram') diagram!: DiagramComponent;\n\n  public tool: DiagramTools = DiagramTools.ZoomPan;\n  public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n  constraints: DiagramConstraints = DiagramConstraints.Default &~ DiagramConstraints.UndoRedo;\n  // These properties will hold your node and connector arrays for binding\n  public nodes: NodeModel[] = [];\n  public connectors: ConnectorModel[] = [];\n\n  // Meta-data for layout/labels/colors\n  private layerSizes: number[] = [3, 5, 4, 2];\n  private layerNames: string[] = [\"Input Layer\", \"Hidden Layer 1\", \"Hidden Layer 2\", \"Output Layer\"];\n  private layerColors: string[] = [\"#0087EA\", \"#FE871F\", \"#7925E5\", \"#04AE45\"];\n  private nodeLabels: string[][] = [\n    [\"Feature 1\", \"Feature 2\", \"Feature 3\"],\n    [\"H1-1\", \"H1-2\", \"H1-3\", \"H1-4\", \"H1-5\"],\n    [\"H2-1\", \"H2-2\", \"H2-3\", \"H2-4\"],\n    [\"Output 1\", \"Output 2\"]\n  ];\n\n  ngOnInit() {\n    // Build the diagram data on component init\n    this.nodes = [];\n    this.connectors = [];\n    this.buildLayerLabelNodes();\n    this.buildNeuronNodes();\n    this.buildConnectors();\n  }\n\n  // Build the colored layer label nodes shown on top\n  buildLayerLabelNodes() {\n    this.layerNames.forEach((name, i) => {\n      this.nodes.push({\n        id: `label_${i}`,\n        offsetX: 200 + i * 250,\n        offsetY: 50,\n        width: 150,\n        height: 40,\n        style: { fill: \"transparent\", strokeColor: \"transparent\" },\n        annotations: [{\n          template: `\n            <div style=\"display:flex;align-items:center;justify-content:center;width:100%;height:100%;\">\n              <div style=\"width:12px;height:12px;border-radius:6px;background:${this.layerColors[i]};margin-right:10px;\"></div>\n              <span style=\"font-weight:bold;font-size:14px;color:#495057;\">${name}</span>\n            </div>\n          `,\n        }],\n        constraints: NodeConstraints.Default & ~NodeConstraints.Select\n      });\n    });\n  }\n\n  // Build neuron nodes per layer\n  buildNeuronNodes() {\n    for (let l = 0; l < this.layerSizes.length; l++) {\n      for (let n = 0; n < this.layerSizes[l]; n++) {\n        const nodeLabel = this.nodeLabels[l][n];\n        this.nodes.push({\n          id: `neuron_${l}_${n}`,\n          width: 70, height: 70,\n          offsetX: 200 + l * 250,\n          offsetY: 120 + ((5 - this.layerSizes[l]) * 100 / 2) + n * 100,\n          style: { fill: this.layerColors[l], strokeColor: this.layerColors[l], strokeWidth: 2 },\n          shape: { type: \"Basic\", shape: \"Ellipse\" },\n          annotations: [{\n            content: nodeLabel,\n            style: { fontSize: 12, color: \"white\", bold: true }\n          }],\n          tooltip: {\n            content: `\n              <div style=\"padding:8px 12px; border-radius:6px; font-family:'Segoe UI',sans-serif; min-width:160px;\">\n                <div style=\"font-weight:bold;font-size:13px;margin-bottom:4px;\">\n                  ðŸ§  Neuron Information\n                </div>\n                <hr style=\"margin:2px 0 5px 0;\"/>\n                <div style=\"font-size:13px;margin-bottom:2px;\">\n                  <span style=\"font-weight:bold;\">Layer:</span>\n                  <span >${this.layerNames[l]}</span>\n                </div>\n                <div style=\"font-size:13px;\">\n                  <span style=\"font-weight:bold;\">Neuron:</span>\n                  <span >${nodeLabel}</span>\n                </div>\n              </div>`,\n            position: \"TopCenter\"\n          },\n          constraints: NodeConstraints.Default | NodeConstraints.Tooltip\n        });\n      }\n    }\n  }\n\n  // Deterministic random for demo\n  randomSeed = 42;\n  random() {\n    this.randomSeed = Math.sin(this.randomSeed) * 10000;\n    return this.randomSeed - Math.floor(this.randomSeed);\n  }\n\n  // Build connectors between neurons\n  buildConnectors() {\n    for (let l = 0; l < this.layerSizes.length - 1; l++) {\n      for (let n = 0; n < this.layerSizes[l]; n++) {\n        for (let m = 0; m < this.layerSizes[l + 1]; m++) {\n          const weight = Math.round((this.random() * 2 - 1) * 100) / 100;\n          const weightColor = weight >= 0 ? \"#2ecc71\" : \"#e74c3c\";\n          this.connectors.push({\n            id: `conn_${l}_${n}_${m}`,\n            sourceID: `neuron_${l}_${n}`,\n            targetID: `neuron_${l + 1}_${m}`,\n            type: 'Straight',\n            style: {\n              strokeColor: weight >= 0 ? \"#2196f3\" : \"#f44336\",\n              strokeWidth: Math.max(1, Math.min(3, Math.abs(weight) * 3)),\n              opacity: 0.7\n            },\n            targetDecorator: {\n              shape: \"Arrow\",\n              style: {\n                fill: weight >= 0 ? \"#2196f3\" : \"#f44336\",\n                strokeColor: weight >= 0 ? \"#2196f3\" : \"#f44336\"\n              }\n            },\n            annotations: [{\n              content: String(weight),\n              style: { fontSize: 13, color: \"#495057\", fill: \"white\" }\n            }],\n            tooltip: {\n              content: `\n                <div style=\"padding:8px 12px; border-radius:6px; font-family:'Segoe UI',sans-serif; min-width:160px;\">\n                  <div style=\"font-weight:bold;font-size:13px;margin-bottom:4px;\">\n                    ðŸ”— Connection Details\n                  </div>\n                  <hr style=\"margin:2px 0 5px 0;\"/>\n                  <div style=\"font-size:13px;margin-bottom:2px;\">\n                    <span style=\"font-weight:bold;\">Weight:</span>\n                    <span style=\"color:${weightColor};font-weight:bold;\">${weight}</span>\n                  </div>\n                  <div style=\"font-size:13px;margin-bottom:1px;\">\n                    <span style=\"font-weight:bold;\">From:</span>\n                    <span >neuron_${l}_${n}</span>\n                  </div>\n                  <div style=\"font-size:13px;\">\n                    <span style=\"font-weight:bold;\">To:</span>\n                    <span >neuron_${l + 1}_${m}</span>\n                  </div>\n                </div>`,\n              position: \"TopCenter\"\n            },\n            constraints: ConnectorConstraints.Default | ConnectorConstraints.Tooltip\n          });\n        }\n      }\n    }\n  }\n  diagramCreated: boolean = false\n  created(): void {\n    this.diagramCreated = true;\n    this.diagram.fitToPage();\n  }\n  load(): void {\n    if (this.diagramCreated) {\n      this.diagram.fitToPage();\n    }\n  }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n  <ejs-diagram #diagram\n    id=\"diagram\"\n    width=\"100%\" height=\"600px\"\n    [tool]=\"tool\"\n    [snapSettings]=\"snapSettings\"\n    [nodes]=\"nodes\"\n    [connectors]=\"connectors\"\n    (created)=\"created()\"\n    (load)=\"load()\"\n    [constraints]=\"constraints\">\n  </ejs-diagram>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}