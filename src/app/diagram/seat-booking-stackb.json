{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"// src/app/diagram/seat-booking.component.ts\nimport { Component, ViewEncapsulation, ViewChild, OnInit, ChangeDetectorRef } from '@angular/core'; \nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    NodeModel,\n    Node,\n    SnapConstraints,\n    DiagramTools,\n    NodeConstraints,\n    AnnotationConstraints,\n    SnapSettingsModel,\n    DiagramConstraints\n} from '@syncfusion/ej2-diagrams';\n\n\nimport { CommonModule } from '@angular/common'; \nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ButtonPropsModel, DialogComponent, DialogModule } from '@syncfusion/ej2-angular-popups'; \n\nfunction getTimingSpecificBookedSeats(): { [key: number]: string[] } {\n    return {\n        1: [\n            \"seatD9\", \"seatD10\", \"seatE9\", \"seatE10\", \"seatF8\", \"seatF9\", \"seatF10\", \"seatF11\",\n            \"seatG7\", \"seatG8\", \"seatG9\", \"seatG10\", \"seatH6\", \"seatH7\", \"seatH8\",\n            \"seatC9\", \"seatC10\", \"seatB9\", \"seatB10\", \"seatA9\", \"seatA10\",\n            \"seatD8\", \"seatD11\", \"seatE8\", \"seatE11\", \"seatF7\", \"seatF12\",\n            \"seatC8\", \"seatC11\", \"seatB8\", \"seatB11\", \"seatA8\", \"seatA11\",\n            \"seatG6\", \"seatG11\", \"seatH5\", \"seatH9\",\n            \"seatI8\", \"seatI9\", \"seatJ8\", \"seatJ9\", \"seatK7\", \"seatK8\", \"seatK9\", \"seatK10\",\n            \"seatL6\", \"seatL7\", \"seatL8\", \"seatL9\", \"seatM5\", \"seatM6\", \"seatM7\", \"seatM8\",\n            \"seatI7\", \"seatI10\", \"seatJ7\", \"seatJ10\", \"seatK6\", \"seatK11\",\n            \"seatL5\", \"seatL10\", \"seatM4\",\n            \"seatN8\", \"seatN9\", \"seatO8\", \"seatO9\", \"seatP8\", \"seatP9\",\n            \"seatN7\", \"seatN10\", \"seatO7\", \"seatO10\", \"seatP7\", \"seatP10\",\n            \"seatN6\", \"seatO6\", \"seatP6\"\n        ],\n        2: [\n            \"seatA1\", \"seatA2\", \"seatA3\", \"seatA4\", \"seatA5\", \"seatA6\", \"seatA7\", \"seatA8\", \"seatA9\", \"seatA10\", \"seatA11\", \"seatA12\", \"seatA13\", \"seatA14\", \"seatA15\", \"seatA16\", \"seatA17\", \"seatA18\",\n            \"seatB1\", \"seatB2\", \"seatB3\", \"seatB4\", \"seatB5\", \"seatB6\", \"seatB7\", \"seatB8\", \"seatB9\", \"seatB10\", \"seatB11\", \"seatB12\", \"seatB13\", \"seatB14\", \"seatB15\", \"seatB16\", \"seatB17\", \"seatB18\",\n            \"seatC1\", \"seatC2\", \"seatC3\", \"seatC4\", \"seatC5\", \"seatC6\", \"seatC7\", \"seatC8\", \"seatC9\", \"seatC10\", \"seatC11\", \"seatC12\", \"seatC13\", \"seatC14\", \"seatC15\", \"seatC16\", \"seatC17\", \"seatC18\",\n            \"seatD1\", \"seatD2\", \"seatD3\", \"seatD4\", \"seatD5\", \"seatD6\", \"seatD7\", \"seatD8\", \"seatD9\", \"seatD10\", \"seatD11\", \"seatD12\", \"seatD13\", \"seatD14\", \"seatD15\", \"seatD16\", \"seatD17\", \"seatD18\",\n            \"seatE1\", \"seatE2\", \"seatE3\", \"seatE4\", \"seatE5\", \"seatE6\", \"seatE7\", \"seatE8\", \"seatE9\", \"seatE10\", \"seatE11\", \"seatE12\", \"seatE13\", \"seatE14\", \"seatE15\", \"seatE16\", \"seatE17\", \"seatE18\",\n            \"seatF1\", \"seatF2\", \"seatF3\", \"seatF4\", \"seatF5\", \"seatF6\", \"seatF7\", \"seatF8\", \"seatF9\", \"seatF10\", \"seatF11\", \"seatF12\", \"seatF13\", \"seatF14\", \"seatF15\", \"seatF16\", \"seatF17\", \"seatF18\",\n            \"seatG1\", \"seatG2\", \"seatG3\", \"seatG4\", \"seatG5\", \"seatG6\", \"seatG7\", \"seatG8\", \"seatG9\", \"seatG10\", \"seatG11\", \"seatG12\", \"seatG13\", \"seatG14\", \"seatG15\", \"seatG16\",\n            \"seatH1\", \"seatH2\", \"seatH3\", \"seatH4\", \"seatH5\", \"seatH6\", \"seatH7\", \"seatH8\", \"seatH9\", \"seatH10\", \"seatH11\", \"seatH12\", \"seatH13\", \"seatH14\",\n            \"seatI1\", \"seatI2\", \"seatI3\", \"seatI4\", \"seatI5\", \"seatI6\", \"seatI7\", \"seatI8\", \"seatI9\", \"seatI10\", \"seatI11\", \"seatI12\", \"seatI13\", \"seatI14\", \"seatI15\", \"seatI16\",\n            \"seatJ1\", \"seatJ2\", \"seatJ3\", \"seatJ4\", \"seatJ5\", \"seatJ6\", \"seatJ7\", \"seatJ8\", \"seatJ9\", \"seatJ10\", \"seatJ11\", \"seatJ12\", \"seatJ13\", \"seatJ14\", \"seatJ15\", \"seatJ16\",\n            \"seatK1\", \"seatK2\", \"seatK3\", \"seatK4\", \"seatK5\", \"seatK6\", \"seatK7\", \"seatK8\", \"seatK9\", \"seatK10\", \"seatK11\", \"seatK12\", \"seatK13\", \"seatK14\", \"seatK15\", \"seatK16\",\n            \"seatL1\", \"seatL2\", \"seatL3\", \"seatL4\", \"seatL5\", \"seatL6\", \"seatL7\", \"seatL8\", \"seatL9\", \"seatL10\", \"seatL11\", \"seatL12\", \"seatL13\", \"seatL14\",\n            \"seatM1\", \"seatM2\", \"seatM3\", \"seatM4\", \"seatM5\", \"seatM6\", \"seatM7\", \"seatM8\", \"seatM9\", \"seatM10\", \"seatM11\", \"seatM12\",\n            \"seatN1\", \"seatN2\", \"seatN3\", \"seatN4\", \"seatN5\", \"seatN6\", \"seatN7\", \"seatN8\", \"seatN9\", \"seatN10\", \"seatN11\", \"seatN12\", \"seatN13\", \"seatN14\", \"seatN15\", \"seatN16\",\n            \"seatO1\", \"seatO2\", \"seatO3\", \"seatO4\", \"seatO5\", \"seatO6\", \"seatO7\", \"seatO8\", \"seatO9\", \"seatO10\", \"seatO11\", \"seatO12\", \"seatO13\", \"seatO14\", \"seatO15\", \"seatO16\",\n            \"seatP1\", \"seatP2\", \"seatP3\", \"seatP4\", \"seatP5\", \"seatP6\", \"seatP7\", \"seatP8\", \"seatP9\", \"seatP10\", \"seatP11\", \"seatP12\", \"seatP13\", \"seatP14\", \"seatP15\", \"seatP16\"\n        ],\n        3: [\n            \"seatA1\", \"seatA2\", \"seatA3\", \"seatA4\", \"seatA5\", \"seatA6\", \"seatA7\", \"seatA8\", \"seatA9\", \"seatA10\", \"seatA11\", \"seatA12\", \"seatA13\", \"seatA14\", \"seatA15\", \"seatA16\", \"seatA17\", \"seatA18\",\n            \"seatB1\", \"seatB2\", \"seatB3\", \"seatB4\", \"seatB5\", \"seatB6\", \"seatB7\", \"seatB8\", \"seatB9\", \"seatB10\", \"seatB11\", \"seatB12\", \"seatB13\", \"seatB14\", \"seatB15\", \"seatB16\", \"seatB17\", \"seatB18\",\n            \"seatC1\", \"seatC2\", \"seatC3\", \"seatC4\", \"seatC5\", \"seatC6\", \"seatC7\", \"seatC8\", \"seatC9\", \"seatC10\", \"seatC11\", \"seatC12\", \"seatC13\", \"seatC14\", \"seatC15\", \"seatC16\", \"seatC17\", \"seatC18\",\n            \"seatD1\", \"seatD2\", \"seatD3\", \"seatD4\", \"seatD5\", \"seatD6\", \"seatD7\", \"seatD8\", \"seatD9\", \"seatD10\", \"seatD11\", \"seatD12\", \"seatD13\", \"seatD14\", \"seatD15\", \"seatD16\", \"seatD17\", \"seatD18\",\n            \"seatE1\", \"seatE2\", \"seatE3\", \"seatE4\", \"seatE5\", \"seatE6\", \"seatE7\", \"seatE8\", \"seatE9\", \"seatE10\", \"seatE11\", \"seatE12\", \"seatE13\", \"seatE14\", \"seatE15\", \"seatE16\", \"seatE17\", \"seatE18\",\n            \"seatF1\", \"seatF2\", \"seatF3\", \"seatF4\", \"seatF5\", \"seatF6\", \"seatF7\", \"seatF8\", \"seatF9\", \"seatF10\", \"seatF11\", \"seatF12\", \"seatF13\", \"seatF14\", \"seatF15\", \"seatF16\", \"seatF17\", \"seatF18\",\n            \"seatG1\", \"seatG2\", \"seatG3\", \"seatG4\", \"seatG5\", \"seatG6\", \"seatG7\", \"seatG8\", \"seatG9\", \"seatG10\", \"seatG11\", \"seatG12\", \"seatG13\", \"seatG14\", \"seatG15\", \"seatG16\",\n            \"seatH1\", \"seatH2\", \"seatH3\", \"seatH4\", \"seatH5\", \"seatH6\", \"seatH7\", \"seatH8\", \"seatH9\", \"seatH10\", \"seatH11\", \"seatH12\", \"seatH13\",\n            \"seatI1\", \"seatI2\", \"seatI3\", \"seatI4\", \"seatI5\", \"seatI6\", \"seatI7\", \"seatI8\", \"seatI9\", \"seatI10\", \"seatI11\", \"seatI12\", \"seatI13\", \"seatI14\", \"seatI15\", \"seatI16\",\n            \"seatJ1\", \"seatJ2\", \"seatJ3\", \"seatJ4\", \"seatJ5\", \"seatJ6\", \"seatJ7\", \"seatJ8\", \"seatJ9\", \"seatJ10\", \"seatJ11\", \"seatJ12\", \"seatJ13\", \"seatJ14\", \"seatJ15\", \"seatJ16\",\n            \"seatK1\", \"seatK2\", \"seatK3\", \"seatK4\", \"seatK5\", \"seatK6\", \"seatK7\", \"seatK8\", \"seatK9\", \"seatK10\", \"seatK11\", \"seatK12\", \"seatK13\", \"seatK14\", \"seatK15\", \"seatK16\",\n            \"seatL1\", \"seatL2\", \"seatL3\", \"seatL4\", \"seatL5\", \"seatL6\", \"seatL7\", \"seatL8\", \"seatL9\", \"seatL10\", \"seatL11\", \"seatL12\", \"seatL13\", \"seatL14\",\n            \"seatM1\", \"seatM2\", \"seatM3\", \"seatM4\", \"seatM5\", \"seatM6\", \"seatM7\", \"seatM8\", \"seatM9\", \"seatM10\", \"seatM11\", \"seatM12\",\n            \"seatN1\", \"seatN2\", \"seatN3\", \"seatN4\", \"seatN5\", \"seatN6\", \"seatN7\", \"seatN8\", \"seatN9\", \"seatN10\", \"seatN11\", \"seatN12\", \"seatN13\", \"seatN14\", \"seatN15\", \"seatN16\",\n            \"seatO1\", \"seatO2\", \"seatO3\", \"seatO4\", \"seatO5\", \"seatO6\", \"seatO7\", \"seatO8\", \"seatO9\", \"seatO10\", \"seatO11\", \"seatO12\", \"seatO13\", \"seatO14\", \"seatO15\", \"seatO16\",\n            \"seatP1\", \"seatP2\", \"seatP3\", \"seatP4\", \"seatP5\"\n        ],\n        4: [\n            \"seatA1\", \"seatA2\", \"seatA3\", \"seatA4\", \"seatA5\", \"seatA6\", \"seatA7\", \"seatA8\", \"seatA9\", \"seatA10\", \"seatA11\", \"seatA12\", \"seatA13\", \"seatA14\", \"seatA15\", \"seatA16\", \"seatA17\", \"seatA18\",\n            \"seatB1\", \"seatB2\", \"seatB3\", \"seatB4\", \"seatB5\", \"seatB6\", \"seatB7\", \"seatB8\", \"seatB9\", \"seatB10\", \"seatB11\", \"seatB12\", \"seatB13\", \"seatB14\", \"seatB15\", \"seatB16\", \"seatB17\", \"seatB18\",\n            \"seatC1\", \"seatC2\", \"seatC3\", \"seatC4\", \"seatC5\", \"seatC6\", \"seatC7\", \"seatC8\", \"seatC9\", \"seatC10\", \"seatC11\", \"seatC12\", \"seatC13\", \"seatC14\", \"seatC15\", \"seatC16\", \"seatC17\", \"seatC18\",\n            \"seatD1\", \"seatD2\", \"seatD3\", \"seatD4\", \"seatD5\", \"seatD6\", \"seatD7\", \"seatD8\", \"seatD9\", \"seatD10\", \"seatD11\", \"seatD12\", \"seatD13\", \"seatD14\", \"seatD15\", \"seatD16\", \"seatD17\", \"seatD18\",\n            \"seatE1\", \"seatE2\", \"seatE3\", \"seatE4\", \"seatE5\", \"seatE6\", \"seatE7\", \"seatE8\", \"seatE9\", \"seatE10\", \"seatE11\", \"seatE12\", \"seatE13\", \"seatE14\", \"seatE15\", \"seatE16\", \"seatE17\", \"seatE18\",\n            \"seatF1\", \"seatF2\", \"seatF3\", \"seatF4\", \"seatF5\", \"seatF6\", \"seatF7\", \"seatF8\", \"seatF9\", \"seatF10\", \"seatF11\", \"seatF12\", \"seatF13\", \"seatF14\", \"seatF15\", \"seatF16\", \"seatF17\", \"seatF18\",\n            \"seatI1\", \"seatI2\", \"seatI3\", \"seatI4\", \"seatI5\", \"seatI6\", \"seatI7\", \"seatI8\", \"seatI9\", \"seatI10\", \"seatI11\", \"seatI12\", \"seatI13\", \"seatI14\", \"seatI15\", \"seatI16\",\n            \"seatJ1\", \"seatJ2\", \"seatJ3\", \"seatJ4\", \"seatJ5\", \"seatJ6\", \"seatJ7\", \"seatJ8\", \"seatJ9\", \"seatJ10\", \"seatJ11\", \"seatJ12\", \"seatJ13\", \"seatJ14\", \"seatJ15\", \"seatJ16\",\n            \"seatK1\", \"seatK2\", \"seatK3\", \"seatK4\", \"seatK5\", \"seatK6\", \"seatK7\", \"seatK8\", \"seatK9\", \"seatK10\", \"seatK11\", \"seatK12\", \"seatK13\", \"seatK14\", \"seatK15\", \"seatK16\",\n            \"seatL1\", \"seatL2\", \"seatL3\", \"seatL4\", \"seatL5\", \"seatL6\", \"seatL7\", \"seatL8\", \"seatL9\", \"seatL10\",\n            \"seatN1\", \"seatN2\", \"seatN3\", \"seatN4\", \"seatN5\", \"seatN6\", \"seatN7\", \"seatN8\", \"seatN9\", \"seatN10\", \"seatN11\", \"seatN12\", \"seatN13\", \"seatN14\", \"seatN15\", \"seatN16\",\n            \"seatO1\", \"seatO2\", \"seatO3\", \"seatO4\", \"seatO5\", \"seatO6\", \"seatO7\", \"seatO8\", \"seatO9\", \"seatO10\", \"seatO11\", \"seatO12\", \"seatO13\", \"seatO14\", \"seatO15\", \"seatO16\",\n            \"seatP1\", \"seatP2\", \"seatP3\", \"seatP4\", \"seatP5\"\n        ]\n    };\n}\n\n// Define interfaces for better type safety\ninterface SeatInfo {\n    seatNumber: string;\n    row: string;\n    column: number;\n    price: number;\n    tierCategory: string;\n    booked: boolean;\n}\n\ninterface SeatSelection {\n    seatNumbers: string[];\n    ticketCount: number;\n    amount: number;\n    category: string;\n}\n\ninterface ShowTiming {\n    id: number;\n    time: string;\n    type: string;\n    status: string;\n}\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [\n        \n        DiagramModule,\n        \n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule\n    ]\n})\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram!: DiagramComponent;\n    constraints: DiagramConstraints = DiagramConstraints.Default &~ DiagramConstraints.UndoRedo;\n\n    @ViewChild('bookingSuccessDialog')\n    public bookingSuccessDialogComponent!: DialogComponent;\n\n    public nodes: NodeModel[] = [];\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public tool: DiagramTools = DiagramTools.ZoomPan | DiagramTools.SingleSelect;\n\n    public selectedTimingId: number = 1;\n    public seatSelection: SeatSelection = {\n        seatNumbers: [],\n        ticketCount: 0,\n        amount: 0.0,\n        category: \"\"\n    };\n    public selectedSeatsArray: string[] = [];\n\n    public timingSpecificBookedSeats: { [key: number]: string[] } = getTimingSpecificBookedSeats();\n\n    public showTimings: ShowTiming[] = [\n        { id: 1, time: \"11:50 AM\", type: \"4K DOLBY ATMOS\", status: \"available\" },\n        { id: 2, time: \"02:15 PM\", type: \"4K DOLBY ATMOS\", status: \"sold-out\" },\n        { id: 3, time: \"06:20 PM\", type: \"4K DOLBY ATMOS\", status: \"filling-fast\" },\n        { id: 4, time: \"09:15 PM\", type: \"4K DOLBY ATMOS\", status: \"filling-fast\" }\n    ];\n\n    public movieTimingText: string = '';\n    public dateLabelText: string = '';\n    public notificationMessage: string = '';\n    public showNotificationFlag: boolean = false;\n\n    ngOnInit(): void {\n        this.updateDateTime(this.selectedTimingId - 1); // Set initial time display\n        this.initializeLayout();\n    }\n\n    diagramCreated: boolean = false;\n    public onDiagramCreated(): void {\n        if (this.diagram) {\n            this.diagramCreated = true;\n            this.diagram.nodes = this.nodes; // Assign the pre-created nodes to the diagram\n            this.diagram.dataBind();\n            this.diagram.fitToPage({ canZoomOut: true });\n            this.refreshSeatingLayout(); // Perform initial layout refresh\n            this.updateBookingSummary();\n            this.updateBookingSummaryUI();\n        }\n    }\n\n    load(): void {\n        if(this.diagramCreated){\n             this.diagram.fitToPage({ canZoomOut: true });\n        }\n    }\n\n    private getBookedSeatsForTiming(timingId: number): string[] {\n        return this.timingSpecificBookedSeats[timingId] || [];\n    }\n\n    private refreshSeatingLayout(): void {\n        const bookedSet: Set<string> = new Set(this.getBookedSeatsForTiming(this.selectedTimingId));\n\n        this.diagram.nodes.forEach((node: NodeModel) => {\n            // Check if it's a seat node (has addInfo and a SeatNumber property)\n            if (node.addInfo && (node.addInfo as SeatInfo).seatNumber) {\n                const currentSeatInfo = node.addInfo as SeatInfo;\n\n                // --- RESET ALL STYLES TO DEFAULT AVAILABLE STATE ---\n                (node.style as any).fill = 'transparent';\n                (node.style as any).strokeColor = '#9CA3AF';\n                 if (node.annotations && node.annotations[0] && node.annotations[0].style) { // Ensure style exists\n                    node.annotations[0].style!.color = \"#374151\"; // Default annotation color\n                }\n                currentSeatInfo.booked = false; // Reset Booked status for refresh\n\n                // --- APPLY BOOKED STATUS AND STYLING FOR THE CURRENT TIMING ---\n                if (bookedSet.has(node.id!)) {\n                    (node.style as any).fill = '#E5E7EB'; // Booked fill color\n                    (node.style as any).strokeColor = '#E5E7EB';\n                    if (node.annotations && node.annotations[0] && node.annotations[0].style) {\n                        node.annotations[0].style!.color = \"#9CA3AF\"; // Booked annotation color\n                    }\n                    currentSeatInfo.booked = true; // Set Booked status\n                }\n\n                // --- APPLY SELECTED STATUS AND STYLING (OVERRIDES BOOKED/AVAILABLE) ---\n                if (this.selectedSeatsArray.includes(node.id!)) {\n                    (node.style as any).fill = \"#15803D\"; // Selected fill color\n                    (node.style as any).strokeColor = \"#15803D\";\n                    if (node.annotations && node.annotations[0] && node.annotations[0].style) {\n                        node.annotations[0].style!.color = \"white\"; // Selected annotation color\n                    }\n                }\n                \n                // Update tooltip content based on the final state\n                node.tooltip.content = this.getSeatTooltipTemplate(currentSeatInfo, node);\n            }\n        });\n        this.diagram.dataBind();\n    }\n\n    public getSeatTooltipTemplate(addInfoData: SeatInfo, currentNode?: NodeModel): string {\n        let addInfo: SeatInfo = addInfoData;\n        let seatNumber: string = addInfo.seatNumber || \"N/A\";\n        let row: string = addInfo.row || \"N/A\";\n        let tier: string = addInfo.tierCategory || \"N/A\";\n        let price: number | string = addInfo.price !== undefined ? addInfo.price : \"N/A\";\n\n        // Determine if selected based on the component's selectedSeatsArray, not just node's intrinsic state\n        let isSelectedForTooltip: boolean = this.selectedSeatsArray.includes(currentNode?.id || ''); \n        \n        // Use addInfo.Booked for intrinsic booked status\n        let isBookedForTooltip: boolean = !!addInfo.booked;\n\n        let status: string = isSelectedForTooltip ? \"Selected\" : isBookedForTooltip ? \"Booked\" : \"Available\";\n        let statusBg: string = (isSelectedForTooltip ? \"#28a745\" : isBookedForTooltip ? \"#6c757d\" : \"#17a2b8\");\n\n        return `\n            <div class=\"seat-tooltip\" style=\"margin:0;padding:10px;font-family:Arial,sans-serif;min-width:150px;\">\n                <div style=\"font-weight:bold;margin-bottom:5px;font-size:14px;\">\n                    Seat ${seatNumber}\n                </div>\n                <div style=\"font-size:12px;margin-bottom:3px;\">\n                    <strong>Row:</strong> ${row}\n                </div>\n                <div style=\"font-size:12px;margin-bottom:3px;\">\n                    <strong>Category:</strong> ${tier}\n                </div>\n                <div style=\"font-size:12px;margin-bottom:3px;\">\n                    <strong>Price:</strong> $${price}\n                </div>\n                <div style=\"font-size:12px;margin-top:5px;\">\n                    <span style=\"padding:2px 6px;border-radius:3px;font-weight:bold;background-color:${statusBg};color:white;font-size:11px;\">\n                        ${status}\n                    </span>\n                </div>\n            </div>\n        `;\n    }\n\n    private createTierLabel(tierName: string, price: number, y: number): void {\n        this.nodes.push({\n            id: `tier-${tierName}`,\n            width: 200,\n            height: 25,\n            offsetX: 585,\n            offsetY: y,\n            shape: { type: 'Text', content: `${tierName} - $${price}` },\n            style: { fontSize: 16, bold: true },\n            constraints: NodeConstraints.ReadOnly\n        });\n    }\n\n    private createRowLabel(row: string, y: number): void {\n        this.nodes.push({\n            id: `row-${row}`,\n            width: 30,\n            height: 32,\n            offsetX: 80,\n            offsetY: y,\n            shape: { type: 'Text', content: row },\n            style: { fontSize: 14, bold: true },\n            constraints: NodeConstraints.ReadOnly\n        });\n    }\n\n    private createSeatNode(seatId: string, seatNumber: string, row: string, column: number, price: number, tier: string, x: number, y: number): void {\n        let addInfoData: SeatInfo = {\n            seatNumber: seatNumber,\n            row: row,\n            column: column,\n            price: price,\n            tierCategory: tier,\n            booked: false // Initial state is not booked\n        };\n        this.nodes.push({\n            id: seatId,\n            width: 32,\n            height: 32,\n            offsetX: x,\n            offsetY: y,\n            shape: { cornerRadius: 4 },\n            style: { strokeColor: '#9CA3AF', strokeWidth: 2 },\n            annotations: [{ content: column.toString(), style: { color: \"#374151\" } }], // Default annotation color\n            addInfo: addInfoData,\n            tooltip: { content: this.getSeatTooltipTemplate(addInfoData), relativeMode: 'Object' },\n            constraints: (NodeConstraints.Default | NodeConstraints.Tooltip | NodeConstraints.ReadOnly) & ~NodeConstraints.Select\n        });\n    }\n\n    private createSplitSeats(row: string, seatCount: number, price: number, tier: string, y: number): void {\n        const center: number = 600;\n        const seatWidth: number = 32;\n        const spacing: number = 10;\n        const aisle: number = 82;\n        const leftSeats: number = Math.floor(seatCount / 2);\n        const rightSeats: number = seatCount - leftSeats;\n        const leftStartX: number = center - (aisle / 2) - (leftSeats * (seatWidth + spacing) - spacing);\n        const rightStartX: number = center + (aisle / 2);\n\n        for (let i = 1; i <= leftSeats; i++) {\n            const x: number = leftStartX + (i - 1) * (seatWidth + spacing);\n            this.createSeatNode(`seat${row}${i}`, `${row}${i}`, row, i, price, tier, x, y);\n        }\n        for (let i = leftSeats + 1; i <= seatCount; i++) {\n            const x: number = rightStartX + (i - leftSeats - 1) * (seatWidth + spacing);\n            this.createSeatNode(`seat${row}${i}`, `${row}${i}`, row, i, price, tier, x, y);\n        }\n    }\n\n    private createTierSeats(tier: string, price: number, startY: number, rows: { row: string, count: number }[]): number {\n        let y: number = startY;\n        this.createTierLabel(tier, price, y - 50);\n        rows.forEach(({ row, count }) => {\n            this.createRowLabel(row, y);\n            this.createSplitSeats(row, count, price, tier, y);\n            y += 48;\n        });\n        return y;\n    }\n\n    private createScreen(y: number): void {\n        this.nodes.push({\n            id: 'screen',\n            width: 600,\n            height: 80,\n            offsetX: 580,\n            offsetY: y,\n            constraints: NodeConstraints.ReadOnly,\n            shape: {\n                type: 'Native', content: `<svg width=\"394\" height=\"56\" viewBox=\"0 0 394 56\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M27.0321 1.62598L2 37.6661C124.157 52.0822 312.899 43.6728 392 37.6661L364.965 1.62598C276.852 11.8374 148.187 11.8374 27.0321 1.62598Z\" stroke=\"#818CF8\" stroke-width=\"2\" stroke-linejoin=\"round\" />\n                                    <path d=\"M2 45.666C124.157 60.0821 312.899 51.6727 392 45.666\" stroke=\"#818CF8\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                                    <path d=\"M27.0321 1.62598L2 37.6661C124.157 52.0822 312.899 43.6728 392 37.6661L364.965 1.62598C276.852 11.8374 148.187 11.8374 27.0321 1.62598Z\" fill=\"#E0E7FF\" />\n                                </svg>` },\n            annotations: [{\n                content: 'Screen This Way',\n                offset: { x: 0.5, y: 1.5 },\n                constraints: AnnotationConstraints.ReadOnly,\n                style: { fontSize: 14, color: '#818CF8' }\n            }]\n        });\n    }\n\n    private initializeLayout(): void {\n        let y: number = 50;\n        y = this.createTierSeats(\"Executive\", 25, y, [\n            { row: \"A\", count: 18 }, { row: \"B\", count: 18 }, { row: \"C\", count: 18 },\n            { row: \"D\", count: 18 }, { row: \"E\", count: 18 }, { row: \"F\", count: 18 },\n            { row: \"G\", count: 16 }, { row: \"H\", count: 14 }\n        ]);\n        y += 92;\n        y = this.createTierSeats(\"Corporate\", 16, y, [\n            { row: \"I\", count: 16 }, { row: \"J\", count: 16 }, { row: \"K\", count: 16 },\n            { row: \"L\", count: 14 }, { row: \"M\", count: 12 }\n        ]);\n        y += 92;\n        y = this.createTierSeats(\"Budget\", 8, y, [\n            { row: \"N\", count: 16 }, { row: \"O\", count: 16 }, { row: \"P\", count: 16 }\n        ]);\n        y += 92;\n        this.createScreen(y);\n    }\n\n    private unSelectSeat(seatNode: NodeModel): void{\n        // Logic for DESELECTING a seat\n        const idx: number = this.selectedSeatsArray.indexOf(seatNode.id!);\n        if (idx !== -1) {\n            this.selectedSeatsArray.splice(idx, 1);\n        }\n        // Reset styling for previously selected seats\n        (seatNode.style as any).fill = \"transparent\";\n        (seatNode.style as any).strokeColor = \"#9CA3AF\";\n        if (seatNode.annotations && seatNode.annotations[0] && seatNode.annotations[0].style) {\n            seatNode.annotations[0].style!.color = \"#374151\"; // Reset annotation color\n        }\n    }\n    public onDiagramClick(args: any): void {\n        if (args?.element instanceof Node && args.element.addInfo) {\n            let currentNode: NodeModel = args.element;\n            const currentSeatInfo = currentNode.addInfo as SeatInfo;\n\n            if (currentSeatInfo.booked) {\n                // If it's booked, just update tooltip and return\n                currentNode.tooltip.content = this.getSeatTooltipTemplate(currentSeatInfo, currentNode);\n                this.diagram.dataBind();\n                return;\n            }\n\n            if (!this.selectedSeatsArray.includes(currentNode.id!)) {\n                // Logic for SELECTING a seat\n                const newTier: string = currentSeatInfo.tierCategory || \"\";\n                const selectedNodeInfos: SeatInfo[] = this.selectedSeatsArray.map(seatId => {\n                    const nodeFromDiagram: NodeModel | undefined = this.diagram.getObject(seatId) as NodeModel;\n                      return nodeFromDiagram?.addInfo as SeatInfo;\n                }).filter(info => info !== undefined && info !== null);\n\n                const currentTier: string | null = selectedNodeInfos.length > 0\n                    ? selectedNodeInfos[0].tierCategory || \"\"\n                    : null;\n\n                const differentTier: boolean = Boolean(currentTier && newTier !== currentTier);\n                if (differentTier) {\n                    //Iterate backwards to avoid skipping elements after splicing\n                    for (let i: number = this.selectedSeatsArray.length - 1; i >= 0; i--) {\n                        const seatNode = this.diagram.getObject(this.selectedSeatsArray[i]) as NodeModel;\n                        if (seatNode) {\n                            this.unSelectSeat(seatNode);\n                            // Update tooltip for these deselected original seats\n                            seatNode.tooltip.content = this.getSeatTooltipTemplate(seatNode.addInfo as SeatInfo, seatNode);\n                        }\n                    }\n                    this.hideNotification();\n                } else if (this.selectedSeatsArray.length >= 10) {\n                    this.showNotification(\"Maximum 10 tickets can be selected\");\n                    return; \n                }\n\n                // Add the new seat to selection (client-side array)\n                this.selectedSeatsArray.push(currentNode.id!);\n                \n                // Apply SELECTED styling to the current node\n                (currentNode.style as any).fill = \"#15803D\";\n                (currentNode.style as any).strokeColor = \"#15803D\";\n                if (currentNode.annotations && currentNode.annotations[0] && currentNode.annotations[0].style) {\n                    currentNode.annotations[0].style!.color = \"white\"; // Annotation color for selected\n                }\n                this.diagram.dataBind();\n                this.hideNotification();\n\n            } else {\n                this.unSelectSeat(currentNode);\n                this.hideNotification(); // Clear notification on deselect\n            }\n            // Update tooltip of the *current* node being clicked based on its new state\n            currentNode.tooltip.content = this.getSeatTooltipTemplate(currentSeatInfo, currentNode);\n            // Trigger a single dataBind to refresh all affected nodes (especially for tier changes)\n            this.diagram.dataBind(); \n            this.updateBookingSummary();\n            this.updateBookingSummaryUI();\n        }\n    }\n\n    public onTimingSelected(timing: ShowTiming): void {\n        if (timing.status === 'sold-out') {\n            return;\n        }\n\n        this.selectedTimingId = timing.id;\n        this.selectedSeatsArray = []; // Clear current selection when timing changes\n        this.updateBookingSummary(); // Update summary based on cleared selection\n        this.updateBookingSummaryUI(); // Re-render summary UI\n        this.refreshSeatingLayout(); // Critical: Re-render diagram based on new timing's booked seats\n        this.hideNotification();\n        this.updateDateTime(timing.id - 1);\n        // Update selected timing item in UI (visual highlight)\n        const timingItems = document.querySelectorAll('.timing-item');\n        timingItems.forEach(item => {\n            if (parseInt(item.getAttribute('data-timing') || '0') === timing.id) {\n                item.classList.add('selected');\n            } else {\n                item.classList.remove('selected');\n            }\n        });\n    }\n\n    public showNotification(message: string): void {\n        this.notificationMessage = message;\n        this.showNotificationFlag = true;\n    }\n\n    public hideNotification(): void {\n        this.showNotificationFlag = false;\n        this.notificationMessage = '';\n    }\n\n    private updateBookingSummary(): void {\n        if (this.selectedSeatsArray.length > 0) {\n            let selectedSeatsDetailed: { seatNumber: string; row: string; price: number; tier: string; }[] =\n                this.selectedSeatsArray.map(seatId => {\n                    const nodeFromDiagram: NodeModel | undefined = this.diagram.getObject(seatId) as NodeModel;\n                    const seatInfo = nodeFromDiagram?.addInfo as SeatInfo;\n                    if (nodeFromDiagram && seatInfo) {\n                        return {\n                            seatNumber: seatInfo.seatNumber || \"\",\n                            row: seatInfo.row || \"\",\n                            price: seatInfo.price || 0,\n                            tier: seatInfo.tierCategory || \"\"\n                        };\n                    }\n                    return null;\n                }).filter(Boolean) as { seatNumber: string; row: string; price: number; tier: string; }[];\n\n            this.seatSelection.seatNumbers = selectedSeatsDetailed.map(s => s.seatNumber);\n            this.seatSelection.ticketCount = selectedSeatsDetailed.length;\n            const totalAmount: number = selectedSeatsDetailed.reduce((sum, s) => sum + (Number(s.price) || 0), 0);\n            this.seatSelection.amount = totalAmount;\n            this.seatSelection.category = selectedSeatsDetailed.length > 0 ? selectedSeatsDetailed[0].tier.toUpperCase() : \"\";\n        } else {\n            this.seatSelection.seatNumbers = [];\n            this.seatSelection.ticketCount = 0;\n            this.seatSelection.amount = 0.0;\n            this.seatSelection.category = \"\";\n        }\n    }\n\n    public updateBookingSummaryUI(): void {\n        const ticketCountElem: HTMLElement | null = document.getElementById('ticketCount');\n        const totalAmountElem: HTMLElement | null = document.getElementById('totalAmount');\n        const priceHintElem: HTMLElement | null = document.getElementById('priceHint');\n        const ticketAmountElem: HTMLElement | null = document.getElementById('ticketAmount');\n        const feesAmountElem: HTMLElement | null = document.getElementById('feesAmount');\n        const proceedButton: HTMLButtonElement | null = document.getElementById('proceedButton') as HTMLButtonElement;\n\n\n        if (this.seatSelection.ticketCount > 0) {\n            if (ticketCountElem) ticketCountElem.innerText = this.seatSelection.ticketCount + \" Tickets Selected\";\n            if (totalAmountElem) totalAmountElem.innerText = this.seatSelection.amount === null ? '$0' : \"$\" + (this.seatSelection.amount + 6);\n            if (priceHintElem) priceHintElem.style.display = 'block';\n            if (ticketAmountElem) ticketAmountElem.innerText = \"Tickets: $\" + (this.seatSelection.amount);\n            if (feesAmountElem) feesAmountElem.innerText = \" + Fees: $\" + 6;\n        } else {\n            if (ticketCountElem) ticketCountElem.innerText = \"0 Tickets Selected\";\n            if (totalAmountElem) totalAmountElem.innerText = \"$0\";\n            if (priceHintElem) priceHintElem.style.display = 'none';\n            if (ticketAmountElem) ticketAmountElem.innerText = \"\";\n            if (feesAmountElem) feesAmountElem.innerText = \"\";\n        }\n        if (proceedButton) proceedButton.disabled = this.seatSelection.ticketCount === 0;\n    }\n\n    private updateDateTime(id: number): void {\n        const showtiming: ShowTiming = this.showTimings[id];\n        const now: Date = new Date();\n        const options: Intl.DateTimeFormatOptions = {\n            weekday: 'long',\n            day: '2-digit',\n            month: 'short'\n        };\n        const formatted: string = now.toLocaleString('en-IN', options);\n        this.movieTimingText = `${formatted}, ${showtiming.time}`;\n        const day: string = now.toLocaleDateString('en-IN', { weekday: 'short' });\n        const date: string = now.toLocaleDateString('en-IN', { day: '2-digit', month: 'short' });\n        this.dateLabelText = `${day}<br>${date}`;\n    }\n\n    private bookSeatsForTiming(timingId: number, bookingSeatIds: string[]): void {\n        if (!this.timingSpecificBookedSeats[timingId]) {\n            this.timingSpecificBookedSeats[timingId] = [];\n        }\n        // Ensure no duplicates are added\n        bookingSeatIds.forEach(seatId => {\n            if (!this.timingSpecificBookedSeats[timingId].includes(seatId)) {\n                this.timingSpecificBookedSeats[timingId].push(seatId);\n            }\n        });\n    }\n\n    public onProceedToBook(): void {\n        if (this.seatSelection.ticketCount === 0) {\n            return;\n        }\n\n        // 1. Mark seats as booked in our data model\n        this.bookSeatsForTiming(this.selectedTimingId, this.selectedSeatsArray);\n\n        // 2. Prepare data for the success dialog\n        const movieTitle: string = \"F1: The Movie\";\n        const theater: string = \"Velvet Aurora Cinematheque\";\n        const showTime: string = this.movieTimingText;\n        const seats: string = this.seatSelection.seatNumbers.join(\", \");\n        const totalAmount: string = (this.seatSelection.amount + 6).toFixed(2);\n        const bookingId: string = 'VAC' + Date.now().toString().slice(-8);\n        setTimeout(() => {            \n            if (this.bookingSuccessDialogComponent) {\n                this.bookingSuccessDialogComponent.content = this.buildBookingSuccessHtml(movieTitle, theater, showTime, seats, totalAmount, bookingId);\n                this.bookingSuccessDialogComponent.dataBind();\n                this.bookingSuccessDialogComponent.show();\n            }\n        }, 0);\n        this.selectedSeatsArray = []; // Clear actual selection array\n        this.updateBookingSummary(); // Recalculate summary (will be empty)\n        this.updateBookingSummaryUI(); // Update UI for empty summary\n        this.refreshSeatingLayout(); // Re-render the diagram to reflect new booked seats and clear selected styles\n        this.hideNotification();\n    }\n\n    public closeBookingSuccessDialog(): void {\n        if (this.bookingSuccessDialogComponent) {\n            this.bookingSuccessDialogComponent.hide();\n        }\n    }\n    public dlgButtons: ButtonPropsModel[] = [{ click: this.closeBookingSuccessDialog.bind(this), buttonModel: { content: 'Close',cssClass: 'btn2 btn2-proceed', isPrimary: true } }];\n    private buildBookingSuccessHtml(movieTitle: string, theater: string, showTime: string, seats: string, totalAmount: string, bookingId: string): string {\n        return `\n            <div class=\"notification-header\">\n                <div class=\"success-icon\">&#10003;</div>\n                <div class=\"success-title\">Booking Confirmed!</div>\n                <div class=\"success-message\">\n                    Your tickets have been successfully booked.\n                </div>\n            </div>\n            <div class=\"booking-details\">\n                <h4>Booking Details:</h4>\n                <p><strong>Movie:</strong> ${movieTitle}</p>\n                <p><strong>Theater:</strong> ${theater}</p>\n                <p><strong>Show Time:</strong> ${showTime}</p>\n                <p><strong>Seats:</strong> ${seats}</p>\n                <p><strong>Total Amount:</strong> $${totalAmount}</p>\n                <p><strong>Booking ID:</strong> ${bookingId}</p>\n            </div>\n        `;\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section diagram-seat-booking\">\n    <header class=\"header\">\n        <h2>\n            <div>\n                <span class=\"movie-name\">\n                    <p class=\"movie-name-lnk\">F1: The Movie</p>\n                </span>\n            </div>\n            <div>\n                <span class=\"movie-timing\">{{ movieTimingText }}</span>\n                <span class=\"theater-name\"> | </span>\n                <span class=\"theater-name\">Velvet Aurora Cinematheque</span>\n            </div>\n        </h2>\n    </header>\n    <div class=\"show-timing-section\">\n        <div class=\"date-row\">\n            <ul class=\"timing-list\">\n                <!-- Date label - using innerHtml because of the <br> tag -->\n                <li style=\"pointer-events: none\">\n                    <span class=\"date-label\" [innerHTML]=\"dateLabelText\"></span>\n                </li>\n                <!-- Dynamic show timing samples -->\n                <li *ngFor=\"let timing of showTimings\"\n                    [class]=\"'timing-item ' + timing.status + (selectedTimingId === timing.id ? ' selected' : '')\"\n                    (click)=\"onTimingSelected(timing)\"\n                    [attr.data-timing]=\"timing.id\">\n                    <div class=\"time\">{{ timing.time }}</div>\n                    <div class=\"screen-type\">{{ timing.type }}</div>\n                </li>\n            </ul>\n        </div>\n    </div>\n    <!-- Notification area -->\n    <div *ngIf=\"showNotificationFlag\" id=\"notification\" class=\"notification\" style=\"display: block;\">\n        {{ notificationMessage }}\n    </div>\n\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <!-- Diagram component -->\n        <ejs-diagram #diagram\n            id=\"diagram\" width=\"100%\" height=\"700px\"\n            [nodes]='nodes'\n            [snapSettings]='snapSettings'\n            [tool]='tool'\n            (click)='onDiagramClick($event)'\n            (created)='onDiagramCreated()'\n            (load)='load()'\n            [constraints]=\"constraints\"\n            >\n        </ejs-diagram>\n    </div>\n\n    <div class=\"booking-summary-container\">\n        <div class=\"seat-legend\">\n            <div class=\"legend-items\">\n                <div class=\"legend-item\">\n                    <div class=\"legend-seat available\"></div>\n                    <span class=\"legend-text\">Available</span>\n                </div>\n                <div class=\"legend-item\">\n                    <div class=\"legend-seat selected\"></div>\n                    <span class=\"legend-text\">Selected</span>\n                </div>\n                <div class=\"legend-item\">\n                    <div class=\"legend-seat booked\"></div>\n                    <span class=\"legend-text\">Booked</span>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"booking-section\">\n            <div class=\"price-info\">\n                <div class=\"price\" id=\"totalAmount\">\n                    ${{ (seatSelection.amount + 6) | number : '1.0-2' }}\n                </div>\n                <div class=\"ticket-count\" id=\"ticketCount\">\n                    {{ seatSelection.ticketCount }} Tickets Selected\n                </div>\n            </div>\n\n            <div class=\"price-hint-inline\" id=\"priceHint\" [style.display]=\"seatSelection.ticketCount > 0 ? 'flex' : 'none'\">\n                <span id=\"ticketAmount\">Tickets: ${{ seatSelection.amount | number : '1.0-2' }}</span>\n                <span id=\"feesAmount\">+ Fees: $6.00</span>\n            </div>\n\n            <button class=\"btn-proceed\" id=\"proceedButton\" [disabled]=\"seatSelection.ticketCount === 0\" (click)=\"onProceedToBook()\">\n                Proceed\n            </button>\n        </div>\n    </div>\n\n    <!-- Syncfusion Dialog for booking success - Now always in DOM with controlled visibility -->\n    <ejs-dialog #bookingSuccessDialog id=\"bookingSuccessDialog\"\n        [cssClass]=\"\"\n        [content]=\"\"\n        [target]=\"'.control-section'\" \n        [width]=\"'435px'\"\n        [isModal]=\"true\"\n        [visible]=\"false\"            \n        [showCloseIcon]=\"false\"\n        [buttons]='dlgButtons'>\n    </ejs-dialog>\n</div>\n\n<!-- Removed scripts and style from here as they should be in separate .css and .ts files -->\n","app.component.css":"    .diagram-seat-booking .header {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n        padding: 20px 24px;\n        padding-top: 0px;\n        border-bottom: 1px solid #e0e0e0;\n    }\n\n    .diagram-seat-booking .header h2 {\n        margin: 0;\n        font-weight: normal;\n    }\n\n    .diagram-seat-booking .movie-name-lnk {\n        text-decoration: none;\n        font-size: 20px;\n        font-weight: 500;\n        margin: 0;\n        color: #337ab7;\n        font-family: Segoe UI, sans-serif;\n    }\n\n    .diagram-seat-booking .theater-info {\n        color: #374151;\n        display: flex;\n        flex-direction: column;\n        align-content: center;\n        font-size: 14px;\n        font-weight: 400;\n    }\n\n    .diagram-seat-booking .separator {\n        margin: 0 8px;\n        color: #999999;\n    }\n\n    .diagram-seat-booking .show-timing-section {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        align-content: space-around;\n        border-bottom: 1px solid #E5E7EB;\n    }\n\n    .diagram-seat-booking .date-row {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        gap: 20px;\n        width: 100%;\n    }\n\n    .diagram-seat-booking .date-label {\n        display: block;\n        font-size: 14px;\n        font-weight: 500;\n        color: #666666;\n        text-align: center;\n        line-height: 1.3;\n        min-width: 60px;\n        padding-right: 2.5rem;\n        border-right: 1px solid #9CA3AF;\n    }\n\n    .diagram-seat-booking .timing-list {\n        display: flex;\n        gap: 15px;\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        flex-wrap: wrap;\n    }\n\n    .diagram-seat-booking .timing-item {\n        padding: 12px 16px;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        text-align: center;\n        min-width: 120px;\n        border: 1px solid transparent;\n    }\n\n    .diagram-seat-booking .timing-item .time {\n        font-size: 16px;\n        font-weight: 600;\n        margin-bottom: 4px;\n    }\n\n    .diagram-seat-booking .timing-item .screen-type {\n        font-size: 10px;\n        font-weight: 500;\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n    }\n\n    .diagram-seat-booking .timing-item.available {\n        background-color: #FFFFFF;\n        border-radius: 8px;\n        border: 1px solid #9CA3AF;\n        color: #15803D;\n    }\n\n    .diagram-seat-booking .timing-item.available:hover {\n        background-color: #f3f4f6;\n        border-radius: 8px;\n        border-color: #9ca3af;\n    }\n\n    .diagram-seat-booking .timing-item.filling-fast {\n        background-color: #fef3c7;\n        border-radius: 8px;\n        border: 1px solid #f59e0b;\n        color: #92400e;\n    }\n\n    .diagram-seat-booking .timing-item.filling-fast:hover {\n        background-color: #fde68a;\n        border-radius: 8px;\n        border-color: #d97706;\n    }\n\n    .diagram-seat-booking .timing-item.selected {\n        background-color: #4F46E5;\n        border: 1px solid #4F46E5;\n        border-radius: 8px;\n        color: white;\n    }\n\n    .diagram-seat-booking .timing-item.sold-out {\n        border-radius: 8px;\n        background-color: #FFFFFF;\n        border: 1px solid #D1D5DB;\n        color: #9CA3AF;\n        cursor: not-allowed;\n        opacity: 0.6;\n    }\n\n    .diagram-seat-booking .main-container {\n        min-height: calc(100vh - 100px);\n        gap: 0;\n    }\n\n    .diagram-seat-booking .ticket-selection-section {\n        background-color: #f8f9fa;\n        margin-top: 2px;\n        min-height: 500px;\n    }\n\n    .diagram-seat-booking .booking-summary-container {\n        box-sizing: border-box;\n        width: 100%;\n        height: 154px;\n        left: 0px;\n        top: 1357px;\n        background: rgba(255, 255, 255, 0.0001);\n        border-top: 1px solid #E5E7EB;\n        margin-top: 20px;\n    }\n\n    .diagram-seat-booking .booking-summary-section {\n        position: relative;\n        background: #fff;\n        background-color: #ffffff;\n        background-repeat: no-repeat;\n        border: none;\n        border-radius: 10px;\n        font-family: Arial, sans-serif;\n        margin-top: 2px;\n        padding: 0px;\n        height: 500px;\n    }\n\n    .diagram-seat-booking .booking-summary-section .header {\n        position: relative;\n        top: 0;\n        left: 0;\n        right: 0;\n        height: 50px;\n        font-size: 25px;\n        color: #d9534f;\n        text-transform: uppercase;\n        letter-spacing: 1px;\n        margin-bottom: 0;\n        background: none;\n        padding: 12px 16px;\n        display: block;\n        text-align: left;\n        flex-shrink: 0;\n    }\n\n    .diagram-seat-booking .booking-content {\n        padding: 30px 30px;\n        overflow-y: auto;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n    }\n\n    .diagram-seat-booking .left {\n        flex: 1;\n        text-align: left;\n    }\n\n    .diagram-seat-booking .right {\n        text-align: right;\n        white-space: nowrap;\n    }\n\n    .diagram-seat-booking .subtext {\n        font-size: 16px;\n        color: #777;\n        margin-left: 10px;\n    }\n\n    .diagram-seat-booking .bold {\n        font-weight: bold;\n    }\n\n    .diagram-seat-booking .divider {\n        border-top: 1px solid #eee;\n        margin: 8px 0;\n    }\n\n    .diagram-seat-booking .footer {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 75px;\n        background: #fff3cd;\n        border-radius: 0 0 10px 10px;\n        padding: 12px 16px;\n        font-weight: bold;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        flex-shrink: 0\n    }\n\n    .diagram-seat-booking .__circle-left,\n    .diagram-seat-booking .__circle-right {\n        position: absolute;\n        width: 20px;\n        height: 20px;\n        background: #f2f2f2;\n        border-radius: 50%;\n        top: 50%;\n        transform: translateY(-50%);\n        z-index: 1;\n    }\n\n    .diagram-seat-booking .__circle-left {\n        left: -10px;\n        border: 1px solid #f2f2f2;\n        clip-path: polygon(50% 0%, 100% 0%, 100% 100%, 50% 100%);\n    }\n\n    .diagram-seat-booking .__circle-right {\n        right: -10px;\n        border: 1px solid #f2f2f2;\n        border-right: none;\n    }\n\n    .diagram-seat-booking .action-buttons {\n        display: flex;\n        gap: 12px;\n        margin-top: 20px;\n        padding: 0 10px;\n        height: auto;\n    }\n\n    .diagram-seat-booking .btn {\n        flex: 1;\n        padding: 12px 20px;\n        border: none;\n        border-radius: 6px;\n        font-size: 14px;\n        font-weight: 600;\n        cursor: pointer;\n        height: 50px;\n        transition: all 0.3s ease;\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n    }\n        \n    .diagram-seat-booking .btn-proceed:hover {\n        transform: translateY(-1px);\n    }\n\n    .diagram-seat-booking .btn-clear {\n        background-color: #f8f9fa;\n        color: #666;\n        border: 1px solid #e9ecef;\n    }\n\n    .diagram-seat-booking .btn-clear:hover {\n        background-color: #e9ecef;\n        color: #333;\n        transform: translateY(-1px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    }\n\n    .diagram-seat-booking .btn:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n        transform: none !important;\n        box-shadow: none !important;\n    }\n\n    .diagram-seat-booking .btn-proceed[disabled] {\n        background-color: #e3e3e3 !important;\n        color: gray;\n    }\n\n    .diagram-seat-booking .seat-legend {\n        padding: 20px;\n    }\n\n    .diagram-seat-booking .legend-items {\n        display: flex;\n        justify-content: center;\n        gap: 30px;\n        flex-wrap: wrap;\n    }\n\n    .diagram-seat-booking .legend-item {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n    }\n\n    .diagram-seat-booking .legend-seat {\n        width: 30px;\n        height: 30px;\n        border-radius: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-weight: bold;\n        font-size: 12px;\n        position: relative;\n    }\n\n    .diagram-seat-booking .legend-seat.available {\n        background-color: transparent;\n        border: 2px solid #9CA3AF;\n        color: #9CA3AF;\n    }\n\n    .diagram-seat-booking .legend-seat.selected {\n        background-color: #15803D;\n        border: 2px solid #15803D;\n        color: #15803D;\n    }\n\n    .diagram-seat-booking .legend-seat.booked {\n        background-color: #E5E7EB;\n        border: 2px solid #E5E7EB;\n        color: #E5E7EB;\n    }\n\n    .diagram-seat-booking .legend-text {\n        font-size: 14px;\n        font-weight: 500;\n    }\n\n    .diagram-seat-booking .success-modal {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 2000;\n    }\n\n    .diagram-seat-booking .success-icon {\n        font-size: 60px;\n        color: #28a745;\n        margin-bottom: 20px;\n    }\n\n    .diagram-seat-booking .success-title {\n        font-size: 24px;\n        font-weight: bold;\n        margin-bottom: 10px;\n    }\n\n    .diagram-seat-booking .success-message {\n        margin-bottom: 20px;\n        line-height: 1.5;\n        text-wrap-mode: wrap;\n    }\n\n    .diagram-seat-booking .booking-details {\n        padding: 15px;\n        border-radius: 5px;\n        text-align: left;\n    }\n\n    .diagram-seat-booking .booking-details h4 {\n        margin-bottom: 10px;\n    }\n\n    .diagram-seat-booking .booking-details p {\n        margin: 5px 0;\n        font-size: 14px;\n    }\n\n    .diagram-seat-booking .notification {\n        position: absolute;\n        top: 20px;\n        right: 20px;\n        background: #d9534f;\n        color: white;\n        padding: 10px 15px;\n        border-radius: 5px;\n        z-index: 1000;\n        animation: slideInMaxSeat 0.3s ease-out;\n    }\n\n    @keyframes slideInMaxSeat {\n        0% {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n\n        100% {\n            transform: translateX(0);\n            opacity: 1;\n        }\n    }\n\n    .diagram-seat-booking .theater-name,\n    .diagram-seat-booking .movie-timing {\n        font-size: 14px !important;\n    }\n\n    .diagram-seat-booking .timing-list {\n        display: flex;\n        flex-wrap: wrap;\n        list-style: none;\n        padding: 0;\n        margin: 0;\n    }\n\n    .diagram-seat-booking .timing-list li {\n        margin: 10px;\n        padding: 10px;\n        border-radius: 3px;\n    }\n\n    .diagram-seat-booking .timing-list li.selected {\n        background-color: #4F46E5;\n        color: white;\n    }\n\n    .diagram-seat-booking .timing-list li.available {\n        border: 1px solid #9CA3AF;\n        color: #15803D;\n        background-color: transparent;\n    }\n\n    .diagram-seat-booking .timing-list li.available:hover {\n        background-color: #DCFCE7;\n        border: 1px solid #15803D;\n        color: #15803D;\n    }\n\n    .diagram-seat-booking .timing-list li.filling-fast {\n        border: 1px solid #9CA3AF;\n        color: #C2410C;\n        background-color: transparent;\n    }\n\n    .diagram-seat-booking .timing-list li.filling-fast:hover {\n        background-color: #FFEDD5;\n        border: 1px solid #C2410C;\n        color: #C2410C;\n    }\n\n    .diagram-seat-booking .timing-list li.sold-out {\n        border: 1px solid #D1D5DB;\n        color: #9CA3AF;\n        background-color: #FFFFFF;\n        cursor: not-allowed;\n        opacity: 0.7;\n    }\n\n    .diagram-seat-booking .timing-list li.sold-out:hover {\n        border: 1px solid #D1D5DB;\n        color: #9CA3AF;\n        background-color: #FFFFFF;\n        color: #6c757d;\n    }\n\n    .diagram-seat-booking .timing-list li.selected {\n        background-color: #4F46E5;\n        color: white;\n        border: 1px solid #4F46E5;\n    }\n\n    .diagram-seat-booking .booking-section {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .diagram-seat-booking .price-info {\n        display: flex;\n        flex-direction: column;\n        margin-left: 30%;\n    }\n\n    .diagram-seat-booking .price {\n        font-size: 24px;\n        font-weight: bold;\n    }\n\n    .diagram-seat-booking .ticket-count {\n        font-size: 14px;\n        margin-top: 5px;\n    }\n\n    .diagram-seat-booking .btn-proceed {\n        background-color: rgb(103, 85, 238);\n        color: white;\n        border: none;\n        padding: 12px 24px;\n        border-radius: 6px;\n        font-size: 16px;\n        font-weight: bold;\n        cursor: pointer;\n        margin-right: 30%;\n        transition: background-color 0.3s;\n    }\n\n    .diagram-seat-booking .btn-proceed:hover {\n        background-color: #5a4fcf;\n    }\n\n    .diagram-seat-booking .btn2 {\n        flex: 1;\n        padding: 12px 20px;\n        border: none;\n        border-radius: 8px;\n        font-size: 14px;\n        font-weight: 600;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n    }\n\n    .diagram-seat-booking .price-hint-inline {\n        font-size: 12px;\n        color: #888;\n        margin: 4px 0 0 0;\n        display: flex;\n        gap: 12px;\n    }\n\n    .diagram-seat-booking .timing-list {\n        display: flex;\n        justify-content: center;\n        gap: 12px;\n        list-style: none;\n        padding: 0;\n        margin: 0;\n        width: 100%;\n    }\n\n    @media screen and (max-width: 768px) {\n        .diagram-seat-booking .main-container {\n            grid-template-columns: 1fr !important;\n            grid-template-rows: auto auto !important;\n        }\n\n        .diagram-seat-booking .ticket-selection-section {\n            grid-row: 1 !important;\n            margin: 10px !important;\n            padding: 15px !important;\n        }\n\n        .diagram-seat-booking .booking-summary-container {\n            grid-row: 2 !important;\n            padding: 0px 10px 20px 10px !important;\n        }\n\n        .diagram-seat-booking .booking-summary-section {\n            height: auto !important;\n            min-height: 400px !important;\n        }\n\n        .diagram-seat-booking .header {\n            padding: 15px 10px !important;\n        }\n\n        .diagram-seat-booking .header h2 {\n            font-size: 18px !important;\n        }\n\n        .diagram-seat-booking .movie-name-lnk {\n            font-size: 20px !important;\n            font-weight: 500 !important;\n            margin: 0 !important;\n            color: #337ab7 !important;\n            font-family: Segoe UI, sans-serif !important;\n        }\n\n        .diagram-seat-booking .theater-name,\n        .diagram-seat-booking .movie-timing {\n            font-size: 12px !important;\n        }\n    }","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}