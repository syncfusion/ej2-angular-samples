{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { DiagramComponent, NodeModel, HierarchicalTree, ConnectorModel, StackPanel, TextElement, Segments, ConnectorConstraints, NodeConstraints, PointPortModel, PortVisibility, BasicShapeModel, LayoutModel, ConnectorEditing, DecoratorShapes, SegmentThumbShapes, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport { Diagram, SnapConstraints, SnapSettingsModel, randomId } from '@syncfusion/ej2-diagrams';\n\nimport { ColorPickerModule, NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nDiagram.Inject(HierarchicalTree,ConnectorEditing);\n\n\n/**\n * Sample for Connectors\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, DropDownListModule, ColorPickerModule,  NumericTextBoxModule]\n})\n\nexport class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n    //Configrues hierarchical tree layout\n    public layout: LayoutModel = {\n        type: 'HierarchicalTree', orientation: 'LeftToRight',\n        verticalSpacing: 75, margin: { left: 90, right: 0, top: 0, bottom: 0 }\n    }\n    //Shape collection of the decorators.\n    public decoratorShape = [\n        { shape: 'None', text: 'None' },\n        { shape: 'Square', text: 'Square' },\n        { shape: 'Circle', text: 'Circle' },\n        { shape: 'Diamond', text: 'Diamond' },\n        { shape: 'Arrow', text: 'Arrow' },\n        { shape: 'OpenArrow', text: 'Open Arrow' },\n        { shape: 'Fletch', text: 'Fletch' },\n        { shape: 'OpenFetch', text: 'Open Fetch' },\n        { shape: 'IndentedArrow', text: 'Indented Arrow' },\n        { shape: 'OutdentedArrow', text: 'Outdented Arrow' },\n        { shape: 'DoubleArrow', text: 'Double Arrow' }\n    ];\n\n    public selectionChange() {\n        if (this.diagram.selectedItems.connectors.length > 0) {\n            (document.getElementById('segmentDecoratorSize') as any).ej2_instances[0].enabled = true;\n        }\n        else{\n            (document.getElementById('segmentDecoratorSize') as any).ej2_instances[0].enabled = false;\n        }\n    }\n    public shape: BasicShapeModel = { type: 'Basic', shape: 'Rectangle', cornerRadius: 10 };\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n\n    public getNodeDefaults: Function = this.nodeDefaults.bind(this);\n    public getConnectorDefaults: Function = this.connectorDefaults.bind(this);\n\n    public setNodeTemplate: Function = this.nodeTemplate.bind(this);\n\n    ngOnInit(): void {\n        document.getElementById('appearance').onclick = this.connectorTypeClick.bind(this);\n    }\n\n    //set default value for Nodes.\n    private nodeDefaults(node: NodeModel, diagram: Diagram): NodeModel {\n        let obj: NodeModel = {};\n        if (node.id !== 'node1') {\n            //Set ports\n            obj.ports = this.getPorts(node);\n        }\n        if (node.id !== 'node6') {\n            obj.width = 80;\n            obj.style = { strokeWidth: 2, strokeColor: '#6F409F' };\n            obj.height = 35;\n        }\n        return obj;\n    };\n\n    //set default value for Connectors.\n    private connectorDefaults(obj: ConnectorModel): void {\n        obj.type = 'Bezier';\n        obj.style.strokeColor = '#6f409f';\n        obj.style.strokeWidth = 2;\n        obj.targetDecorator = { style: { strokeColor: '#6f409f', fill: '#6f409f' } };\n        obj.segments = [\n            {\n                type: 'Bezier',\n            }\n        ],\n        obj.constraints = ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb \n    };\n\n    public created(): void {\n        this.diagram.fitToPage();\n    }\n\n    //Customize the content of the node\n    private nodeTemplate(node: NodeModel): StackPanel {\n        if (node.id === 'node6') {\n            let canvas: StackPanel = new StackPanel();\n            canvas.id = randomId();\n            canvas.children = [\n                this.getTextElement('Events', '#a6a1e0'),\n                this.getTextElement('Emails', '#db8ec9'),\n                this.getTextElement('Calls', '#db8ec9'),\n                this.getTextElement('Smart Contents', '#db8ec9')\n            ];\n            canvas.style.strokeWidth = 0;\n            canvas.style.fill = '#e6e0eb';\n            return canvas;\n        }\n        return null;\n    };\n\n    //creation of Port for Node.\n    private getPorts(obj: NodeModel): PointPortModel[] {\n        if (obj.id === 'node2') {\n            let node2Ports: PointPortModel[] = [\n                { id: 'port1', offset: { x: 1, y: 0.25 }, visibility: PortVisibility.Hidden },\n                { id: 'port2', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n                { id: 'port3', offset: { x: 1, y: 0.75 }, visibility: PortVisibility.Hidden }\n            ];\n            return node2Ports;\n        } else if (obj.id === 'node6') {\n            let node6Ports: PointPortModel[] = [\n                { id: 'port4', offset: { x: 0, y: 0.46 }, visibility: PortVisibility.Hidden },\n                { id: 'port5', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden },\n                { id: 'port6', offset: { x: 0, y: 0.54 }, visibility: PortVisibility.Hidden }\n            ];\n            return node6Ports;\n        } else {\n            let ports: PointPortModel[] = [\n                { id: 'portIn', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden },\n                { id: 'portOut', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n            ];\n            return ports;\n        }\n    }\n\n    //creation of the TextElement.\n    private getTextElement(text: string, color: string): TextElement {\n        let textElement: TextElement = new TextElement();\n        textElement.id = randomId();\n        textElement.width = 80;\n        textElement.height = 35;\n        textElement.content = text;\n        textElement.style.fill = '#6f409f';\n        textElement.style.color = 'white';\n        textElement.style.strokeColor = '#6f409f';\n        textElement.cornerRadius = 5;\n        textElement.margin = { top: 10, bottom: 10, left: 10, right: 10 };\n        textElement.relativeMode = 'Object';\n        return textElement;\n    }\n\n    //Event to change the connector type.\n    private connectorTypeClick(args: MouseEvent): void {\n        let target: HTMLElement = args.target as HTMLElement;\n        // custom code start\n        let selectedElement: HTMLCollection = document.getElementsByClassName('e-selected-style');\n        if (selectedElement.length) {\n            selectedElement[0].classList.remove('e-selected-style');\n        }\n        // custom code end\n        if (target.className === 'image-pattern-style') {\n            switch (target.id) {\n                case 'straightConnector':\n                    this.applyConnectorStyle(false, false, false, 'Straight', 1);\n                    break;\n                case 'orthogonalConnector':\n                    this.applyConnectorStyle(false, false, false, 'Orthogonal', 1);\n                    break;\n                case 'bezierConnector':\n                    this.applyConnectorStyle(false, false, false, 'Bezier', 1);\n                    break;\n                case 'straightConnectorWithStroke':\n                    this.applyConnectorStyle(false, false, false, 'Straight');\n                    break;\n                case 'orthogonalConnectorWithStroke':\n                    this.applyConnectorStyle(false, false, false, 'Orthogonal');\n                    break;\n                case 'bezierConnectorWithStroke':\n                    this.applyConnectorStyle(false, false, false, 'Bezier');\n                    break;\n                case 'straightConnectorWithDasharray':\n                    this.applyConnectorStyle(true, false, false, 'Straight');\n                    break;\n                case 'orthogonalConnectorWithDasharray':\n                    this.applyConnectorStyle(true, false, false, 'Orthogonal');\n                    break;\n                case 'bezierConnectorWithDasharray':\n                    this.applyConnectorStyle(true, false, false, 'Bezier');\n                    break;\n                case 'cornerRadius':\n                    this.applyConnectorStyle(false, false, true, 'Orthogonal');\n                    break;\n                case 'sourceDecorators':\n                    this.applyConnectorStyle(false, true, false, 'Straight');\n                    break;\n                case 'sourceDecoratorWithDasharray':\n                    this.applyConnectorStyle(true, true, false, 'Straight');\n                    break;\n            }\n            // custom code start\n            target.classList.add('e-selected-style');\n            // custom code end\n        }\n    };\n    //Connector style customization\n    private applyConnectorStyle(dashedLine: boolean, sourceDecorator: boolean, isRounded: boolean, type: Segments, strokeWidth?: number): void {\n        for (let i: number = 0; i < this.diagram.connectors.length; i++) {\n            this.diagram.connectors[i].style.strokeWidth = strokeWidth ? strokeWidth : 2;\n            this.diagram.connectors[i].type = type;\n            this.diagram.connectors[i].cornerRadius = isRounded ? 5 : 0;\n            this.diagram.connectors[i].style.strokeDashArray = dashedLine ? '5,5' : '';\n            if (sourceDecorator) {\n                this.diagram.connectors[i].sourceDecorator = {\n                    style: {\n                        strokeColor: this.diagram.connectors[i].style.strokeColor,\n                        fill: this.diagram.connectors[i].style.strokeColor, strokeWidth: 2\n                    }, shape: 'Circle'\n                };\n                (document.getElementById('sourceDecorator') as any).ej2_instances[0].value='Circle';\n            } else {\n                this.diagram.connectors[i].sourceDecorator = { shape: 'None' };\n                (document.getElementById('sourceDecorator') as any).ej2_instances[0].value='None';\n            }\n            this.diagram.connectors[i].targetDecorator = {\n                style: {\n                    strokeColor: this.diagram.connectors[i].style.strokeColor,\n                    fill: this.diagram.connectors[i].style.strokeColor, strokeWidth: 2\n                }, shape: 'Arrow'\n            };\n            (document.getElementById('targetDecorator') as any).ej2_instances[0].value='Arrow';\n            this.diagram.dataBind();\n            this.diagram.updateSelector();\n        }\n    }\n    //set connector color\n    public colorChange(args: any) {\n        for(let i=0;i<this.diagram.connectors.length;i++)\n        {\n            this.diagram.connectors[i].style.strokeColor=args.currentValue.hex;\n            this.diagram.connectors[i].targetDecorator.style.strokeColor= args.currentValue.hex;\n            this.diagram.connectors[i].targetDecorator.style.fill= args.currentValue.hex;\n            this.diagram.connectors[i].sourceDecorator.style.strokeColor= args.currentValue.hex;\n            this.diagram.connectors[i].sourceDecorator.style.fill= args.currentValue.hex;\n        }\n        this.diagram.dataBind();\n    }\n    //Change Source decorator shape\n    public sourceDecoratorShapeChange(args:any) {\n        for (let i = 0; i < this.diagram.connectors.length; i++) {\n            this.diagram.connectors[i].sourceDecorator = {\n                shape: args.itemData.shape,\n                style: {\n                    strokeColor: this.diagram.connectors[i].style.strokeColor,\n                    fill: this.diagram.connectors[i].style.strokeColor,\n                }\n            };\n        }\n        this.diagram.dataBind();\n\n    }\n    //Change target decorator shape\n    public targetDecoratorShapeChange(args:any) {\n        for (let i = 0; i < this.diagram.connectors.length; i++) {\n            this.diagram.connectors[i].targetDecorator = {\n                shape: args.itemData.shape,\n                style: {\n                    strokeColor: this.diagram.connectors[i].style.strokeColor,\n                    fill: this.diagram.connectors[i].style.strokeColor,\n                }\n            };\n            this.diagram.dataBind();\n        }\n    }\n    //Change segment decorator shape\n    public segmentDecoratorShapeChange(args:any) {\n        for (let i = 0; i < this.diagram.connectors.length; i++) {\n            this.diagram.segmentThumbShape = args.itemData.shape;\n        }\n        this.diagram.dataBind();\n    }\n     //Change Source decorator size\n     public sourceDecoratorSizeChange(args:any) {\n        for (let i = 0; i < this.diagram.connectors.length; i++) {\n            this.diagram.connectors[i].sourceDecorator.width = args.value;\n            this.diagram.connectors[i].sourceDecorator.height = args.value;\n        }\n        this.diagram.dataBind();\n\n    }\n    //Change target decorator size\n    public targetDecoratorSizeChange(args:any) {\n        for (let i = 0; i < this.diagram.connectors.length; i++) {\n            this.diagram.connectors[i].targetDecorator.width = args.value;\n            this.diagram.connectors[i].targetDecorator.height = args.value;\n        }\n        this.diagram.dataBind();\n    }\n    //Change segment decorator size\n    public segmentDecoratorSizeChange(args:any) {\n        let connector = this.diagram.selectedItems.connectors[0];\n        this.diagram.segmentThumbSize = args.value;\n        this.diagram.clearSelection();\n        this.diagram.select([this.diagram.nameTable[connector.id]]);\n        this.diagram.dataBind();\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<style scoped>\n    .diagram-connectors .image-pattern-style {\n        background-color: white;\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 45px;\n        width: calc((100% - 12px) / 3);\n        cursor: pointer;\n        border: 1px solid #D5D5D5;\n        background-position: center;\n        float: left;\n    }\n\n    .diagram-connectors .row {\n        margin-left: 0px;\n        margin-right: 0px;\n    }\n\n    .diagram-connectors .sb-child-row {\n        padding-top: 8px;\n    }\n\n    .diagram-connectors .row-header {\n        font-size: 13px;\n        font-weight: 500;\n    }\n\n    .diagram-connectors .e-selected-style {\n        border-color: #006CE6;\n        border-width: 2px;\n    }\n\n    .diagram-connectors label{\n        display: inline-block;\n        font-size: 13px;\n        font-weight: 400;\n        width: 100%;\n        margin-top: auto;\n    }\n</style>\n<div class=\"control-section diagram-connectors\">\n\n    <div class=\"col-lg-8 control-section\">\n        <div class=\"content-wrapper\" style=\"background: white\">\n            <ejs-diagram #diagram id=\"diagram\" [getConnectorDefaults]='getConnectorDefaults' [getNodeDefaults]='getNodeDefaults' [layout]=layout width=\"100%\" height=\"680px\" [setNodeTemplate]='setNodeTemplate' [snapSettings]=snapSettings (selectionChange)=\"selectionChange()\" (created)=\"created()\">\n                <e-nodes>\n                    <e-node id='node1' [shape]='shape'>\n                        <e-node-annotations>\n                            <e-node-annotation content='Promotion'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node2' [shape]='shape'>\n                        <e-node-annotations>\n                            <e-node-annotation content='Lead'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node3' [shape]='shape'>\n                        <e-node-annotations>\n                            <e-node-annotation content='Account'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node4' [shape]='shape'>\n                        <e-node-annotations>\n                            <e-node-annotation content='Information'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node5' [shape]='shape'>\n                        <e-node-annotations>\n                            <e-node-annotation content='Opportunity'>\n                            </e-node-annotation>\n                        </e-node-annotations>\n                    </e-node>\n                    <e-node id='node6' [offsetX]=620 [offsetY]=340 excludeFromLayout=true>\n                    </e-node>\n                </e-nodes>\n                <e-connectors>\n                    <e-connector id='connector' sourceID='node1' targetID='node2'>\n                    </e-connector>\n                    <e-connector id='connector1' sourceID='node2' sourcePortID='port1' targetID='node3' targetPortID='portIn'>\n                    </e-connector>\n                    <e-connector id='connector2' sourceID='node2' sourcePortID='port2' targetID='node4' targetPortID='portIn'>\n                    </e-connector>\n                    <e-connector id='connector3' sourceID='node2' sourcePortID='port3' targetID='node5' targetPortID='portIn'>\n                    </e-connector>\n                    <e-connector id='connector4' sourceID='node6' sourcePortID='port4' targetID='node3' targetPortID='portOut'>\n                    </e-connector>\n                    <e-connector id='connector5' sourceID='node6' sourcePortID='port5' targetID='node4' targetPortID='portOut'>\n                    </e-connector>\n                    <e-connector id='connector7' sourceID='node6' sourcePortID='port6' targetID='node5' targetPortID='portOut'>\n                    </e-connector>\n                </e-connectors>\n            </ejs-diagram>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <div class=\"property-panel-header\">\n            Properties\n        </div>\n        <div class=\"row property-panel-content\" id=\"appearance\">\n            <div class=\"row row-header sb-child-row\">\n                <b>Connector types</b>\n            </div>\n            <div class=\"row sb-child-row\">\n                <div class=\"image-pattern-style\" id=\"straightConnector\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_1.png); margin-right: 3px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"orthogonalConnector\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_2.png); margin: 0px 3px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"bezierConnector\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_3.png);\">\n                </div>\n            </div>\n            <div class=\"row sb-child-row\">\n                <div class=\"image-pattern-style\" id=\"straightConnectorWithStroke\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_4.png); margin-right: 3px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithStroke\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_5.png); margin: 0px 3px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"bezierConnectorWithStroke\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_6.png);\">\n                </div>\n            </div>\n            <div class=\"row sb-child-row\">\n                <div class=\"image-pattern-style\" id=\"straightConnectorWithDasharray\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_7.png); margin-right: 3px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"orthogonalConnectorWithDasharray\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_8.png); margin: 0px 3px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"bezierConnectorWithDasharray\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_9.png);\">\n                </div>\n            </div>\n            <div class=\"row sb-child-row\">\n                <div class=\"image-pattern-style\" id=\"cornerRadius\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_10.png); margin-right: 3px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"sourceDecorators\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_11.png); margin: 0px 3px\">\n                </div>\n                <div class=\"image-pattern-style\" id=\"sourceDecoratorWithDasharray\" style=\"background-image: url(./assets/diagram/Images/connector/Connectors_12.png);\">\n                </div>\n            </div>\n        </div>\n        <div class=\"row property-panel-content\" id=\"decorators\" style=\"padding-top: 10px\">\n            <div class=\"row row-header\" style=\"padding-top: 8px\">\n                <b>Decorators</b>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                <label>Source Decorators</label>\n                <div>\n                    <ejs-dropdownlist #sourceDecorator id=\"sourceDecorator\" [dataSource]=\"decoratorShape\" value=\"None\" (change)=\"sourceDecoratorShapeChange($event)\"></ejs-dropdownlist>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                <label>Target Decorators</label>\n                <div>\n                    <ejs-dropdownlist #targetDecorator id=\"targetDecorator\" [dataSource]=\"decoratorShape\" value=\"Arrow\" (change)=\"targetDecoratorShapeChange($event)\"></ejs-dropdownlist>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                <label>Segment Decorators</label>\n                <div>\n                    <ejs-dropdownlist #segmentDecorator id=\"segmentDecorator\" [dataSource]=\"decoratorShape\" value=\"Circle\" (change)=\"segmentDecoratorShapeChange($event)\"></ejs-dropdownlist>\n                </div>\n            </div>\n        </div>\n        <div class=\"row property-panel-content\" id=\"decorators\" style=\"padding-top: 10px\">\n            <div class=\"row row-header\" style=\"padding-top: 8px\">\n                <b>Decorators Size</b>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                <label>Source Decorators Size</label>\n                <div>\n                    <ejs-numerictextbox #fontSize id=\"sourceDecoratorSize\" value=\"12\" step=\"1\" min=\"10\" max=\"20\" format='##.##' (change)='sourceDecoratorSizeChange($event)'>\n                    </ejs-numerictextbox>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                <label>Target Decorators Size</label>\n                <div>\n                    <ejs-numerictextbox #fontSize id=\"targetDecoratorSize\" value=\"12\" step=\"1\" min=\"10\" max=\"20\" format='##.##' (change)='targetDecoratorSizeChange($event)'>\n                    </ejs-numerictextbox>\n                </div>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px; display: flex;\">\n                <label>Segment Decorators Size</label>\n                <div>\n                    <ejs-numerictextbox #segmentDecoratorSize id=\"segmentDecoratorSize\" [enabled]=\"false\" value=\"12\" step=\"1\" min=\"10\" max=\"20\" format='##.##' (change)='segmentDecoratorSizeChange($event)'>\n                    </ejs-numerictextbox>\n                </div>\n            </div>\n        </div>\n        <div class=\"row property-panel-content\" id=\"color-tab\" style=\"padding-top: 10px\">\n            <div class=\"row row-header\">\n                <b>Appearance</b>\n            </div>\n            <div class=\"row\" style=\"padding-top: 8px;  display: flex;\">\n                <label>Line Color</label>\n                <input ejs-colorpicker #color id=\"color\" value='#6f409f' type='color' (change)='colorChange($event)' />\n            </div>\n        </div>\n    </div>\n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}