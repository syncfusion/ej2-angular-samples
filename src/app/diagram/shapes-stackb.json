{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n    Diagram, NodeModel, BpmnDiagrams, SnapSettingsModel, SnapConstraints, NodeConstraints,\n    FlowShapes, FlowShapeModel, TextModel\n} from '@syncfusion/ej2-diagrams';\nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\n\n\n\nDiagram.Inject(BpmnDiagrams);\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, ]\n})\n\nexport class AppComponent {\n\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n\n    //Function to get basicshapes.\n    public getBasicShape(shapeType: string, annotations: { content: string }[]): any {\n        return {\n            shape: {\n                type: 'Basic',\n                shape: shapeType\n            },\n            annotations\n        };\n    }\n    //Function to get flowshapes.\n    public createFlowShape(shapeType: any, content: string): NodeModel {\n        let flowshape: NodeModel = {\n            shape: { type: 'Flow', shape: shapeType },\n            annotations: [{ content: content }]\n        };\n        return flowshape;\n    }\n    // Function to create BPMN shape\n    public getBpmnShape(shapeType: string, annotations: { content: string }[], event?: { event: string, trigger: string }): any {\n        const shape: any = {\n            type: 'Bpmn',\n            shape: shapeType\n        };\n        if (event) {\n            shape.event = event;\n        }\n        return {\n            shape,\n            annotations\n        };\n    }\n\n    // Define basic shape models\n    private basicShapeModel: any[] = [\n        {\n            shape: { type: 'Text', content: 'Basic Shapes' },\n            constraints: NodeConstraints.PointerEvents,\n            style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n        },\n        this.getBasicShape('Rectangle', [{ content: 'Rectangle' }]),\n        this.getBasicShape('Ellipse', [{ content: 'Ellipse' }]),\n        this.getBasicShape('Triangle', [{ content: 'Triangle' }]),\n        this.getBasicShape('Plus', [{ content: 'Plus' }]),\n        this.getBasicShape('Star', [{ content: 'Star' }]),\n        this.getBasicShape('Pentagon', [{ content: 'Pentagon' }]),\n        this.getBasicShape('Heptagon', [{ content: 'Heptagon' }]),\n        this.getBasicShape('Octagon', [{ content: 'Octagon' }]),\n        this.getBasicShape('Trapezoid', [{ content: 'Trapezoid' }]),\n        this.getBasicShape('Decagon', [{ content: 'Decagon' }]),\n        this.getBasicShape('RightTriangle', [{ content: 'Right Triangle' }]),\n        this.getBasicShape('Parallelogram', [{ content: 'Parallelogram' }])\n    ];\n\n    //Initialize the flowshapes for the symbol palatte\n    private flowShapeModel: NodeModel[] = [\n        {\n            shape: { type: 'Text', content: 'Flow Shapes' }, constraints: NodeConstraints.PointerEvents,\n            style: { fontSize: 16, fill: 'None', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 }\n        },\n        this.createFlowShape('Terminator', 'Terminator'),\n        this.createFlowShape('Process', 'Process'),\n        this.createFlowShape('Decision', 'Decision'),\n        this.createFlowShape('Document', 'Document'),\n        this.createFlowShape('PreDefinedProcess', 'Predefined Process'),\n        this.createFlowShape('PaperTap', 'Paper Tape'),\n        this.createFlowShape('DirectData', 'Direct Data'),\n        this.createFlowShape('SequentialData', 'Direct Data'),\n        this.createFlowShape('Sort', 'Sort'),\n        this.createFlowShape('MultiDocument', 'Multi-Document'),\n        this.createFlowShape('Collate', 'Collate'),\n        this.createFlowShape('SummingJunction', 'Summing Junction'),\n        this.createFlowShape('Or', 'Or'),\n        this.createFlowShape('InternalStorage', 'Internal Storage'),\n        this.createFlowShape('Extract', 'Extract'),\n        this.createFlowShape('ManualOperation', 'Manual Operation'),\n        this.createFlowShape('Merge', 'Merge'),\n        this.createFlowShape('OffPageReference', 'Off-Page Reference'),\n        this.createFlowShape('SequentialAccessStorage', 'Sequential Access Storage'),\n        this.createFlowShape('Data', 'Data'),\n        this.createFlowShape('Card', 'Card')\n    ];\n\n    // Define BPMN shape models\n    private bpmnShapeModel: any[] = [\n        {\n            shape: { type: 'Text', content: 'BPMN Shapes' },\n            constraints: NodeConstraints.PointerEvents,\n            style: { fontSize: 16, fill: 'none', fontFamily: 'sans-serif', bold: true, strokeWidth: 0 },\n        },\n        this.getBpmnShape('Event', [{ content: 'Start Event' }], { event: 'Start', trigger: 'None' }),\n        this.getBpmnShape('Event', [{ content: 'Intermediate Event' }], { event: 'Intermediate', trigger: 'None' }),\n        this.getBpmnShape('Event', [{ content: 'End Event' }], { event: 'End', trigger: 'None' }),\n        this.getBpmnShape('Gateway', [{ content: 'Gateway' }]),\n        {\n            shape: { type: 'Bpmn', shape: 'Activity', activity: { activity: 'Task' } },\n            annotations: [{ content: 'Task' }]\n        },\n        {\n            shape: {\n                type: 'Bpmn', shape: 'Activity', activity: {\n                    activity: 'SubProcess',\n                    subProcess: {\n                        type: 'Transaction', transaction: {\n                            success: { visible: false }, failure: { visible: false }, cancel: { visible: false }\n                        }\n                    }\n                }\n            },\n            annotations: [{ content: 'Transaction' }]\n        },\n        this.getBpmnShape('Message', [{ content: 'Message' }]),\n        this.getBpmnShape('DataObject', [{ content: 'Data Object' }]),\n        this.getBpmnShape('DataSource', [{ content: 'Data Source' }]),\n        this.getBpmnShape('Group', [{ content: 'Group' }]),\n        this.getBpmnShape('TextAnnotation', [{ content: 'Text Annotation' }])\n    ];\n\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    public nodes: NodeModel[] = this.getNodes();\n\n    //To get default node details\n    private getNodes(): NodeModel[] {\n        let nodes1: NodeModel[] = this.basicShapeModel.concat(this.flowShapeModel).concat(this.bpmnShapeModel);\n        let offsetx: number = 60;\n        let offsety: number = 50;\n        let count: number = 1;\n        for (let i: number = 0; i < nodes1.length; i++) {\n            let node: NodeModel = nodes1[i];\n            node.width = 40;\n            node.height = 40;\n            node.offsetX = offsetx;\n            node.offsetY = offsety;\n            if (node.shape.type === 'Flow') {\n                let shapeType: FlowShapes = (node.shape as FlowShapeModel).shape;\n                if (shapeType === 'Process' || shapeType === 'Terminator') {\n                    node.height = 20;\n                } else if (shapeType === 'Decision') {\n                    node.height = 35;\n                } else if (shapeType === 'Document' || shapeType === 'DirectData' ||\n                    shapeType === 'MultiDocument' || shapeType === 'PreDefinedProcess') {\n                    node.height = 30;\n                }\n            }\n\n            if (!(node.shape.type === 'Text')) {\n                let lable = node.annotations[0];\n                lable.verticalAlignment = 'Top';\n                lable.offset = { y: 1 };\n                lable.margin = { top: 10 };\n\n                offsetx += 90;\n                if (count % 10 === 0) {\n                    offsety = offsety + 100;\n                    offsetx = 60;\n                }\n                count++;\n            }\n            if (node.shape.type === 'Text') {\n                offsetx = 60;\n                offsety += 50;\n                count = 1;\n                node.width = 150;\n                node.height = 50;\n                node.offsetX = 90;\n                if (!((node.shape as TextModel).content === 'Basic Shapes')) {\n                    node.offsetX = 90;\n                    node.offsetY = offsety + 50;\n                    offsety = offsety + 100;\n                }\n            }\n        }\n        return nodes1;\n    }\n\n    public diagramCreate(args: Object): void {\n        this.diagram.fitToPage({ mode: 'Height' });\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<div class=\"control-section diagram-shapes\" style=\"width:100%\">\n    <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"800px\" [nodes]='nodes' [snapSettings]='snapSettings'\n        (created)='diagramCreate($event)'>\n    </ejs-diagram>\n</div>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-diagrams\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}