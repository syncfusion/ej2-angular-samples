{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"/**\n * Sample for Keyboard functions\n */\n\n import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\n import { BasicShapeModel, DiagramComponent, RulerSettingsModel, ScrollSettingsModel, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\n import {\n     Diagram, NodeModel, UndoRedo, Node, DataBinding, DiagramContextMenu, HierarchicalTree, ConnectorModel,\n     SnapSettingsModel, PortConstraints, PortVisibility, Connector, ConnectorConstraints, UserHandleModel, SelectorModel, SelectorConstraints, ISelectionChangeEventArgs, IRotationEventArgs\n } from '@syncfusion/ej2-diagrams';\n import { SnapConstraints, Snapping } from '@syncfusion/ej2-diagrams';\n import { NumericTextBoxModule, ColorPickerModule } from '@syncfusion/ej2-angular-inputs';\nimport { CheckBoxComponent, CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\n\n\n Diagram.Inject(UndoRedo, DiagramContextMenu, HierarchicalTree, DataBinding, Snapping);\n\n export interface DataInfo {\n     [key: string]: string;\n }\n\n @Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, NumericTextBoxModule, ColorPickerModule, CheckBoxModule, RadioButtonModule, ]\n})\n\n export class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n\n    @ViewChild('showGridLines')\n    public showGridLines : CheckBoxComponent;\n\n    @ViewChild('snappingToObject')\n    public snappToObject : CheckBoxComponent;\n\n    @ViewChild('snappingInterval')\n      public snappingInterval : NumericTextBoxModule;\n\n    // Method called when the diagram is created\n    public created(args) {\n      // Fits the diagram to the width of the page\n      this.diagram.fitToPage({mode : 'Width'});\n    }\n    // Specifies that the diagram has infinite scroll\n    public scrollSettings : ScrollSettingsModel = {\n    scrollLimit : 'Infinity'\n    }\n    // Defines the type of drawing object as 'Orthogonal'\n    public drawingObject : any = { type : 'Orthogonal'};\n    // Array defining the nodes in the diagram\n    public nodes : NodeModel[] = [\n      {\n          id:'node_1',width:100,height:100,offsetX:350,offsetY:250,\n          ports:[\n              {id:'port1',offset:{x:0.5,y:0.5},visibility:PortVisibility.Visible,\n              style:{fill:'black'},\n              constraints:PortConstraints.Default|PortConstraints.Draw\n          }],\n          annotations:[{id:'annot1',content:'Shape 1', offset:{x:0.5,y:1.2},style:{bold:true}}]\n      },\n      {\n          id:'node_2',width:100,height:100,offsetX:650,offsetY:250,\n          ports:[\n              {id:'port11', offset:{x:0.5,y:0.5},visibility: PortVisibility.Visible,style:{fill:'black'},\n              constraints:PortConstraints.Default|PortConstraints.Draw\n          },{\n              id:'port2',offset:{x:0,y:0.5},visibility:PortVisibility.Visible,\n              style:{fill:'black'},\n              constraints:PortConstraints.Default|PortConstraints.Draw,\n              height:100,width:7\n          }],\n          annotations:[{id:'annot1',content:'Shape 2',offset:{x:0.5,y:1.2},style:{bold:true}}]\n\n      },\n      {\n          id:'node_3',width:100,height:100,offsetX:500,offsetY:400,\n          annotations:[{id:'annot1',content:'Shape 3', offset:{x:0.5,y:1.2}, style:{bold:true}}]\n\n      },\n    ];\n    // Array defining the connectors between nodes\n    public connectors : ConnectorModel[] = [\n        {\n            id:'connector_1',sourceID:'node_1',targetID:'node_3',type:'Orthogonal',\n        }\n    ];\n\n    public drawingNode : any;\n    // Method to set default styles for nodes\n    public nodeDefaults(node: NodeModel): any {\n        node.style = {fill:'orange',strokeColor:'orange'};\n    }\n    // Method to set default styles for connectors\n    public connectorDefaults(connector: Connector): void {\n      connector.constraints = ConnectorConstraints.Default| ConnectorConstraints.DragSegmentThumb;\n    }\n    // Custom user handles for the diagram elements\n    public handles: UserHandleModel[] = [\n      {\n        name: 'Clone', pathData: 'M0,2.4879999 L0.986,2.4879999 0.986,9.0139999 6.9950027,9.0139999 6.9950027,10 0.986,10 C0.70400238,10 0.47000122,9.9060001 0.28100207,9.7180004 0.09400177,9.5300007 0,9.2959995 0,9.0139999 z M3.0050011,0 L9.0140038,0 C9.2960014,0 9.5300026,0.093999863 9.7190018,0.28199956 9.906002,0.47000027 10,0.70399952 10,0.986 L10,6.9949989 C10,7.2770004 9.906002,7.5160007 9.7190018,7.7110004 9.5300026,7.9069996 9.2960014,8.0049992 9.0140038,8.0049992 L3.0050011,8.0049992 C2.7070007,8.0049992 2.4650002,7.9069996 2.2770004,7.7110004 2.0890007,7.5160007 1.9950027,7.2770004 1.9950027,6.9949989 L1.9950027,0.986 C1.9950027,0.70399952 2.0890007,0.47000027 2.2770004,0.28199956 2.4650002,0.093999863 2.7070007,0 3.0050011,0 z',tooltip:{content:'Clone'},\n        visible: true, offset: 1, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n        name: 'Delete', pathData: 'M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z',tooltip:{content:'Delete'},\n        visible: true, offset: 0, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    {\n        name: 'Draw', pathData: 'M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z',tooltip:{content:'Draw'},\n        visible: true, offset: 0.5, side: 'Right', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n    },\n    ]\n    // Specifies the user handles for selected items\n    public selectedItems: SelectorModel = {\n      userHandles: this.handles\n    };\n    // Defines custom actions for the user handles\n    public getCustomTool: Function = this.getTool.bind(this);\n    // Custom actions for user handles\n    public getTool(action: string) {\n      if (action == \"Delete\") {\n          this.diagram.remove();\n      }\n      else if (action == \"Clone\"){\n        this.diagram.paste(this.diagram.selectedItems.selectedObjects);\n      }\n      else if (action == \"Draw\"){\n        (this.diagram.drawingObject as any).type = (this.diagram.drawingObject as any).type?(this.diagram.drawingObject as any).type: 'Orthogonal';\n        (this.diagram.drawingObject as any).sourceID = this.drawingNode.id;\n        this.diagram.dataBind();\n        }\n      };\n    // Configures snapping settings for the diagram\n    public snapSettings : SnapSettingsModel = {\n      snapAngle : 5\n    }\n    // Event handler for selection changes\n    public selectionChange(args : ISelectionChangeEventArgs){\n      if(args.state === 'Changed'){\n          var selectedItems = this.diagram.selectedItems.nodes;\n          selectedItems = selectedItems.concat(this.diagram.selectedItems.connectors as any);\n          if(selectedItems.length>0){\n              if(args.newValue.length>0 && args.newValue[0] instanceof Node){\n                this.diagram.selectedItems = { constraints: SelectorConstraints.All| SelectorConstraints.UserHandle, userHandles: this.handles };\n                  if(this.diagram.selectedItems.nodes.length>0){\n                      this.drawingNode = this.diagram.selectedItems.nodes[this.diagram.selectedItems.nodes.length-1];\n                  }\n              }\n              else{\n              this.diagram.selectedItems = { constraints: SelectorConstraints.All&~ SelectorConstraints.UserHandle };\n              }\n          }\n      }\n    }\n    // Event handler for rotation changes\n    public rotateChange(args : IRotationEventArgs){\n      if(args.state === 'Start' || args.state === 'Progress')\n      {\n        this.diagram.selectedItems = { constraints: SelectorConstraints.All&~SelectorConstraints.UserHandle};\n      }\n      if(args.state === 'Completed'){\n        this.diagram.selectedItems = { constraints: SelectorConstraints.All|SelectorConstraints.UserHandle, userHandles: this.handles };\n      }\n    }\n    // Sets the snapping interval\n    public snappingIntervalChange(args : any){\n      this.diagram.snapSettings.horizontalGridlines.snapIntervals[0] = args.value;\n      this.diagram.snapSettings.verticalGridlines.snapIntervals[0] = args.value;\n      this.diagram.dataBind();\n    }\n    // Sets the snapping angle\n    public snappingAngle(args : any){\n      this.diagram.snapSettings.snapAngle = args.value;\n      this.diagram.dataBind();\n    }\n    // Change the color of the snap lines\n    public colorChange(args : any){\n      this.diagram.snapSettings.snapLineColor = args.value;\n      this.diagram.dataBind();\n    }\n    // Toggle the visibility of grid lines\n    public showGridLine(args: any){\n          this.diagram.snapSettings.constraints = this.diagram.snapSettings.constraints ^ SnapConstraints.ShowLines;\n          this.diagram.dataBind();\n          this.scale();\n    }\n    // Toggle the snapping to objects\n    public snappToObjects(args : any){\n      this.diagram.snapSettings.constraints = this.diagram.snapSettings.constraints ^ SnapConstraints.SnapToObject;\n      this.diagram.dataBind();\n      this.scale();\n    }\n    // Update the snap interval scale\n    public scale() {\n      this.diagram.snapSettings.horizontalGridlines.snapIntervals[0] = (\n        this.snappingInterval as any\n      ).value;\n      this.diagram.snapSettings.verticalGridlines.snapIntervals[0] = (\n        this.snappingInterval as any\n      ).value;\n      this.diagram.dataBind();\n    }\n    public snapToLines(args:any) {\n      // Determine the current state of showGridLines and snappToObject checkboxes\n      if (this.showGridLines.checked && this.snappToObject.checked) {\n        this.diagram.snapSettings.constraints = SnapConstraints.All;\n      } else if (this.showGridLines.checked && !this.snappToObject.checked) {\n        this.diagram.snapSettings.constraints =\n          SnapConstraints.All & ~SnapConstraints.SnapToObject;\n      } else if (!this.showGridLines.checked && this.snappToObject.checked) {\n        this.diagram.snapSettings.constraints =\n          SnapConstraints.All & ~SnapConstraints.ShowLines;\n      } else if (!this.showGridLines.checked && !this.snappToObject.checked) {\n        this.diagram.snapSettings.constraints =\n          SnapConstraints.All &\n          ~(SnapConstraints.ShowLines | SnapConstraints.SnapToObject);\n      }\n      // Handle specific snap to line options based on user selection\n      let option = args.value;\n      switch (option) {\n        case 'Snap To Gridlines':\n          // Enable SnapToLines constraint and adjust based on checkbox states\n          this.diagram.snapSettings.constraints =\n            SnapConstraints.All | SnapConstraints.SnapToLines;\n          if (!this.showGridLines.checked && !this.snappToObject.checked) {\n            this.diagram.snapSettings.constraints =\n              SnapConstraints.All &\n              ~(SnapConstraints.ShowLines | SnapConstraints.SnapToObject);\n          } else if (!this.snappToObject.checked && this.showGridLines.checked) {\n            this.diagram.snapSettings.constraints =\n              SnapConstraints.All & ~SnapConstraints.SnapToObject;\n          } else if (this.snappToObject.checked && !this.showGridLines.checked) {\n            this.diagram.snapSettings.constraints =\n              SnapConstraints.All & ~SnapConstraints.ShowLines;\n          }\n          break;\n        case 'Snap To Horizontal Gridlines':\n          // Toggle SnapToHorizontalLines constraint\n          this.diagram.snapSettings.constraints =\n          this.diagram.snapSettings.constraints ^\n            SnapConstraints.SnapToVerticalLines;\n          break;\n        case 'Snap To Vertical Gridlines':\n          // Toggle SnapToVerticalLines constraint\n          this.diagram.snapSettings.constraints =\n          this.diagram.snapSettings.constraints ^\n            SnapConstraints.SnapToHorizontalLines;\n          break;\n        case 'None':\n          // Disable all snap to line constraints\n          this.diagram.snapSettings.constraints =\n            SnapConstraints.All &\n            ~(\n              SnapConstraints.SnapToHorizontalLines |\n              SnapConstraints.SnapToVerticalLines |\n              SnapConstraints.SnapToLines\n            );\n          if (!this.showGridLines.checked && !this.snappToObject.checked) {\n            this.diagram.snapSettings.constraints =\n              SnapConstraints.All &\n              ~(\n                SnapConstraints.ShowLines |\n                SnapConstraints.SnapToObject |\n                SnapConstraints.SnapToHorizontalLines |\n                SnapConstraints.SnapToVerticalLines |\n                SnapConstraints.SnapToLines\n              );\n          } else if (this.showGridLines.checked && !this.snappToObject.checked) {\n            this.diagram.snapSettings.constraints =\n              SnapConstraints.All &\n              ~(\n                SnapConstraints.SnapToObject |\n                SnapConstraints.SnapToHorizontalLines |\n                SnapConstraints.SnapToVerticalLines |\n                SnapConstraints.SnapToLines\n              );\n          } else if (!this.showGridLines.checked && this.snappToObject.checked) {\n            this.diagram.snapSettings.constraints =\n              SnapConstraints.All &\n              ~(\n                SnapConstraints.ShowLines |\n                SnapConstraints.SnapToHorizontalLines |\n                SnapConstraints.SnapToVerticalLines |\n                SnapConstraints.SnapToLines\n              );\n          }\n          break;\n      }\n      this.diagram.dataBind();\n      this.scale();\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n    <div class=\"col-lg-8 control-section\">\n      \n        <div class=\"content-wrapper\" style=\"width: 100%;\">\n            <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"645px\" [nodes]=\"nodes\" [connectors]=\"connectors\" [getNodeDefaults]='nodeDefaults' [getConnectorDefaults]='connectorDefaults'\n                [snapSettings]='snapSettings' (created)=\"created($event)\" (selectionChange)=\"selectionChange($event)\" [getCustomTool]=\"getCustomTool\"\n                [selectedItems]=\"selectedItems\" [scrollSettings] = \"scrollSettings\"  [drawingObject]=\"drawingObject\">\n            </ejs-diagram>\n        </div>\n    </div>\n    <div id=\"properties_Container\" >\n        <span class=\"property-panel-header\">\n            Properties\n        </span>\n        <div class=\"db-prop-row\">\n            <div class=\"db-prop-text-style\">\n                <span class=\"db-prop-text-style text-content\">Snapping Interval </span>\n                <div style=\"float: right;margin-right: 10px;\">\n                    <ejs-numerictextbox  #snappingInterval id=\"snappingInterval\" format=\"n0\" value=\"20\" min=\"1\" step=\"1\" width=\"150\" (change)=\"snappingIntervalChange($event)\"></ejs-numerictextbox>\n                </div>\n            </div>\n            <div class=\"db-prop-text-style\">\n                <span class=\"db-prop-text-style text-content\">Snapping Angle</span>\n                <div style=\"float: right;margin-right: 10px;\">\n                    <ejs-numerictextbox format=\"n0\" value=\"5\" min=\"1\" step=\"1\" width=\"150\" (change)=\"snappingAngle($event)\"></ejs-numerictextbox>\n                </div>\n            </div>\n            <div class=\"db-prop-text-style\">\n                <span class=\"db-prop-text-style text-content\" style=\"width: 50%;\">Snapping Line Color</span>\n                <div class=\"db-text-input\" style=\"float: right;width:50%\">\n                    <input\n                    ejs-colorpicker\n                    id=\"color-picker\"\n                    width=\"100%\"\n                    type=\"color\"\n                    (change)=\"colorChange($event)\"\n                  />\n                </div>\n            </div>\n            <div class=\"db-prop-text-style\">\n                <ejs-checkbox #showGridLines  label=\"Show Gridline\" [checked]=\"true\" (change)=\"showGridLine($event)\"></ejs-checkbox>\n            </div>\n            <div class=\"db-prop-text-style\" style=\"margin-top: 7px!important;\">\n                <ejs-checkbox #snappingToObject  label=\"Snapping To Objects\" [checked]=\"true\" (change)=\"snappToObjects($event)\"></ejs-checkbox>\n            </div>\n    \n               <div class=\"db-prop-text-style\">\n                <span class=\"db-prop-text-style text-content\" style=\"font-weight: bold;\">Snapping To Lines</span>\n            </div>\n    \n            <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n                <ejs-radiobutton label=\"Snap To Gridlines\" value=\"Snap To Gridlines\" name=\"snapping\" (change)=\"snapToLines($event)\" checked></ejs-radiobutton>\n            </div>\n            <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n                <ejs-radiobutton label=\"Snap To Horizontal Gridlines\" value=\"Snap To Horizontal Gridlines\" (change)=\"snapToLines($event)\"  name=\"snapping\"></ejs-radiobutton>\n            </div>\n            <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n                <ejs-radiobutton label=\"Snap To Vertical Gridlines\" value=\"Snap To Vertical Gridlines\" (change)=\"snapToLines($event)\"  name=\"snapping\"></ejs-radiobutton>\n            </div>\n            <div class=\"row radio-text-style\" style=\"margin-left: 7px;\">\n                <ejs-radiobutton label=\"None\" value=\"None\" (change)=\"snapToLines($event)\"  name=\"snapping\"></ejs-radiobutton>\n            </div>\n        </div>\n    </div>\n        <div class=\"row\">\n            \n            <div class=\"col-xs-6 db-col-right\">\n                <div class=\"db-text-container\" style=\"width: 77px; margin-left: 20px;\">\n                    \n                </div>\n            </div>\n        </div>","app.component.css":"body{\n    /* background: #e3e3e3; */\n    }\n    .header_text{\n        color: rgb(9, 9, 9);\n        font-weight: bold;\n        font-size: 20px;\n        font-family: 'Calibri';\n        margin-left: 5px;\n        margin-top: 5px;\n    }\n    .db-diagram-container {\n    width:calc(100% - 300px);\n    height: 100%;\n    float: left;\n    }\n    .db-prop-row {\n    margin-top: 6px;\n    }\n    .db-col-left {\n    padding-left: 10px;\n    padding-right: 3px;\n    }\n\n    .db-prop-text-style {\n    font-size: 13px;\n    font-weight: normal;\n    font-family: 'Calibri';\n    margin-top: 25px;\n    }\n    .radio-text-style{\n    font-size: 13px;\n    font-weight: normal;\n    font-family: 'Calibri';\n    margin-top: 10px;\n    }\n    .text-content{\n        margin-left: 10px;\n    }\n    .db-check-input{\n        float: right;\n        margin-right: 180px;\n    }\n    .db-text-input{\n        height: 25px!important;\n    }\n    #properties_Container{\n    width: 300px;\n    float: left;\n    height: 600px;\n    margin-top: 30px;   \n    }","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}