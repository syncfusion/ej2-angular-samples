{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"/**\n * Sample for Hierarchical layout\n */\n\n import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\n import { DiagramComponent, IClickEventArgs, ISelectionChangeEventArgs, NodeConstraints, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\n import {\n   Diagram,\n   NodeModel,\n   ConnectorModel,\n   LayoutAnimation,\n   DataBinding,\n   HierarchicalTree,\n   SnapConstraints,\n   SnapSettingsModel,\n   DiagramTools,\n } from '@syncfusion/ej2-diagrams';\n import { DataManager, Query } from '@syncfusion/ej2-data';\nimport { TreeViewComponent, TreeViewModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\n Diagram.Inject(DataBinding, HierarchicalTree, LayoutAnimation);\n\n export interface EmployeeInfo {\n   Name: string;\n }\n \n @Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [\n        \n        ButtonModule,\n        TreeViewModule,\n        DiagramModule,\n        \n    ],\n})\n export class AppComponent {\n    @ViewChild('diagram')\n    public diagram: DiagramComponent;\n \n    @ViewChild('treeview')\n    public treeview: TreeViewComponent;\n    public index : number = 1;\n    public targetNodeId : string;\n    public elementNodeId : string;\n    public addButtonDisabled : boolean = true;\n    public deleteButtonDisabled : boolean = true;\n    //Collection of data\n    public data1: object[] = [\n     { Name: \"Plant Manager\", Id: \"1\", hasChild: true, expanded: true },\n     { Name: \"Production Manager\", Id: \"2\", ParentId: \"1\", hasChild: true, expanded: true },\n     { Name: \"Control Room\", Id: \"3\", ParentId: \"2\", hasChild: true, expanded: true },\n     { Name: \"Foreman1\", Id: \"4\", ParentId: \"3\", hasChild: true, expanded: true },\n     { Name: \"Craft Personnel5\", Id: \"5\", ParentId: \"4\" },\n     { Name: \"Craft Personnel6\", Id: \"6\", ParentId: \"4\" },\n     { Name: \"Plant Operator\", Id: \"7\", ParentId: \"2\", hasChild: true, expanded: true },\n     { Name: \"Foreman2\", Id: \"8\", ParentId: \"7\", hasChild: true, expanded: true },\n     { Name: \"Craft Personnel7\", Id: \"9\", ParentId: \"8\" },\n     { Name: \"Administrative Officer\", Id: \"10\", ParentId: \"1\" },\n     { Name: \"Maintenance Manager\", Id: \"11\", ParentId: \"1\", hasChild: true, expanded: true },\n     { Name: \"Electrical Supervisor\", Id: \"12\", ParentId: \"11\", hasChild: true, expanded: true },\n     { Name: \"Craft Personnel1\", Id: \"13\", ParentId: \"12\" },\n     { Name: \"Craft Personnel2\", Id: \"14\", ParentId: \"12\" },\n     { Name: \"Mechanical Supervisor\", Id: \"15\", ParentId: \"11\", hasChild: true, expanded: true },\n     { Name: \"Craft Personnel3\", Id: \"16\", ParentId: \"15\" },\n     { Name: \"Craft Personnel4\", Id: \"17\", ParentId: \"15\" }\n    ];\n    public tools = DiagramTools.Default;\n \n    public items1: DataManager = new DataManager(\n      this.data1 as JSON[],\n      new Query().take(7)\n    );\n    public dataSourceSettings: Object = {\n      //sets the fields to bind\n      id: 'Id', parentId: 'ParentId',\n      dataSource: this.items1,\n      doBinding: (nodeModel: NodeModel, data: object, diagram: Diagram) => {\n         nodeModel.id = (data as any).Id;\n      },\n    };\n    //Set the snap constraints\n    public snapSettings: SnapSettingsModel = {\n      constraints: SnapConstraints.None,\n    };\n  \n    public layout: Object = {\n      type: 'HierarchicalTree',\n      verticalSpacing: 50, horizontalSpacing: 40,\n          enableAnimation: true\n    };\n  \n    //Defines the default node and connector properties\n    public nodeDefaults(node: NodeModel): NodeModel {\n     node.width = 100;\n     node.height = 40;\n     node.style = { strokeWidth: 1, strokeColor: 'whitesmoke', fill: 'CornflowerBlue' };\n     node.annotations = [{ content: (node.data as any).Name, style: { color: 'white' } }];\n     node.constraints = NodeConstraints.Default | NodeConstraints.AllowDrop;\n     return node;\n    }\n    //Sets the default values of a connector\n    public connectorDefaults( obj: ConnectorModel, diagram: Diagram): ConnectorModel {\n     obj.type = 'Orthogonal';\n     obj.style = { strokeColor: 'CornflowerBlue' };\n     obj.targetDecorator = { shape: 'Arrow', height: 10, width: 10, style: { fill: 'CornflowerBlue', strokeColor: 'white' } };\n     return obj;\n    }\n    //enable or disable the add and delete button\n    public selectionChange(args : ISelectionChangeEventArgs){\n     if (args.state === 'Changed') {\n         if (args.type === \"Addition\") {\n             this.deleteButtonDisabled = false;\n             this.addButtonDisabled = false;\n         } else {\n           this.deleteButtonDisabled = true;\n           this.addButtonDisabled = true;\n         }\n         var selectedItems = this.diagram.selectedItems.nodes.concat(this.diagram.selectedItems.connectors as any);\n                if(selectedItems.length==0)\n                {\n                    this.treeview.selectedNodes=[];\n                }\n        }\n    }\n    public addButton(){\n     this.add();\n    }\n    public deleteButton(){\n      debugger\n      if ((this.diagram.selectedItems.nodes[0].data as any).Id !== \"1\") {\n       this.remove();\n   }\n    }\n    //click event handler\n    public click(args : IClickEventArgs){\n     if(args.element && (args.element as any).sourceID === undefined && (args.element as any).shape !==undefined)Â {\n     this.treeview.selectedNodes = [(args.element as any).data.Id];\n     }\n    }\n    //Drag a node from the palette into the diagram\n    public dragEnter(args : any) {\n     let lable = '';\n     if (args.dragData) {\n         lable = args.dragData.text;\n     }\n     let node =\n     {\n         id: 'node' + this.index,\n         data: { Name: lable, Id: 'node' + this.index },\n         annotations: [{ content: lable }]\n     };\n     args.dragItem = node;\n    }\n    //Drop a node from the palette into the diagram \n     public drop(args : any) {\n     let connector;\n     let tempData;\n     let workingData = this.data1;\n     let diagram = this.diagram;\n       setTimeout(() => {\n          this.targetNodeId = args.target.id;\n          tempData = (workingData as any).filter((a: any) => a.Id === this.targetNodeId);\n          tempData[0].hasChild = true;\n          tempData[0].expanded = true;\n          if (args.element.inEdges.length === 0) {\n              let id = args.element.id;\n              let item = {\n                  Name: args.element.annotations[0].content, Id: args.element.id, ParentId: this.targetNodeId, hasChild: false, expanded: false\n              };\n              this.treeview.addNodes([item], this.targetNodeId, null);\n              connector = { sourceID: this.targetNodeId, targetID: id };\n              diagram.add(connector);\n                 diagram.doLayout();\n                 this.index++;\n                 this.data1.push(item);\n          } else {\n              connector = diagram.getObject(args.element.inEdges[0]);\n              connector.sourceID = this.targetNodeId;\n              diagram.dataBind();\n              diagram.doLayout();\n              this.elementNodeId = args.element.id;\n              tempData = (workingData as any).filter((a: any) => a.Id === this.elementNodeId);\n              tempData[0].ParentId = this.targetNodeId;\n              this.treeview.fields = {\n                  dataSource: this.data1 as any,\n                  id: 'Id',\n                  text: 'Name',\n                  parentID: 'ParentId',\n                  hasChildren: 'hasChild',\n              };\n              this.treeview.refresh();\n          }\n       }, 0);\n \n }\n//Change the annotation of the node\n public textEdit(args : any) {\n    let data:any = this.data1;\n    let treeObj = this.treeview;\n     setTimeout(function () {\n         if (args.annotation) {\n             this.elementNodeId = args.element.id;\n             let tempData = data.filter((a: any)=>a.Id === this.elementNodeId);\n             let node = treeObj.getNode(tempData[0].Id);\n             treeObj.updateNode(tempData[0].Id, args.annotation.content);\n         }\n     }, 0);\n }\n //Enable the add and delete button\n public nodeSelected(args : any) {\n     this.deleteButtonDisabled = false;\n     this.addButtonDisabled = false;\n }\n //node click event\n public nodeClicked(args : any) {\n     let node = this.diagram.getObject(this.treeview.selectedNodes[0]);\n     this.diagram.select([node]);\n }\n \n // Key Press Event\n public keyPress(args : any) {\n     if (args.event.key === 'Enter') {\n         this.add();\n     }\n }\n //node edited event\n public nodeEdited(args : any) {\n     let node = this.diagram.getObject(args.nodeData.id);\n     (node as any).annotations[0].content = args.newText;\n     this.treeview.selectedNodes = [args.nodeData.id];\n }\n //Remove node\n public remove() {\n     let nodeId;\n     if (this.diagram.selectedItems.nodes.length > 0) {\n         nodeId = this.diagram.selectedItems.nodes[0].id;\n         this.removeSubChild(this.diagram.selectedItems.nodes[0], true);\n         this.diagram.doLayout();\n     } else if (this.treeview.selectedNodes.length > 0) {\n         nodeId = this.treeview.selectedNodes[0];\n         this.treeview.removeNodes([nodeId]);\n         let node = this.diagram.getObject(nodeId);\n         this.removeSubChild(node, false);\n     }\n     for (let i = this.data1.length - 1; i >= 0; i--) {\n         if ((this.data1[i] as any).id === nodeId) {\n             this.data1.splice(i, 1);\n         }\n     }\n     this.diagram.doLayout();\n \n }\n //Remove sub child node\n public removeSubChild(node, canDelete) {\n     let childNode;\n     let connector;\n     for (let i = node.outEdges.length - 1; i >= 0; i--) {\n         connector = this.diagram.getObject(node.outEdges[i]);\n         childNode = this.diagram.getObject(connector.targetID);\n         if (childNode != null && childNode.outEdges.length > 0) {\n             this.removeSubChild(childNode, canDelete);\n         }\n         else {\n             this.diagram.remove(childNode);\n             if (canDelete) {\n                 this.treeview.removeNodes([childNode.id]);\n             }\n             for (let j = this.data1.length - 1; j >= 0; j--) {\n                 if ((this.data1[j] as any).id === childNode.id) {\n                     this.data1.splice(j, 1);\n                 }\n             }\n         }\n     }\n     for (let k = node.inEdges.length - 1; k >= 0; k--) {\n         connector = this.diagram.getObject(node.inEdges[k]);\n         childNode = this.diagram.getObject(connector.sourceID);\n         let index = childNode.outEdges.indexOf(connector.id);\n         if (childNode.outEdges.length > 1 && index === 0) {\n             index = childNode.outEdges.length;\n         }\n         if (index > 0) {\n             let node1 = childNode.outEdges[index - 1];\n             let connector1 = this.diagram.getObject(node1);\n             let node2 = this.diagram.getObject((connector1 as any).targetID);\n             this.diagram.select([node2]);\n         }\n         else {\n             this.diagram.select([childNode]);\n         }\n     }\n     this.diagram.remove(node);\n     if (canDelete) {\n         this.treeview.removeNodes([node.id]);\n     }\n     for (let t = this.data1.length - 1; t >= 0; t--) {\n         if ((this.data1[t] as any).id === node.id) {\n             this.data1.splice(t, 1);\n         }\n     }\n }\n //Add function\n public add() {\n     let nodeId: string;\n     if (this.diagram.selectedItems.nodes.length > 0) {\n         nodeId = this.diagram.selectedItems.nodes[0].id;\n         this.addNode(nodeId);\n     } else if (this.treeview.selectedNodes.length > 0) {\n         nodeId = this.treeview.selectedNodes[0];\n         this.addNode(nodeId);\n     }\n }\n //Add node Function\n public addNode(nodeId:string) {\n     this.targetNodeId = nodeId ? nodeId : this.treeview.selectedNodes[0];\n     let tempData = this.data1.filter((a: any) => a.Id === this.targetNodeId);\n     (tempData[0] as any).hasChild = true;\n     (tempData[0] as any).expanded = true;\n     let id = 'tree_' + this.index;\n     let item = {\n         Name: \"Node\", Id: id, ParentId: this.targetNodeId, hasChild: false, expanded: false\n     };\n     this.treeview.addNodes([item], this.targetNodeId, null);\n     this.treeview.beginEdit(id);\n     let node = { id: id, data: item };\n     let targetId;\n     if (this.diagram.selectedItems.nodes.length > 0) {\n         targetId = this.diagram.selectedItems.nodes[0].id;\n     } else {\n         let temp = this.diagram.nodes.filter((a: any) => a.data.Id === this.targetNodeId);\n         targetId = temp[0].id;\n     }\n     let connector = { sourceID: targetId, targetID: id };\n     this.diagram.add(node);\n     this.diagram.add(connector);\n     this.diagram.doLayout();\n     this.index++;\n     this.data1.push(item);\n }\n public field:Object ={ dataSource: this.data1, id: 'Id', text: 'Name', parentID: 'ParentId',\n hasChildren: 'hasChild' };\n \n public allowEditing:boolean = true;\n public allowDragAndDrops:boolean = true;\n \n  }\n  ","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n  <style>\n         #palette-space {\n            border-style: solid;\n            border-color: #f2f2f2;\n            background: #f2f2f2\n        }\n\n        #diagram-space {\n            border-color: #f2f2f2;\n            border-style: solid;\n        }\n  </style>\n<div class=\"control-section\">\n<div style=\"width: 100%;height: 50px;margin-bottom: 5px;\"> \n    <div class=\"button-group\" style=\"width:70%;float:left;\">\n        <button ejs-button  [isPrimary]=\"true\" id=\"addButton\"  (click)=\"addButton()\"  [disabled]=\"addButtonDisabled\" style=\"margin-right: 10px;\">Add Node</button>\n        <button ejs-button [isPrimary]=\"true\" id=\"deleteButton\"  (click)=\"deleteButton()\"  [disabled]=\"deleteButtonDisabled\">Delete Node</button>\n    </div>\n    <div style=\"width:30%;float:right;font-size: 16px;\">\n          <div class=\"col-xs-9 db-col-right db-prop-text-style\" style=\"padding-top: 10px\">\n            <span style=\"margin-left: 10px;\">Diagram Binding with Treeview</span>\n          </div>\n          <div class=\"col-xs-3 db-col-left\">\n            <svg height=\"45\" width=\"47\">\n                <path d=\"M27.573,21.885726 C26.039659,21.885726 24.796639,23.128786 24.796639,24.662178 L24.796639,37.3311 C24.796639,38.864491 26.039659,40.107552 27.573,40.107552 L40.064701,40.107552 C41.598042,40.107552 42.841061,38.864491 42.841061,37.3311 L42.841061,24.662178 C42.841061,23.128786 41.598042,21.885726 40.064701,21.885726 z M3.9060001,2.3436508 C2.9710598,2.3436508 2.2131386,3.1015863 2.2131386,4.0365477 L2.2131386,11.76122 C2.2131386,12.69618 2.9710598,13.454117 3.9060001,13.454117 L11.522699,13.454117 C12.457641,13.454117 13.21556,12.69618 13.21556,11.76122 L13.21556,4.0365477 C13.21556,3.1015863 12.457641,2.3436508 11.522699,2.3436508 z M2.7341995,0 L12.8898,0 C14.399857,0 15.624,1.2241688 15.624,2.7342587 L15.624,12.737741 C15.624,14.247831 14.399857,15.472 12.8898,15.472 L8.75,15.472 8.75,29.653 21.167,29.653 21.167,22.526347 C21.167,20.049711 23.174645,18.042 25.6512,18.042 L42.306801,18.042 C44.783356,18.042 46.791,20.049711 46.791,22.526347 L46.791,38.932653 C46.791,41.40929 44.783356,43.417 42.306801,43.417 L25.6512,43.417 C23.174645,43.417 21.167,41.40929 21.167,38.932653 L21.167,32.403 7.3190002,32.403 C6.5596085,32.403 5.9440002,31.787392 5.9440002,31.028 5.9440002,30.933076 5.953619,30.840399 5.9719353,30.75089 L6,30.641743 6,15.472 2.7341995,15.472 C1.2241421,15.472 0,14.247831 0,12.737741 L0,2.7342587 C0,1.2241688 1.2241421,0 2.7341995,0 z\" fill=\"#FF8FABCA\"></path>\n            </svg>\n          </div>\n    </div>\n  </div>\n  <div style=\"width: 100%;\">\n    <div id=\"palette-space\" style=\"width:27%;float:left;height: 700px;overflow: hidden;\">\n        <ejs-treeview #treeview id=\"default\" [fields]='field' width=\"90%\" [allowEditing]='allowEditing' [allowDragAndDrop]='allowDragAndDrops' (keyPress) = \"keyPress($event)\" (nodeEdited) = \"nodeEdited($event)\" (nodeSelected) = \"nodeSelected($event)\" (nodeClicked) = \"nodeClicked($event)\"></ejs-treeview>\n    </div>\n    <div id=\"diagram-space\" style=\"width:72%;float:right\">\n      <div class=\"content-wrapper\" style=\"width:100%;float:right\">\n        <ejs-diagram\n          #diagram\n          id=\"diagram\"\n          width=\"100%\"\n          height=\"700px\"\n          [getConnectorDefaults]=\"connectorDefaults\"\n          [getNodeDefaults]=\"nodeDefaults\"\n          [layout]=\"layout\"\n          [dataSourceSettings]=\"dataSourceSettings\"\n          [snapSettings]=\"snapSettings\"\n          [tool]=\"tools\"\n          (selectionChange)=\"selectionChange($event)\"\n          (click)=\"click($event)\"\n          (textEdit)=\"textEdit($event)\"\n          (drop)=\"drop($event)\"\n          (dragEnter)=\"dragEnter($event)\"\n        >\n        </ejs-diagram>\n      </div>\n    </div>\n  </div>\n  </div>\n  ","app.component.css":".control-fluid {\n    padding: 0px !important;\n}\n.btn-group button{ \n    margin-right:16px;\n    }\n.btn-group button:last-child{\n    margin-right:0px;\n    }\n.icon span{\n    margin-top: -10px;\n    margin-right: 40px;\n}\n.icon svg{\n    margin-left: 20px;\n    margin-top: 15px;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}