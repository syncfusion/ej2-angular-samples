{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, OnInit, ViewChild, ElementRef, ViewEncapsulation } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FormValidator, FormValidatorModel } from '@syncfusion/ej2-inputs';\nimport { DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n    NodeModel, ConnectorModel, Diagram, UserHandleModel, UserHandleEventsArgs, DiagramTools, \n    SelectorModel, SelectorConstraints, SnapConstraints, SnapSettingsModel, NodeConstraints, ConnectorConstraints,\n    ISelectionChangeEventArgs, randomId, HtmlModel, DiagramConstraints, CommandManagerModel\n} from '@syncfusion/ej2-diagrams';\nimport { DialogComponent, DialogModule, ButtonPropsModel } from '@syncfusion/ej2-angular-popups';\nimport { TextBoxModule, TextBoxComponent, TextAreaComponent, TextAreaModule } from '@syncfusion/ej2-angular-inputs';\n\n\n\ninterface TimelineEvent {\n    year: string;\n    title: string;\n    description: string;\n    icon?: string;\n    imageUrl?: string;\n}\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [  DiagramModule, DialogModule,\n        TextBoxModule, TextAreaModule, FormsModule],\n})\nexport class AppComponent {\n    @ViewChild('diagram', { static: true }) diagram!: DiagramComponent;\n    @ViewChild('dialog', { static: false }) dialog?: DialogComponent;\n    public target: string = '.control-section';\n    @ViewChild('yearTextBox')\n    yearTextBox: TextBoxComponent;\n    @ViewChild('titleTextBox')\n    titleTextBox: TextBoxComponent;\n    @ViewChild('describeTextBox')\n    describeTextBox: TextAreaComponent;\n    @ViewChild('imageTextBox')\n    imageTextBox: TextBoxComponent;\n    @ViewChild('formElement')\n    formElement!: ElementRef;\n    public formValidator!: FormValidator;\n\n    private timelineEvents: TimelineEvent[] = [\n        { year: '1969', title: 'ARPANET', description: 'ARPANET, the precursor to the Internet, is created by the U.S. Department of Defense\\'s Advanced Research Projects Agency (ARPA).', icon: 'sf-icon-arpanet' },\n        { year: '1983', title: 'Birth of the Internet', description: 'ARPANET switches to TCP/IP, marking the official birth of the Internet.', icon: 'sf-icon-birth-internet' },\n        { year: '1991', title: 'Internet Goes Public', description: 'The World Wide Web is released to the public, making the Internet accessible to a broader audience.', icon: 'sf-icon-internet-public' },\n        { year: '1993', title: 'First Web Browser', description: 'The first web browser, Mosaic, is released, making it easier for people to access the World Wide Web.', icon: 'sf-icon-first-web-browser' },\n        { year: '1995', title: 'Commercialization of the Internet', description: 'The U.S. government lifts restrictions on commercial use of the Internet, leading to the rise of commercial websites and e-commerce.', icon: 'sf-icon-commercialization' },\n        { year: '1998', title: 'Google Founded', description: 'Google is founded by Larry Page and Sergey Brin, revolutionizing how people search for information online.', icon: 'sf-icon-google-found' },\n        { year: '2004', title: 'Social Media Boom', description: 'Facebook is launched, marking the beginning of the social media era.', icon: 'sf-icon-social-media' },\n        { year: '2005', title: 'YouTube Launched', description: 'YouTube is launched, becoming a major platform for sharing and viewing video content.', icon: 'sf-icon-youtube' },\n        { year: '2007', title: 'iPhone Released', description: 'Apple releases the first iPhone, transforming mobile internet usage and leading to the proliferation of mobile apps.', icon: 'sf-icon-i-phone' },\n        { year: '2010', title: 'Cloud Computing', description: 'Cloud computing becomes mainstream, allowing for more flexible and scalable internet services.', icon: 'sf-icon-cloud-computing' },\n        { year: '2014', title: 'Internet of Things (IoT)', description: 'The Internet of Things (IoT) gains significant traction, connecting everyday devices to the internet.', icon: 'sf-icon-internet-of-things' },\n        { year: '2020', title: 'Remote Work', description: 'The COVID-19 pandemic accelerates the adoption of remote work, online education, and digital communication.', icon: 'sf-icon-remote-work' },\n        { year: '2021', title: '5G Rollout', description: 'The global rollout of 5G networks begins, promising significantly faster internet speeds and lower latency.', icon: 'sf-icon-5g-network' },\n        { year: '2022', title: 'Metaverse Development', description: 'Major technology companies begin to invest heavily in the development of the metaverse, virtual and augmented reality spaces.', icon: 'sf-icon-metaverse' },\n        { year: '2023', title: 'Quantum Internet', description: 'Continued research and development in quantum computing and quantum internet technology aim to revolutionize data security and processing speeds.', icon: 'sf-icon-quantum-internet' },\n        { year: '2025', title: 'IoT Pervasiveness', description: 'The Internet of Things becomes more pervasive, with smart devices deeply integrated into daily life and industry.', icon: 'sf-icon-iot-pervasiveness' },\n        { year: '2030', title: 'Autonomous Vehicles', description: 'The widespread adoption of autonomous vehicles becomes more common, relying heavily on the internet for communication, navigation, and updates.', icon: 'sf-icon-autonomous-vehicle' },\n        { year: '2035', title: 'Advanced AI Integration', description: 'Advanced AI systems are fully integrated into internet services, offering more personalized and efficient user experiences.', icon: 'sf-icon-advance-ai' },\n    ];\n\n    private eventColors: string[] = ['#FEC200', '#43C94C', '#3D95F6', '#FF3343', '#CDDE1F', '#00897B', '#7F38CD', '#FF2667', '#00BCD7', '#F47B10', '#576ADE', '#91521B'];\n\n    indexTable: string[] = [];\n    // Represent current selected event index in index table\n    editTimeLineIndex = -1;\n    selectedNode: NodeModel;\n    selectedUserHandle: string = '';\n    startX = 100; startY = 100; nodeSpacing = 200; alternateOffset = 200; baseLine = 300;\n\n    // ========== Diagram Bindings ==========\n    public nodes: NodeModel[];\n    public connectors: ConnectorModel[];\n    public tool: DiagramTools = DiagramTools.ZoomPan | DiagramTools.SingleSelect;\n    public constraints: DiagramConstraints = DiagramConstraints.Default &~ (DiagramConstraints.PanY |  DiagramConstraints.UndoRedo);\n    public snapSettings: SnapSettingsModel = { constraints: SnapConstraints.None };\n    private userHandles: UserHandleModel[] = [\n        {\n            name: 'New Event',\n            pathData: 'M12.099998,0L19.799995,0 19.799995,12.1 32,12.1 32,19.799996 19.900002,19.799996 19.900002,31.999999 12.199997,31.999999 12.199997,19.900003 0,19.900003 0,12.199999 12.099998,12.199999z',\n            offset: 0.5,\n            side: 'Right',\n            tooltip: { content: 'Add Event' },\n        },\n        {\n            name: 'Edit Event',\n            pathData: 'M20.638062,9.6380005L6.6380615,23.638 8.3620605,25.362 22.362061,11.362z M20.5,4.5L27.5,11.5 9,30 0,32 2,23z M27,0C29.760986,0 32,2.2389832 32,5 32,6.1259766 31.628052,7.1640015 31,8L29,10 22,3 24,1C24.83606,0.37197876,25.874023,0,27,0z',\n            offset: 0.5,\n            side: 'Bottom',\n            tooltip: { content: 'Edit Event' },\n        },\n    ];\n    public selectedItems: SelectorModel = {\n        userHandles: this.userHandles,\n        constraints: SelectorConstraints.None | SelectorConstraints.UserHandle | SelectorConstraints.ToolTip\n    };\n    public commandManager: CommandManagerModel = {\n      commands: [\n        {\n          name: 'copy',\n          canExecute: () => false\n        },\n        {\n          name: 'paste',\n          canExecute: () => false\n        }\n      ]\n    };\n    private diagramCreated: boolean = false;\n    // ========== Diagram events ==========\n\n    public selectionChange(args: ISelectionChangeEventArgs): void {\n        if (args.state === 'Changed' && this.diagram.selectedItems.nodes!.length === 1) {\n            this.selectedNode = this.diagram.selectedItems.nodes![0];\n            // Fetch the eventIndex from node's info\n            const nodeInfo: any = this.selectedNode.addInfo;\n            if (nodeInfo && nodeInfo.eventIndex !== undefined) {\n                this.editTimeLineIndex = nodeInfo.eventIndex;\n                const isImmediateNext: boolean = this.checkImmediateEventYear(this.editTimeLineIndex);\n                this.diagram.selectedItems.userHandles![0].visible = !isImmediateNext;\n                this.diagram.selectedItems.userHandles![1].visible = true;\n            } else {\n                this.editTimeLineIndex = -1;\n                this.diagram.selectedItems.userHandles![0].visible = false;\n                this.diagram.selectedItems.userHandles![1].visible = false;\n            }\n            this.diagram.dataBind();\n        }\n    };\n\n    public onUserHandleMouseDown(args: UserHandleEventsArgs): void {\n        this.formValidator.reset();\n        if (args.element.name === 'New Event') {\n            this.dialog.header = this.selectedUserHandle = 'New Event';\n            this.yearTextBox.value = '';\n            this.titleTextBox.value = '';\n            this.describeTextBox.value = '';\n            this.imageTextBox.value = '';\n        } else if (args.element.name === 'Edit Event') {\n            this.dialog.header = this.selectedUserHandle = 'Edit Event';\n            const timeLine: TimelineEvent = this.timelineEvents[this.editTimeLineIndex];\n            this.yearTextBox.value = timeLine.year;\n            this.titleTextBox.value = timeLine.title;\n            this.describeTextBox.value = timeLine.description;\n            this.imageTextBox.value = timeLine.imageUrl ? timeLine.imageUrl : '';\n        }\n        this.dialog.show();\n    };\n\n    public click(args: any): void {\n        if ((args.element instanceof Diagram) && this.diagram.selectedItems.nodes?.length > 0) {\n            this.diagram.clearSelection();\n        }\n    };\n\n    public load(): void {\n        setTimeout(()=>{\n            if (this.diagramCreated){\n                this.diagram.fitToPage({ mode: 'Height' });\n            }\n        },10)\n    };\n\n    public created(): void {\n        this.diagramCreated = true;\n        this.diagram.fitToPage({ mode: 'Height' });\n    };\n\n    // ========== Dialog Form Bindings ==========\n\n    public dialogButtons: ButtonPropsModel[] = [\n        { buttonModel: { content: 'Submit', isPrimary: true }, click: () => this.onSubmitClicked() },\n        { buttonModel: { content: 'Cancel' }, click: () => this.dialog?.hide() }\n    ];\n    // Form data model\n\n    public formData = {\n        yearInput: '',\n        titleInput: '',\n        descriptionInput: '',\n        imageUrl: ''\n    };\n\n    // Dialog Submit Button Clicked\n    private onSubmitClicked() {\n        // Validate Dialog form\n        if (!this.formValidator.validate()) {\n            return;\n        }\n        const year: string = this.yearTextBox.value;\n        const title: string = this.titleTextBox.value;\n        const description: string = this.describeTextBox.value;\n        const imageUrl: string = this.imageTextBox.value;\n        const icon: string = 'sf-icon-internet-public';\n        const timeLine: TimelineEvent = { year, title, description, icon: icon, imageUrl: imageUrl };\n\n        if (this.selectedUserHandle === 'New Event') {\n            // Insert new event after the selected node\n            const insertIndex: number = this.editTimeLineIndex + 1;\n            // Insert the new event in Event collection\n            this.timelineEvents.splice(insertIndex, 0, timeLine);\n            // Add the new event node after selected node\n            this.addNewTimelineEvent(insertIndex, timeLine);\n            // Update positions of all nodes after insertion point\n            this.updateNodePositions(insertIndex + 1);\n        }\n        else if (this.selectedUserHandle === 'Edit Event') {\n            timeLine.icon = this.timelineEvents[this.editTimeLineIndex].icon;\n            // Update the timeline event data\n            this.timelineEvents[this.editTimeLineIndex] = timeLine;\n            // Edit the selected event node\n            this.editTimelineNode(this.editTimeLineIndex, timeLine);\n        }\n        const isImmediateNext: boolean = this.checkImmediateEventYear(this.editTimeLineIndex);\n        this.diagram.selectedItems.userHandles![0].visible = !isImmediateNext;\n        // Refresh the diagram to show updated changes\n        this.diagram.dataBind();\n        this.dialog.hide();\n    }\n\n    ngOnInit() {\n        this.createTimelineNodes();\n        this.createTimelineConnectors();\n    }\n    ngAfterViewInit() {\n        if (this.formElement) {\n            // Exact same validation rules as your original TypeScript code\n            const options: FormValidatorModel = {\n                rules: {\n                    yearInput: {\n                        required: true,\n                        digits: true,\n                        min: 0,\n                        maxLength: 4,\n                        custom: [this.checkYearValidity.bind(this), 'Year must be within valid range compared to adjacent events']\n                    },\n                    titleInput: { required: true },\n                    descriptionInput: { required: true }\n                }\n            };\n\n            this.formValidator = new FormValidator(this.formElement.nativeElement, options);\n        }\n    }\n\n    private createTimelineNodes(): void {\n        const diagramNodes: NodeModel[] = []\n        // Create main timeline line\n        const timelineLine: NodeModel = {\n            id: 'timeline_line',\n            offsetX: (this.timelineEvents.length * this.nodeSpacing) / 2,\n            offsetY: this.baseLine,\n            width: (this.timelineEvents.length) * this.nodeSpacing,\n            height: 10,\n            constraints: NodeConstraints.None,\n            shape: {\n                type: 'HTML',\n                content: `\n    <div style=\"display: flex; width: 100%; height: 100%;\">\n      ${this.timelineEvents.map((_event, index) => {\n                    const colorIndex = index % this.eventColors.length;\n                    const nodeColor = this.eventColors[colorIndex];\n                    return `<div style=\"flex: 1; background-color: ${nodeColor}; height: 100%;\"></div>`;\n                }).join('')}\n    </div>\n  `,\n            },\n        };\n        diagramNodes.push(timelineLine);\n\n        this.timelineEvents.forEach((event, index) => {\n            const colorIndex: number = index % this.eventColors.length;\n            const nodeColor: string = this.eventColors[colorIndex];\n\n            const isOdd: boolean = (index + 1) % 2 !== 0;\n            const x: number = this.startX + (index * this.nodeSpacing);\n            const y: number = isOdd ? this.startY : this.baseLine + this.alternateOffset;\n\n            // Timeline Event Node\n            const timelineNode: NodeModel = {\n                id: `timeline_${index}`,\n                offsetX: x,\n                offsetY: y,\n                width: 130,\n                height: 100,\n                constraints: (NodeConstraints.Default | NodeConstraints.Tooltip | NodeConstraints.ReadOnly) & ~NodeConstraints.Select,\n                tooltip: {\n                    content: `${event.year}: ${event.description}`,\n                    position: isOdd ? 'TopCenter' : 'BottomCenter',\n                    relativeMode: 'Object',\n                    animation: { open: { delay: 1000 } }\n                },\n                style: { fill: 'none' },\n                shape: {\n                    type: 'HTML',\n                    content: this.getEventNodeTemplate(nodeColor, event)\n                }\n            };\n\n            //Timeline Year Marker Node\n            const yearMarker: NodeModel = {\n                id: `marker_${index}`,\n                offsetX: x,\n                offsetY: this.baseLine,\n                width: 150,\n                height: 50,\n                constraints: (NodeConstraints.Default | NodeConstraints.ReadOnly) & ~(NodeConstraints.Drag),\n                addInfo: { eventIndex: index }, // Store the event index for reference\n                shape: {\n                    type: 'HTML',\n                    content: this.getYearNodeTemplate(event.year)\n                }\n            };\n\n            diagramNodes.push(timelineNode, yearMarker);\n            // Push node to index table to maintain event order\n            this.indexTable.push(index.toString());\n        });\n        this.nodes = diagramNodes;\n    }\n\n    private createTimelineConnectors(): void {\n        const diagramConnectors: ConnectorModel[] = [];\n        this.timelineEvents.forEach((_event, index) => {\n            const colorIndex: number = index % this.eventColors.length;\n            const strokeColor: string = this.eventColors[colorIndex];\n            const connector: ConnectorModel = {\n                id: `connector_${index}`,\n                sourceID: `timeline_${index}`,\n                targetID: `marker_${index}`,\n                constraints: ConnectorConstraints.None,\n                style: {\n                    strokeColor: strokeColor,\n                    strokeWidth: 2\n                },\n                type: 'Straight',\n                targetDecorator: {\n                    shape: 'None'\n                },\n                sourceDecorator: {\n                    shape: 'None'\n                },\n            };\n\n            diagramConnectors.push(connector);\n        });\n        this.connectors = diagramConnectors;\n    }\n\n    // Function to Edit current selected event node\n    private editTimelineNode(editTimeLineIndex: number, timeLine: TimelineEvent): void {\n        // Update the timeline node content\n        const timelineNode: NodeModel = this.diagram.getObject(`timeline_${this.indexTable[editTimeLineIndex]}`) as NodeModel;\n        if (timelineNode) {\n            const colorIndex: number = editTimeLineIndex % this.eventColors.length;\n            const nodeColor: string = this.eventColors[colorIndex];\n\n            (timelineNode.shape as HtmlModel).content = this.getEventNodeTemplate(nodeColor, timeLine);\n\n            // Update tooltip\n            if (timelineNode.tooltip) {\n                timelineNode.tooltip.content = `${timeLine.year}: ${timeLine.description}`;\n            }\n        }\n\n        // Update the year marker content\n        const markerNode: NodeModel = this.diagram.getObject(`marker_${this.indexTable[editTimeLineIndex]}`) as NodeModel;\n        if (markerNode) {\n            (markerNode.shape as HtmlModel).content = this.getYearNodeTemplate(timeLine.year);\n        }\n    }\n\n    // Function to update node positions after inserting a new event\n    private updateNodePositions(fromIndex: number): void {\n        // Update positions for all nodes from the insertion point onwards\n        for (let i: number = fromIndex; i < this.indexTable.length; i++) {\n            const isOdd: boolean = (i + 1) % 2 !== 0;\n            const x: number = this.startX + (i * this.nodeSpacing);\n            const y: number = isOdd ? this.startY : this.baseLine + this.alternateOffset;\n            const colorIndex: number = i % this.eventColors.length;\n            const nodeColor: string = this.eventColors[colorIndex];\n            // Update timeline node position\n            const timelineNode: NodeModel = this.diagram.getObject(`timeline_${this.indexTable[i]}`) as NodeModel;\n            if (timelineNode) {\n                timelineNode.offsetX = x;\n                timelineNode.offsetY = y;\n                // Updating time line node color to match time line event segment color\n                (timelineNode.shape as HtmlModel).content = this.getEventNodeTemplate(nodeColor, this.timelineEvents[i]);\n                timelineNode.tooltip!.position = isOdd ? 'TopCenter' : 'BottomCenter';\n            }\n\n            // Update marker node position\n            const markerNode: NodeModel = this.diagram.getObject(`marker_${this.indexTable[i]}`) as NodeModel;\n            if (markerNode) {\n                markerNode.offsetX = x;\n                (markerNode.addInfo as any).eventIndex = i;\n            }\n\n            // Update connector color\n            const connector: ConnectorModel = this.diagram.getObject(`connector_${this.indexTable[i]}`) as ConnectorModel;\n            if (connector) {\n                connector.style!.strokeColor = nodeColor;\n            }\n        }\n\n        // Update timeline line width\n        const timelineLine: NodeModel = this.diagram.getObject('timeline_line') as NodeModel;\n        if (timelineLine) {\n            timelineLine.offsetX = (this.timelineEvents.length * this.nodeSpacing) / 2;\n            timelineLine.width = (this.timelineEvents.length) * this.nodeSpacing;\n\n            // Update timeline line content with new colors\n            (timelineLine.shape as HtmlModel).content = `\n    <div style=\"display: flex; width: 100%; height: 100%;\">\n      ${this.timelineEvents.map((_event, index) => {\n                const colorIndex = index % this.eventColors.length;\n                const nodeColor = this.eventColors[colorIndex];\n                return `<div style=\"flex: 1; background-color: ${nodeColor}; height: 100%;\"></div>`;\n            }).join('')}\n    </div>\n  `;\n        }\n    }\n\n    // Function to add a new timeline event node\n    private addNewTimelineEvent(insertIndex: number, newEvent: TimelineEvent): void {\n        const colorIndex: number = insertIndex % this.eventColors.length;\n        const nodeColor: string = this.eventColors[colorIndex];\n        const isOdd: boolean = (insertIndex + 1) % 2 !== 0;\n        const x: number = this.startX + (insertIndex * this.nodeSpacing);\n        const y: number = isOdd ? this.startY : this.baseLine + this.alternateOffset;\n        const id: string = randomId();\n        // Create new timeline node\n        const timelineNode: NodeModel = {\n            id: `timeline_${id}`,\n            offsetX: x,\n            offsetY: y,\n            width: 130,\n            height: 100,\n            constraints: (NodeConstraints.Default | NodeConstraints.Tooltip | NodeConstraints.ReadOnly) & ~NodeConstraints.Select,\n            style: { fill: 'none' },\n            tooltip: {\n                content: `${newEvent.year}: ${newEvent.description}`,\n                position: isOdd ? 'TopCenter' : 'BottomCenter',\n                relativeMode: 'Object',\n                animation: { open: { delay: 1000 } }\n            },\n            shape: {\n                type: 'HTML',\n                content: this.getEventNodeTemplate(nodeColor, newEvent),\n            }\n        };\n\n        // Create new year marker node\n        const yearMarker: NodeModel = {\n            id: `marker_${id}`,\n            offsetX: x,\n            offsetY: this.baseLine,\n            width: 170,\n            height: 50,\n            constraints: (NodeConstraints.Default | NodeConstraints.ReadOnly) & ~(NodeConstraints.Drag),\n            addInfo: { eventIndex: insertIndex },\n            shape: {\n                type: 'HTML',\n                content: this.getYearNodeTemplate(newEvent.year)\n            }\n        };\n\n        // Create new connector\n        const connector: ConnectorModel = {\n            id: `connector_${id}`,\n            sourceID: `timeline_${id}`,\n            targetID: `marker_${id}`,\n            constraints: ConnectorConstraints.None,\n            style: {\n                strokeColor: nodeColor,\n                strokeWidth: 2\n            },\n            type: 'Straight',\n            targetDecorator: { shape: 'None' },\n            sourceDecorator: { shape: 'None' },\n        };\n\n        // Push node to index table to maintain event order\n        this.indexTable.splice(insertIndex, 0, id);\n        // Add new nodes and connector to diagram\n        this.diagram.add(timelineNode);\n        this.diagram.add(yearMarker);\n        this.diagram.add(connector);\n    }\n\n    // functions to return HTML Templates\n    private getEventNodeTemplate(nodeColor: string, event: TimelineEvent) {\n        if (event.imageUrl) {\n            return `<div style=\"width: 100%; height: 100%; background-color: ${nodeColor}; display: flex; flex-direction: column; align-items: center; justify-content: center; border-radius: 5px; padding: 5px; box-sizing: border-box;\">\n                  <div style=\"margin-bottom: 4px;\">\n                      <img src=\"${event.imageUrl}\" alt=\"Event Image\" style=\"max-width: 100%; max-height: 60px; border-radius: 3px;\" />\n                  </div>\n                  <div style=\"font-size: 12px; color: #333; text-align: center; line-height: 1.2;\">\n                      <strong>${event.title}</strong>\n                  </div>\n              </div>`\n        }\n        else {\n            return `<div style=\"width: 100%; height: 100%; background-color: ${nodeColor}; display: flex; flex-direction: column; align-items: center; justify-content: center; border-radius: 5px; padding: 5px; box-sizing: border-box;\">\n                  <div class=\"${event.icon}\" style=\"margin-bottom: 4px;\"></div>\n                  <div style=\"font-size: 12px; color: #333; text-align: center; line-height: 1.2;\">\n                      <strong>${event.title}</strong>\n                  </div>\n              </div>`\n        }\n    }\n    private getYearNodeTemplate(year: string) {\n        return `<div style=\"width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;\">\n            <div style=\"width: 50px; height: 50px; background-color: #333333; color: white; border-radius: 50%; font-size: 12px; display: flex; align-items: center; justify-content: center;\">\n              ${year}\n            </div>\n          </div>`\n    }\n\n    // Check whether next year is immediate year\n    private checkImmediateEventYear(currentYear: number): boolean {\n        // Ensure no Immediate next year event before adding new event\n        const nextYearIndex = currentYear + 1;\n        const hasNextEvent = nextYearIndex < this.timelineEvents.length;\n        // Toggle off the new event handle for immediate next year event\n        const isImmediateNext = hasNextEvent &&\n            Number(this.timelineEvents[nextYearIndex].year) - Number(this.timelineEvents[this.editTimeLineIndex].year) === 1;\n        return isImmediateNext;\n    }\n\n    private checkYearValidity(args: { [key: string]: string }): boolean {\n        const previousYearIndex: number = this.selectedUserHandle === 'Edit Event' ? this.editTimeLineIndex - 1 : this.editTimeLineIndex;\n        const currentYear: number = Number(args.value);\n        // Validate the current year against the previous event's year, if applicable\n        const hasPreviousEvent = previousYearIndex >= 0;\n        if (hasPreviousEvent && Number(this.timelineEvents[previousYearIndex].year) >= currentYear) {\n            return false;\n        }\n        // Validate the current year against the next event's year, if applicable\n        const nextYearIndex = this.editTimeLineIndex + 1;\n        const hasNextEvent = nextYearIndex < this.timelineEvents.length;\n        if (hasNextEvent && Number(this.timelineEvents[nextYearIndex].year) <= currentYear) {\n            return false;\n        }\n        return true;\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n  <div id=\"timeline-container\">\n    <div id=\"timeline-header\">\n      <h1>Internet History Timeline</h1>\n      <p>A comprehensive timeline of key events in Internet development from 1969 to 2035</p>\n    </div>\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n      <ejs-diagram #diagram id=\"timeline-diagram\" width=\"100%\" height=\"600px\"\n        [nodes]=\"nodes\" [connectors]=\"connectors\" [tool]=\"tool\" [constraints]=\"constraints\"\n        [snapSettings]=\"snapSettings\" [selectedItems]=\"selectedItems\" [commandManager]=\"commandManager\"\n        (selectionChange)=\"selectionChange($event)\" (onUserHandleMouseDown)=\"onUserHandleMouseDown($event)\"\n        (click)=\"click($event)\" (created)=\"created()\" (load)=\"load()\">\n      </ejs-diagram>\n\n      <ejs-dialog #dialog id=\"dialog\" [visible]=\"false\" width=\"300px\" [isModal]=\"true\"\n        [target]=\"target\" [animationSettings]=\"{ effect: 'Zoom' }\" [buttons]=\"dialogButtons\"\n        (overlayClick)=\"dialog.hide()\" [header]=\"dialog?.header\">\n        <div style=\"padding: 0px 15px 15px 15px;\">\n          <form #formElement id=\"form-element\" class=\"form-horizontal\">\n\n            <div class=\"form-group\">\n              <label for=\"yearInput\">Year:</label>\n              <ejs-textbox #yearTextBox id=\"yearInput\" name=\"yearInput\" [(ngModel)]=\"formData.yearInput\"\n                floatLabelType=\"Never\" placeholder=\"e.g., 2025\" cssClass=\"e-outline\">\n              </ejs-textbox>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"titleInput\">Title:</label>\n              <ejs-textbox #titleTextBox id=\"titleInput\" name=\"titleInput\"\n                [(ngModel)]=\"formData.titleInput\" floatLabelType=\"Never\"\n                placeholder=\"Event Title\" cssClass=\"e-outline\">\n              </ejs-textbox>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"descriptionInput\">Description:</label>\n              <ejs-textarea #describeTextBox id=\"descriptionInput\" name=\"descriptionInput\"\n                [(ngModel)]=\"formData.descriptionInput\" [rows]=\"2\" floatLabelType=\"Never\"\n                placeholder=\"Brief description of the event\" cssClass=\"e-outline\"[resizeMode]=\"'Vertical'\">\n              </ejs-textarea>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"imageUrl\">Image Url:</label>\n              <ejs-textbox #imageTextBox id=\"imageUrl\" name=\"imageUrl\" [(ngModel)]=\"formData.imageUrl\"\n                floatLabelType=\"Never\" placeholder=\"https://example.com/image.jpg\" cssClass=\"e-outline\">\n              </ejs-textbox>\n            </div>\n\n          </form>\n        </div>\n      </ejs-dialog>\n    </div>\n    <div id=\"description\">\n        <p>\n          This interactive timeline displays Internet history events as styled nodes along a central bar, alternating above and below for visual variety. Color-coded segments define historical periods, and tooltip provide event descriptions on hover. Users can dynamically add or edit events, ensuring chronological accuracy with real-time updates.\n        </p>\n    </div>\n</div>\n\n","app.component.css":"#timeline-container {\n    border-radius: 10px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    margin-bottom: 20px;\n    padding: 20px;\n    background-color: #f5f5f5;\n}\n\n#timeline-header {\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n#timeline-header h1 {\n    color: #333;\n    font-size: 28px;\n    margin-bottom: 10px;\n}\n\n#timeline-header p {\n    color: #666;\n    font-size: 16px;\n    margin: 0;\n}\n\n#timeline-diagram {\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    background: white;\n}\n\n#timeline-container .e-diagram-selector {\n    stroke-width: 0;\n}\n\n@font-face {\n    font-family: 'History Timeline Font Icon';\n    src:\n    url(data:application/x-font-ttf;charset=utf-8;base64,) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n\n[class^=\"sf-icon-\"],\n[class*=\" sf-icon-\"] {\n    font-family: 'History Timeline Font Icon' !important;\n    speak: none;\n    font-size: 55px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.sf-icon-arpanet:before {\n    content: \"\\e700\";\n}\n\n.sf-icon-birth-internet:before {\n    content: \"\\e701\";\n}\n\n.sf-icon-internet-public:before {\n    content: \"\\e702\";\n}\n\n.sf-icon-first-web-browser:before {\n    content: \"\\e703\";\n}\n\n.sf-icon-commercialization:before {\n    content: \"\\e704\";\n}\n\n.sf-icon-google-found:before {\n    content: \"\\e705\";\n}\n\n.sf-icon-social-media:before {\n    content: \"\\e706\";\n}\n\n.sf-icon-youtube:before {\n    content: \"\\e707\";\n}\n\n.sf-icon-i-phone:before {\n    content: \"\\e708\";\n}\n\n.sf-icon-cloud-computing:before {\n    content: \"\\e709\";\n}\n\n.sf-icon-internet-of-things:before {\n    content: \"\\e70a\";\n}\n\n.sf-icon-remote-work:before {\n    content: \"\\e70b\";\n}\n\n.sf-icon-metaverse:before {\n    content: \"\\e70c\";\n}\n\n.sf-icon-quantum-internet:before {\n    content: \"\\e70d\";\n}\n\n.sf-icon-autonomous-vehicle:before {\n    content: \"\\e70e\";\n}\n\n.sf-icon-advance-ai:before {\n    content: \"\\e70f\";\n}\n\n.sf-icon-5g-network:before {\n    content: \"\\e710\";\n}\n\n.sf-icon-iot-pervasiveness:before {\n    content: \"\\e711\";\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}