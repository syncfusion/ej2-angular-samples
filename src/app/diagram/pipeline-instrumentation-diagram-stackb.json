{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { AfterViewInit, Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport {\n  DiagramComponent,\n  NodeModel,\n  ConnectorModel,\n  NodeConstraints,\n  DiagramTools,\n  Diagram,\n  ConnectorBridging,\n  DiagramModule,\n  ScrollSettingsModel,\n  SnapConstraints,\n  PortVisibility,\n  PointPortModel,\n  FlipDirection,\n  GradientModel,\n  LinearGradientModel,\n  RadialGradientModel,\n  SnapSettingsModel,\n  DiagramConstraints\n} from '@syncfusion/ej2-angular-diagrams';\nimport { Switch } from '@syncfusion/ej2-angular-buttons';\nimport { NumericTextBox } from '@syncfusion/ej2-angular-inputs';\nimport { LinearGauge, Annotations } from '@syncfusion/ej2-angular-lineargauge';\n\n\n\nLinearGauge.Inject(Annotations);\nDiagram.Inject(ConnectorBridging);\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [ DiagramModule, ]\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  public diagram!: DiagramComponent;\n\n  private numericBox: NumericTextBox;\n  private gauge: LinearGauge;\n  private tankFlow1: boolean = true;\n  private tankFlow2: boolean = true;\n  private tankFlow3: boolean = true;\n  private pumpFlow: boolean = true;\n  private autoStopped: boolean = false;\n  private isDiagramCreated: boolean = false;\n  private pressureInterval: any;\n  private animationIntervals: Record<string, number> = {};\n  private gradualStopIntervals: Record<string, number> = {};\n  private inputTankOn: boolean = false;\n  private checkbox: Switch;\n  private checkValve1CloseBtn: Switch;\n  private checkValve2CloseBtn: Switch;\n  private checkValve3CloseBtn: Switch;\n  // System states\n  private isSystemLocked = false; // When pump is off, lock tank valves\n  private isStorageShutdown = false; // When storage is off but pump can still be controlled\n\n  private tank1RadialGradient: GradientModel | LinearGradientModel | RadialGradientModel = {\n    cx: 50, cy: 50, fx: 25, fy: 25, r: 50,\n    stops: [{ color: 'white', offset: 0 }, { color: '#e88a25', offset: 100 }],\n    type: 'Radial'\n  }\n  private tank2RadialGradient: GradientModel | LinearGradientModel | RadialGradientModel = {\n    cx: 50, cy: 50, fx: 25, fy: 25, r: 50,\n    stops: [{ color: 'white', offset: 0 }, { color: 'purple', offset: 100 }],\n    type: 'Radial'\n  }\n  private tankGradientColor: GradientModel | LinearGradientModel | RadialGradientModel = {\n    cx: 50, cy: 50, fx: 25, fy: 25, r: 50,\n    stops: [{ color: 'white', offset: 0 }, { color: '#76b5c5', offset: 100 }],\n    type: 'Radial'\n  };\n  private storagetankGradientColor: GradientModel | LinearGradientModel | RadialGradientModel = {\n    cx: 50, cy: 50, fx: 50, fy: 50, r: 80,\n    stops: [{ color: 'white', offset: 0 }, { color: '#CECECE', offset: 100 }],\n    type: 'Radial'\n  };\n\n  ngAfterViewInit(): void {\n    // Initialize after view is ready\n    setTimeout(() => {\n      this.isDiagramCreated = true;\n      this.appendHTMLElements();\n      this.runAnimation();\n    }, 100);\n  }\n\n  // Nodes array\n  public nodes: NodeModel[] = [\n    { id: 'Chemical', offsetX: 720, offsetY: 20, annotations: [{ content: 'Chemical Reactor System P&ID', style: { fontSize: 18, bold: true } }], shape: { type: 'Text' }, constraints: NodeConstraints.Default & ~NodeConstraints.Select },\n    { id: 'tank1Top', offsetX: 200, offsetY: 225, height: 50, width: 100, shape: { type: 'Basic', shape: 'Ellipse' }, style: { gradient: this.tank1RadialGradient }, constraints: NodeConstraints.Default & ~NodeConstraints.Select },\n    { id: 'tank1Bottom', offsetX: 200, offsetY: 375, height: 50, width: 100, shape: { type: 'Basic', shape: 'Ellipse' }, style: { gradient: this.tank1RadialGradient } },\n    { id: 'tank1container', offsetX: 200, offsetY: 300, height: 150, width: 100, shape: { type: 'Basic', shape: 'Rectangle' }, style: { gradient: this.tank1RadialGradient }, annotations: [{ content: 'Tank1', style: { color: 'black' } }] },\n    { id: 'Tank1Group', children: ['tank1Top', 'tank1Bottom', 'tank1container'], style: { fill: 'transparent', strokeColor: 'transparent', strokeWidth: 0 } },\n    { id: 'tank2Top', offsetX: 370, offsetY: 225, height: 50, width: 100, shape: { type: 'Basic', shape: 'Ellipse' }, style: { gradient: this.tank2RadialGradient } },\n    { id: 'tank2Bottom', offsetX: 370, offsetY: 375, height: 50, width: 100, shape: { type: 'Basic', shape: 'Ellipse' }, style: { gradient: this.tank2RadialGradient } },\n    { id: 'tank2container', offsetX: 370, offsetY: 300, height: 150, width: 100, shape: { type: 'Basic', shape: 'Rectangle' }, style: { gradient: this.tank2RadialGradient }, annotations: [{ content: 'Tank2', style: { color: 'black' } }] },\n    { id: 'Tank2Group', children: ['tank2Top', 'tank2Bottom', 'tank2container'], style: { fill: 'transparent', strokeColor: 'transparent', strokeWidth: 0 }  },\n    { id: 'tank3Top', offsetX: 750, offsetY: 325, height: 70, width: 170, shape: { type: 'Basic', shape: 'Ellipse' }, style: { gradient: this.tankGradientColor } },\n    { id: 'tank3Bottom', offsetX: 750, offsetY: 575, height: 70, width: 170, shape: { type: 'Basic', shape: 'Ellipse' }, style: { gradient: this.tankGradientColor } },\n    { id: 'reacterInletThread1', offsetX: 810, offsetY: 290, shape: { type: 'Flow', shape: 'Data' }, height: 25, width: 35, rotateAngle: 10, style: { fill: '#469A22' } },\n    { id: 'reacterInletThread2', offsetX: 750, offsetY: 278, shape: { type: 'Basic', shape: 'Rectangle' }, height: 25, width: 15, style: { fill: '#656764' } },\n    { id: 'reacterInletThread3', offsetX: 750, offsetY: 268, shape: { type: 'Basic', shape: 'Rectangle' }, height: 10, width: 25, style: { fill: '#656764' } },\n    { id: 'pressureGuageNode', offsetX: 600, offsetY: 130, style: { fill: 'green' }, height: 70, width: 70, shape: { type: 'HTML', content: '<div class=\"pressure-container\" style=\"width:100%;height:100%\"><div class=\"pressure-indicator\"><div class=\"pressure-gauge\"><div class=\"needle\" id=\"needle\"></div></div><div class=\"pressure-value\" id=\"pressureValue\"> 0 PSI</div></div></div>' } },\n    { id: 'pumpBase', offsetX: 750, offsetY: 110, shape: { type: 'Flow', shape: 'SequentialAccessStorage' }, height: 100, width: 100, rotateAngle: 90, flip: FlipDirection.Vertical, style: { fill: '#E2EAF4' } },\n    { id: 'pumpBody', offsetX: 750, offsetY: 110, shape: { type: 'Flow', shape: 'SequentialAccessStorage' }, height: 90, width: 90, rotateAngle: 90, style: { fill: '#E2EAF4' } },\n    { id: 'pumpRotator', offsetX: 750, offsetY: 110, shape: { type: 'HTML', content: '<div style=\"display:flex;left: -25px;position: absolute;\"><div class=\"pump-container\"><div class=\"pump-body\"></div><div class=\"fan-blades\" id=\"fan\"><div class=\"blade\"></div><div class=\"blade\"></div><div class=\"hub\"></div></div></div><div id=\"pumpCheckBoxContainer\"><input id=\"pumpCheckBox\" type=\"checkbox\"/></div></div>' }, height: 50, width: 50 },\n    { id: 'pumpGroup', children: ['pumpBase', 'pumpBody', 'pumpRotator'], style: { fill: 'transparent', strokeColor: 'transparent', strokeWidth: 0 } },\n    { id: 'tank3container', offsetX: 750, offsetY: 450, height: 250, width: 170, shape: { type: 'Basic', shape: 'Rectangle' }, style: { gradient: this.tankGradientColor }, annotations: [{ content: 'STIRRED TANK \\nREACTOR (STR)', style: { color: 'black', fontSize: 20, bold: true, italic: true } }] },\n    { id: 'tank3cooler', offsetX: 750, offsetY: 490, height: 250, width: 185, shape: { type: 'Basic', shape: 'Rectangle', cornerRadius: 50 }, style: { fill: \"#3D58B0\" } },\n    { id: 'Tank3Group', children: ['tank3cooler', 'tank3Top', 'tank3Bottom', 'tank3container'], style: { fill: 'transparent', strokeColor: 'transparent', strokeWidth: 0 }  },\n    { id: 'coolantcontroller', offsetX: 500, offsetY: 650, height: 70, width: 150, annotations: [{ content: 'Coolant Controller', style: { color: 'Orange', fontSize: 15, italic: true, bold: true }, offset: { x: 0.5, y: 0.8 } }], shape: { type: 'Flow', shape: 'Card' }, style: { fill: \"#656874\" } },\n    { id: 'coolantValue', offsetX: 500, offsetY: 650, height: 60, width: 100, shape: { type: 'HTML', content: '<div><input id=\"numeric\" type=\"text\"/></div>' }, style: { fill: \"#656874\" } },\n    { id: 'thermometerNode', offsetX: 920, offsetY: 600, height: 100, width: 100, shape: { type: 'HTML', content: '<div style=\"width:100%;height:100%\"><div id=\"thermometer\"></div></div>' }, style: { fill: \"#656874\" } },\n    // Control valve groups\n    { id: 'controlvalve1', offsetX: 450, offsetY: 100, shape: { type: 'Flow', shape: 'Process' }, height: 20, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve2', offsetX: 420, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 25, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve3', offsetX: 450, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 20, width: 50, style: { fill: '#65B091' } },\n    { id: 'controlvalve4', offsetX: 480, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 25, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve5', offsetX: 450, offsetY: 90, shape: { type: 'Basic', shape: 'Ellipse' }, height: 5, width: 35, style: { fill: '#65B091' } },\n    { id: 'controlvalveBox1', offsetX: 450, offsetY: 115, shape: { type: 'HTML', content: '<div style=\"height:100%;width:100%\"><div id=\"showFlowContainer1\" style=\"background:#ffb734;height:100%;width:100%;border-radius: 3px;border:1px solid\"></div><div class=\"switch-container\"><div id=\"switch-buttons1\"></div></div></div>' }, height: 15, width: 35, style: { fill: '#65B091' } },\n    { id: 'controlValveGroup1', children: ['controlvalve1', 'controlvalve2', 'controlvalve3', 'controlvalve4', 'controlvalve5', 'controlvalveBox1'], offsetX: 270, offsetY: 500,style: { fill: 'transparent', strokeColor: 'transparent', strokeWidth: 0 }  },\n    { id: 'controlvalve6', offsetX: 450, offsetY: 100, shape: { type: 'Flow', shape: 'Process' }, height: 20, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve7', offsetX: 420, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 25, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve8', offsetX: 450, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 20, width: 50, style: { fill: '#65B091' } },\n    { id: 'controlvalve9', offsetX: 480, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 25, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve10', offsetX: 450, offsetY: 90, shape: { type: 'Basic', shape: 'Ellipse' }, height: 5, width: 35, style: { fill: '#65B091' } },\n    { id: 'controlvalveBox2', offsetX: 450, offsetY: 115, shape: { type: 'HTML', content: '<div style=\"height:100%;width:100%\"><div id=\"showFlowContainer2\" style=\"background:#7C099C;height:100%;width:100%;border-radius: 3px;border:1px solid\"></div><div class=\"switch-container\"><div id=\"switch-buttons2\"></div></div></div>' }, height: 15, width: 35, style: { fill: '#65B091' } },\n    { id: 'controlValveGroup2', children: ['controlvalve6', 'controlvalve7', 'controlvalve8', 'controlvalve9', 'controlvalve10', 'controlvalveBox2'], offsetX: 450, offsetY: 130, style: { fill: 'transparent', strokeColor: 'transparent', strokeWidth: 0 }  },\n    { id: 'reacterOutletThread1', offsetX: 855, offsetY: 407.5, shape: { type: 'Basic', shape: 'Rectangle' }, height: 25, width: 15, style: { fill: '#C9B100' } },\n    { id: 'reacterOutletThread2', offsetX: 845, offsetY: 407.5, shape: { type: 'Basic', shape: 'Rectangle' }, height: 35, width: 25, style: { fill: '#C9B100' } },\n    { id: 'controlvalve11', offsetX: 450, offsetY: 100, shape: { type: 'Flow', shape: 'Process' }, height: 20, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve12', offsetX: 420, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 25, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve13', offsetX: 450, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 20, width: 50, style: { fill: '#65B091' } },\n    { id: 'controlvalve14', offsetX: 480, offsetY: 115, shape: { type: 'Flow', shape: 'Process' }, height: 25, width: 10, style: { fill: '#65B091' } },\n    { id: 'controlvalve15', offsetX: 450, offsetY: 90, shape: { type: 'Basic', shape: 'Ellipse' }, height: 5, width: 35, style: { fill: '#65B091' } },\n    { id: 'controlvalveBox3', offsetX: 450, offsetY: 115, shape: { type: 'HTML', content: '<div style=\"height:100%;width:100%\"><div id=\"showFlowContainer3\" style=\"background:red;height:100%;width:100%;border-radius: 3px;border:1px solid\"></div><div class=\"switch-container\"><div id=\"switch-buttons3\"></div></div></div>' }, height: 15, width: 35, style: { fill: '#65B091' } },\n    { id: 'controlValveGroup3', children: ['controlvalve11', 'controlvalve12', 'controlvalve13', 'controlvalve14', 'controlvalve15', 'controlvalveBox3'], offsetX: 970, offsetY: 400, style: { fill: 'transparent', strokeColor: 'transparent', strokeWidth: 0 } },\n    { id: 'mixer1', shape: { type: 'Basic', shape: 'Octagon' }, offsetX: 550, offsetY: 230, height: 70, width: 70, annotations: [{ content: 'Mixer' }], style: { gradient: { cx: 50, cy: 50, fx: 25, fy: 25, r: 50, stops: [{ color: 'white', offset: 0 }, { color: '#415086', offset: 100 }], type: 'Radial' } } },\n    { id: 'temperatureAlarm', offsetX: 680, offsetY: 292, height: 30, width: 30, annotations: [{ content: \"TA\", rotationReference: 'Page', style: { bold: true } }], shape: { type: 'Flow', shape: 'DirectData' }, rotateAngle: 245, style: { gradient: { cx: 50, cy: 50, fx: 25, fy: 25, r: 50, stops: [{ color: 'white', offset: 0 }, { color: '#EA8257', offset: 100 }], type: 'Radial' } } },\n    { id: 'leveltransmitter', offsetX: 800, offsetY: 350, height: 30, width: 50, shape: { type: 'Flow', shape: 'Process' }, style: { fill: '#79247D' }, annotations: [{ content: '54 L', style: { color: 'gold', bold: true } }] },\n    { id: 'productInletThread1', offsetX: 1200, offsetY: 500, shape: { type: 'Basic', shape: 'Rectangle' }, height: 10, width: 30, style: { fill: '#D47A39' } },\n    { id: 'ProductTank', offsetX: 1200, offsetY: 600, height: 200, width: 200, shape: { type: 'Flow', shape: 'PreDefinedProcess' }, style: { gradient: this.storagetankGradientColor }, annotations: [{ content: \"Storage\", offset: { x: 0.5, y: 0.1 } }, { content: 'Tank', offset: { x: 0.5, y: 0.9 } }] },\n    { id: 'ProductTankQuantity', offsetX: 1200, offsetY: 600, height: 130, width: 100, shape: { type: \"HTML\", content: '<div class=\"product-container\"><div class=\"product\" id=\"productStorage\"></div></div>' } }\n  ];\n  // Connectors array\n  public connectors: ConnectorModel[] = [\n    { id: 'Connector1', sourceID: 'Tank1Group', targetID: 'controlvalve2', sourcePortID: \"bottomPort\", targetPortID: \"inletLeftPort\", style: { strokeColor: 'orange', strokeDashArray: '5,5' }, addInfo: { animate: true } },\n    { id: 'Connector2', sourceID: 'Tank2Group', targetID: 'controlvalve7', sourcePortID: \"topPort\", targetPortID: \"inletLeftPort\", style: { strokeColor: '#7C099C' }, addInfo: { animate: true } },\n    { id: 'Connector3', sourceID: 'controlvalve4', targetID: 'mixer1', sourcePortID: \"outletRightPort\", targetPortID: \"bottomPort\", style: { strokeColor: 'orange' }, addInfo: { animate: true } },\n    { id: 'Connector4', sourceID: 'controlvalve9', targetID: 'mixer1', sourcePortID: \"outletRightPort\", targetPortID: \"topPort\", style: { strokeColor: '#7C099C' }, addInfo: { animate: true } },\n    { id: 'Connector5', sourceID: 'coolantcontroller', targetID: 'tank3cooler', sourcePortID: \"outletRightPort\", targetPortID: \"inletLeftPort\", style: { strokeColor: 'blue' } },\n    { id: 'Connector6', sourceID: 'coolantcontroller', targetID: 'tank3cooler', sourcePortID: \"inletLeftPort\", targetPortID: \"bottomPort\", style: { strokeColor: '#d6185bff' } },\n    { id: 'Connector9', sourceID: 'reacterOutletThread1', targetID: 'controlvalve12', sourcePortID: \"outletRightPort\", targetPortID: \"inletLeftPort\", style: { strokeColor: 'red' }, addInfo: { animate: true } },\n    { id: 'Connector10', sourceID: 'controlvalve14', targetID: 'productInletThread1', sourcePortID: \"outletRightPort\", targetPortID: \"topPort\", style: { strokeColor: 'red' }, addInfo: { animate: true } },\n    { id: 'Connector11', sourceID: 'mixer1', targetID: 'pumpBase', sourcePortID: \"outletRightPort\", targetPortID: \"pumpPort1\", style: { strokeColor: '#8DC276' }, addInfo: { animate: true } },\n    { id: 'Connector12', sourceID: 'pumpBase', targetID: 'reacterInletThread1', sourcePortID: \"pumpPort2\", targetPortID: \"topPort\", style: { strokeColor: '#8DC276' }, addInfo: { animate: true } },\n    { id: 'Connector13', sourceID: 'mixer1', targetID: 'pressureGuageNode', sourcePortID: \"mixertopressureport\", targetPortID: \"pressuretomixerport\", style: { strokeColor: 'black', strokeWidth: 1, strokeDashArray: '5,1' } },\n    { id: 'Connector14', sourceID: 'Tank3Group', targetID: 'thermometerNode', sourcePortID: \"tankport10\", targetPortID: \"thermoPort\", style: { strokeColor: 'black', strokeWidth: 1, strokeDashArray: '5,1' } }\n  ];\n  public onLoad() {\n    setTimeout(() => {\n      if (this.isDiagramCreated) {\n        this.appendHTMLElements();\n        this.diagram.fitToPage({ canZoomOut: true });\n        this.runAnimation();\n      }\n    }, 100);\n  }\n  // Function to set default values for nodes in the diagram\n  public getNodeDefaults(node: NodeModel): NodeModel {\n    node.ports = this.getPorts(node.id as string);\n    node.constraints = (NodeConstraints.Default | NodeConstraints.ReadOnly) & ~NodeConstraints.Select\n    node.addInfo = { valve: true }\n    return node;\n  }\n  private getPorts(nodeId: string): PointPortModel[] {\n    const staticPorts: PointPortModel[] = [\n      { id: 'inletLeftPort', offset: { x: 0, y: 0.5 }, visibility: PortVisibility.Hidden },\n      { id: 'outletRightPort', offset: { x: 1, y: 0.5 }, visibility: PortVisibility.Hidden },\n      { id: 'topPort', offset: { x: 0.5, y: 0 }, visibility: PortVisibility.Hidden },\n      { id: 'bottomPort', offset: { x: 0.5, y: 1 }, visibility: PortVisibility.Hidden }\n    ];\n    if (nodeId === \"tank1\") staticPorts.push({ id: 'tankPort1', offset: { x: 1, y: 0.2 }, visibility: PortVisibility.Visible }, { id: 'tankPort2', offset: { x: 1, y: 0.8 }, visibility: PortVisibility.Visible });\n    if (nodeId === \"mixer1\") staticPorts.push({ id: 'mixertopressureport', offset: { x: 0.94, y: 0.1 }, visibility: PortVisibility.Hidden });\n    if (nodeId === \"pressureGuageNode\") staticPorts.push({ id: 'pressuretomixerport', offset: { x: 0.7, y: 0.5 }, visibility: PortVisibility.Hidden });\n    if (nodeId === \"thermometerNode\") staticPorts.push({ id: 'thermoPort', offset: { x: 0.2, y: 0.3 }, visibility: PortVisibility.Hidden });\n    if (nodeId === \"Tank3Group\") staticPorts.push({ id: 'tankport10', offset: { x: 0.97, y: 0.8 }, visibility: PortVisibility.Hidden });\n    if (nodeId === \"pumpBase\") staticPorts.push({ id: 'pumpPort1', offset: { x: 0.94, y: 0.1 }, visibility: PortVisibility.Hidden }, { id: 'pumpPort2', offset: { x: 0.97, y: 0.95 }, visibility: PortVisibility.Hidden });\n    return staticPorts;\n  }\n\n  // Function to set default values for connectors in the diagram\n  public getConnectorDefaults(connector: ConnectorModel): ConnectorModel {\n    connector.type = 'Orthogonal'; // Connector type set to Orthogonal\n    connector.cornerRadius = 3;\n    if (connector.id === \"Connector5\" || connector.id === \"Connector6\") {\n      connector.style = { strokeWidth: 5, strokeDashArray: \"10,1\" };\n    } else {\n      connector.style = { strokeWidth: 10 };\n    }\n    // Connector style with specific stroke color and width\n    connector.targetDecorator = { shape: \"None\" }; // Target decorator style\n    if (connector.id == \"Connector13\" || connector.id == \"Connector14\") {\n      connector.style = { strokeWidth: 2, strokeDashArray: \"10,1\" };\n      connector.type = \"Straight\";\n    }\n    return connector;\n  }\n  public tools: DiagramTools = DiagramTools.ZoomPan;\n  public snapSettings: SnapSettingsModel = {\n    constraints: SnapConstraints.None\n  };\n  constraints = DiagramConstraints.Default & ~DiagramConstraints.UndoRedo;\n  private appendHTMLElements() {\n    this.appendTemperatureControl();\n    this.appendCollantValue();\n    this.addPumpCheckBox();\n    this.appendvalveControls();\n  }\n  // Function called when diagram is created\n  public onCreated(): void {\n    this.isDiagramCreated = true;\n    this.appendHTMLElements();\n    this.diagram.fitToPage({ canZoomOut: true }); // Fit the diagram to the page\n    this.runAnimation(); // Start all animations initially\n  }\n  // ===== CORE SYSTEM LOGIC =====\n  private shutDownPump() {\n    this.isSystemLocked = true;\n    this.pumpFlow = false;\n    // Stop pump animations\n    this.startPumpAnimation(false);\n    this.updatePressureAnimation(true);\n    this.animatePathFlow(\"Connector11_path\", false, '#A7A2A2', true);\n    setTimeout(() => { this.animatePathFlow(\"Connector12_path\", false, \"#A7A2A2\", true); }, 500);\n    setTimeout(() => {\n      if (this.checkValve3CloseBtn && this.checkValve3CloseBtn.checked) {\n        this.checkValve3CloseBtn.toggle();\n      }\n    }, 600);\n    setTimeout(() => {\n      // Close all valves including storage valve when pump shuts down\n      if (this.checkValve1CloseBtn && this.checkValve1CloseBtn.checked) {\n        this.checkValve1CloseBtn.toggle();\n      }\n      if (this.checkValve2CloseBtn && this.checkValve2CloseBtn.checked) {\n        this.checkValve2CloseBtn.toggle();\n      }\n    }, 700);\n  }\n  private startUpPump() {\n    this.isSystemLocked = false;  // Important: Reset system lock when pump starts\n    this.isStorageShutdown = false;  // Reset storage shutdown state\n    this.pumpFlow = true;\n    // Start pump animations\n    this.startPumpAnimation(true);\n    this.updatePressureAnimation(false);\n    this.animatePathFlow(\"Connector11_path\", true, '#8DC276');\n    setTimeout( () => this.animatePathFlow(\"Connector12_path\", true, \"#8DC276\", true), 500);\n    setTimeout(() => {\n      if (this.checkValve1CloseBtn && !this.checkValve1CloseBtn.checked && !this.inputTankOn) {\n        this.checkValve1CloseBtn.toggle();\n      }\n      if (this.checkValve2CloseBtn && !this.checkValve2CloseBtn.checked && !this.inputTankOn) {\n        this.checkValve2CloseBtn.toggle();\n      }\n    }, 600);\n    setTimeout(() => {\n      if (this.checkValve3CloseBtn && !this.checkValve3CloseBtn.checked) {\n        this.checkValve3CloseBtn.toggle();\n      }\n      if (this.checkbox && !this.checkbox.checked) {\n        this.checkbox.toggle();\n      }\n    }, 700);\n    this.autoStopped = false;\n  }\n\n  private shutDownStorage() {\n    this.isStorageShutdown = true;\n    // Stop storage animations\n    this.animatePathFlow(\"Connector9_path\", false, 'red', true);\n    setTimeout(() => this.animatePathFlow(\"Connector10_path\", false, \"#A7A2A2\", true), 500);\n    this.startStorageAnimation(false);\n  }\n  private startUpStorage() {\n    this.isStorageShutdown = false;\n    this.animatePathFlow(\"Connector9_path\", true, 'red');\n    setTimeout(() => this.animatePathFlow(\"Connector10_path\", true, \"red\"), 500);\n    this.startStorageAnimation(true);\n  }\n  // NEW FUNCTION: Start entire system from storage valve\n  private startUpSystemFromStorage() {\n    if (this.checkbox && !this.checkbox.checked) {\n      this.checkbox.toggle(); // This will call startUpPump()\n    }\n    if (this.checkValve1CloseBtn && !this.checkValve1CloseBtn.checked) {\n      this.checkValve1CloseBtn.toggle();\n    }\n    if (this.checkValve2CloseBtn && !this.checkValve2CloseBtn.checked) {\n      this.checkValve2CloseBtn.toggle();\n    }\n    this.animatePathFlow(\"Connector9_path\", true, 'red');\n    setTimeout(() => this.animatePathFlow(\"Connector10_path\", true, \"red\"), 500);\n    this.startStorageAnimation(true);\n    this.isSystemLocked = false;\n    this.isStorageShutdown = false;\n  }\n  private checkTankValveShutdown() {\n    // If both tank valves are manually closed, shut down entire system\n    if (!this.tankFlow1 && !this.tankFlow2 && this.pumpFlow) {\n      if (this.checkbox && this.checkbox.checked) {\n        this.checkbox.toggle();\n      }\n      if (this.checkValve3CloseBtn && this.checkValve3CloseBtn.checked) {\n        this.checkValve3CloseBtn.toggle();\n      }\n    }\n  }\n  // ===== VALVE CONTROL LOGIC =====\n  private appendvalveControls() {\n    const valveButtons = ['valveButton1', 'valveButton2', 'valveButton3'];\n    const switchContainers = ['switch-buttons1', 'switch-buttons2', 'switch-buttons3'];\n\n    // Cleanup existing elements\n    valveButtons.forEach((id, index) => {\n      const existingInput = document.getElementById(id);\n      if (existingInput) {\n        const switchInstance = (existingInput as any).ej2_instances?.[0];\n        if (switchInstance && switchInstance instanceof Switch) {\n          switchInstance.destroy();\n        }\n        existingInput.remove(); // Remove the HTML element from the DOM\n      }\n\n      const switchContainer = document.getElementById(switchContainers[index]);\n      if (switchContainer) {\n        while (switchContainer.firstChild) {\n          switchContainer.firstChild.remove();\n        }\n      }\n    });\n\n    // --- APPEND AND INITIALIZE PHASE ---\n    // Valve 1 (Tank 1 inlet) - Start as ON\n    const newInput1 = document.createElement('input');\n    newInput1.type = 'checkbox';\n    newInput1.id = 'valveButton1';\n    document.getElementById('switch-buttons1')?.appendChild(newInput1);\n\n    this.checkValve1CloseBtn = new Switch({\n      checked: true,\n      change: this.checkValve1Change.bind(this)\n    });\n    this.checkValve1CloseBtn.appendTo('#valveButton1');\n\n    // Valve 2 (Tank 2 inlet) - Start as ON\n    const newInput2 = document.createElement('input');\n    newInput2.type = 'checkbox';\n    newInput2.id = 'valveButton2';\n    document.getElementById('switch-buttons2')?.appendChild(newInput2);\n\n    this.checkValve2CloseBtn = new Switch({\n      checked: true,\n      change: this.checkValve2Change.bind(this)\n    });\n    this.checkValve2CloseBtn.appendTo('#valveButton2');\n    // Valve 3 (Storage outlet) - Start as ON\n    const newInput3 = document.createElement('input');\n    newInput3.type = 'checkbox';\n    newInput3.id = 'valveButton3';\n\n    document.getElementById('switch-buttons3')?.appendChild(newInput3);\n    this.checkValve3CloseBtn = new Switch({\n      checked: true,\n      change: this.checkValve3Change.bind(this)\n    });\n    this.checkValve3CloseBtn.appendTo('#valveButton3');\n  }\n  private checkValve1Change (args: any) {\n    if (this.isSystemLocked && args.checked) {\n      this.isSystemLocked = false;\n      this.inputTankOn = true;\n      setTimeout(() => this.inputTankOn = false, 2000);\n      this.startUpPump();\n      this.startUpStorage();\n    }\n    this.valveStateClick1(args.checked ? 'Open' : 'Close');\n  }\n  private checkValve2Change (args: any) {\n      if (this.isSystemLocked && args.checked) {\n        this.isSystemLocked = false;\n        this.inputTankOn = true;\n        setTimeout(() => this.inputTankOn = false, 2000);\n        this.startUpPump();\n        this.startUpStorage();\n      }\n      this.valveStateClick2(args.checked ? 'Open' : 'Close');\n    }\n  private checkValve3Change(args: any) {\n        if (!args.checked) {\n          // Storage valve manually closed - shut down pump if running\n          if (this.checkbox && this.checkbox.checked) {\n            this.checkbox.toggle(); // This will trigger shutDownPump()\n          }\n          this.shutDownStorage();\n        } else {\n          // Storage valve manually opened\n          if (this.isSystemLocked || this.isStorageShutdown) {\n            // If system was locked, restart the entire system\n            this.startUpSystemFromStorage();\n          } else if (this.pumpFlow && !this.isSystemLocked) {\n            // Normal operation - just start storage\n            this.startUpStorage();\n          }\n        }\n        this.valveStateClick3(args.checked ? 'Open' : 'Close');\n      }\n  private valveStateClick1(action: string) {\n    const flow: HTMLElement = document.getElementById(\"showFlowContainer1\");\n    this.updateValveState(flow, action, 1);\n  }\n  private valveStateClick2(action: string) {\n    const flow: HTMLElement = document.getElementById(\"showFlowContainer2\");\n    this.updateValveState(flow, action, 2);\n  }\n  private valveStateClick3(action: string) {\n    const flow: HTMLElement = document.getElementById(\"showFlowContainer3\");\n    this.updateValveState(flow, action, 3);\n  }\n  private updateValveState(flow: HTMLElement, action: string, valveNumber: number) {\n    if (!flow) return;\n\n    if (action === \"Close\") {\n      flow.style.background = \"#e5e7eb\";\n\n      switch (valveNumber) {\n        case 1:\n          this.tankFlow1 = false;\n          this.animatePathFlow(\"Connector1_path\", false, '#ffb734', true);\n          setTimeout(() => this.animatePathFlow(\"Connector3_path\", false, \"#A7A2A2\", true), 500);\n          break;\n        case 2:\n          this.tankFlow2 = false;\n          this.animatePathFlow(\"Connector2_path\", false, '#7C099C', true);\n          setTimeout(() => this.animatePathFlow(\"Connector4_path\", false, \"#A7A2A2\", true), 500);\n          break;\n        case 3:\n          this.tankFlow3 = false;\n          this.animatePathFlow(\"Connector9_path\", false, 'red', true);\n          setTimeout(() => this.animatePathFlow(\"Connector10_path\", false, \"#A7A2A2\", true), 500);\n          this.startStorageAnimation(false);\n          break;\n      }\n\n      // Check if both tank valves are closed\n      if (valveNumber <= 2) {\n        this.checkTankValveShutdown();\n      }\n\n    } else if (action === \"Open\") {\n      // Check conditions for opening valves\n      let canOpen = false;\n\n      if (valveNumber <= 2) {\n        // Tank valves can only open if pump is running and system is not locked\n        canOpen = this.pumpFlow && !this.isSystemLocked && !this.isStorageShutdown;\n      } else if (valveNumber === 3) {\n        // Storage valve can open if pump is running and system is not locked\n        canOpen = this.pumpFlow && !this.isSystemLocked;\n      }\n      if (canOpen) {\n        switch (valveNumber) {\n          case 1:\n            this.tankFlow1 = true;\n            flow.style.background = \"#ffb734\";\n            this.animatePathFlow(\"Connector1_path\", true, '#ffb734');\n            setTimeout(() => this.animatePathFlow(\"Connector3_path\", true, \"#ffb734\"), 100);\n            break;\n          case 2:\n            this.tankFlow2 = true;\n            flow.style.background = \"#7C099C\";\n            this.animatePathFlow(\"Connector2_path\", true, '#7C099C');\n            setTimeout(() => this.animatePathFlow(\"Connector4_path\", true, \"#7C099C\"), 100);\n            break;\n          case 3:\n            this.tankFlow3 = true;\n            flow.style.background = \"red\";\n            this.animatePathFlow(\"Connector9_path\", true, 'red');\n            setTimeout(() => this.animatePathFlow(\"Connector10_path\", true, \"red\"), 100);\n            this.startStorageAnimation(true);\n            break;\n        }\n      }\n    }\n  }\n\n  // ===== PUMP CONTROL LOGIC =====\n  private addPumpCheckBox() {\n    if (this.checkbox) this.checkbox.destroy();\n    this.checkbox = new Switch({\n      checked: true, // Start as ON\n      change: this.onCheckBoxChange.bind(this)\n    });\n    this.checkbox.appendTo('#pumpCheckBox');\n  }\n  private onCheckBoxChange(args: any) {\n    if (args.checked) {\n      this.startUpPump();\n    } else {\n      // Pump manually turned OFF\n      this.shutDownPump();\n    }\n  }\n  // ===== ANIMATION FUNCTIONS =====\n\n  private runAnimation() {\n    this.addFlowAnimationClass();\n    this.startConnectorAnimation();\n    this.startPumpAnimation(true);\n    this.startStorageAnimation(true);\n    this.updatePressureAnimation(false);\n  }\n\n  private addFlowAnimationClass() {\n    const style = document.createElement('style');\n    style.textContent = `\n        @keyframes dashFlow { \n            to { stroke-dashoffset: -15; } \n        }\n        .flow-animation { \n            stroke-dasharray: 10, 10 !important; \n            stroke-dashoffset: 0 !important; \n            animation: dashFlow 1s linear infinite !important;\n         }`;\n    document.head.appendChild(style);\n  }\n  private startPumpAnimation(start: boolean) {\n    const pumpElement = document.getElementById('fan');\n    if (pumpElement) {\n      if (start) {\n        pumpElement.classList.add('rotate-animation');\n      } else {\n        pumpElement.classList.remove('rotate-animation');\n      }\n    }\n  }\n\n  private startStorageAnimation(on: boolean) {\n    const storageElement = document.getElementById('productStorage');\n    if (!storageElement) return;\n    if (on) {\n      // Restart animation\n      storageElement.classList.remove('fill-animation', 'paused');\n      void storageElement.offsetWidth; // Force reflow\n      storageElement.classList.add('fill-animation');\n    } else {\n      // Pause animation without removing it\n      storageElement.classList.add('paused');\n    }\n  }\n\n  private hexToRgb(hex: string) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? { r: parseInt(result[1], 16), g: parseInt(result[2], 16), b: parseInt(result[3], 16) } : { r: 0, g: 0, b: 0 };\n  }\n\n  private animatePathFlow(pathId: string, animate: boolean, color?: string, slow?: boolean) {\n    const dashArray = \"10,5\"; const speed = 30;\n    const path = document.getElementById(pathId);\n    if (!path) return;\n    // **FIRST: Clean up any existing intervals for this path**\n    if (this.animationIntervals[pathId]) {\n      clearInterval(this.animationIntervals[pathId]);\n      delete this.animationIntervals[pathId];\n    }\n    if (this.gradualStopIntervals[pathId]) {\n      clearInterval(this.gradualStopIntervals[pathId]);\n      delete this.gradualStopIntervals[pathId];\n    }\n    if (animate) {\n      let offset = 0;\n      path.setAttribute(\"stroke\", color as string);\n      path.setAttribute(\"stroke-dasharray\", dashArray);\n\n      // Start new interval and store its ID\n      const intervalId = window.setInterval(() => {\n        offset = (offset - 1) % 1000;\n        path.setAttribute(\"stroke-dashoffset\", offset as any);\n      }, speed);\n      this.animationIntervals[pathId] = intervalId;\n    } else {\n      if (slow) {\n        const currentColor = path.getAttribute('stroke') || color;\n        let offset = parseFloat(path.getAttribute(\"stroke-dashoffset\") || \"0\");\n        let step = 0;\n        const steps = 30;\n        const duration = 1000;\n        const interval = duration / steps;\n\n        const startColor = this.hexToRgb(currentColor);\n        const endColor = this.hexToRgb(currentColor); // white or background color\n\n        this.gradualStopIntervals[pathId] = window.setInterval(() => {\n          step++;\n          offset = (offset - 1) % 1000;\n          path.setAttribute(\"stroke-dashoffset\", offset.toString());\n\n          const progress = step / steps;\n          const r = Math.round(startColor.r + (endColor.r - startColor.r) * progress);\n          const g = Math.round(startColor.g + (endColor.g - startColor.g) * progress);\n          const b = Math.round(startColor.b + (endColor.b - startColor.b) * progress);\n          path.setAttribute(\"stroke\", color as string);\n\n          if (step >= steps) {\n            // **CRITICAL: Complete cleanup when animation finishes**\n            clearInterval(this.gradualStopIntervals[pathId]);\n            delete this.gradualStopIntervals[pathId];\n            path.setAttribute(\"stroke\", color); // Final color\n            path.setAttribute(\"stroke-dasharray\", \"none\");\n            path.setAttribute(\"stroke-dashoffset\", \"0\"); // Reset offset\n          }\n        }, interval);\n\n      } else {\n        // Immediate stop\n        path.setAttribute(\"stroke\", color || \"black\");\n        path.setAttribute(\"stroke-dasharray\", \"none\");\n        path.setAttribute(\"stroke-dashoffset\", \"0\");\n      }\n\n    }\n  }\n\n\n  private startConnectorAnimation() {\n    let diagramConnectors = this.diagram.connectors;\n    for (let i = 0; i < diagramConnectors.length; i++) {\n      // Toggle between two styles to simulate movement\n      const currentConnector = diagramConnectors[i];\n      const sourceNode: NodeModel = this.diagram.getObject(currentConnector.sourceID as string) as NodeModel;\n      if (sourceNode && sourceNode.addInfo && (sourceNode.addInfo as any).valve && currentConnector.addInfo && (currentConnector.addInfo as any).animate) {\n        this.animatePathFlow(currentConnector.id + \"_path\", true, (currentConnector as any).style.strokeColor)\n      }\n    }\n  }\n  // ===== OTHER CONTROL FUNCTIONS =====\n  private appendCollantValue() {\n    // renders collant value NumericTextBox\n    if (this.numericBox) this.numericBox.destroy();\n    this.numericBox = new NumericTextBox({\n      min: -50, max: 75, value: 12, step: 2, format: '##.##',\n      change: (args) => {\n        (this.gauge.axes[0] as any).pointers[0].value = 28 + args.value;\n        (this.gauge.axes[0] as any).pointers[0].color = this.getColorFromTemperature(28 + args.value);\n      }\n    });\n    this.numericBox.appendTo('#numeric');\n  }\n\n\n  private appendTemperatureControl() {\n    if (this.gauge) {\n      this.gauge.destroy();\n    }\n    this.gauge = new LinearGauge({\n      height: \"120px\",\n      container: { width: 4, height: 100, roundedCornerRadius: 5, type: 'Thermometer', border: { width: 1 } },\n      background: 'transparent',\n      axes: [{\n        minimum: -20, maximum: 100,\n        pointers: [{ value: 40, height: 10, width: 4, placement: 'Center', offset: 0, markerType: 'Triangle', color: '#2674a5ff', type: 'Bar' }],\n        line: {\n          width: 0\n        },\n        majorTicks: {\n          height: 7, interval: 30\n        },\n        minorTicks: {\n          height: 0, interval: 5\n        },\n        labelStyle: {\n          font: { fontFamily: 'inherit' }\n        }\n      }],\n      annotations: [{ content: '<div style=\"font-size:13px;margin-left: 30px;margin-top: -50px;\"> °C </div>', axisIndex: 0, axisValue: 50, x: 0, y: 0, zIndex: '1' }]\n    });\n    this.gauge.appendTo('#thermometer');\n  }\n\n  private getColorFromTemperature(value: number): string {\n    if (value < 30) return 'cyan';\n    if (value < 60) return 'blue';\n    if (value < 80) return 'orange';\n    return 'red';\n  }\n\n\n  private updatePressureAnimation(highPressureMode: boolean) {\n    if (this.pressureInterval) {\n      clearInterval(this.pressureInterval);\n    }\n    this.pressureInterval = setInterval(() => {\n      let randomPressure: number = highPressureMode ? Math.floor(Math.random() * 16) + 90 : Math.floor(Math.random() * 21) + 20;\n      this.updatePressure(randomPressure);\n    }, 2000);\n  }\n\n  private updatePressure(psi: number) {\n    const needle = document.getElementById('needle') as HTMLElement;\n    const valueDisplay = document.getElementById('pressureValue') as HTMLElement;\n    if (needle && valueDisplay) {\n      psi = Math.max(0, Math.min(psi, 100));\n      const angle = -90 + (psi / 100) * 90;\n      needle.style.transform = `rotate(${angle}deg)`;\n      valueDisplay.textContent = `${psi} PSI`;\n    }\n  }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section diagram-pipeline\">\n    <div class=\"content-wrapper\" style=\"width: 100%\">\n        <ejs-diagram \n            #diagram \n            id=\"diagram\"\n            width=\"100%\" \n            height=\"700px\"\n            [nodes]=\"nodes\" \n            [connectors]=\"connectors\"\n            [tool]=\"tools\"\n            [snapSettings]=\"snapSettings\"\n            [getNodeDefaults]=\"getNodeDefaults.bind(this)\"\n            [getConnectorDefaults]=\"getConnectorDefaults.bind(this)\"\n            (created)=\"onCreated()\"\n            (load)=\"onLoad()\"\n            [constraints]=\"constraints\">\n        </ejs-diagram>\n    </div>\n</div>\n","app.component.css":".diagram-pipeline .product-container {\n    width: 100px;\n    height: 130px;\n    border: 2px solid #000;\n    position: relative;\n    overflow: hidden;\n}\n\n.diagram-pipeline .product {\n    background-color: red;\n    width: 100%;\n    height: 0;\n    position: absolute;\n    bottom: 0;\n    animation-fill-mode: forwards;\n}\n\n.diagram-pipeline .fill-animation {\n    animation: fillStorgeTank 40s ease-in infinite forwards;\n    animation-play-state: running;\n}\n\n.diagram-pipeline .fill-animation.paused {\n    animation-play-state: paused;\n}\n\n@keyframes fillStorgeTank {\n    from {\n        height: 0;\n    }\n    to {\n        height: 100%;\n    }\n}\n\n.diagram-pipeline .pump-container {\n    width: 100%;\n    height: 100%;\n    position: relative;\n    left: 25px;\n}\n\n.diagram-pipeline .pump-body {\n    width: 60px;\n    height: 60px;\n    background: radial-gradient(circle, #5c5c5c 0%, #2c2c2c 100%);\n    border-radius: 50%;\n    position: absolute;\n    top: -5px;\n    left: -5px;\n    border: 5px solid #4a4a4a;\n    box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.8);\n}\n\n.diagram-pipeline .fan-blades {\n    position: relative;\n    margin-top: 43%;\n    left: 40%;\n    transform: translate(-50%, -50%);\n    width: 60px;\n    height: 40px;\n}\n\n.diagram-pipeline .rotate-animation {\n    animation: rotateBlade 2s linear infinite;\n}\n\n.diagram-pipeline .blade {\n    position: absolute;\n    width: 15px;\n    height: 50px;\n    background: linear-gradient(to bottom, #bbb 0%, #888 100%);\n    top: calc(50% - 25px);\n    left: calc(50% - 7.5px);\n    border-radius: 8px;\n    transform-origin: center calc(100% - 25px);\n}\n\n.diagram-pipeline .blade:nth-child(1) {\n    transform: rotate(0deg);\n}\n\n.diagram-pipeline .blade:nth-child(2) {\n    transform: rotate(90deg);\n}\n\n.diagram-pipeline .blade:nth-child(3) {\n    transform: rotate(180deg);\n}\n\n.diagram-pipeline .blade:nth-child(4) {\n    transform: rotate(270deg);\n}\n\n.diagram-pipeline .hub {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 20px;\n    height: 20px;\n    background: radial-gradient(circle, #aaa 0%, #666 100%);\n    border-radius: 50%;\n    z-index: 10;\n}\n\n@keyframes rotateBlade {\n    0% {\n        transform: translate(-50%, -50%) rotate(0deg);\n    }\n    100% {\n        transform: translate(-50%, -50%) rotate(360deg);\n    }\n}\n\n.diagram-pipeline .pressure-container {\n    display: flex;\n}\n\n.diagram-pipeline .pressure-indicator {\n    text-align: center;\n}\n\n.diagram-pipeline .pressure-gauge {\n    position: relative;\n    width: 70px;\n    height: 40px;\n    background: #ddd;\n    border-top-left-radius: 100px;\n    border-top-right-radius: 100px;\n    border: 1px solid black;\n    margin: auto;\n    overflow: hidden;\n}\n\n.diagram-pipeline .needle {\n    width: 4px;\n    height: 70px;\n    background: red;\n    transition: transform 0.5s ease-in-out;\n    margin-left: 33px;\n    margin-top: 5px;\n}\n\n.diagram-pipeline .pressure-value {\n    font-size: 12px;\n    margin-top: 10px;\n    margin-left: 20px;\n    color: #111827 !important;\n}\n\n.diagram-pipeline .switch-buttons {\n    display: block;\n    margin-top: 3px;\n}\n\n.diagram-pipeline .switch-container {\n    left: -10px;\n    top: 20px;\n    position: absolute;\n}\n\n.diagram-pipeline #pumpCheckBoxContainer {\n    position: relative;\n    top: 80px;\n    left: -35px;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-lineargauge\":\"*\",\"@syncfusion/ej2-angular-lineargauge\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}