{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","script/diagram-common.ts":"/**\n * script for mobile symbol-palette\n */\n\nlet isMobile: boolean;\n\nexport function paletteIconClick() {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon: HTMLElement = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', showPaletteIcon, false);\n        }\n    }\n}\n\nexport function showPaletteIcon(): void {\n    let paletteSpace: HTMLElement = document.getElementById('palette-space');\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        if (!paletteSpace.classList.contains('sb-mobile-palette-open')) {\n            paletteSpace.classList.add('sb-mobile-palette-open');\n        } else {\n            paletteSpace.classList.remove('sb-mobile-palette-open');\n        }\n    }\n}\n\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild,Inject } from '@angular/core';\nimport { ContextMenuSettingsModel, DiagramComponent, DiagramModule } from '@syncfusion/ej2-angular-diagrams';\nimport {\n  Diagram, NodeModel, UndoRedo, ConnectorModel, PointPortModel, Connector, FlowShapeModel,\n  SymbolInfo, IDragEnterEventArgs, SnapSettingsModel, MarginModel, TextStyleModel, StrokeStyleModel,\n  OrthogonalSegmentModel, Node, PaletteModel, NodeConstraints, AnnotationConstraints, ConnectorConstraints, SelectorConstraints, DiagramConstraints, ISelectionChangeEventArgs, UserHandleModel, SelectorModel\n} from '@syncfusion/ej2-diagrams';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { paletteIconClick } from './script/diagram-common';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nDiagram.Inject(UndoRedo);\n\n/**\n * Default FlowShape sample\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ DiagramModule, CheckBoxModule, ]\n})\nexport class AppComponent {\n  @ViewChild('diagram')\n  //Diagram Properties\n  public diagram: DiagramComponent;\n  constructor() {​​​​​​​\n    \n}​​​​​​​\n  public created(args: any) {\n    this.diagram.rulerSettings = {\n      showRulers : true\n    }\n  }\n  //Initializes the nodes for the diagram\n  public nodes : NodeModel[] = [\n    {\n        id:\"textNode1\",\n        // Position of the node\n        offsetX:340,\n        offsetY: 50,\n        // Size of the node\n        width: 550,\n        height: 50,\n        //Sets type of the node\n        shape: { type: 'Text', content: 'Use Node Constraints to restrict end-users from performing certain operations on Node.' },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: { strokeColor: 'none', fill: 'none', color: 'black', textAlign: 'Center', },\n        constraints:  NodeConstraints.None\n       \n    },\n    {\n        id:\"rectangle\",\n        offsetX:80,\n        offsetY:160,\n        height: 65,\n        shape: { type: 'Basic', shape: 'Rectangle' },\n        annotations: [{ content: 'Selection = False', }],\n        constraints: NodeConstraints.Default & ~ NodeConstraints.Select\n    },\n    {\n        id:\"ellipse\",\n        offsetX:190,\n        offsetY:160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Ellipse',cornerRadius: 10 },\n        annotations: [{ content: 'Dragging = False' }],\n        constraints:  NodeConstraints.Default & ~ NodeConstraints.Drag\n       \n    },\n    {\n        id:\"heptagon\",\n        offsetX:295,\n        offsetY:160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Heptagon' },\n        annotations: [{ content: 'Delete = False' }],\n        constraints: NodeConstraints.Default & ~ NodeConstraints.Delete\n    },\n    {\n        id:\"directData\",\n        offsetX:410,\n        offsetY:160,\n        height: 80,\n        rotateAngle:-45,\n        shape: { type: 'Flow', shape: 'DirectData' },\n        annotations: [{ content: 'Rotate = False' }],\n        constraints: NodeConstraints.Default &~ NodeConstraints.Rotate\n    },\n    {\n        id:\"Plus\",\n        offsetX:530,\n        offsetY:160,\n        height: 80,\n        shape: { type: 'Basic', shape: 'Plus' },\n        annotations: [{ content: 'TextEdit = False',constraints: AnnotationConstraints.ReadOnly }],\n    },\n    {\n        id:\"decision\",\n        offsetX:630,\n        offsetY:160,\n        height: 80,\n        shape: { type: 'Flow', shape: 'Decision' },\n        annotations: [{ content: 'Resizing = False' }],\n       constraints:NodeConstraints.Default & ~ NodeConstraints.Resize\n    },\n    {\n        id:\"textNode2\",\n        // Position of the node\n        offsetX:350,\n        offsetY: 280,\n        // Size of the node\n        width: 550,\n        height: 50,\n        //Sets type of the node\n        shape: { type: 'Text', content: 'Use Connector Constraints to restrict end-users from performing certain operations on Connector.' },\n        //Customizes the appearances such as text, font, fill, and stroke.\n        style: { strokeColor: 'none', fill: 'none', color: 'black', textAlign: 'Center', },\n        constraints:  NodeConstraints.None\n    },\n];\npublic connectors : ConnectorModel[] = [\n    {\n    id: \"select\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Selection = False' , horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n     constraints: ConnectorConstraints.Default & ~ ConnectorConstraints.Select,\n    sourcePoint: {\n        x: 40,\n        y: 350\n    },\n    targetPoint: {\n        x: 120,\n        y: 430\n    }\n},\n{\n    id: \"connector2\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Dragging = True',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: ConnectorConstraints.Default | ~ConnectorConstraints.Drag,\n    sourcePoint: {\n        x: 140,\n        y: 350\n    },\n    targetPoint: {\n        x: 220,\n        y: 430\n    }\n},\n{\n    id: \"delete\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'Delete = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: (ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb) &~(ConnectorConstraints.Delete | ConnectorConstraints.Drag),\n    sourcePoint: {\n        x: 250,\n        y: 350\n    },\n    targetPoint: {\n        x: 320,\n        y: 430\n    }\n},\n{\n    id: \"endThumb\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'EndThumb = False' ,horizontalAlignment: 'Right' , verticalAlignment: 'Bottom' }],\n    constraints:(SelectorConstraints.All ) &~ ( SelectorConstraints.ConnectorSourceThumb | SelectorConstraints.ConnectorTargetThumb),\n    sourcePoint: {\n        x: 360,\n        y: 350\n    },\n    targetPoint: {\n        x: 440,\n        y: 430\n    }\n},\n{\n    id: \"draggable\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'EndDraggable = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: (ConnectorConstraints.Default | ConnectorConstraints.DragSegmentThumb) &~(ConnectorConstraints.DragSourceEnd | ConnectorConstraints.DragTargetEnd),\n    sourcePoint: {\n        x: 460,\n        y: 350\n    },\n    targetPoint: {\n        x: 540,\n        y: 430\n    }\n},\n{\n    id: \"segmentThumb\",\n    type: 'Orthogonal',\n    annotations: [{ content: 'SegmentThumb = False',horizontalAlignment: 'Right' , verticalAlignment: 'Bottom'  }],\n    constraints: ConnectorConstraints.Default &~ ConnectorConstraints.Drag,\n    sourcePoint: {\n        x: 580,\n        y: 350\n    },\n    targetPoint: {\n        x: 660,\n        y: 430\n    }\n},];\n\npublic handles: UserHandleModel[] = [\n  {\n    name: 'delete', pathData: \"M 7.04 22.13 L 92.95 22.13 L 92.95 88.8 C 92.95 91.92 91.55 94.58 88.76 96.74 C 85.97 98.91 82.55 100 78.52 100 L 21.48 100 C 17.45 100 14.03 98.91 11.24 96.74 C 8.45 94.58 7.04 91.92 7.04 88.8 z M 32.22 0 L 67.78 0 L 75.17 5.47 L 100 5.47 L 100 16.67 L 0 16.67 L 0 5.47 L 24.83 5.47 z\",\n    visible: true, offset: 0.5, side: 'Bottom', margin: { top: 0, bottom: 0, left: 0, right: 0 }\n}\n];\n\n//Defines the default node properties\npublic nodeDefaults(nodes: NodeModel): void {\n  if(nodes.id !== \"textNode1\" && nodes.id !== \"textNode2\") {\n    nodes.width = 80;\n    nodes.style.fill = '#C7E6FF';\n    nodes.style.strokeColor = '#1587FF';\n    }\n};\n\n//Defines the default connector properties\npublic connectorDefaults(connectors: ConnectorModel): void {\n  connectors.style.strokeColor = '#6BA5D7';\n  connectors.style.fill = '#6BA5D7';\n  connectors.style.strokeWidth = 2;\n  connectors.targetDecorator.style.strokeColor = '#6BA5D7';\n  connectors.targetDecorator.style.fill = '#6BA5D7';\n};\n\n// Define selectedItems property with initial configuration\npublic selectedItems: SelectorModel = {\n  userHandles: this.handles // Assuming this.handles is defined elsewhere\n};\n// Define contextMenuSettings property with initial configuration to show the context menu\npublic contextMenuSettings: ContextMenuSettingsModel = {\n  show: true // Show the context menu\n};\n// Define getCustomTool function as a method bound to the current instance ('this')\npublic getCustomTool: Function = this.getTool.bind(this);\n\n// Method used to delete objects using user handle\npublic getTool(action: string) { \n  if (action === \"delete\") {\n    this.diagram.remove(); // Assuming this.diagram is your diagram instance and has a 'remove' method\n  }\n}\n\n//Function used to enable zooming of diagram\npublic zoomingChange(args: any){\n  this.diagram.constraints = this.diagram.constraints ^ DiagramConstraints.Zoom;\n}\n//Function used to enable undo redo in diagram\npublic undoRedoChange(args: any){\n  this.diagram.constraints = this.diagram.constraints ^ DiagramConstraints.UndoRedo ;\n  this.diagram.dataBind();\n}\n\n// Function used to enable or disable editing for annotations in the diagram\npublic editingChange(args: { checked: any; }) {\n  // Loop through all nodes in the diagram\n  for (let i: number = 0; i < this.diagram.nodes.length; i++) {\n    let node = this.diagram.nodes[i];\n    // Check if the node has annotations and content\n    if (node.annotations.length > 0 && node.annotations[0].content) {\n      // Enable or disable editing based on the checkbox state\n      if (args.checked) {\n        // Enable editing if not 'Plus' node\n        if (node.id !== 'Plus') {\n          node.annotations[0].constraints =\n            node.annotations[0].constraints ^ AnnotationConstraints.ReadOnly; // Toggle ReadOnly constraint off\n        }\n      } else {\n        // Disable editing\n        node.annotations[0].constraints =\n          node.annotations[0].constraints | AnnotationConstraints.ReadOnly; // Apply ReadOnly constraint\n      }\n    }\n  }\n  // Loop through all connectors in the diagram\n  for (let x: number = 0; x < this.diagram.connectors.length; x++) {\n    let connector = this.diagram.connectors[x];\n    // Check if the connector has annotations and content\n    if (connector.annotations.length > 0 && connector.annotations[0].content) {\n      // Enable or disable editing based on the checkbox state\n      if (args.checked) {\n        // Disable selection for specific 'select' connector\n        if (connector.id === 'select') {\n          connector.constraints =\n            connector.constraints & ~(ConnectorConstraints.Select); // Toggle off Select constraint\n        } else {\n          connector.annotations[0].constraints =\n            connector.annotations[0].constraints ^ AnnotationConstraints.ReadOnly; // Toggle ReadOnly constraint off\n        }\n      } else {\n        // Enable editing\n        connector.annotations[0].constraints =\n          connector.annotations[0].constraints ^ AnnotationConstraints.ReadOnly; // Toggle ReadOnly constraint off\n      }\n    }\n  }\n  // Commit changes to the diagram\n  this.diagram.dataBind();\n}\n\n//Function used to enable context menu on right click\npublic contextMenuChange(args: { checked: any; }){\n  if (args.checked) {\n  this.diagram.contextMenuSettings.show = true;\n  this.diagram.refresh();\n    } \nelse {\n  this.diagram.contextMenuSettings.show = false;\n    }\n  this.diagram.dataBind();\n}\n\n// Function used to enable or disable selection in the diagram\npublic elementSelectableChange(args: { checked: any; }) {\n  // Loop through all nodes in the diagram\n  for (let i: number = 0; i < this.diagram.nodes.length; i++) {\n    let node = this.diagram.nodes[i];\n    // Check if the checkbox is checked\n    if (args.checked) {\n      // Enable selection for the node\n      node.constraints = node.constraints | NodeConstraints.Select;\n    } else {\n      // Disable selection for the node\n      node.constraints = node.constraints & ~NodeConstraints.Select;\n    }\n    // Commit changes to the diagram\n    this.diagram.dataBind();\n  }\n  // Loop through all connectors in the diagram\n  for (let j: number = 0; j < this.diagram.connectors.length; j++) {\n    let connector = this.diagram.connectors[j];\n    // Check if the checkbox is checked\n    if (args.checked) {\n      // Enable selection for the connector, except for specific cases\n      if (connector.id === \"select\") {\n        connector.constraints = connector.constraints ^ ConnectorConstraints.Select; // Toggle select for 'select' id connector\n      } else {\n        connector.constraints = connector.constraints | ConnectorConstraints.Select;\n      }\n    } else {\n      // Disable selection for the connector, except for specific cases\n      if (connector.id === \"endThumb\") {\n        connector.constraints = connector.constraints ^ ConnectorConstraints.Select; // Toggle select for 'endThumb' id connector\n      } else {\n        connector.constraints = connector.constraints & ~ConnectorConstraints.Select;\n      }\n    }\n    // Commit changes to the diagram\n    this.diagram.dataBind();\n  }\n}\n\n//Function used to enable dragging intractions in diagram\npublic draggableChange(args: { checked: any; }){\n  for (let i:number = 0; i < this.diagram.nodes.length; i++) {\n    let nodes = this.diagram.nodes[i];\n    if (args.checked) {\n         if(nodes.id ===\"ellipse\"){\n            nodes.constraints = NodeConstraints.Default & ~ NodeConstraints.Drag;\n        }\n        else{\n            nodes.constraints = nodes.constraints | NodeConstraints.Drag;\n        }\n    } \n    else {\n          nodes.constraints = nodes.constraints &~ NodeConstraints.Drag;\n    }\n    this.diagram.dataBind();\n}\n//Looping diagram connectors\nfor (let j : number = 0; j < this.diagram.connectors.length; j++) {\n  let connectors = this.diagram.connectors[j];\n    if (args.checked) {\n        connectors.constraints =  connectors.constraints | ConnectorConstraints.Drag;   \n    } else \n    {\n        connectors.constraints = connectors.constraints  &~ ConnectorConstraints.Drag;   \n    }\n    this.diagram.dataBind();\n}\n}\n// Define the selectionChange method for handling selection events\npublic selectionChange(args: ISelectionChangeEventArgs) {\n  // Check if the selection state is 'Changing'\n  if (args.state === 'Changing') {\n    // Handle addition type of selection change\n    if (args.type === 'Addition') {\n      // Check if the newly added item is 'endThumb'\n      if (args.newValue[0].id === \"endThumb\") {\n        // Adjust selected items constraints for 'endThumb' scenario\n        this.diagram.selectedItems.constraints =\n          (SelectorConstraints.All) &\n          ~(SelectorConstraints.ConnectorSourceThumb |\n            SelectorConstraints.ConnectorTargetThumb);\n\n        // Modify constraints for the 'endThumb' specific item\n        args.newValue[0].constraints =\n          (ConnectorConstraints.Default |\n            ConnectorConstraints.DragSegmentThumb) &\n          ~(ConnectorConstraints.Drag);\n      } else {\n        // Set default constraints for other selections\n        this.diagram.selectedItems.constraints = SelectorConstraints.All;\n      }\n    } else {\n      // Set default constraints for other types of selection changes\n      this.diagram.selectedItems.constraints = SelectorConstraints.All;\n    }\n  }\n\n  // Check if the selection state is 'Changed'\n  if (args.state === \"Changed\") {\n    // Handle selection change when newValue is a Node instance\n    if (args.newValue.length > 0 && args.newValue[0] instanceof Node) {\n      this.diagram.selectedItems = {\n        constraints: SelectorConstraints.All | SelectorConstraints.UserHandle,\n        userHandles: this.handles  // Assuming handles is defined somewhere\n      };\n    } else {\n      // Handle selection change for connectors or other cases\n      if (args.newValue.length > 0 && args.newValue[0].id !== \"endThumb\") {\n        this.diagram.selectedItems = {\n          constraints: SelectorConstraints.All & ~SelectorConstraints.UserHandle\n        };\n      } else {\n        this.diagram.selectedItems = {\n          constraints: SelectorConstraints.All & ~(\n            SelectorConstraints.UserHandle |\n            SelectorConstraints.ConnectorSourceThumb |\n            SelectorConstraints.ConnectorTargetThumb\n          )\n        };\n      }\n    }\n  }\n}\n\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<script src=\"script/diagram-common.ts\"></script>\n<style>\n    .e-symbolpalette {\n        display: block;\n    }\n    .diagram-constraints-property-tab .row {\n                margin-left: 0px;\n                margin-right: 0px;\n                padding-top: 8px;\n            }\n</style>\n<div class=\"col-lg-10 control-section\">\n            <div class=\"content-wrapper\" style=\"width:100%;background: white\">\n                <ejs-diagram #diagram id=\"diagram\" width=\"100%\" height=\"550px\" [getConnectorDefaults]='connectorDefaults' [getNodeDefaults]='nodeDefaults' [nodes]=\"nodes\" [connectors]=\"connectors\"  (created)=\"created($event)\" (selectionChange)=\"selectionChange($event)\" [getCustomTool]=\"getCustomTool\"\n                [selectedItems]=\"selectedItems\" [contextMenuSettings]=\"contextMenuSettings\">\n                </ejs-diagram>\n            </div>\n</div>\n            <div  style=\"float:left;width:120px\">\n                <div class=\"property-panel-header\">\n                    <span>Diagram Constraints</span>\n                </div>\n                <div class=\"row property-panel-content diagram-constraints-property-tab\">\n                    <div class=\"row\">\n                        <ejs-checkbox #checkbox label=\"Zooming\" [checked]=\"true\" (change)=\"zoomingChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\">\n                        <ejs-checkbox #checkbox label=\"Undo/Redo\" [checked]=\"true\" (change)=\"undoRedoChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\">\n                        <ejs-checkbox #checkbox label=\"Editing\" [checked]=\"true\" (change)=\"editingChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\">\n                        <ejs-checkbox #checkbox label=\"Context Menu\" [checked]=\"true\" (change)=\"contextMenuChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\">\n                        <ejs-checkbox #checkbox label=\"Selectable\" [checked]=\"true\" (change)=\"elementSelectableChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"row\">\n                        <ejs-checkbox #checkbox label=\"Draggable\" [checked]=\"true\" (change)=\"draggableChange($event)\"></ejs-checkbox>\n                    </div>\n                </div>\n            </div>","app.component.css":"\n\n#properties_Container{\n    float: left;\n    height: 600px;\n    margin-top: 30px;\n    }\n\n.row {\n    margin-left: 0px;\n    margin-right: 0px;\n}\n\n.row-header {\n    font-size: 13px;\n    font-weight: 500;\n}\n\n.col-xs-6 {\n    padding-left: 0px;\n    padding-right: 0px;\n}\n\n","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-diagrams\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-diagrams\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}