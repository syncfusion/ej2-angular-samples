{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { GridModule } from '@syncfusion/ej2-angular-grids';\n\nimport { CircularGaugeAllModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [   AppComponent ], imports: [ CircularGaugeAllModule, GridModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-md-8\">\n        <ejs-circulargauge (load)='load($event)' style='display:block;' id='range-container' #range=''>\n            <e-axes>\n                <e-axis minimum=0 radius='80%' maximum=120 startAngle=210 endAngle=150 [majorTicks]='majorTicks' [labelStyle]='labelStyle'\n                    [lineStyle]='lineStyle' [minorTicks]='minorTicks' [annotations]='annotaions'>\n                    <e-ranges>\n                        <e-range start=0 end=40 color='#30B32D'></e-range>\n                        <e-range start=40 end=80 color='#FFDD00'></e-range>\n                        <e-range start=80 end=120 color='#F03E3E'></e-range>\n                    </e-ranges>\n                    <e-pointers>\n                        <e-pointer value=65 radius='60%' color='#757575' pointerWidth=8 [needleTail]='tail' [cap]=\"pointerCap\">\n                        </e-pointer>\n                    </e-pointers>\n                </e-axis>\n            </e-axes>\n        </ejs-circulargauge>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%; margin:10px\">\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div> Select Range </div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"rangeSelect\" class=\"form-control\" style=\"width:90%\"> \n                                        <option value=\"0\" selected = true>Low</option>\n                                        <option value=\"1\">Medium</option>\n                                        <option value=\"2\">High</option>\n                                    </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='rangeStart'>Range Start <span> &nbsp;&nbsp;&nbsp;0</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"start\" value=\"0\" min=\"0\" max=\"120\" style=\"width:90%\" />\n                            </div>\n                        </td>\n                    </tr>\n\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='rangeEnd'>Range End <span> &nbsp;&nbsp;&nbsp;40</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"end\" value=\"40\" min=\"0\" max=\"120\" style=\"width:90%\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id=''>Range Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"rangeColor\" class=\"form-control\" style=\"width:90%\"> \n                                    <option value=\"#30B32D\" selected = true>#30B32D</option>\n                                    <option value=\"#FFDD00\">#FFDD00</option>\n                                    <option value=\"#F03E3E\">#F03E3E</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 20%\">\n                            <div id='enablePointer'>Range Font Color</div>\n                        </td>\n                        <td style=\"width: 40%;\">\n                            <div>\n                                <input type=\"checkbox\" id=\"enable\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='rangeStartWidth'>Start Width <span> &nbsp;&nbsp;&nbsp;10</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"startWidth\" value=\"10\" min=\"0\" max=\"30\" style=\"width:90%\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='rangeEndWidth'>End Width <span> &nbsp;&nbsp;&nbsp;10</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"endWidth\" value=\"10\" min=\"0\" max=\"30\" style=\"width:90%\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='roundedRadius'>Corner Radius <span> &nbsp;&nbsp;&nbsp;0</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"radius\" value=\"0\" min=\"0\" max=\"30\" step=\"5\" style=\"width:90%\" />\n                            </div>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- custom code start -->\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>\n<!-- custom code end -->","app.component.css":"","app.component.ts":"/**\n * Sample for Ranges\n */\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { CircularGaugeComponent, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-angular-circulargauge';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n\n    @ViewChild('range')\n    public circulargauge: CircularGaugeComponent;\n\n    public lineStyle: Object = {\n        width: 10, color: 'transparent'\n    };\n    //Initializing LabelStyle\n    public labelStyle: Object = {\n        position: 'Inside', useRangeColor: false,\n        font: { size: '12px', fontFamily: 'Roboto', fontStyle: 'Regular' }\n    };\n    // custom code start\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n    }\n    // custom code end\n    public majorTicks: Object = {\n        height: 10, offset: 5, color: '#9E9E9E'\n    };\n    public minorTicks: Object = {\n        height: 0\n    };\n    public tail: Object = {\n        length: '18%', color: '#757575'\n    };\n    public pointerCap: Object = {\n        radius: 7, color: '#757575'\n    };\n\n    public annotaions: Object = [{\n        content: '<div><span style=\"font-size:14px; color:#9E9E9E; font-family:Regular\">Speedometer</span></div>',\n        radius: '30%', angle: 0, zIndex:'1'\n    }, {\n        content: '<div><span style=\"font-size:24px; color:#424242; font-family:Regular\">65 MPH</span></div>',\n        radius: '40%', angle: 180, zIndex:'1'\n    }];\n\n    public colortObj: DropDownList;\n    public listObj: DropDownList;\n\n    ngOnInit(): void {\n        this.listObj = new DropDownList({\n            index: 0, width: 100,\n            change: () => {\n                let index: number = +this.listObj.value;\n                this.colortObj.value = this.circulargauge.axes[0].ranges[index].color;\n                (<HTMLInputElement>document.getElementById('endWidth')).value = this.circulargauge.axes[0].ranges[index].endWidth.toString();\n                document.getElementById('rangeEndWidth').innerHTML = 'End Width <span> &nbsp;&nbsp;&nbsp;' +\n                    this.circulargauge.axes[0].ranges[index].endWidth;\n                (<HTMLInputElement>document.getElementById('startWidth')).value = this.circulargauge.axes[0].ranges[index].startWidth.toString();\n                document.getElementById('rangeStartWidth').innerHTML = 'Start Width <span> &nbsp;&nbsp;&nbsp;' +\n                    this.circulargauge.axes[0].ranges[index].startWidth;\n                (<HTMLInputElement>document.getElementById('end')).value = this.circulargauge.axes[0].ranges[index].end.toString();\n                document.getElementById('rangeEnd').innerHTML = 'Range End <span> &nbsp;&nbsp;&nbsp;' +\n                    this.circulargauge.axes[0].ranges[index].end;\n                (<HTMLInputElement>document.getElementById('start')).value = this.circulargauge.axes[0].ranges[index].start.toString();\n                document.getElementById('rangeStart').innerHTML = 'Range Start <span> &nbsp;&nbsp;&nbsp;' +\n                    this.circulargauge.axes[0].ranges[index].start;\n                (<HTMLInputElement>document.getElementById('radius')).value = this.circulargauge.axes[0].ranges[index].roundedCornerRadius.toString();\n                document.getElementById('roundedRadius').innerHTML = 'Corner Radius <span> &nbsp;&nbsp;&nbsp;' +\n                    this.circulargauge.axes[0].ranges[index].roundedCornerRadius;\n            }\n        });\n        this.listObj.appendTo('#rangeSelect');\n\n        this.colortObj = new DropDownList({\n            index: 0, width: 100,\n            change: () => {\n                this.circulargauge.axes[0].ranges[+this.listObj.value].color = this.colortObj.value.toString();\n                this.circulargauge.axes[0].pointers[0].animation.enable = false; this.circulargauge.refresh();\n            }\n        });\n        this.colortObj.appendTo('#rangeColor');\n    }\n\n    ngAfterViewInit(): void {\n        document.getElementById('start').onpointermove = document.getElementById('start').ontouchmove =\n            document.getElementById('start').onchange = () => {\n                let index: number = +this.listObj.value;\n                let min: number = parseInt((<HTMLInputElement>document.getElementById('start')).value, 10);\n                document.getElementById('rangeStart').innerHTML = 'Range Start <span> &nbsp;&nbsp;&nbsp;' + min;\n                this.circulargauge.axes[0].ranges[index].start = min;\n                this.circulargauge.axes[0].pointers[0].animation.enable = false; this.circulargauge.refresh();\n            };\n\n        document.getElementById('end').onpointermove = document.getElementById('end').ontouchmove =\n            document.getElementById('end').onchange = () => {\n                let index: number = +this.listObj.value;\n                let max: number = parseInt((<HTMLInputElement>document.getElementById('end')).value, 10);\n                document.getElementById('rangeEnd').innerHTML = 'Range End <span> &nbsp;&nbsp;&nbsp;' + max;\n                this.circulargauge.axes[0].ranges[index].end = max;\n                this.circulargauge.axes[0].pointers[0].animation.enable = false; this.circulargauge.refresh();\n            };\n\n        document.getElementById('startWidth').onpointermove = document.getElementById('startWidth').ontouchmove =\n            document.getElementById('startWidth').onchange = () => {\n                let index: number = +this.listObj.value;\n                let startWidth: number = parseInt((<HTMLInputElement>document.getElementById('startWidth')).value, 10);\n                document.getElementById('rangeStartWidth').innerHTML = 'Start Width <span> &nbsp;&nbsp;&nbsp;' + startWidth;\n                this.circulargauge.axes[0].ranges[index].startWidth = startWidth;\n                this.circulargauge.axes[0].pointers[0].animation.enable = false; this.circulargauge.refresh();\n            };\n\n        document.getElementById('endWidth').onpointermove = document.getElementById('endWidth').ontouchmove =\n            document.getElementById('endWidth').onchange = () => {\n                let index: number = +this.listObj.value;\n                let endWidth: number = parseInt((<HTMLInputElement>document.getElementById('endWidth')).value, 10);\n                document.getElementById('rangeEndWidth').innerHTML = 'End Width <span> &nbsp;&nbsp;&nbsp;' + endWidth;\n                this.circulargauge.axes[0].ranges[index].endWidth = endWidth;\n                this.circulargauge.axes[0].pointers[0].animation.enable = false; this.circulargauge.refresh();\n            };\n\n        document.getElementById('radius').onpointermove = document.getElementById('radius').ontouchmove =\n            document.getElementById('radius').onchange = () => {\n                let index: number = +this.listObj.value;\n                let radius: number = parseInt((<HTMLInputElement>document.getElementById('radius')).value, 10);\n                document.getElementById('roundedRadius').innerHTML = 'Corner Radius <span> &nbsp;&nbsp;&nbsp;' + radius;\n                this.circulargauge.axes[0].ranges[index].roundedCornerRadius = radius;\n                this.circulargauge.axes[0].pointers[0].animation.enable = false; this.circulargauge.refresh();\n            };\n\n        document.getElementById('enable').onchange = () => {\n            let useRangeColor: boolean = (<HTMLInputElement>document.getElementById('enable')).checked;\n            this.circulargauge.axes[0].labelStyle.useRangeColor = useRangeColor;\n            this.circulargauge.axes[0].majorTicks.useRangeColor = useRangeColor;\n            this.circulargauge.axes[0].minorTicks.useRangeColor = useRangeColor;\n            this.circulargauge.axes[0].pointers[0].animation.enable = false; this.circulargauge.refresh();\n        };\n    }\n    constructor() {\n        //\n    };\n}"}