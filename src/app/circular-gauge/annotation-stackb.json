{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { GridModule } from '@syncfusion/ej2-angular-grids';\n\nimport { CircularGaugeAllModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [   AppComponent ], imports: [ CircularGaugeAllModule, GridModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <ejs-circulargauge id=\"clock-container\" #gauge1 style='display:block;' centerX='45%' (load)='load($event)' (loaded)='loaded($event)'\n        (resized)='resize($event)'>\n        <e-axes>\n            <e-axis [radius]='annotationRadius' startAngle=0 endAngle=0 minimum=0 maximum=12 [majorTicks]='majorTicks'\n                [minorTicks]='minorTicks' [lineStyle]='lineStyle' [labelStyle]='labelStyle'>\n                <e-ranges>\n                    <e-range start=0 end=3 color='rgba(128,128,128)'>\n                    </e-range>\n                    <e-range start=3 end=12 color='rgba(192,192,192)'>\n                    </e-range>\n                </e-ranges>\n                <e-annotations>\n                    <e-annotation angle=270 radius='50%' zIndex='1' content='<div id=\"minutes\" style=\"width:75px;height:75px;\"></div>'>\n                    </e-annotation>\n                    <e-annotation angle=180 radius='50%' zIndex='1' content='<div id=\"seconds\" style=\"width:75px;height:75px;\"></div>'>\n                    </e-annotation>\n                    <e-annotation angle=90 radius='40%' zIndex='1' content='<div id=\"hr\" style=\"background-color:rgb(128,128,128); color:white;font-size:12px;\">11:11 AM</div>'>\n                    </e-annotation>\n                    <e-annotation angle=360 radius='50%' zIndex='1' content='<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'>\n                    </e-annotation>\n                </e-annotations>\n                <e-pointers>\n                    <e-pointer radius='40%' pointerWidth=5  [border]='border' [animation]='animation'\n                        [cap]='cap' [needleTail]='needleTail'>\n                    </e-pointer>\n                    <e-pointer radius='60%' pointerWidth=5  [border]='border' [animation]='animation'\n                        [cap]='cap' [needleTail]='needleTail'>\n                    </e-pointer>\n                    <e-pointer radius='70%' pointerWidth=1  [animation]='animation1' [cap]='cap1'\n                        [border]=\"border1\" [needleTail]='needleTail1'>\n                    </e-pointer>\n                </e-pointers>\n            </e-axis>\n        </e-axes>\n    </ejs-circulargauge>\n</div>\n<!-- custom code start -->\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>\n<!-- custom code end -->","app.component.css":"","app.component.ts":"/**\n * Sample for annotation\n */\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { CircularGaugeComponent, CircularGauge, Pointer, GaugeTheme } from '@syncfusion/ej2-angular-circulargauge';\nimport { IAnnotationRenderEventArgs, ILoadedEventArgs, IResizeEventArgs } from '@syncfusion/ej2-circulargauge';\nimport { AnnotationDataSerive } from './../../../../src/app/circular-gauge/annotation.service';\nimport { Browser } from '@syncfusion/ej2-base';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n\n    @ViewChild('gauge1')\n    public circularGauge: CircularGaugeComponent;\n    public tooltipInterval: number;\n\n    public clockInterval: number;\n    //Initializing LabelStyle\n    public labelStyle: Object = {\n        hiddenLabel: 'First',\n        autoAngle: false\n    };\n    public pointerWidth: number = 5;\n    public angle1: number = 270;\n    public angle2: number = 180;\n    public angle3: number = 90;\n    public angle4: number = 360;\n    public startAngle: number = 0;\n    public endAngle: number = 0;\n    public minimum: number = 0;\n    public maximum: number = 12;\n    public start: number = 0;\n    public end: number = 3;\n    public width: number = 10;\n    //Initializing majorTicks\n    public majorTicks: Object = {\n        width: 2, height: 14, interval: 1\n    };\n    public annotationRadius: string = Browser.isDevice ? '90%' : '75%';\n    public minorTicks: Object = {\n        height: 4, width: 1, interval: 0.2\n    };\n    public border: Object = { width: 0 };\n    public cap: Object = {\n        radius: 0,\n        border: { width: 0 }\n    };\n    public needleTail: Object = {\n        length: '0%'\n    };\n    public animation: Object = {\n        enable: false\n    };\n    public lineStyle: Object = { width: 0 };\n    public cap1: Object = {\n        radius: 4,\n        border: {\n            width: 2\n        }\n    };\n    public border1: Object = {\n        width: 2\n    };\n    public needleTail1: Object = {\n        length: '20%',\n        border: {\n            width: 2\n        }\n    };\n    public animation1: Object = {\n        enable: false,\n        duration: 500\n    };\n    public resize(args: IResizeEventArgs): void {\n        window.location.reload();\n    }\n    // custom code start\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n    }\n    // custom code end\n    public loaded(args: ILoadedEventArgs): void {\n        let intervalExecute: boolean = true;\n        let subGauge1: CircularGauge = new CircularGauge(AnnotationDataSerive.prototype.GetSubGauge1().gauge1);\n        subGauge1.appendTo('#minutes');\n        let subGauge2: CircularGauge = new CircularGauge(AnnotationDataSerive.prototype.GetSubGauge1().gauge2);\n        subGauge2.appendTo('#seconds');\n\n        if (intervalExecute) {\n            updateTime(false, this.circularGauge);\n            this.clockInterval = setInterval(\n                (): void => {\n                    updateTime(true, this.circularGauge, this.clockInterval);\n                },\n                1000\n            );\n            intervalExecute = false;\n        }\n        function updateSubGauge1(): void {\n            subGauge1 = new CircularGauge(AnnotationDataSerive.prototype.GetSubGauge1().gauge1);\n            subGauge1.appendTo('#minutes');\n        }\n        function updateSubGauge2(): void {\n            subGauge2 = new CircularGauge(AnnotationDataSerive.prototype.GetSubGauge1().gauge2);\n            subGauge2.appendTo('#seconds');\n        }\n        function updateTime(enable: boolean, indianTime: CircularGauge, interval?: number): void {\n            if (document.getElementById('clock-container') && document.getElementsByClassName('e-circulargauge')) {\n                getTime('+5.5', indianTime, enable);\n                if (document.getElementById('minutes').childElementCount) {\n                    getTime('+5.5', subGauge1, enable, true);\n                } else {\n                    updateSubGauge1();\n                    getTime('+5.5', subGauge1, enable, true);\n                }\n                if (document.getElementById('seconds').childElementCount) {\n                    getTime('+5.5', subGauge2, enable, true);\n                } else {\n                    updateSubGauge2();\n                    getTime('+5.5', subGauge2, enable, true);\n                }\n            } else {\n                clearInterval(interval);\n            }\n        }\n        function calcTime(offset: string): Date {\n            let date: Date = new Date();\n            let localTime: number = date.getTime();\n            let localOffset: number = date.getTimezoneOffset() * 60000;\n            let utc: number = localTime + localOffset;\n            let curretDate: Date = new Date(utc + (3600000 * (+offset)));\n            return curretDate;\n        }\n        function getTime(offset: string, gauge: CircularGauge, enable: boolean, subGauge?: boolean): void {\n            let returnTime: Date = calcTime(offset);\n            let seconds: number = returnTime.getSeconds() * 12 / 60; seconds = seconds === 0 ? 12 : seconds;\n            if (!subGauge) {\n                gauge.axes[0].pointers[2].animation.enable = enable;\n                (<Pointer>gauge.axes[0].pointers[2]).currentValue = seconds === 0.2 ? 0 : (<Pointer>gauge.axes[0].pointers[2]).currentValue;\n            } else {\n                (<Pointer>gauge.axes[0].pointers[0]).currentValue = seconds === 0.2 ? 0 : (<Pointer>gauge.axes[0].pointers[0]).currentValue;\n                gauge.axes[0].pointers[0].animation.enable = (gauge.element.id === 'seconds' && enable);\n            }\n            let hour: number = (returnTime.getHours() + returnTime.getMinutes() / 60) % 12;\n            let minutes: number = returnTime.getMinutes() * 12 / 60 + returnTime.getSeconds() * 12 / 3600;\n            let content: string;\n            let hourValue: number;\n            if (subGauge) {\n                if (gauge.element.id === 'minutes') {\n                    content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getMinutes()) + ' M</div>';\n                    gauge.setPointerValue(0, 0, minutes); gauge.setAnnotationValue(0, 3, content);\n                } else {\n                    gauge.setPointerValue(0, 0, seconds);\n                    content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getSeconds()) + ' S</div>';\n                    gauge.setAnnotationValue(0, 3, content);\n                }\n            } else {\n                hourValue = (Math.floor(returnTime.getHours()) % 12);\n                gauge.setPointerValue(0, 0, hour); gauge.setPointerValue(0, 1, minutes); gauge.setPointerValue(0, 2, seconds);\n                content = '<div id=\"hr\" style=\"background-color:rgb(128,128,128); color:white;font-size:12px;padding:4px;\">' +\n                    (hourValue === 0 ? 12 : hourValue) + ':' + Math.floor(returnTime.getMinutes()) +\n                    (returnTime.getHours() >= 12 ? ' PM' : ' AM') + '</div>';\n                gauge.setAnnotationValue(0, 2, content); let date: Date = new Date();\n                content = '<div id=\"tm\" style=\"font-size:10px;\">' + date.getDate() + '-' +\n                    (date.getMonth() + 1) + '-' + date.getFullYear() + '</div>';\n                gauge.setAnnotationValue(0, 3, content);\n            }\n        }\n    }\n    constructor() {\n        // code\n    };\n}"}