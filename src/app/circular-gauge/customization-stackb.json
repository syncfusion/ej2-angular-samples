{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { GridModule } from '@syncfusion/ej2-angular-grids';\n\nimport { CircularGaugeAllModule } from '@syncfusion/ej2-angular-circulargauge';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [   AppComponent ], imports: [ CircularGaugeAllModule, GridModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-md-8\">\n        <ejs-circulargauge #customization=''  (load)='load($event)' id='customization-container' style='display:block;' centerY='70%'>\n            <e-axes>\n                <e-axis startAngle=300 endAngle=60 radius='80%' minimum=999 maximum=2000 [majorTicks]=\"majorTicks\" [minorTicks]=\"minorTicks\"\n                    [labelStyle]=\"labelStyle\" [pointers]=\"pointers\" [lineStyle]=\"lineStyle\">\n                    <e-annotations>\n                        <e-annotation content='<div style=\"color:#666666;font-size:35px;\">1800</div>' angle=0 radius='110%' zIndex='1'>\n                        </e-annotation>\n                    </e-annotations>\n                    <e-ranges>\n                        <e-range start=1000 end=2000 radius='90%' [startWidth]=\"rangeWidth\" [endWidth]=\"rangeWidth\" color='#E0E0E0'></e-range>\n                    </e-ranges>\n                </e-axis>\n            </e-axes>\n        </ejs-circulargauge>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <img id='random' src=\"./assets/circular-gauge/images/gauge-one.png\" style=\"margin-left:25px;margin-top:10px;\" />\n                            <div id=\"random_line\" style=\"display:block;left: 0px;background: #ff4081;padding-top: 0px;height: 2px !important;width: 85px;margin: 2px 2px 2px 17px;\"></div>\n                        </td>\n                        <td>\n                            <img id='usage' src=\"./assets/circular-gauge/images/gauge-two.png\" style=\"margin-left:25px;margin-top:10px;\" />\n                            <div id=\"usage_line\" style=\"display:none;left: 0px;background: #ff4081;padding-top: 0px;height: 2px !important;width: 85px;margin: 2px 2px 2px 17px;\"></div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='currentPointerValue'>&nbsp;Current Value\n                                <span> &nbsp;&nbsp;&nbsp;1800</span>\n                            </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"currentValue\" value=\"1800\" min=\"1000\" max=\"2000\" style=\"width:90%\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='rangebarColor'>&nbsp;RangeBar Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"barColor\" class=\"form-control\" style=\"width:90%\">\n                                    <option value=\"#FFDD00\">#FFDD00</option>\n                                    <option value=\"#00bdae\">#00bdae</option>\n                                    <option value=\"#FF2680\">#FF2680</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='range'>&nbsp;Range Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"rangeColor\" class=\"form-control\" style=\"width:90%\">\n                                    <option value=\"#E0E0E0\">#E0E0E0</option>\n                                    <option value=\"#7bb4eb\">#7bb4eb</option>\n                                    <option value=\"#ea7a57\">#ea7a57</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='pointColor'>&nbsp;Pointer Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"pointerColor\" class=\"form-control\" style=\"width:90%\">\n                                    <option value=\"#424242\">#424242</option>\n                                    <option value=\"#6f6fe2\">#6f6fe2</option>\n                                    <option value=\"#9e480e\">#9e480e</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- custom code start -->\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n    #random {\n        border: 0px !important;\n    }\n    #usage {\n        border: 0px !important;\n    }\n</style>\n<!-- custom code end -->","app.component.css":"","app.component.ts":"/**\n * Sample for customization of gauge\n */\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { CircularGaugeComponent, ILoadedEventArgs, GaugeTheme } from '@syncfusion/ej2-angular-circulargauge'; \nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { DynamicDataSerive } from './../../../../src/app/circular-gauge/customization.service';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n    @ViewChild('customization')\n    public gauge1: CircularGaugeComponent;\n    public usageGauge: CircularGauge = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge1);\n    public randomGauge: CircularGauge = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge2);\n    public isUsage: boolean = false;\n    public isClicked: boolean = true;\n    //Initializing majorTicks\n    public majorTicks: Object = {\n        width: 0\n    }\n    public lineStyle: Object = { width: 0 }\n    public minorTicks: Object = {\n        width: 0\n    }\n    public labelStyle: Object = {\n        font: { size: '0px' }\n    }\n    // custom code start\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1));\n    }\n    // custom code end\n    public rangeWidth: number = 30;\n    //Initializing Pointers\n    public pointers: Object = [{\n        type: 'RangeBar',\n        value: 1800, radius: '90%',\n        color: '#FFDD00', animation: { duration: 0 },\n        pointerWidth: 30\n    }, {\n        radius: '90%', value: 1800,\n        color: '#424242',\n        animation: { duration: 0 },\n        pointerWidth: 9,\n        cap: { radius: 10, color: '#424242', border: { width: 0 } }\n    }];\n    public barColor: DropDownList; public rangeColor: DropDownList; public pointerColor: DropDownList;\n    ngOnInit(): void {\n        this.barColor = new DropDownList({\n            index: 0,\n            width: 100,\n            change: () => {\n                let barColor: string = this.barColor.value.toString();\n                if (!this.isClicked) {\n                    if (this.isUsage) {\n                        this.usageGauge.axes[0].pointers[0].color = barColor;\n                        this.usageGauge.refresh();\n                    } else {\n                        this.randomGauge.axes[0].pointers[0].color = barColor;\n                        this.randomGauge.refresh();\n                    }\n                } else {\n                    this.gauge1.axes[0].pointers[0].color = barColor;\n                    this.gauge1.refresh();\n                    this.randomGauge.axes[0].pointers[0].color = barColor;\n                }\n            }\n        });\n        this.barColor.appendTo('#barColor');\n        this.rangeColor = new DropDownList({\n            index: 0,\n            width: 100,\n            change: () => {\n                let barColor: string = this.rangeColor.value.toString();\n                if (!this.isClicked) {\n                    if (this.isUsage) {\n                        this.usageGauge.axes[0].ranges[0].color = barColor;\n                        this.usageGauge.refresh();\n                    } else {\n                        this.randomGauge.axes[0].ranges[0].color = barColor;\n                        this.randomGauge.refresh();\n                    }\n                } else {\n                    this.gauge1.axes[0].ranges[0].color = barColor;\n                    this.gauge1.refresh();\n                    this.randomGauge.axes[0].ranges[0].color = barColor;\n                }\n            }\n        });\n        this.rangeColor.appendTo('#rangeColor');\n        this.pointerColor = new DropDownList({\n            index: 0,\n            width: 100,\n            change: () => {\n                let barColor: string = this.pointerColor.value.toString();\n                if (!this.isClicked) {\n                    if (!this.isUsage) {\n                        this.randomGauge.axes[0].pointers[1].color = barColor;\n                        this.randomGauge.axes[0].pointers[1].cap.border.color = barColor;\n                        this.randomGauge.axes[0].pointers[1].cap.color = barColor;\n                        this.randomGauge.refresh();\n                    }\n                } else {\n                    this.gauge1.axes[0].pointers[1].color = barColor;\n                    this.gauge1.axes[0].pointers[1].cap.border.color = barColor;\n                    this.gauge1.axes[0].pointers[1].cap.color = barColor;\n                    this.gauge1.refresh();\n                    this.randomGauge.axes[0].pointers[1].color = barColor;\n                    this.randomGauge.axes[0].pointers[1].cap.border.color = barColor;\n                    this.randomGauge.axes[0].pointers[1].cap.color = barColor;\n                }\n            }\n        });\n        this.pointerColor.appendTo('#pointerColor');\n    }\n    ngAfterViewInit(): void {\n        let selectedTheme: string = location.hash.split('/')[1]; let color: string;\n        if (selectedTheme === 'bootstrap') {\n            color = '#a16ee5';\n        } else if (selectedTheme === 'fabric') {\n            color = '#1783FF';\n        } else {\n            color = '#ff4081';\n        }\n        let exisLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage_line');\n        let currentLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random_line');\n        exisLine.style.background = color; currentLine.style.background = color;\n\n        document.getElementById('usage').onclick = () => {\n            if (this.isClicked) {\n                this.gauge1.destroy();\n                this.isClicked = false;\n            } else {\n                this.randomGauge.destroy();\n            }\n            this.usageGauge.appendTo('#customization-container');\n            this.isUsage = true;\n            let element: HTMLInputElement = <HTMLInputElement>document.getElementById('currentValue');\n            let pointElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointColor');\n            element.min = '0.5';\n            element.max = '100';\n            element.value = this.usageGauge.axes[0].pointers[0].value.toString();\n            document.getElementById('currentPointerValue').innerHTML = ' Current Value <span> &nbsp;&nbsp;&nbsp;'\n                + this.usageGauge.axes[0].pointers[0].value + '</span>';\n            this.barColor.value = this.usageGauge.axes[0].pointers[0].color;\n            this.rangeColor.value = this.usageGauge.axes[0].ranges[0].color;\n            this.pointerColor.enabled = false;\n            pointElement.className = 'e-disabled';\n            let currentElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage');\n            let existElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random');\n            currentElement.style.border = '2px solid #E0E0E0';\n            existElement.style.border = '';\n            let currentLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage_line');\n            let exisLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random_line');\n            currentLine.style.display = 'block';\n            exisLine.style.display = 'none';\n        };\n        document.getElementById('random').onclick = () => {\n            if (this.isClicked) {\n                this.gauge1.destroy();\n                this.isClicked = false;\n            } else {\n                this.usageGauge.destroy();\n            }\n            this.randomGauge.appendTo('#customization-container');\n            this.isUsage = false;\n            let currentElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random');\n            let existElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage');\n            currentElement.style.border = '2px solid #E0E0E0';\n            existElement.style.border = '';\n            let element: HTMLInputElement = <HTMLInputElement>document.getElementById('currentValue');\n            let pointElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointColor');\n            pointElement.className = 'e-enabled';\n            this.pointerColor.enabled = true;\n            element.min = '1000';\n            element.max = '2000';\n            element.value = this.randomGauge.axes[0].pointers[0].value.toString();\n            document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' +\n                this.randomGauge.axes[0].pointers[0].value + '</span>';\n            this.barColor.value = this.randomGauge.axes[0].pointers[0].color;\n            this.rangeColor.value = this.randomGauge.axes[0].ranges[0].color;\n            this.pointerColor.value = this.randomGauge.axes[0].pointers[1].color;\n            let exisLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage_line');\n            let currentLine: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random_line');\n            currentLine.style.display = 'block'; exisLine.style.display = 'none';\n        };\n\n        document.getElementById('currentValue').onpointermove = document.getElementById('currentValue').ontouchmove =\n            document.getElementById('currentValue').onchange = () => {\n                let value: number = +(<HTMLInputElement>document.getElementById('currentValue')).value;\n                if (!this.isClicked) {\n                    if (this.isUsage) {\n                        this.usageGauge.setPointerValue(0, 0, value);\n                        this.usageGauge.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + 'GB' + '</div>');\n                    } else {\n                        this.randomGauge.setPointerValue(0, 0, value);\n                        this.randomGauge.setPointerValue(0, 1, value);\n                        this.randomGauge.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>');\n                    }\n                } else {\n                    this.gauge1.setPointerValue(0, 0, value);\n                    this.gauge1.setPointerValue(0, 1, value);\n                    this.gauge1.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>');\n                    this.randomGauge.axes[0].pointers[0].value = value;\n                    this.randomGauge.axes[0].pointers[1].value = value;\n                    this.randomGauge.axes[0].annotations[0].content = '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>';\n                }\n                document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' + value + '</span>';\n            };\n    }\n    constructor() {\n        // code\n    };\n\n\n\n}\n\n\n\n"}