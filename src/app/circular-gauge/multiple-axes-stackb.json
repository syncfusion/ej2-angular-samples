{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { CircularGaugeComponent, ILoadedEventArgs, GaugeTheme, CircularGaugeModule } from '@syncfusion/ej2-angular-circulargauge';\nimport { GaugeDirection, isCompleteAngle } from '@syncfusion/ej2-circulargauge';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [CircularGaugeModule]\n})\n\nexport class AppComponent {\n\n    @ViewChild('axes')\n    public circulargauge: CircularGaugeComponent;\n\n    public axisIndex: number = 0;\n    public axis: DropDownList;\n    public direction: DropDownList;\n    public markerHeight: number = 15;\n    public markerWidth: number = 15;\n\n    public lineStyleAxisOne: Object = {\n        width: 1.5\n    };\n\n    public majorTickAxisOne: Object = {\n        position: 'Inside',\n        width: 2,\n        height: 10\n    };\n\n    public minorTickAxisOne: Object = {\n        position: 'Inside',\n        width: 2,\n        height: 5\n    };\n\n    public labelStyleAxisOne: Object = {\n        position: 'Inside',\n        autoAngle: true,\n        font: {\n            fontFamily: 'inherit'\n        }\n    };\n\n    public cap: Object = {\n        color: 'white',\n        radius: 0,\n        border: { width: 0 }\n    };\n\n    public lineStyleAxisTwo: Object = {\n        width: 1.5,\n        color: '#E84011'\n    };\n\n    public labelStyleAxisTwo: Object = {\n        position: 'Outside',\n        autoAngle: true,\n        offset: 5,\n        font: { fontFamily: 'inherit' }\n    };\n\n    public majorTickAxisTwo: Object = {\n        position: 'Outside',\n        width: 2,\n        height: 10,\n        color: '#E84011'\n    };\n\n    public minorTickAxisTwo: Object = {\n        position: 'Outside',\n        width: 2,\n        height: 5,\n        color: '#E84011'\n    };\n\n    public load(args: ILoadedEventArgs): void {\n        /* custom code start */\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.gauge.theme = <GaugeTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n        /* custom code end */\n    }\n\n    ngOnInit(): void {\n        this.axis = new DropDownList({\n            index: 0, width: '110%',\n            change: () => {\n                this.axisIndex = +this.axis.value;\n                this.direction.value = this.circulargauge.axes[this.axisIndex].direction;\n                let startAngle: number = this.circulargauge.axes[this.axisIndex].startAngle;\n                let endAngle: number = this.circulargauge.axes[this.axisIndex].endAngle;\n                document.getElementById('start').innerHTML = '' + startAngle;\n                document.getElementById('end').innerHTML = '' + endAngle;\n                (<HTMLInputElement>document.getElementById('startAngle')).value = startAngle.toString();\n                (<HTMLInputElement>document.getElementById('endAngle')).value = endAngle.toString();\n            }\n        });\n        this.axis.appendTo('#axisIndex');\n\n        this.direction = new DropDownList({\n            index: 0, width: '110%',\n            change: () => {\n                this.circulargauge.axes[this.axisIndex].direction = <GaugeDirection>this.direction.value.toString();\n                this.circulargauge.axes[0].pointers[0].animation.enable = false;\n                this.circulargauge.axes[1].pointers[0].animation.enable = false;\n                this.circulargauge.refresh();\n            }\n        });\n        this.direction.appendTo('#axisDirection');\n    }\n\n    ngAfterViewInit(): void {\n        document.getElementById('axisIndex').onchange = () => {\n            this.axisIndex = parseInt((<HTMLInputElement>document.getElementById('axisIndex')).value, 10);\n            let startAngle: number = this.circulargauge.axes[this.axisIndex].startAngle;\n            let endAngle: number = this.circulargauge.axes[this.axisIndex].endAngle;\n            document.getElementById('start').innerHTML = '' + startAngle;\n            document.getElementById('end').innerHTML = '' + endAngle;\n            (<HTMLInputElement>document.getElementById('axisDirection')).value = this.circulargauge.axes[this.axisIndex].direction;\n            (<HTMLInputElement>document.getElementById('startAngle')).value = startAngle.toString();\n            (<HTMLInputElement>document.getElementById('endAngle')).value = endAngle.toString();\n        };\n\n        document.getElementById('axisDirection').onchange = () => {\n            this.circulargauge.axes[this.axisIndex].direction = <GaugeDirection>(<HTMLInputElement>document.getElementById('axisDirection')).value;\n            this.circulargauge.axes[0].pointers[0].animation.enable = false;\n            this.circulargauge.axes[1].pointers[0].animation.enable = false;\n            this.circulargauge.refresh();\n        };\n\n        document.getElementById('startAngle').onchange = () => {\n            let value: number = parseInt((<HTMLInputElement>document.getElementById('startAngle')).value, 10);\n            this.circulargauge.axes[0].pointers[0].animation.enable = false;\n            this.circulargauge.axes[1].pointers[0].animation.enable = false;\n            this.circulargauge.axes[this.axisIndex].startAngle = value;\n            this.circulargauge.axes[this.axisIndex].labelStyle.hiddenLabel =\n                isCompleteAngle(this.circulargauge.axes[this.axisIndex].startAngle, this.circulargauge.axes[this.axisIndex].endAngle) ?\n                    'First' : 'None';\n            document.getElementById('start').innerHTML = '' + value;\n            this.circulargauge.refresh();\n        };\n\n        document.getElementById('endAngle').onchange = () => {\n            let value: number = parseInt((<HTMLInputElement>document.getElementById('endAngle')).value, 10);\n            this.circulargauge.axes[0].pointers[0].animation.enable = false;\n            this.circulargauge.axes[1].pointers[0].animation.enable = false;\n            this.circulargauge.axes[this.axisIndex].endAngle = value;\n            this.circulargauge.axes[this.axisIndex].labelStyle.hiddenLabel =\n                isCompleteAngle(this.circulargauge.axes[this.axisIndex].startAngle, this.circulargauge.axes[this.axisIndex].endAngle) ?\n                    'First' : 'None';\n            document.getElementById('end').innerHTML = '' + value;\n            this.circulargauge.refresh();\n        };\n    }\n\n    constructor() {\n        // code\n    };\n}\n\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<main>\n    <div class=\"control-section\">\n        <div class=\"col-md-8\">\n            <ejs-circulargauge (load)='load($event)' #axes='' style='display:block;' background='transparent'\n                id=\"axis-container\" #multipleAxes style='display:block;'>\n                <e-axes>\n                    <e-axis radius='95%' [lineStyle]='lineStyleAxisOne' [labelStyle]='labelStyleAxisOne'\n                        [majorTicks]='majorTickAxisOne' [minorTicks]='minorTickAxisOne' minimum=0 maximum=160 startAngle=220\n                        endAngle=140>\n                        <e-pointers>\n                            <e-pointer value=80 radius='100%' [markerHeight]='markerHeight' [markerWidth]='markerWidth'\n                                type='Marker' markerShape='Triangle'>\n                            </e-pointer>\n                        </e-pointers>\n                    </e-axis>\n                    <e-axis radius='95%' [lineStyle]='lineStyleAxisTwo' [labelStyle]='labelStyleAxisTwo'\n                        [majorTicks]='majorTickAxisTwo' [minorTicks]='minorTickAxisTwo' minimum=0 maximum=240 startAngle=220\n                        endAngle=140>\n                        <e-pointers>\n                            <e-pointer value=120 radius='100%' color=\"#E84011\" [markerHeight]='markerHeight'\n                                [markerWidth]='markerWidth' type='Marker' markerShape='InvertedTriangle'>\n                            </e-pointer>\n                        </e-pointers>\n                    </e-axis>\n                </e-axes>\n            </ejs-circulargauge>\n        </div>\n        <div class=\"col-md-4 property-section\">\n            <div class=\"property-panel-section\">\n                <div class=\"property-panel-header\">Properties</div>\n                <div class=\"property-panel-content\">\n                    <table title=\"Properties\" class=\"property-panel-table\" role=\"none\"\n                        style=\"width: 100%; margin-left: -10px;\">\n                        <colgroup>\n                            <col span=\"1\" style=\"width: 50%;\">\n                            <col span=\"1\" style=\"width: 50%;\">\n                        </colgroup>\n                        <tr style=\"height: 50px\">\n                            <td>\n                                <div style=\"font-size:14px\"> Axis </div>\n                            </td>\n                            <td>\n                                <div>\n                                    <select id=\"axisIndex\" class=\"form-control\" style=\"width:90%\">\n                                        <option value=\"0\" selected=true>Axis 1</option>\n                                        <option value=\"1\">Axis 2</option>\n                                    </select>\n                                </div>\n                            </td>\n                        </tr>\n                    </table>\n                    <table title=\"Properties\" class=\"property-panel-table\" role=\"none\"\n                        style=\"width: 100%; margin-left: -10px;\">\n                        <colgroup>\n                            <col span=\"1\" style=\"width: 50%;\">\n                            <col span=\"1\" style=\"width: 50%;\">\n                        </colgroup>\n                        <tr style=\"height: 50px\">\n                            <td>\n                                <div style=\"font-size:14px\"> Direction </div>\n                            </td>\n                            <td>\n                                <div>\n                                    <select id=\"axisDirection\" class=\"form-control\" style=\"width:90%\">\n                                        <option value=\"ClockWise\" selected=true>Clockwise</option>\n                                        <option value=\"AntiClockWise\">Anti-clockwise</option>\n                                    </select>\n                                </div>\n                            </td>\n                        </tr>\n                    </table>\n                    <table title=\"Properties\" class=\"property-panel-table\" role=\"none\"\n                        style=\"width: 100%; margin-left: -10px;\">\n                        <colgroup>\n                            <col span=\"1\" style=\"width: 45%;\">\n                            <col span=\"1\" style=\"width: 35%;\">\n                            <col span=\"1\" style=\"width: 20%;\">\n                        </colgroup>\n                        <tr style=\"height: 50px\">\n                            <td>\n                                <div style=\"font-size:14px\">Start Angle</div>\n                            </td>\n                            <td style=\"width: 40%\">\n                                <div>\n                                    <input type=\"range\" id=\"startAngle\" min=\"0\" max=\"360\" value=\"220\"  />\n                                </div>\n                            </td>\n                            <td style=\"text-align: center; padding-top: 10px; padding-left: 3%\">\n                                <span id='start'>220</span>\n                            </td>\n                        </tr>\n                    </table>\n                    <table title=\"Properties\" class=\"property-panel-table\" role=\"none\"\n                        style=\"width: 100%; margin-left: -10px;\">\n                        <colgroup>\n                            <col span=\"1\" style=\"width: 45%;\">\n                            <col span=\"1\" style=\"width: 35%;\">\n                            <col span=\"1\" style=\"width: 20%;\">\n                        </colgroup>\n                        <tr style=\"height: 50px\">\n                            <td>\n                                <div style=\"font-size:14px\">End Angle</div>\n                            </td>\n                            <td style=\"width: 40%\">\n                                <div>\n                                    <input type=\"range\" id=\"endAngle\" min=\"0\" max=\"360\" value=\"140\" />\n                                </div>\n                            </td>\n                            <td style=\"text-align: center; padding-top: 10px; padding-left: 3%\">\n                                <span id='end'>140</span>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n    <section id=\"action-description\" aria-label=\"Description of Circular Gauge sample\">\n        <p>\n            This sample illustrates the multiple axes in the circular gauge as well as the options for changing the\n            direction, start, and end angle of an axis.\n        </p>\n    </section>\n    <section id=\"description\" aria-label=\"Description of the Circular Gauge features demonstrated in this sample\">\n        <p>\n            In this example, you can see how to render and configure multiple axes in the circular gauge. To render multiple\n            axes in the circular gauge, use the axes collection, and each axis can be customized with pointers and ticks.\n        </p>\n        <p>\n            More information on the multiple axes can be found in this <a target=\"_blank\"\n                href=\"https://ej2.syncfusion.com/angular/documentation/circular-gauge/gauge-axes/#multiple-axes\">documentation\n                section</a>.\n        </p>\n    </section>\n    <!-- custom code start -->\n    <style>\n        .control-section {\n            min-height: 450px;\n        }\n    </style>\n    <!-- custom code end -->\n</main>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-circulargauge\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-circulargauge\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}