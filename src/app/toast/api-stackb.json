{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, HostListener } from '@angular/core';\nimport { createElement, Effect, EmitType } from '@syncfusion/ej2-base';\nimport { ToastComponent, ToastBeforeOpenArgs, ToastCloseArgs, ToastPositionModel, ToastAnimationSettingsModel, ProgressDirectionType, ToastModule } from '@syncfusion/ej2-angular-notifications';\nimport { DropDownListComponent, FieldSettingsModel, DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { ChangeEventArgs } from '@syncfusion/ej2-buttons';\nimport { ButtonComponent, CheckBoxModule, ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\n\n/**\n * Sample for Animation and Advanced APIs in toast\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ ToastModule, CheckBoxModule, DropDownListModule, ButtonModule, ]\n})\nexport class AppComponent {\n\n    @ViewChild('toastApi')\n    private toastObj: ToastComponent;\n\n    @ViewChild('ShowEasing')\n    private dropDownListShowEase: DropDownListComponent;\n\n    @ViewChild('ProgressDirection')\n    private dropDownListProgressDirection: DropDownListComponent;\n\n    @ViewChild('HideEasing')\n    private dropDownListHideEase: DropDownListComponent;\n\n    @ViewChild('ShowAnimation')\n    private dropDownListShow: DropDownListComponent;\n\n    @ViewChild('HideAnimation')\n    private dropDownListHide: DropDownListComponent;\n\n    @ViewChild('toastBtnShow')\n    private btnEleShow: ButtonComponent;\n\n    public showData: { [key: string]: Object }[] = [\n        { Id: 'ease', Text: 'Ease' },\n        { Id: 'linear', Text: 'Linear' }\n    ];\n\n    public directionData: { [key: string]: Object }[] = [\n        { Id: 'Rtl', Text: 'Right to Left' },\n        { Id: 'Ltr', Text: 'Left to Right' }\n    ];\n\n    public animationData1: { [key: string]: Object }[] = [\n        { Id: 'SlideBottomOut', Effect: 'Slide Bottom Out' },\n        { Id: 'FadeIn', Effect: 'Fade In' },\n        { Id: 'FadeZoomIn', Effect: 'Fade Zoom In' },\n        { Id: 'FadeZoomOut', Effect: 'Fade Zoom Out' },\n        { Id: 'FlipLeftDownIn', Effect: 'Flip Left Down In' },\n        { Id: 'FlipLeftDownOut', Effect: 'Flip Left Down Out' },\n        { Id: 'FlipLeftUpIn', Effect: 'Flip Left Up In' },\n        { Id: 'FlipLeftUpOut', Effect: 'Flip Left Up Out' },\n        { Id: 'FlipRightDownIn', Effect: 'Flip Right Down In' },\n        { Id: 'FlipRightDownOut', Effect: 'Flip Right Down Out' },\n        { Id: 'FlipRightUpIn', Effect: 'Flip Right Up In' },\n        { Id: 'FlipRightUpOut', Effect: 'Flip Right Up Out' },\n        { Id: 'SlideBottomIn', Effect: 'Slide Bottom In' },\n        { Id: 'SlideLeftIn', Effect: 'Slide Left In' },\n        { Id: 'SlideLeftOut', Effect: 'Slide Left Out' },\n        { Id: 'SlideRightIn', Effect: 'Slide Right In' },\n        { Id: 'SlideRightOut', Effect: 'Slide Right Out' },\n        { Id: 'SlideTopIn', Effect: 'Slide Top In' },\n        { Id: 'SlideTopOut', Effect: 'Slide Top Out' },\n        { Id: 'ZoomIn', Effect: 'Zoom In' },\n        { Id: 'ZoomOut', Effect: 'Zoom Out' }\n    ];\n\n    public animationData: { [key: string]: Object }[] = [\n        { Id: 'SlideBottomIn', Effect: 'Slide Bottom In' },\n        { Id: 'FadeIn', Effect: 'Fade In' },\n        { Id: 'FadeZoomIn', Effect: 'Fade Zoom In' },\n        { Id: 'FadeZoomOut', Effect: 'Fade Zoom Out' },\n        { Id: 'FlipLeftDownIn', Effect: 'Flip Left Down In' },\n        { Id: 'FlipLeftDownOut', Effect: 'Flip Left Down Out' },\n        { Id: 'FlipLeftUpIn', Effect: 'Flip Left Up In' },\n        { Id: 'FlipLeftUpOut', Effect: 'Flip Left Up Out' },\n        { Id: 'FlipRightDownIn', Effect: 'Flip Right Down In' },\n        { Id: 'FlipRightDownOut', Effect: 'Flip Right Down Out' },\n        { Id: 'FlipRightUpIn', Effect: 'Flip Right Up In' },\n        { Id: 'FlipRightUpOut', Effect: 'Flip Right Up Out' },\n        { Id: 'SlideBottomOut', Effect: 'Slide Bottom Out' },\n        { Id: 'SlideLeftIn', Effect: 'Slide Left In' },\n        { Id: 'SlideLeftOut', Effect: 'Slide Left Out' },\n        { Id: 'SlideRightIn', Effect: 'Slide Right In' },\n        { Id: 'SlideRightOut', Effect: 'Slide Right Out' },\n        { Id: 'SlideTopIn', Effect: 'Slide Top In' },\n        { Id: 'SlideTopOut', Effect: 'Slide Top Out' },\n        { Id: 'ZoomIn', Effect: 'Zoom In' },\n        { Id: 'ZoomOut', Effect: 'Zoom Out' }\n    ];\n\n    public position: ToastPositionModel = { X: 'Right', Y: 'Bottom' };\n    public showFields: FieldSettingsModel = { text: 'Text', value: 'Id' };\n    public directionFields: FieldSettingsModel = { text: 'Text', value: 'Id' };\n    public animationFields: FieldSettingsModel = { text: 'Effect', value: 'Id' };\n    public easeValue: string = \"ease\";\n    public progressDirectionValue: string = \"Rtl\";\n    public animationValue: string = \"SlideBottomIn\";\n    public hideAnimationValue: string = \"SlideBottomOut\";\n    public true: boolean = true;\n    private prevDuplicates: boolean = false;\n\n    public showAnimation: ToastAnimationSettingsModel = {\n        show:\n        {\n            effect: 'SlideBottomIn'\n        },\n        hide: {\n            effect: 'SlideBottomOut',\n        }\n    };\n\n    public closeOnChange(e: ChangeEventArgs): void {\n        e.checked ? this.toastObj.showCloseButton = true : this.toastObj.showCloseButton = false;\n    }\n\n    public OnProgressChange(e: ChangeEventArgs): void {\n        e.checked ? this.toastObj.showProgressBar = true : this.toastObj.showProgressBar = false;\n    }\n\n    public closeNewestOnChange(e: ChangeEventArgs): void {\n        e.checked ? this.toastObj.newestOnTop = true : this.toastObj.newestOnTop = false;\n    }\n\n    public OnPrevDubChange(e: ChangeEventArgs): void {\n        this.prevDuplicates = e.checked;\n    }\n\n    public OnactionBtnChange(e: ChangeEventArgs): void {\n        if (e.checked) {\n            this.toastObj.buttons = [{ model: { content: '<div class=\"e-toast-btn\"> Click Here </div>' }, click: this.onActionBtnClick }];\n        } else { this.toastObj.buttons = []; }\n    }\n\n    public onActionBtnClick(): void {\n        alert('Action button is clicked');\n    }\n\n    public showToast(): void {\n        const title: string = (document.getElementById('toast_input_title') as HTMLInputElement).value;\n        let content: string = (document.getElementById('toast_input_content') as HTMLInputElement).value;\n        if (title === '' && content === '') {\n            content = 'You have created a Toast message';\n        }\n        let showDuration: number = parseInt((document.getElementById('showDuration') as HTMLInputElement).value, 10);\n        let hideDuration: number = parseInt((document.getElementById('hideDuration') as HTMLInputElement).value, 10);\n        let timeOut: number = parseInt((document.getElementById('timeOut') as HTMLInputElement).value, 10);\n        this.toastObj.show(\n            {\n                title: title, content: content, timeOut: timeOut,\n                animation: {\n                    show: { duration: showDuration },\n                    hide: { duration: hideDuration }\n                }\n            });\n    }\n\n    public onShowEase(): void {\n        this.toastObj.animation.show.easing = this.dropDownListShowEase.value.toString();\n    }\n\n    public onProgressDirectionChange(): void {\n        this.toastObj.progressDirection = this.dropDownListProgressDirection.value.toString() as ProgressDirectionType;\n    }\n\n    public showChange(): void {\n        this.toastObj.animation.show.effect = this.dropDownListShow.value as Effect;\n    }\n\n    public hideChange(): void {\n        this.toastObj.animation.hide.effect = this.dropDownListHide.value as Effect;\n    }\n\n    public onHideEase(): void {\n        this.toastObj.animation.hide.easing = this.dropDownListHideEase.value.toString();\n    }\n\n    public showBtnClick(e: Object): void {\n        this.showToast();\n    }\n\n    public hideBtnClick(): void {\n        this.toastObj.hide('All');\n    }\n\n    public onBeforeOpen(e: ToastBeforeOpenArgs): void {\n        const hideBtn: HTMLElement = document.getElementById('toastBtnHide');\n        hideBtn.style.display = 'inline-block';\n        if (this.prevDuplicates) {\n            e.cancel = this.preventDuplicate(e);\n        }\n    }\n\n    public onClose(e: ToastCloseArgs): void {\n        if (e.toastContainer != null && e.toastContainer.childElementCount === 0) {\n            const hideBtn: HTMLElement = document.getElementById('toastBtnHide');\n            hideBtn.style.display = 'none';\n        }\n    }\n\n    public preventDuplicate(e: ToastBeforeOpenArgs): boolean {\n        const toastEle: HTMLElement = e.element;\n        const toasts: HTMLCollection = e.toastObj.element.children;\n        for (let i: number = 0; i < toasts.length; i++) {\n            const toastTitle: HTMLElement = (toasts[i] as HTMLElement).querySelector('.e-toast-title') as HTMLElement;\n            const toastMessage: HTMLElement = (toasts[i] as HTMLElement).querySelector('.e-toast-message') as HTMLElement;\n            if (toastTitle && toastTitle.isEqualNode(toastEle.querySelector('.e-toast-title'))) {\n                return true;\n            }\n            if (!toastTitle && toastMessage && toastMessage.isEqualNode(toastEle.querySelector('.e-toast-message'))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @HostListener('document:click', ['$event'])\n    documentClick: EmitType<Object> = (e: MouseEvent) => {\n        if (e.target !== this.btnEleShow.element && this.toastObj.target === document.body) {\n            this.toastObj.hide('All');\n        }\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-12 control-section toast-api-section\">\n    <div class=\"sample_container\">\n        <ejs-toast #toastApi id='toastApi' [animation]=\"showAnimation\" [position]=\"position\"\n            (beforeOpen)=\"onBeforeOpen($event)\" (close)=\"onClose($event)\"></ejs-toast>\n        <div class=\"row\">\n            <div class=\"col-lg-6 padding\">\n                <div class=\"input-form\">\n                    <div class=\"e-float-input\">\n                        <input id=\"toast_input_title\" class='e-input' aria-label=\"title\" required />\n                        <span class=\"e-float-line\"></span>\n                        <label class=\"e-float-text\">Enter the title</label>\n                    </div>\n                </div>\n                <div class=\"input-form\">\n                    <div class=\"e-float-input\">\n                        <textarea class='e-input' id='toast_input_content' aria-label=\"content\" rows=\"3\" required></textarea>\n                        <label class=\"e-float-text\">Enter the content</label>\n                    </div>\n                </div>\n                <div class=\"group-form e-group\">\n                    <ejs-checkbox id='closeButton' label='Show Close Button' (change)=\"closeOnChange($event)\">\n                    </ejs-checkbox>\n                </div>\n                <div class=\"group-form e-group\">\n                    <ejs-checkbox id='progressBar' label='Show Progress Bar' (change)=\"OnProgressChange($event)\">\n                    </ejs-checkbox>\n                </div>\n                <div class=\"group-form e-group\">\n                    <ejs-checkbox id='newestOnTop' label='Newest On Top' [checked]=\"true\"\n                        (change)=\"closeNewestOnChange($event)\"></ejs-checkbox>\n                </div>\n                <div class=\"group-form e-group\">\n                    <ejs-checkbox id='prevDuplicates' label='Prevent Duplicates' (change)=\"OnPrevDubChange($event)\">\n                    </ejs-checkbox>\n                </div>\n                <div class=\"group-form e-group\">\n                    <ejs-checkbox id='actionButtons' label='Action Buttons' (change)=\"OnactionBtnChange($event)\">\n                    </ejs-checkbox>\n                </div>\n                <div class=\"input-form\">\n                    <ejs-dropdownlist #ProgressDirection [dataSource]=\"directionData\" [fields]=\"this.directionFields\"\n                        placeholder=\"ProgressDirection\" floatLabelType=\"Auto\" (change)=\"onProgressDirectionChange()\" [value]=\"progressDirectionValue\">\n                    </ejs-dropdownlist>\n                </div>\n                <div class=\"input-form\">\n                    <div class=\"e-float-input e-input-group\">\n                        <input class=\"e-input\" id=\"timeOut\" name=\"Digits\" value=\"5000\" required />\n                        <span class=\"e-float-line\"></span>\n                        <label class=\"e-float-text\">TimeOut</label>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-lg-6 padding\">\n                <div class=\"input-form\">\n                    <label class=\"h4\"> Show Animation</label>\n                    <div class=\"e-float-input\">\n                        <input class=\"e-input\" id=\"showDuration\" value=\"400\" required />\n                        <span class=\"e-float-line\"></span>\n                        <label class=\"e-float-text\">Duration</label>\n                    </div>\n                </div>\n                <div class=\"input-form\">\n                    <ejs-dropdownlist #ShowEasing id=\"ShowEasing\" [dataSource]=\"showData\" [fields]=\"this.showFields\"\n                        placeholder=\"Select an Easing\" (change)=\"onShowEase()\" [value]=\"easeValue\"></ejs-dropdownlist>\n                </div>\n                <div class=\"input-form\">\n                    <ejs-dropdownlist #ShowAnimation id=\"ShowAnimation\" [dataSource]=\"animationData\"\n                        [fields]=\"animationFields\" placeholder=\"Select an Animation\" (change)=\"showChange()\"\n                        [value]=\"animationValue\"></ejs-dropdownlist>\n                </div>\n                <div class=\"input-form e-group\">\n                    <label class=\"h4\"> Hide Animation</label>\n                    <div class=\"e-float-input\">\n                        <input class=\"e-input\" id=\"hideDuration\" value=\"400\" required />\n                        <span class=\"e-float-line\"></span>\n                        <label class=\"e-float-text\">Duration</label>\n                    </div>\n                </div>\n                <div class=\"input-form\">\n                    <ejs-dropdownlist #HideEasing id=\"HideEasing\" [dataSource]=\"showData\" [fields]=\"showFields\"\n                        placeholder=\"Select an Easing\" (change)=\"onHideEase()\" [value]=\"easeValue\"></ejs-dropdownlist>\n                </div>\n                <div class=\"input-form\">\n                    <ejs-dropdownlist #HideAnimation id=\"HideAnimation\" [dataSource]=\"animationData1\"\n                        [fields]=\"animationFields\" placeholder=\"Select an Animation\" (change)=\"hideChange()\"\n                        [value]=\"hideAnimationValue\"></ejs-dropdownlist>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"row center\">\n        <button ejs-button #toastBtnShow id=\"toastBtnShow\" class=\"e-btn e-primary\" (click)=\"showBtnClick($event)\">Show Toasts</button>\n        <button ejs-button #toastBtnHide id=\"toastBtnHide\" class=\"e-btn e-primary\" (click)=\"hideBtnClick()\" style='display: none'>\n            Hide All</button>\n    </div>\n</div>","app.component.css":"    .toast-api-section {\n        padding-top: 0;\n    }\n    .toast-api-section .input-form {\n        margin: 33px 0;\n    }\n\n    .toast-api-section .group-form {\n        margin: 25px 0;\n    }\n\n    .toast-api-section .group-form.e-group {\n        margin-top: 35px;\n    }\n    .toast-api-section .row .padding {\n        padding: 0 15px;\n    }\n    .toast-api-section .row.center {\n        text-align: center;\n    }\n    .toast-api-section .row {\n        padding: 0 15px;\n    }\n    #toastBtnHide{\n        margin-left: 3px;\n    }\n    .input-form .h4,\n    .input-form.e-group .h4 {\n      font-size: 16px;\n      margin: 0 0 10px;\n      font-weight: bold;\n  }","dependencies.json":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-notifications\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}