{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { ToastModule } from '@syncfusion/ej2-angular-notifications';\n\nimport { RadioButtonModule, CheckBoxModule, ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [   AppComponent ], imports: [ BrowserModule, ToastModule, RadioButtonModule, CheckBoxModule, ButtonModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-12 control-section\" id=\"toast_pos_target\">\n    <div class=\"sample_container toast-pos-section\">\n        <ejs-toast #toastpos id='toastpos' [position]=\"toastPosition\" [target]=\"target\" (created)=\"created()\" (close)=\"onClose($event)\" (beforeOpen)=\"onBeforeOpen()\">\n                <ng-template #content>\n                        <div>You have a friend request yet to accept.</div>\n                     </ng-template>\n                     <ng-template #title>\n                        <div>Matt sent you a friend request</div>\n                     </ng-template>          \n        </ejs-toast>\n            <div id=\"toast_pos_property\">\n                <table style=\"width:100%\">\n                    <tbody>\n                        <tr>\n                        <td>\n                            <div style=\"padding:25px 0 0 0\">\n                            <ejs-radiobutton #dropdownRadio id='dropdownRadio' checked='true' label='Position' name='toastPos' value=\"Position\" (change)=\"checkboxChange2($event)\"></ejs-radiobutton>\n                            </div>\n                        </td>\n                        <td>\n                            <div style=\"padding:25px 0 0 0\">\n                                <ejs-radiobutton #customRadio id='customRadio' label='Custom' name='toastPos' value='Custom' (change)=\"checkboxChange3($event)\"></ejs-radiobutton>\n                            </div>\n                        </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div id=\"dropdown\" style=\"padding-top:25px\">\n                    <ejs-dropdownlist  #position id=\"position\" [dataSource]=\"dropData\" [fields]=\"dropFields\" placeholder=\"Select a position\" (change)=\"valueChange($event)\" [value]=\"value\" index=\"5\" popupHeight='200px'></ejs-dropdownlist>\n                </div>\n                <table style=\"width: 100%\">\n                    <tbody>\n                        <tr>\n                            <td id=\"customChoose\" style=\"display: none\">\n                                <form id=\"formId\" class=\"form-horizontal\">\n                                    <div class=\"e-row\">\n                                    <div class=\"e-float-input\">\n                                        <input class=\"e-input\" id=\"xPos\" name=\"Digits\" value=\"50\" required/>\n                                        <span class=\"e-float-line\"></span>\n                                        <label class=\"e-float-text\">X Position</label>\n                                    </div>\n                                </div>\n                                <div class=\"e-row\">\n                                    <div class=\"e-float-input\">\n                                        <input class=\"e-input\" id=\"yPos\" name=\"Digits\" value=\"50\" required/>\n                                        <span class=\"e-float-line\"></span>\n                                        <label class=\"e-float-text\">Y Position</label>\n                                    </div>\n                                </div>\n                            </form>\n                        </td>\n                        </tr>\n                        <tr>\n                            <td>\n                            <div style=\"padding:25px 0 0 0\">\n                                <ejs-radiobutton #radio1 id='radio1' label='Target' name='toast' value='Target' (change)='checkboxChange($event)'></ejs-radiobutton>\n                            </div>\n                            </td>\n                            <td>\n                            <div style=\"padding:25px 0 0 0\">\n                                <ejs-radiobutton #radio2 id='radio2' checked='true' label='Global' name='toast' value='Global' (change)=\"checkboxChange1($event)\"></ejs-radiobutton>\n                            </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div id=\"toast_btn\" style=\"padding-top: 25px\">\n                    <button ejs-button class=\"e-btn e-control\" id='show_Toast' style=\"margin-right:15px\" (click)=\"showBtnClick()\">Show Toasts</button>\n                    <button ejs-button class=\"e-btn e-control\" id='hideTosat' (click)=\"hideBtnClick()\">Hide All</button>\n                </div>\n        </div>\n    </div>     \n</div>","app.component.css":"    /* custom code start*/\n   .toast-pos-section #toast_pos_property {\n       height: 500px;\n       border: none;\n       margin: auto;\n   }\n   /* custom code end*/\n   \n   #toast_pos_property td {\n       width: 50%;\n   }\n   \n   .e-toast-icon.e-laura.e-icons {\n       border-radius: 50%;\n       background-image: url('/assets/toast/resource/laura.png');\n       background-repeat: no-repeat;\n       background-size: cover;\n       height: 50px !important;\n       width: 100px !important;\n       background-size: 50px 50px;\n       margin: 0;\n   }\n   \n   @media (min-width: 740px) {\n       #toast_pos_property {\n           width: 450px;\n       }\n   }","app.component.ts":"import { Component, ViewEncapsulation, Inject, ViewChild, HostListener, ElementRef } from '@angular/core';\nimport { createElement, Effect, compile, Browser, closest, EmitType } from '@syncfusion/ej2-base';\nimport { ButtonComponent, RadioButtonComponent, CheckBoxComponent, ChangeEventArgs as CheckBoxChange } from '@syncfusion/ej2-angular-buttons';\nimport { DropDownListComponent, ChangeEventArgs } from '@syncfusion/ej2-angular-dropdowns';\nimport { ToastComponent, ToastCloseArgs  } from '@syncfusion/ej2-angular-notifications';\n\n/**\n *  Sample for Positioning options in Toast\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n    //Get the object for components used in sample\n    @ViewChild('toastpos')\n    private toastObj: ToastComponent;\n    @ViewChild('position')\n    private dropDownObj: DropDownListComponent;\n    @ViewChild('dropdownRadio')\n    private dropRadioObj: RadioButtonComponent;\n    @ViewChild('customRadio')\n    private customRadioObj: RadioButtonComponent;\n    @ViewChild('radio1')\n    private radio1: RadioButtonComponent;\n    @ViewChild('radio2')\n    private radio2: RadioButtonComponent;\n    public toastPosition: Object = { X: 'Right', Y: 'Bottom' };\n    public target: HTMLElement = document.body;\n    private initialWid: string = '';\n    public true: boolean = true;\n    private customFlag: boolean = false;\n    //Pre-defined positioning values for drop down list\n    public dropData: { [key: string]: Object }[] = [\n        { Id: 'topleft', Text: 'Top Left' },\n        { Id: 'topright', Text: 'Top Right' },\n        { Id: 'topcenter', Text: 'Top Center' },\n        { Id: 'topfullwidth', Text: 'Top Full Width' },\n        { Id: 'bottomleft', Text: 'Bottom Left' },\n        { Id: 'bottomright', Text: 'Bottom Right' },\n        { Id: 'bottomcenter', Text: 'Bottom Center' },\n        { Id: 'bottomfullwidth', Text: 'Bottom Full Width' },\n    ];\n    public dropFields: Object = { text: 'Text', value: 'Id' };\n    public value: string = 'bottomright';\n    constructor( ) {\n        \n    }\n    public checkboxChange(e: ChangeEventArgs): void {\n        if (this.radio1.checked) {\n            this.toastObj.hide('All');\n            this.toastObj.target = '#toast_pos_target';\n            this.toastShow(1000);\n        }\n    }\n    public toastShow(timeOutDelay: number): void {\n        setTimeout(function(){\n                this.toastObj.show();\n         }.bind(this),timeOutDelay);\n    }\n    public checkboxChange1(e: CheckBoxChange): void {\n         if (this.radio2.checked) {\n            this.toastObj.hide('All');\n            this.toastObj.target = document.body;\n            this.toastShow(1000);\n        }\n    }\n    public checkboxChange2(e: CheckBoxChange): void {  \n         if (this.dropRadioObj.checked) {\n            this.toastObj.hide('All');\n            document.getElementById('dropdown').style.display = 'table-cell';\n            document.getElementById('customChoose').style.display = 'none';\n            this.setToastPosValue(this.dropDownObj.value.toString()); this.customFlag = false; this.toastShow(1000);\n        }\n    }\n    public checkboxChange3(e: CheckBoxChange): void {\n         if (this.customRadioObj.checked) {\n            this.toastObj.hide('All');\n            document.getElementById('dropdown').style.display = 'none';\n            document.getElementById('customChoose').style.display = 'table-cell';\n            this.setcustomPosValue(); this.customFlag = true; this.toastShow(1000);\n        }\n    }\n    public valueChange(e: ChangeEventArgs): void {\n         this.toastObj.hide('All'); this.setToastPosValue(e.value.toString()); this.toastShow(1000);\n    }\n    //To set custom position values\n    public setcustomPosValue(): void {\n        this.toastObj.width = this.initialWid;\n        this.toastObj.position.X = parseInt((document.getElementById('xPos') as HTMLInputElement).value, 10);\n        this.toastObj.position.Y = parseInt((document.getElementById('yPos') as HTMLInputElement).value, 10);\n    }\n    public showBtnClick(): void {\n         if (this.customFlag) {\n            this.setcustomPosValue();\n        }\n        this.toastObj.show();\n    }\n    //Pre defined postions available based on target\n    public setToastPosValue(value: string): void {\n        this.toastObj.width = this.initialWid;\n        switch (value) {\n            case 'topleft':\n                this.toastObj.position.X = 'Left'; this.toastObj.position.Y = 'Top'; break;\n            case 'topright':\n                this.toastObj.position.X = 'Right'; this.toastObj.position.Y = 'Top'; break;\n            case 'topcenter':\n                this.toastObj.position.X = 'Center'; this.toastObj.position.Y = 'Top'; break;\n            case 'topfullwidth':\n                this.toastObj.width = '100%'; this.toastObj.position.X = 'Center'; this.toastObj.position.Y = 'Top'; break;\n            case 'bottomleft':\n                this.toastObj.position.X = 'Left'; this.toastObj.position.Y = 'Bottom'; break;\n            case 'bottomright':\n                this.toastObj.position.X = 'Right'; this.toastObj.position.Y = 'Bottom'; break;\n            case 'bottomcenter':\n                this.toastObj.position.X = 'Center'; this.toastObj.position.Y = 'Bottom'; break;\n            case 'bottomfullwidth':\n                this.toastObj.width = '100%'; this.toastObj.position.X = 'Center'; this.toastObj.position.Y = 'Bottom'; break;\n        }\n    }\n    public hideBtnClick(): void {\n         this.toastObj.hide('All');\n    }\n    public created(): void {\n         setTimeout(function(){\n            this.toastShow(200);\n            this.initialWid = this.toastObj.width.toString();\n        }.bind(this),200);\n    }\n    @HostListener('document:click', ['$event'])\n    documentClick: EmitType<Object> = (e: MouseEvent) => {\n        let showButton: HTMLElement = document.getElementById('show_Toast');\n        if (e.target !== showButton && this.toastObj.target === document.body) {\n            this.toastObj.hide('All');\n        }\n    }\n    public onClose(e: ToastCloseArgs): void {\n        if (e.toastContainer.childElementCount === 0 ) {\n            let hideBtn: HTMLElement = document.getElementById('hideTosat');\n            hideBtn.style.display = 'none';\n        }\n    }\n    public onBeforeOpen(): void {\n        let hideBtn: HTMLElement = document.getElementById('hideTosat');\n        hideBtn.style.display = 'inline-block';\n         if (!Browser.isDevice) {\n              this.toastObj.width = 350;\n              this.toastObj.dataBind();\n         }\n    }\n}"}