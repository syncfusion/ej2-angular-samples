{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { GridModule } from '@syncfusion/ej2-angular-grids';\n\nimport { QueryBuilderModule } from '@syncfusion/ej2-angular-querybuilder';\n\nimport { SliderModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { CheckBoxSelectionService, DropDownListModule, MultiSelectModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { CheckBoxModule, RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [   AppComponent ], imports: [ BrowserModule, CommonModule, QueryBuilderModule,       SliderModule, MultiSelectModule, DropDownListModule, RadioButtonModule, CheckBoxModule,       GridModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"\n<div class=\"control-section\">\n  <div class=\"col-lg-8 control-section\">\n    <ejs-querybuilder id=\"querybuilder\" #querybuilder cssClass=\"row\" [dataSource]=\"dataSource\" [columns]=\"filter\" width=\"100%\"\n      [rule]=\"importRules\" (ruleChange)=\"updateRule($event)\" (created)=\"change()\">\n    </ejs-querybuilder>\n  </div>\n\n  <div class=\"col-lg-4 property-section template-property\">\n    <div class=\"property-panel-header\">Properties</div>\n    <div class=\"property-panel-content\">\n      <table id=\"property\" title=\"Properties\" style=\"width:100%;\">\n        <tr>\n          <td style=\"width: 50%; margin:10px\">\n            <div class=\"row\">\n              <ejs-radiobutton id=\"radio1\" label=\"JSON Rule\" name=\"rule\" value=\"json\" checked=\"true\" (change)=\"change()\"></ejs-radiobutton>\n            </div>\n          </td>\n          <td style=\"width: 50%;\">\n            <div class=\"row\">\n              <ejs-radiobutton id=\"radio2\" #radio label=\"SQL Rule\" name=\"rule\" value=\"sql\" (change)=\"change()\"></ejs-radiobutton>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"width: 100%;\" colspan=\"2\">\n            <textarea id=\"ruleContent\">{{displayRule}}</textarea>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</div>\n","app.component.css":"/* custom code start*/\n#querybuilder .e-slider-container.e-control-wrapper {\n  height: 0;\n}\n\n.e-querybuilder {\n  margin: 3% auto;\n}\n\n#ruleContent {\n  border: 1px solid #d3d3d3;\n  width: 100%;\n  height: 500px;\n  overflow: auto;\n  background-color: #fff;\n}\n\n.template-property td div.row {\n  margin: 0 0 10px;\n}\n\n.highcontrast textarea#ruleContent {\n  background-color: #000;\n}\n/* custom code end*/","app.component.ts":"/**\n * Template Sample\n */\n\nimport { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { RadioButtonComponent } from '@syncfusion/ej2-angular-buttons';\nimport { QueryBuilderComponent, TemplateColumn, ColumnsModel, RuleChangeEventArgs  } from '@syncfusion/ej2-angular-querybuilder';\nimport { getComponent, createElement, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { CheckBox } from '@syncfusion/ej2-buttons';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { Slider } from '@syncfusion/ej2-inputs';\nimport { RuleModel } from '@syncfusion/ej2-querybuilder';\nimport { expenseData } from './../../../../src/app/query-builder/data-source';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n    @ViewChild('querybuilder') qryBldrObj: QueryBuilderComponent;\n    @ViewChild('radio') radioButton: RadioButtonComponent;\n    dataSource: Object[] = expenseData;\n\n    paymentTemplate: TemplateColumn = {\n        create: () => {\n            return createElement('input', { attrs: { 'type': 'text' } });\n        },\n        destroy: (args: { elementId: string }) => {\n            let dropdown: DropDownList = (getComponent(document.getElementById(args.elementId), 'dropdownlist') as DropDownList);\n            if (dropdown) {\n                dropdown.destroy();\n            }\n        },\n        write: (args: { elements: Element, values: string[] | string, operator: string }) => {\n            let ds: string[] = ['Cash', 'Debit Card', 'Credit Card', 'Net Banking', 'Wallet'];\n            let dropDownObj: DropDownList = new DropDownList({\n                    dataSource: ds,\n                    value: args.values as string,\n                    change: (e: any) => {\n                        this.qryBldrObj.notifyChange(e.itemData.value, e.element);\n                    }\n                });\n                dropDownObj.appendTo('#' + args.elements.id);\n        }\n    };\n\n    transactionTemplate: TemplateColumn = {\n        create: () => {\n            return createElement('input', { attrs: { 'type': 'checkbox' } });\n        },\n        destroy: (args: { elementId: string }) => {\n            (getComponent(document.getElementById(args.elementId), 'checkbox') as CheckBox).destroy();\n        },\n        write: (args: { elements: Element, values: string }) => {\n            let checked: boolean = args.values === 'IsExpensive' ? true : false;\n            const boxObj: CheckBox = new CheckBox({\n                label: 'Is Expensive',\n                checked: checked,\n                change: (e: any) => {\n                    this.qryBldrObj.notifyChange(e.checked ? 'expensive' : 'income', e.event.target);\n                }\n            });\n            boxObj.appendTo('#' + args.elements.id);\n        }\n    };\n\n    amountTemplate: TemplateColumn = {\n        create: () => {\n            return createElement('div', { className: 'ticks_slider' });\n        },\n        destroy: (args: { elementId: string }) => {\n            (getComponent(document.getElementById(args.elementId), 'slider') as Slider).destroy();\n        },\n        write: (args: { elements: Element, values: number }) => {\n            const ticksSlider: Slider = new Slider({\n                value: args.values,\n                min: 0,\n                max: 100,\n                type: 'MinRange',\n                // Initialize tooltip with placement and showOn\n                tooltip: { isVisible: true, placement: 'Before', showOn: 'Hover' },\n                change: (e: any) => {\n                    this.qryBldrObj.notifyChange(e.value, args.elements);\n                }\n            });\n            ticksSlider.appendTo('#' + args.elements.id);\n        }\n    };\n\n    paymentOperators = [\n        { value: 'equal', key: 'Equal' },\n        { value: 'notequal', key: 'Not Equal' }\n    ];\n\n    amountOperators = [\n        { key: 'Equal', value: 'equal' },\n        { key: 'Not equal', value: 'notequal' },\n        { key: 'Greater than', value: 'greaterthan' },\n        { key: 'Less than', value: 'lessthan' },\n        { key: 'Less than or equal', value: 'lessthanorequal' },\n        { key: 'Greater than or equal', value: 'greaterthanorequal' }\n    ];\n\n    filter: ColumnsModel[] = [\n        {\n            field: 'Category', label: 'Category', type: 'string'\n        },\n        {\n            field: 'PaymentMode', label: 'Payment Mode', type: 'string', operators: this.paymentOperators, template: this.paymentTemplate\n        },\n        {\n            field: 'TransactionType', label: 'Transaction Type', type: 'string', operators: [{ key: 'Equal', value: 'equal' }, { key: 'Not Equal', value: 'notequal' }], template: this.transactionTemplate\n        },\n        { field: 'Description', label: 'Description', type: 'string' },\n        { field: 'Date', label: 'Date', type: 'date' },\n        {\n            field: 'Amount', label: 'Amount', type: 'number', operators: this.amountOperators, template: this.amountTemplate\n        }\n    ];\n\n    importRules: RuleModel = {\n        'condition': 'and',\n        'rules': [{\n            'label': 'Category',\n            'field': 'Category',\n            'type': 'string',\n            'operator': 'in',\n            'value': ['Clothing']\n        },\n        {\n            'condition': 'or',\n            'rules': [{\n                'label': 'Transaction Type',\n                'field': 'TransactionType',\n                'type': 'string',\n                'operator': 'equal',\n                'value': 'checked'\n            },\n            {\n                'label': 'Payment Mode',\n                'field': 'PaymentMode',\n                'type': 'string',\n                'operator': 'equal',\n                'value': 'Cash'\n            }]\n        }, {\n            'label': 'Amount',\n            'field': 'Amount',\n            'type': 'number',\n            'operator': 'equal',\n            'value': 10\n        }\n        ]\n    };\n\n    displayRule: any = '';\n\n    updateRule(args: RuleChangeEventArgs ): void {\n        if (this.radioButton.checked) {\n            this.displayRule = this.qryBldrObj.getSqlFromRules(args.rule);\n        } else {\n            this.displayRule = JSON.stringify(args.rule, null, 4);\n        }\n    }\n    change(): void {\n        this.updateRule({rule: this.qryBldrObj.getValidRules(this.qryBldrObj.rule)})\n    }\n}\n","data.ts":""}