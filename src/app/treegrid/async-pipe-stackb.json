{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","task-service.ts":"import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { DataStateChangeEventArgs } from '@syncfusion/ej2-angular-treegrid';\nimport { Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Service to handle data operations for the Tree Grid.\n * It extends Subject to act as an observable for data state changes.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskService extends Subject<DataStateChangeEventArgs> {\n  private BASE_URL =\n    'https://services.syncfusion.com/angular/production/api/SupportTicketData';\n  constructor() {\n    super();\n  }\n\n\n  // Executes the data operation based on the provided grid state.\n  public execute(state: any): void {\n    if (state.requestType === 'expand') {\n      this.getChildData(state).subscribe((childRecords: any) => {\n        state.childData = childRecords.result;\n        state.childDataBind();\n      });\n    } else {\n      this.getData(state).subscribe((x) => super.next(x));\n    }\n\n  }\n\n  // Fetches child records for a given parent record when a row is expanded.\n  public getChildData(state: any): Observable<DataStateChangeEventArgs> {\n    return this.fetchData(\n      `${this.BASE_URL}?$filter=ParentTicketID%20eq%20${state.data.TicketID}`\n    ).pipe(\n      map((response: any) => {\n        const parentId = state.data.id;\n        const result = response['result'];\n        const count = response['count'];\n        return { result, count } as DataStateChangeEventArgs;\n      })\n    );\n  }\n\n  // Fetches the main data based on the provided treegrid state (paging, sorting, filtering).\n  protected getData(state: any): Observable<DataStateChangeEventArgs> {\n    const pageQuery = `$skip=${state.skip}&$top=${state.take}`;\n    let sortQuery: string = '';\n    let filterQuery: string = '';\n    if (state.where) {\n      filterQuery = this.buildFilterQuery(state.where);\n    } else {\n      filterQuery = \"$filter=ParentTicketID eq null\";\n    }\n    if (state.search) {\n      filterQuery += this.buildSearchQuery(state.search);\n    }\n    if ((state.sorted || []).length) {\n      sortQuery =\n        `&$orderby=` +\n        state.sorted\n          .map((obj: any) => {\n            return obj.direction === 'descending'\n              ? `${obj.name} desc`\n              : obj.name;\n          })\n          .reverse()\n          .join(',');\n    }\n\n    return this.fetchData(\n      `${this.BASE_URL}?$inlinecount=allpages&${pageQuery}&${filterQuery}&${sortQuery}`\n    ).pipe(\n      map((response: any) => {\n        const result = response['result'];\n        const count = response['count'];\n        return { result, count } as DataStateChangeEventArgs;\n      })\n    );\n  }\n\n  // Builds the filter query string from the treegrid's filter settings.\n  private buildFilterQuery(where: any[]): string {\n    if (!where || where.length === 0) return \"$filter=ParentTicketID eq null\";\n    const andConds: string[] = [];\n    for (const cond of where) {\n      if (cond.predicates?.length) {\n        const groupFilters = cond.predicates.map((pred: any) => this.predicateToString(pred));\n        andConds.push(`(${groupFilters.join(` ${cond.condition ?? \"and\"} `)})`);\n      } else {\n        andConds.push(this.predicateToString(cond));\n      }\n    }\n    if (andConds.length > 0) {\n      return `$filter=ParentTicketID eq null and ${andConds.join(\" and \")}`;\n    }\n    return \"$filter=ParentTicketID eq null\";\n  }\n\n  // Builds the OData search query string from the grid's search settings.\n  private buildSearchQuery(search: any[]): string {\n    if (!search || !search.length) return \"\";\n    const s = search[0];\n    const searchStr = (s.key as string).toLowerCase();\n    const fields = s.fields || [];\n    const orConds: string[] = [];\n\n    fields.forEach((field: string) => {\n      orConds.push(`substringof('${searchStr}',tolower(cast(${field}, 'Edm.String')))`);\n    });\n    if (!orConds.length) return \"\";\n    return ` and (${orConds.join(\" or \")})`;\n  }\n\n  // Converts a single filter predicate object to the filter string.\n  private predicateToString(pred: any): string {\n    let field = pred.field;\n    let value = pred.value;\n    let ignoreCase = pred.ignoreCase;\n    let valStr = typeof value === \"string\" ? `'${value}'` : value;\n\n    switch (pred.operator) {\n      case \"equal\":\n        if (ignoreCase && typeof value === \"string\") {\n          return `(tolower(${field}) eq '${value.toLowerCase()}')`;\n        }\n        return `${field} eq ${valStr}`;\n      case \"contains\":\n        if (ignoreCase && typeof value === \"string\") {\n          return `contains(tolower(${field}), '${value.toLowerCase()}')`;\n        }\n        return `contains(${field}, ${valStr})`;\n      case \"startswith\":\n        if (ignoreCase && typeof value === \"string\") {\n          return `startswith(tolower(${field}), '${value.toLowerCase()}')`;\n        }\n        return `startswith(${field}, ${valStr})`;\n      default:\n        return \"\";\n    }\n  }\n\n  // Fetches data from the specified URL using the Fetch API and wraps it in an Observable.\n  private fetchData(url: string): Observable<any> {\n    return new Observable((observer) => {\n      fetch(url)\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.json();\n        })\n        .then((data) => {\n          observer.next(data);\n          observer.complete();\n        })\n        .catch((error) => {\n          observer.error(error);\n        });\n    });\n  }\n\n  // Deletes a record from the database.\n  deleteRecord(state: any): Observable<any> {\n    const id = state.data[0]?.TicketID || state.data[0]?.id;\n    const url = `${this.BASE_URL}/${id}`;\n    return new Observable((observer) => {\n      fetch(url, { method: 'DELETE' })\n        .then((data) => {\n          observer.next(data);\n          observer.complete();\n        })\n        .catch((error) => {\n          observer.error(error);\n        });\n    });\n  }\n\n  // Updates an existing record in the database.\n  updateRecord(state: any): Observable<any> {\n    const url = `${this.BASE_URL}`;\n    const data1 = state.data;\n    return new Observable((observer) => {\n      fetch(url, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data1),\n      })\n        .then((data) => {\n          observer.next(data);\n          observer.complete();\n        })\n        .catch((error) => {\n          observer.error(error);\n        });\n    });\n  }\n\n  // Adds a new record to the database.\n  addRecord(state: any): Observable<any> {\n    const url = `${this.BASE_URL}`;\n    const data1 = state.data;\n    return new Observable((observer) => {\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data1),\n      })\n        .then((data) => {\n          observer.next(data);\n          observer.complete();\n        })\n        .catch((error) => {\n          observer.error(error);\n        });\n    });\n  }\n}\n","app.component.ts":"import { Component, OnInit, ViewChild } from '@angular/core';\n\n\nimport { TreeGridAllModule, DataStateChangeEventArgs, TreeGridComponent, EditService, PageService, FilterService } from '@syncfusion/ej2-angular-treegrid';\nimport { TaskService } from './task-service';\nimport { AsyncPipe } from '@angular/common';\nimport { NgClass, NgIf, NgFor } from '@angular/common';\nimport { Observable } from 'rxjs';\n\n/**\n * Component that demonstrates the use of an async pipe to bind data to the Tree Grid.\n * It handles data operations like paging, sorting, filtering, and CRUD operations.\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  standalone: true,\n  providers: [EditService, PageService, FilterService],\n  imports: [  TreeGridAllModule, AsyncPipe, NgClass]\n})\nexport class AppComponent {\n  public data: Observable<DataStateChangeEventArgs>;\n  public pageSetting: Object;\n\n  public editSettings: Object;\n  public daterules: Object;\n  public dateeditparam:Object;\n  @ViewChild('treegrid')\n  public treegrid: TreeGridComponent;\n\n  /**\n   * Initializes a new instance of the AsyncPipeComponent.\n   * @param {TaskService} taskService - The service for handling data operations.\n   */\n  constructor(private taskService: TaskService) {\n    this.data = taskService;\n  }\n\n  public ngOnInit(): void {\n    this.editSettings = { allowEditing: true, allowAdding: true, allowDeleting: true, mode: \"Row\" };\n    this.pageSetting = { pageSize: 10, pageCount: 4 };\n    this.daterules = { date: true, required: true };\n    this.dateeditparam = { params: { format: 'M/d/yyyy' } };\n    let state = { skip: 0, take: 10 };\n    this.taskService.execute(state);\n  }\n\n  // Handles data state changes from the Tree Grid (e.g., paging, sorting, filtering).\n  public dataStateChange(state: DataStateChangeEventArgs): void {\n    this.taskService.execute(state);\n  }\n\n  // Handles data source changes from the Tree Grid (e.g., CRUD operations).\n  public dataSourceChange(state: any): void {\n    if (state.action == 'add') {\n      this.taskService.addRecord(state).subscribe({\n        next: () => {\n          (state as any).endEdit();\n        }\n      });\n    }\n    else if (state.action == 'edit') {\n      this.taskService.updateRecord(state).subscribe({\n        next: () => {\n          (state as any).endEdit();\n        }\n      });\n    }\n    else if (state.requestType == 'delete') {\n        this.taskService.deleteRecord(state).subscribe({\n          next: () => {\n            (state as any).endEdit();\n          }\n        });\n    }\n  }\n\n  public getPriorityClass(priority: string): string {\n    switch (priority) {\n      case 'Critical': return 'badge bg-danger';\n      case 'High': return 'badge bg-warning';\n      case 'Medium': return 'badge bg-info';\n      case 'Low': return 'badge bg-success';\n      default: return 'badge bg-secondary';\n    }\n  }\n\n  public getStatusClass(status: string): string {\n    switch (status) {\n      case 'Open': return 'badge bg-primary';\n      case 'In Progress': return 'badge bg-warning';\n      case 'Resolved': return 'badge bg-success';\n      case 'Closed': return 'badge bg-secondary';\n      case 'Escalated': return 'badge bg-danger';\n      default: return 'badge bg-light text-dark';\n    }\n  }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <ejs-treegrid #treegrid [dataSource]='data | async' height='350' idMapping='TicketID'\n        parentIdMapping='ParentTicketID' hasChildMapping='isParent' [treeColumnIndex]='1' allowPaging='true'\n        allowSorting='true' [pageSettings]='pageSetting' allowFiltering=\"true\"\n        (dataStateChange)='dataStateChange($event)' (dataSourceChanged)='dataSourceChange($event)' gridLines=\"Both\" [editSettings]='editSettings' >\n        <e-columns>\n            <e-column field='TicketID' headerText='Ticket ID' width='110' textAlign='Left'\n                isPrimaryKey='true'></e-column>\n            <e-column field='Title' textAlign='Left' headerText='Title' width='250' clipMode=\"EllipsisWithTooltip\"></e-column>\n            <e-column field='Category' headerText='Category' width='120' textAlign='Left'></e-column>\n            <e-column field='Priority' headerText='Priority' width='100' textAlign='Left'>\n                <ng-template #template let-data>\n                    <span [ngClass]=\"getPriorityClass(data.Priority)\">{{data.Priority}}</span>\n                </ng-template>\n            </e-column>\n            <e-column field='Status' headerText='Status' width='120'textAlign='Left'>\n                <ng-template #template let-data>\n                    <span [ngClass]=\"getStatusClass(data.Status)\">{{data.Status}}</span>\n                </ng-template>\n            </e-column>\n            <e-column field='AssignedAgent' headerText='Assigned To' width='150' textAlign='Left'></e-column>\n            <e-column field='CustomerName' headerText='Customer' width='140' textAlign='Left'></e-column>\n            <e-column field='CreatedDate' headerText='Created Date' [allowFiltering]=\"false\" textAlign='Right' width='130' format='yMd' type='date' editType='datepickeredit' [validationRules]='daterules' [edit]=\"dateeditparam\"></e-column>\n            <e-column field='DueDate' headerText='Due Date' [allowFiltering]=\"false\" textAlign='Right' width='130' format='yMd' type='date' editType='datepickeredit' [validationRules]='daterules' [edit]=\"dateeditparam\"></e-column>\n        </e-columns>\n    </ejs-treegrid>\n</div>\n<style>\n    .bg-warning {\n        --bs-bg-opacity: 1;\n        background-color: rgba(255, 193, 7, 1) !important;\n    }\n\n    .bg-danger {\n        --bs-bg-opacity: 1;\n        background-color: rgba(220, 53, 69, 1) !important;\n    }\n\n    .bg-info {\n        --bs-bg-opacity: 1;\n        background-color: rgba(13, 202, 240, 1) !important;\n    }\n\n    .bg-success {\n        --bs-bg-opacity: 1;\n        background-color: rgba(25, 135, 84, 1) !important;\n    }\n\n    .bg-primary {\n        --bs-bg-opacity: 1;\n        background-color: rgba(13, 110, 253, 1) !important;\n    }\n\n    .bg-secondary {\n        --bs-bg-opacity: 1;\n        background-color: rgba(108, 117, 125, 1) !important;\n        }\n</style>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-treegrid\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-treegrid\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}