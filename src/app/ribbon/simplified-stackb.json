{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Ribbon, FileMenuSettingsModel, RibbonButtonSettingsModel, RibbonSplitButtonSettingsModel, RibbonComboBoxSettingsModel, RibbonDropDownSettingsModel, RibbonItemSize, RibbonCheckBoxSettingsModel, RibbonColorPickerSettingsModel, LauncherClickEventArgs, DisplayMode, FileMenuEventArgs } from '@syncfusion/ej2-ribbon';\nimport { MenuItemModel } from \"@syncfusion/ej2-navigations\";\nimport { ToastComponent } from '@syncfusion/ej2-angular-notifications';\nimport { ItemModel } from '@syncfusion/ej2-angular-splitbuttons';\nimport { SelectEventArgs as SelectListEventArgs } from \"@syncfusion/ej2-lists\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  @ViewChild('toast') toastObj: ToastComponent;\n  @ViewChild('simplifiedRibbon') simplifiedRibbonObj: Ribbon;\n\n  public pasteOptions: ItemModel[] = [{ text: \"Keep Source Format\" }, { text: \"Merge format\" }, { text: \"Keep text only\" }];\n  public findOptions: ItemModel[] = [{ text: \"Find\", iconCss: \"e-icons e-search\" }, { text: \"Advanced find\", iconCss: \"e-icons e-search\" }, { text: \"Go to\", iconCss: \"e-icons e-arrow-right\" }];\n  public selectOptions: ItemModel[] = [{ text: \"Select All\" }, { text: \"Select Objects\" }];\n  public dictateOptions: ItemModel[] = [{ text: \"Chinese\" }, { text: \"English\" }, { text: \"German\" }, { text: \"French\" }];\n  public tableOptions: ItemModel[] = [{ text: \"Insert Table\" }, { text: \"This device\" }, { text: \"Convert Table\" }, { text: \"Excel SpreadSheet\" }];\n  public shapeOptions: ItemModel[] = [{ text: \"Lines\" }, { text: \"Rectangles\" }, { text: \"Basic Arrows\" }, { text: \"Basic Shapes\" }, { text: \"FlowChart\" }];\n  public headerOptions: ItemModel[] = [{ text: \"Insert Header\" }, { text: \"Edit Header\" }, { text: \"Remove Header\" }];\n  public footerOptions: ItemModel[] = [{ text: \"Insert Footer\" }, { text: \"Edit Footer\" }, { text: \"Remove Footer\" }];\n  public pageOptions: ItemModel[] = [{ text: \"Insert Top of page\" }, { text: \"Format Page Number\" }, { text: \"Format Page Number\" }];\n  public linkOptions: ItemModel[] = [{ text: \"Insert Link\", iconCss: \"e-icons e-link\" }, { text: \"Recent Links\", iconCss: \"e-icons e-clock\" }, { text: \"Bookmarks\", iconCss: \"e-icons e-bookmark\" }];\n\n  public pasteSettings: RibbonSplitButtonSettingsModel = { iconCss: 'e-icons e-paste', items: this.pasteOptions, content: 'Paste', select: (args) => { this.updateContent(\"Paste -> \" + args.item.text); }, click: () => { this.updateContent(\"Paste\"); } };\n  public findSettings: RibbonSplitButtonSettingsModel = { iconCss: \"e-icons e-search\", content: \"Find\", items: this.findOptions, select: (args) => { this.updateContent(\"Find -> \" + args.item.text); }, click: () => { this.updateContent(\"Find\"); } };\n  public selectSettings: RibbonSplitButtonSettingsModel = { iconCss: \"e-icons e-mouse-pointer\", content: \"Select\", items: this.selectOptions, select: (args) => { this.updateContent(\"Select -> \" + args.item.text); }, click: () => { this.updateContent(\"Select\"); } };\n  public dictateSettings: RibbonSplitButtonSettingsModel = { iconCss: \"sf-icon-dictate\", content: \"Dictate\", items: this.dictateOptions, select: (args) => { this.updateContent(\"Dictate -> \" + args.item.text); }, click: () => { this.updateContent(\"Dictate\"); } };\n  public tableSettings: RibbonDropDownSettingsModel = { iconCss: \"e-icons e-table\", content: \"Table\", items: this.tableOptions, select: (args) => { this.updateContent(\"Table -> \" + args.item.text); } };\n  public pictureSettings: RibbonDropDownSettingsModel = { iconCss: \"e-icons e-image\", content: \"Picture\", target:'#simplified-pictureList' };\n  public shapeSettings: RibbonDropDownSettingsModel = { iconCss: \"sf-icon-shapes\", content: \"Shapes\", items: this.shapeOptions, select: (args) => { this.updateContent(\"Shapes -> \" + args.item.text); } };\n  public headerSettings: RibbonDropDownSettingsModel = { iconCss: \"e-icons e-header\", content: \"Header\", items: this.headerOptions, select: (args) => { this.updateContent(\"Header -> \" + args.item.text); } };\n  public footerSettings: RibbonDropDownSettingsModel = { iconCss: \"e-icons e-footer\", content: \"Footer\", items: this.footerOptions, select: (args) => { this.updateContent(\"Footer -> \" + args.item.text); } };\n  public pageSettings: RibbonDropDownSettingsModel = { iconCss: \"e-icons e-page-numbering\", content: \"Page Number\", items: this.pageOptions, select: (args) => { this.updateContent(\"Page Number -> \" + args.item.text); } };\n  public linkSettings: RibbonDropDownSettingsModel = { iconCss: \"e-icons e-link\", content: \"Link\", items: this.linkOptions, select: (args) => { this.updateContent(\"Link -> \" + args.item.text); } };\n\n  public cutButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-cut\", content: \"Cut\", clicked: () => { this.updateContent(\"Cut\"); this.enablePaste();} };\n  public copyButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-copy\", content: \"Copy\", clicked: () => { this.updateContent(\"Copy\"); this.enablePaste(); } };\n  public formatButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-format-painter\", content: \"Format Painter\", clicked: () => { this.updateContent(\"Format Painter\"); } };\n  public boldButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-bold\", content: \"Bold\", isToggle: true, clicked: () => { this.updateContent(\"Bold\"); } };\n  public italicButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-italic\", content: \"Italic\", isToggle: true, clicked: () => { this.updateContent(\"Italic\"); } };\n  public underlineButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-underline\", content: \"Underline\", isToggle: true, clicked: () => { this.updateContent(\"Underline\"); } };\n  public strikethroughButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-strikethrough\", content: \"Strikethrough\", isToggle: true, clicked: () => { this.updateContent(\"Strikethrough\"); } };\n  public changecaseButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-change-case\", content: \"Change Case\", isToggle: true, clicked: () => { this.updateContent(\"Change Case\"); } };\n  public replaceButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-replace\", content: \"Replace\", clicked: () => { this.updateContent(\"Replace\"); } };\n  public editorButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-editor\", content: \"Editor\", clicked: () => { this.updateContent(\"Editor\"); } };\n  public reuseButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-reuse\", content: \"Reuse Files\", clicked: () => { this.updateContent(\"Reuse Files\"); } };\n  public modelButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-3d-model\", content: \"3D Models\", clicked: () => { this.updateContent(\"3D Models\"); } };\n  public smartButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-smart-art\", content: \"Smart Art\", clicked: () => { this.updateContent(\"Smart Art\"); } };\n  public chartButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-chart\", content: \"Chart\", clicked: () => { this.updateContent(\"Chart\"); } };\n  public screenshotButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-screenshot\", content: \"Screenshot\", clicked: () => { this.updateContent(\"Screenshot\"); } };\n  public commentButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-comment-add\", content: \"New Comment\", clicked: () => { this.updateContent(\"New Comment\"); } };\n  public readButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-read\", content: \"Read Mode\", clicked: () => { this.updateContent(\"Read Mode\"); } };\n  public printButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-print\", content: \"Print Layout\", clicked: () => { this.updateContent(\"Print Layout\"); } };\n  public zoominButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-zoom-in\", content: \"Zoom In\", clicked: () => { this.updateContent(\"Zoom In\"); } };\n  public zoomoutButton: RibbonButtonSettingsModel = { iconCss: \"e-icons e-zoom-out\", content: \"Zoom Out\", clicked: () => { this.updateContent(\"Zoom Out\"); } };\n  public webButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-web-layout\", content: \"Web Layout\", clicked: () => { this.updateContent(\"Web Layout\"); } };\n  public darkButton: RibbonButtonSettingsModel = { iconCss: \"sf-icon-mode\", content: \"Dark Mode\", clicked: () => { this.updateContent(\"Dark Mode\"); } };\n\n  public fontSize: string[] = [\"8\", \"9\", \"10\", \"11\", \"12\", \"14\", \"16\", \"18\", \"20\", \"22\", \"24\", \"26\", \"28\", \"36\", \"48\", \"72\", \"96\"];\n  public fontStyle: string[] = [\"Algerian\", \"Arial\", \"Calibri\", \"Cambria\", \"Cambria Math\", \"Courier New\", \"Candara\", \"Georgia\", \"Impact\", \"Segoe Print\", \"Segoe Script\", \"Segoe UI\", \"Symbol\", \"Times New Roman\", \"Verdana\", \"Windings\"];\n\n  public fontstyleSettings: RibbonComboBoxSettingsModel = { dataSource: this.fontStyle, index: 3, width: '150px', allowFiltering: true, change: (args) => { this.updateContent(\"Font Style -> \" + args.itemData.text); } };\n  public fontsizeSettings: RibbonComboBoxSettingsModel = { dataSource: this.fontSize, index: 3, width: '80px', allowFiltering: true, change: (args) => { this.updateContent(\"Font Size -> \" + args.itemData.text); } };\n\n  public colorSettings: RibbonColorPickerSettingsModel = { value: '#123456', change: (args) => { this.updateContent(args.currentValue.hex + \" color\"); } };\n\n  public ruler: RibbonCheckBoxSettingsModel = { label: \"Ruler\", checked: false, change: () => { this.updateContent(\"Ruler\"); } };\n  public grid: RibbonCheckBoxSettingsModel = { label: \"Gridlines\", checked: false, change: () => { this.updateContent(\"Gridlines\"); } };\n  public navigation: RibbonCheckBoxSettingsModel = { label: \"Navigation Pane\", checked: false, change: () => { this.updateContent(\"Navigation Pane\"); } };\n\n  public fileOptions: MenuItemModel[] = [{ text: \"New\", iconCss: \"e-icons e-file-new\", id: \"new\" },\n  { text: \"Open\", iconCss: \"e-icons e-folder-open\", id: \"Open\" },\n  { text: \"Rename\", iconCss: \"e-icons e-rename\", id: \"rename\" },\n  {\n    text: \"Save as\", iconCss: \"e-icons e-save\", id: \"save\",\n    items: [\n      { text: \"Microsoft Word (.docx)\", iconCss: \"sf-icon-word\", id: \"newword\" },\n      { text: \"Microsoft Word 97-2003(.doc)\", iconCss: \"sf-icon-word\", id: \"oldword\" },\n      { text: \"Download as PDF\", iconCss: \"e-icons e-export-pdf\", id: \"pdf\" }]\n  }]\n\n  public fileSettings: FileMenuSettingsModel = {\n    menuItems: this.fileOptions,\n    visible: true,\n    select: (args: FileMenuEventArgs) => {\n      if (args.item.id === \"newword\" || args.item.id === \"oldword\" || args.item.id === \"pdf\") {\n        this.updateContent(\"File -> Save as -> \" + args.item.text);\n      }\n      else {\n        this.updateContent(\"File -> \" + args.item.text);\n      }\n    }\n  };\n\n  public largeSize: RibbonItemSize = RibbonItemSize.Large;\n  public smallSize: RibbonItemSize = RibbonItemSize.Small;\n\n  public Simplified: DisplayMode = DisplayMode.Simplified;\n  public Overflow: DisplayMode = DisplayMode.Overflow;\n\n  public position = { X: 'Right' };\n  public animation = { show: { effect: 'FadeIn' }, hide: { effect: 'FadeOut' } };\n\n  public pictureList: Object = [\n    { text: 'This device' },\n    { text: 'Stock Images' },\n    { text: 'Online Images' }];\n\n  public listItem (args: SelectListEventArgs) {\n    this.updateContent( \"Pictures -> \" + args.text)\n  }\n\n  public ispasteDisabled: boolean = true;\n  \n  public enablePaste() {\n    if (!this.ispasteDisabled) { return; }\n    this.simplifiedRibbonObj.enableItem('simplified-pastebtn');\n    this.ispasteDisabled = false;\n  }\n\n  public updateContent(args: string) {\n    this.toastObj.show({ content: \"Last clicked item is \" + args });\n  }\n\n  public launchClick(args: LauncherClickEventArgs) {\n    if (args.groupId == \"clipboard\") {\n      this.updateContent(\"Clipboard Launcher Icon\");\n    }\n    else if (args.groupId == \"illustration\") {\n      this.updateContent(\"Illustration Launcher Icon\");\n    }\n    else if (args.groupId == \"header_footer\") {\n      this.updateContent(\"Header & Footer Launcher Icon\");\n    }\n  }\n}\n","app/app.module.ts":"import { ListViewModule } from '@syncfusion/ej2-angular-lists';\n\nimport { ToastModule } from '@syncfusion/ej2-angular-notifications';\n\nimport { SliderModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { RibbonAllModule, RibbonModule } from '@syncfusion/ej2-angular-ribbon';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [RibbonAllModule, RibbonModule, SliderModule, ToastModule, ListViewModule ,BrowserModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-12 control-section simplified-ribbon-section\">\n  <div id=\"simplified-ribbonContainer\">\n    <ejs-ribbon #simplifiedRibbon id=\"simplified-ribbon\" [fileMenu]='fileSettings' activeLayout=\"Simplified\" launcherIconClick=launchClick($event)>\n      <e-ribbon-tabs>\n        <e-ribbon-tab header=\"Home\">\n          <e-ribbon-groups>\n            <e-ribbon-group header=\"Clipboard\" id=\"clipboard\" groupIconCss=\"e-icons e-paste\" [showLauncherIcon]=true>\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"SplitButton\" [disabled]=\"true\" id=\"simplified-pastebtn\" [allowedSizes]='largeSize' [splitButtonSettings]=\"pasteSettings\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"Button\" [buttonSettings]=\"cutButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"Button\" [buttonSettings]=\"copyButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"Button\" [buttonSettings]=\"formatButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Font\" orientation=\"Row\" [enableGroupOverflow]=true [isCollapsible]=false groupIconCss=\"e-icons e-bold\" cssClass=\"font-group\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"ComboBox\" [comboBoxSettings]=\"fontstyleSettings\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"ComboBox\" [comboBoxSettings]=\"fontsizeSettings\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"ColorPicker\" [allowedSizes]='smallSize' [displayOptions]='Simplified' [colorPickerSettings]=\"colorSettings\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"Button\" [allowedSizes]='smallSize' [buttonSettings]=\"boldButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"Button\" [allowedSizes]='smallSize' [buttonSettings]=\"italicButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"Button\" [allowedSizes]='smallSize' [buttonSettings]=\"underlineButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"Button\" [allowedSizes]='smallSize' [buttonSettings]=\"strikethroughButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"Button\" [allowedSizes]='smallSize' [buttonSettings]=\"changecaseButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Editing\" groupIconCss=\"e-icons e-edit\" orientation=\"Column\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"SplitButton\" [splitButtonSettings]=\"findSettings\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"Button\" [buttonSettings]=\"replaceButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"SplitButton\" [splitButtonSettings]=\"selectSettings\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Voice\" [isCollapsible]=false groupIconCss=\"sf-icon-dictate\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"SplitButton\" [allowedSizes]='largeSize' [splitButtonSettings]=\"dictateSettings\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Editor\"[isCollapsible]=false groupIconCss=\"sf-icon-editor\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"Button\" [allowedSizes]='largeSize' [buttonSettings]=\"editorButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Reuse Files\" [isCollapsible]=false groupIconCss=\"sf-icon-reuse\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"Button\" [disabled]=\"true\" [allowedSizes]='largeSize' [buttonSettings]=\"reuseButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n          </e-ribbon-groups>\n        </e-ribbon-tab>\n        <e-ribbon-tab header=\"Insert\">\n          <e-ribbon-groups>\n            <e-ribbon-group header=\"tables\" [isCollapsible]=\"false\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"DropDown\" [allowedSizes]='largeSize' [dropDownSettings]=\"tableSettings\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Illustrations\" id=\"illustration\" [showLauncherIcon]=true orientation=\"Row\" groupIconCss=\"e-icons e-image\" [enableGroupOverflow]=true>\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item id=\"pictureddl\" type=\"DropDown\" [allowedSizes]='largeSize' [dropDownSettings]=\"pictureSettings\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"DropDown\" [allowedSizes]='largeSize' [dropDownSettings]=\"shapeSettings\">\n                    </e-ribbon-item>\n                    <e-ribbon-item [allowedSizes]='largeSize' [buttonSettings]=\"modelButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item [allowedSizes]='largeSize' [buttonSettings]=\"smartButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item [allowedSizes]='largeSize' [buttonSettings]=\"chartButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item [allowedSizes]='largeSize' [buttonSettings]=\"screenshotButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Header & Footer\" id=\"header_footer\" groupIconCss=\"e-icons e-table\" [showLauncherIcon]=true orientation=\"Column\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=\"DropDown\" [dropDownSettings]=\"headerSettings\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"DropDown\" [dropDownSettings]=\"footerSettings\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=\"DropDown\" [dropDownSettings]=\"pageSettings\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Comments\" [isCollapsible]=false>\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item [allowedSizes]='largeSize' type=Button [buttonSettings]=\"commentButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Link\" groupIconCss=\"e-icons e-link\" [isCollapsible]=\"false\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item [allowedSizes]='largeSize' type=\"DropDown\" [dropDownSettings]=\"linkSettings\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n          </e-ribbon-groups>\n        </e-ribbon-tab>\n        <e-ribbon-tab header=\"View\">\n          <e-ribbon-groups>\n            <e-ribbon-group header=\"Views\" orientation=\"Row\" groupIconCss=\"e-icons e-print\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item [allowedSizes]='largeSize' type=Button [buttonSettings]=\"readButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item [allowedSizes]='largeSize' type=Button [buttonSettings]=\"printButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item [allowedSizes]='largeSize' type=Button [buttonSettings]=\"webButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Zoom\" orientation=\"Row\" groupIconCss=\"e-icons e-zoom-to-fit\">\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item [allowedSizes]='largeSize' type=Button [buttonSettings]=\"zoominButton\">\n                    </e-ribbon-item>\n                    <e-ribbon-item [allowedSizes]='largeSize' type=Button [buttonSettings]=\"zoomoutButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"show\" [isCollapsible]=false>\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item type=CheckBox [checkBoxSettings]=\"ruler\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=CheckBox [checkBoxSettings]=\"grid\">\n                    </e-ribbon-item>\n                    <e-ribbon-item type=CheckBox [checkBoxSettings]=\"navigation\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n            <e-ribbon-group header=\"Dark Mode\" [isCollapsible]=false>\n              <e-ribbon-collections>\n                <e-ribbon-collection>\n                  <e-ribbon-items>\n                    <e-ribbon-item [allowedSizes]='largeSize' type=Button [buttonSettings]=\"darkButton\">\n                    </e-ribbon-item>\n                  </e-ribbon-items>\n                </e-ribbon-collection>\n              </e-ribbon-collections>\n            </e-ribbon-group>\n          </e-ribbon-groups>\n        </e-ribbon-tab>\n      </e-ribbon-tabs>\n    </ejs-ribbon>\n    <div id=\"simplified-ribbonPlaceHolder\">\n      <div class=\"content1\"></div>\n      <div class=\"content2\"></div>\n      <div class=\"content3\"></div>\n      <div class=\"content4\"></div>\n      <ejs-toast id=\"toast\" #toast height=25 timeOut=2000 width='auto' target=\"#simplified-ribbonPlaceHolder\" cssClass=\"e-toast-info\"\n        [newestOnTop]=true [position]='position' [animation]='animation' [showCloseButton]=true></ejs-toast>\n    </div>\n    <ejs-listview id=\"simplified-pictureList\" [dataSource]='pictureList' [showHeader]=true headerTitle=\"Insert Picture From\" (select)='listItem($event)'></ejs-listview>\n  </div>\n</div>","app.component.css":"#simplified-pictureList {\n  border: 1px;\n  box-shadow: 0 0 2px;\n  display: none;\n}\n\n#pictureddl-popup #simplified-pictureList {\n  display: block;\n}\n\n.e-bigger #simplified-pictureList .e-list-header {\n  background-color: white;\n }\n\n body[class*=\"dark\"].e-bigger #simplified-pictureList .e-list-header,\n body[class*=\"high\"].e-bigger #simplified-pictureList .e-list-header {\n     background-color: #212529;\n }\n \n .e-bigger #simplified-pictureList ul {\n     padding: 0px;\n     margin-top: 0px;\n }\n\n#simplified-ribbonContainer{\n  padding: 20px;\n  background-color: #dbdadacc;\n  display: flex;\n  flex-direction: column;\n  height: 550px;\n}\n\n#simplified-ribbon {\n  box-sizing: border-box;\n}\n\n#simplified-ribbonPlaceHolder {\n  flex-grow: 1; \n  box-sizing: border-box;\n  background-color: transparent;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 15px;\n}\n\n#simplified-ribbonPlaceHolder .content1 {\n  background-color: #3a9ae5;\n  width: 150px;\n  height: 60%;\n}\n\n#simplified-ribbonPlaceHolder .content2 {\n  background-color: #9d9c9a;\n  width: calc(100% - 160px);\n  height: 60%;\n}\n\n#simplified-ribbonPlaceHolder .content3 {\n  background-color: #7f7e7d;\n  width: 150px;\n  height: calc(40% - 10px);\n}\n\n#simplified-ribbonPlaceHolder .content4 {\n  background-color: #c8c6c4;\n  width: calc(100% - 160px);\n  height: calc(40% - 10px);\n}\n\n#simplified-ribbonPlaceHolder #toast .e-toast-close-icon {\n  position: absolute;\n  top: 50%;\n  right: 2px ;\n  transform: translateY(-50%);\n  margin: 0;\n}\n\n#simplified-ribbonPlaceHolder #toast .e-toast-content {\n  padding-right: 25px;\n}\n\nbody[class*=\"dark\"] #ribbonContainer,\nbody[class*=\"high\"] #ribbonContainer {\n  background: #a7a7a742;\n}\n\n.font-group .e-ribbon-group-content {\n  justify-content: center;\n}\n\n#simplified-ribbonContainer #header_footer .e-ribbon-group-overflow-ddb {\n  min-width: 10ch;\n}\n\n@font-face {\nfont-family: 'ribbon';\nsrc:\nurl(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');\nfont-weight: normal;\nfont-style: normal;\n}\n\n[class^=\"sf-icon-\"], [class*=\" sf-icon-\"] {\nfont-family: 'ribbon' !important;\nspeak: none;\nfont-style: normal;\nfont-weight: normal;\nfont-variant: normal;\ntext-transform: none;\nline-height: 1;\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;\n}\n\n.sf-icon-3d-model:before { content: \"\\e700\"; }\n.sf-icon-shapes:before { content: \"\\e701\"; }\n.sf-icon-dictate:before { content: \"\\e702\"; }\n.sf-icon-chart:before { content: \"\\e703\"; }\n.sf-icon-screenshot:before { content: \"\\e704\"; }\n.sf-icon-smart-art:before { content: \"\\e706\"; }\n.sf-icon-share:before { content: \"\\e707\"; }\n.sf-icon-read:before { content: \"\\e708\"; }\n.sf-icon-web-layout:before { content: \"\\e709\"; }\n.sf-icon-mode:before { content: \"\\e70b\"; }\n.sf-icon-draft:before { content: \"\\e70c\"; }\n.sf-icon-reuse:before { content: \"\\e70f\"; }\n.sf-icon-editor:before { content: \"\\e70a\"; }\n.sf-icon-word:before { content: \"\\e70d\"; }","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-angular-lists\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-angular-notifications\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-ribbon\":\"*\",\"@syncfusion/ej2-angular-ribbon\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}