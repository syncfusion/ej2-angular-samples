{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { SliderModule, SliderComponent } from '@syncfusion/ej2-angular-inputs';\nimport { SliderTooltipEventArgs, SliderTickEventArgs } from '@syncfusion/ej2-inputs';\n\n\n\n/**\n * Format samples\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ SliderModule, ]\n})\nexport class AppComponent {\n    @ViewChild('currency')\n    public currencyObj: SliderComponent;\n    @ViewChild('kilometer')\n    public kilometerObj: SliderComponent;\n    @ViewChild('time')\n    public timeObj: SliderComponent;\n\n    public min: number = 0;\n    public max: number = 100;\n    public value: number[] = [20, 80];\n    public tooltip: Object = {\n        placement: 'Before',\n        isVisible: true,\n        // Formatting tooltip value in currency with 2-decimal specifier.\n        format: 'c2'\n    };\n    public ticks: Object = {\n        placement: 'After',\n        largeStep: 20,\n        smallStep: 5,\n        showSmallTicks: true,\n        // Formatting ticks value in currency with 3-decimal specifier.\n        format: 'c1'\n    };\n    public rangetype: string = 'Range';\n\n    //Initialize Slider\n\n    public kilovalue: number[] = [1100, 1850];\n    public minkilo: number = 900;\n    public maxkilo: number = 2100;\n    public kilotooltip: Object = {\n        placement: 'Before',\n        isVisible: true,\n        /**\n         * Formatting tooltip value in numeric with 2-decimal specifier if the any decimal values occurred.\n         * Zeros will be filled if the values are not in 4-digits in the fractional part.\n         */\n        format: '00##.## km'\n    };\n    public kiloticks: Object = {\n        placement: 'After',\n        largeStep: 400,\n        smallStep: 100,\n        showSmallTicks: true,\n        /**\n         * Formatting ticks value in numeric with 2-decimal specifier if the any decimal values occurred.\n         * Zeros will be filled if the values are not in 4-digits in the fractional part.\n         */\n        format: '00##.## km'\n    };\n\n    // Initialize Slider\n    public mintime: number = new Date(2013, 6, 13, 11).getTime();\n    public maxtime: number = new Date(2013, 6, 13, 23).getTime();\n    // 3600000 milliseconds = 1 Hour, 3600000 / 6 milliseconds = 10 Minutes\n    public steptime: number = 3600000 / 6;\n    public timevalue: number[] = [new Date(2013, 6, 13, 12).getTime(), new Date(2013, 6, 13, 18).getTime()];\n    public timetooltip: Object = {\n        placement: 'Before',\n        isVisible: true,\n    };\n    public timeticks: Object = {\n        placement: 'After',\n        // 3 * 3600000 milliseconds = 3 Hour\n        largeStep: 3 * 3600000,\n        smallStep: 3600000, showSmallTicks: true\n    };\n    tooltipChangeHandler(args: SliderTooltipEventArgs): void {\n        // Splitting the range values from the tooltip using space into an array.\n        let totalMiliSeconds: string[] = args.text.split(' ');\n        // First part is the first handle value\n        let firstPart: string = totalMiliSeconds[0];\n        // Second part is the second handle value\n        let secondPart: string = totalMiliSeconds[2];\n        /**\n         * toLocaleTimeString is predefined javascript date function, which is used to\n         * customize the date in different format\n         */\n        let custom: { [key: string]: string } = { hour: '2-digit', minute: '2-digit' };\n        firstPart = new Date(Number(firstPart)).toLocaleTimeString('en-us', custom);\n        secondPart = new Date(Number(secondPart)).toLocaleTimeString('en-us', custom);\n        // Assigning our custom text to the tooltip value.\n        args.text = firstPart + ' - ' + secondPart;\n    }\n\n    renderingTicksHandler(args: SliderTickEventArgs): void {\n        let totalMiliSeconds: number = Number(args.value);\n        /**\n         * toLocaleTimeString is predefined javascript date function, which is used to\n         * customize the date in different format\n         */\n        let custom: { [key: string]: string } = { hour: '2-digit', minute: '2-digit' };\n        // Assigning our custom text to the tick value.\n        args.text = new Date(totalMiliSeconds).toLocaleTimeString('en-us', custom);\n    }\n\n    ngOnInit() {\n        document.getElementById('right-pane').addEventListener('scroll', this.onScroll.bind(this));\n    }\n    // Handler used to reposition the tooltip on page scroll\n    onScroll(): void {\n        let slider: any = [this.currencyObj, this.kilometerObj, this.timeObj];\n        slider.forEach((slider: any) => {\n            slider.refreshTooltip(slider.tooltipTarget);\n        });\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-12 control-section\">\n    <div class='content-wrapper'>\n        <div class='sliderwrap'>\n            <label class='labeltext'>Currency Slider</label>\n            <ejs-slider id='currency' #currency [value]='value' [min]='min' [max]='max' [tooltip]='tooltip' [ticks]='ticks' [type]='rangetype'></ejs-slider>\n        </div>\n        <div class='sliderwrap'>\n            <label class='labeltext'>Kilometer Slider</label>\n            <ejs-slider id='kilometer' #kilometer [value]='kilovalue' [type]='rangetype' [min]='minkilo' [max]='maxkilo' [tooltip]='kilotooltip'\n                [ticks]='kiloticks'></ejs-slider>\n        </div>\n        <div class='sliderwrap'>\n            <label class='labeltext'>Time Slider</label>\n            <ejs-slider id='time' #time [value]='timevalue' [type]='rangetype' [min]='mintime' [step]='steptime' [max]='maxtime' [tooltip]='timetooltip'\n                [ticks]='timeticks' (tooltipChange)='tooltipChangeHandler($event)' (renderingTicks)='renderingTicksHandler($event)'></ejs-slider>\n        </div>\n    </div>\n</div>\n","app.component.css":".content-wrapper {\n    width: 40%;\n    margin: 0 auto;\n    min-width: 185px;\n}\n\n.sliderwrap {\n    margin-top: 40px;\n}\n.e-bigger .content-wrapper {\n    width: 80%;\n}\n.sliderwrap label {\n    padding-bottom: 26px;\n    font-size: 13px;\n    font-weight: 500;\n    margin-top: 15px;\n    text-align: left;\n    width: 100%;\n}\n\nbody.tailwind3 .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\nbody.tailwind3-dark .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick,\nbody.tailwind3.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick\nbody.tailwind3-dark.e-bigger .sliderwrap .e-tick-after.e-scale.e-h-scale .e-tick {\n    top: 0px;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}