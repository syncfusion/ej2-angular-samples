{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { SliderModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [   AppComponent ], imports: [ BrowserModule, DialogModule, SliderModule, BrowserModule, CheckBoxModule, NumericTextBoxModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-10 control-section azure\">\n    <div class=\"cloud-content-wrapper\">\n        <div id=\"pricing-slider\" class=\"pricing-slider\">\n            <div class=\"row\">\n                <div id=\"cloud-left-pane\" class=\"col-lg-8 col-md-8 col-sm-8\">\n                    <div class=\"cloud-slider\">\n                        <div id=\"processor\"></div>\n                        <span class=\"label-text\"> Processor </span>\n                        <!-- processor Slider element -->\n                        <ejs-slider id='processor-slider' #processorSlider [value]='processorValue' [min]=\"processorMin\" [max]=\"processorMax\" (change)='onChangeProcessor($event)'\n                            (created)='onCreateProcessor($event)'></ejs-slider>\n                        <div class=\"sub-heading\"> Each core included minimum 2.26 GHz power </div>\n                    </div>\n                    <div class=\"cloud-slider cloud-left-slider\">\n                        <div id=\"memory\"></div>\n                        <span class=\"label-text\"> Memory </span>\n                        <!-- memory Slider element -->\n                        <ejs-slider id='memory-slider' #memorySlider [value]='memoryValue' [min]=\"memoryMin\" [max]=\"memoryMax\" (change)='onChangeMemory($event)'\n                            (created)='onCreateMemory($event)'></ejs-slider>\n                        <div class=\"sub-heading\"> Equal to burstable memory included </div>\n                    </div>\n                    <div class=\"cloud-slider cloud-left-slider\">\n                        <div id=\"storage\"></div>\n                        <span class=\"label-text\"> Storage </span>\n                        <!-- storage Slider element -->\n                        <ejs-slider id='storage-slider' #storageSlider [value]='storageValue' [min]='storageMin' [max]='storageMax' (change)='onChangeStorage($event)'\n                            (created)='onCreateStorage($event)'></ejs-slider>\n                        <div class=\"sub-heading\"> 1000 GB bandwidth per month, at 100 Mbit/s uplink port </div>\n                    </div>\n                </div>\n                <div id=\"cloud-right-pane\" class=\"col-lg-4 col-md-4 col-sm-4\">\n                    <div class=\"cloud-right-content\">\n                        <div class=\"label-text\"> Size Range </div>\n                        <div class=\"btn-size\">\n                            <!-- Button element -->\n                            <button id=\"xSmallBtn\" ejs-button [cssClass] = 'buttonCss' [isPrimary]=\"true\">XS</button>\n                            <button ejs-button id=\"smallBtn\" [cssClass] = 'buttonCss' [isPrimary]=\"true\">S</button>\n                            <button ejs-button id=\"mediumBtn\" [cssClass] = 'buttonCss' [isPrimary]=\"true\">M</button>\n\n                            <button ejs-button id=\"largeBtn\" [cssClass] = 'buttonCss' [isPrimary]=\"true\">L</button>\n                            <button ejs-button id=\"xLargeBtn\" [cssClass] = 'buttonCss' [isPrimary]=\"true\">XL</button>\n                        </div>\n                        <div class=\"label-text right-text\"> Estimated Price </div>\n                        <div id=\"cloud-slider-text\">\n                            <span id=dollar>$ </span>\n                            <span id=\"value\"></span>\n                            <span class=\"suffix\">/month</span>\n                        </div>\n                        <div class=\"discount\">\n                            <div class=\"cloud-slider-right\">\n                                <!-- cPanel Check Box element -->\n                                <ejs-checkbox id=\"cPanel\" #cPanelCheckbox (change)='sliderValueChange()' label=\"Not required cPanel included\" [checked]=\"false\" ></ejs-checkbox>\n\n                            </div>\n                            <div class=\"cloud-slider-right discount-pay\">\n                                <!-- discount Check Box element -->\n                                <ejs-checkbox id=\"discount\" #discountCheckbox (change)='sliderValueChange()' label='12 Months <span class = \"offer\" > Save 25%.</span> Pay Monthly'\n                                    [checked]=\"false\"></ejs-checkbox>\n                            </div>\n                        </div>\n                        <!-- Button element -->\n                        <div class=\"slider-button\">\n                            <button ejs-button id=\"btn\" class=\"dlgbtn\" [isPrimary]=\"true\">Signup Now</button>\n\n                        </div>\n                        <div id=\"dialogWrapper\" class=\"cloud-content-wrapper\">\n                            <!-- Initialize alert Dialog -->\n                            <ejs-dialog id=\"alertDialog\" #dialog [buttons]='alertDlgButtons' [animationSettings]='animationSettings' [content]='alertContent'\n                                [width]='width' [visible]='false' [closeOnEscape]='false' [showCloseIcon]='false' [target]='target'>\n                            </ejs-dialog>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n","app.component.css":"html,\nbody {\n    height: 100%;\n    width: 100%;\n    margin: 0px;\n}\n\n#pricing-slider #cloud-right-pane .btn-size {\n    padding-top: 16px;\n    padding-bottom: 30px;\n    border-bottom: 1px solid lightgrey;\n}\n\n#pricing-slider .e-slider-container.e-horizontal {\n    height: 56px;\n}\n\n#pricing-slider .row {\n    border: 1px solid #CCCCCC;\n    box-shadow: 0px 0px 4px;\n    opacity: 100;\n\n    border-radius: 4px;\n}\n\n.discount .e-label,\n.discount .e-label {\n    white-space: initial;\n}\n\n#pricing-slider .sub-heading {\n    margin-top: -8px;\n    font-size: 13px;\n    font-family: Roboto-Regular;\n    color: #808080;\n}\n\n#pricing-slider .label-text.right-text {\n    padding-top: 16px;\n    padding-bottom: 20px;\n}\n\n#pricing-slider .label-text {\n    color: #000000;\n    font-size: 14px;\n    font-weight: 500;\n}\n\nspan.e-label .offer {\n    color: #4A90E2;\n}\n\n.cloud-slider {\n    display: block;\n    position: relative;\n}\n\n\n#processor {\n    background-color: #A06AFF;\n}\n\n#memory {\n    background-color: #7ED321;\n}\n\n#storage {\n    background-color: #4A90E2;\n}\n\n#memory,\n#storage,\n#processor {\n    font-family: Roboto-Medium;\n    font-size: 14px;\n    height: 24px;\n    width: 70px;\n    text-align: center;\n    line-height: 24px;\n    float: right;\n    color: #FFFFFF;\n    font-weight: 500;\n    border-radius: 18px;\n}\n\n#cloud-slider-text #value {\n    color: #000000;\n    font-family: Roboto-Bold;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n#suffix {\n    color: #000000;\n    font-family: Roboto-Regular;\n    font-size: 16px;\n    font-weight: 500;\n}\n\n.text {\n    font-size: 13px;\n    padding-top: 26px;\n    width: 190px;\n}\n\n#cloud-right-pane {\n    background-color: #FFFFFF;\n    border-left: 1px solid #CCCCCC;\n    padding: 20px;\n    height: 443px;\n}\n\n.pricing-slider {\n    margin-top: 40px;\n    min-height: 20px;\n    margin-bottom: 20px;\n}\n\n.cloud-slider-right {\n    color: #000000;\n    font-size: 14px;\n}\n\n.cloud-slider-right.discount-pay {\n    padding-top: 20px;\n}\n\n#cloud-left-pane {\n    height: 443px;\n    padding: 40px;\n    background-color: #FAFAFA;\n}\n\n.discount {\n    padding-top: 20px;\n    padding-bottom: 35px;\n}\n\n@media (max-width: 1010px) {\n    #cloud-right-pane {\n        border-top: 1px solid #d5d7d8 !important;\n        border-left: none !important;\n        border-width: 1px 0 0!important;\n        padding-top: 15px !important;\n        padding-left: 0!important;\n    }\n    .cloud-right-content {\n        padding-left: 24px !important;\n    }\n    #cloud-left-pane {\n        width: 100%;\n    }\n    #cloud-right-pane {\n        width: 100%;\n    }\n}\n\n#cloud-slider-text {\n    padding-bottom: 20px;\n    border-bottom: 1px solid lightgrey;\n}\n\n#dollar {\n    color: #000000;\n    font-family: Roboto-Regular;\n    font-size: 14px;\n    font-weight: 500;\n    position: relative;\n    top: -7px;\n}\n\n\n#btn {\n    text-transform: uppercase;\n    width: -webkit-fill-available;\n}\n\n.cloud-left-slider {\n    margin-top: 40px;\n}\n\n.azure.control-section {\n    padding-top: 0px;\n    margin-left: 75px;\n    overflow: hidden;\n}\n\n@media screen and (max-width: 1199px) {\n    .azure.control-section {\n        margin-left: 0px;\n    }\n}\n\n.cloud-right-content .e-btn.e-info {\n    padding: 0px;\n    width: 30px;\n    height: 30px;\n    line-height: inherit;\n    margin: 2px;\n}\n\n.highcontrast .pricing-slider,\n.highcontrast #pricing-slider .label-text,\n.highcontrast #pricing-slider .sub-heading {\n    color: white;\n}\n\n.fabric .cloud-right-content .e-btn.e-info,\n.highcontrast .e-btn.e-info {\n    line-height: 2px;\n}\n\n.highcontrast #dollar,\n.highcontrast #cloud-slider-text #value,\n.highcontrast #dialog-header,\n.highcontrast #StorgeDialog,\n.highcontrast #CloudDialog,\n.highcontrast #processorDialog {\n    color: white;\n}\n\n.highcontrast #pricing-slider .row {\n    border: 1px solid #969696;\n}\n\n.highcontrast #cloud-right-pane {\n    border-left: 1px solid #969696;\n}\n\n.highcontrast #cloud-slider-text,\n.highcontrast #pricing-slider #cloud-right-pane .btn-size {\n    border-bottom: 1px solid #969696;\n}\n\n.highcontrast #processor {\n    background-color: #AE80FF;\n}\n\n.highcontrast #memory {\n    background-color: #7ED321;\n}\n\n.highcontrast #storage {\n    background-color: #61A4EF;\n}\n\n.highcontrast #cloud-left-pane {\n    background-color: #1a1a1a;\n}\n\n.highcontrast #cloud-right-pane {\n    background-color: #000;\n}\n\n.highcontrast #processorPriceName,\n.highcontrast #memoryPriceName,\n.highcontrast #storgePriceName,\n.highcontrast #cloudPriceName {\n    color: white;\n    opacity: 1;\n}\n\n#dialog-header {\n    color: #000000;\n    opacity: .87;\n    font-family: Roboto-Medium;\n    font-weight: 600;\n    font-size: 20px;\n}\n\n#CloudDialog {\n    color: #000000;\n    padding-top: 14px;\n    padding-bottom: 24px;\n    border-top: 1px solid #CCCCCC;\n}\n\n#processorPrice,\n#memoryPrice,\n#storgePrice {\n    opacity: 0.9;\n    font-family: Roboto-Bold;\n    font-weight: 600;\n    font-size: 16px;\n    float: right;\n}\n\n#alertDialog .e-footer-content {\n    padding-top: 0;\n}\n\n#processorPriceName,\n#memoryPriceName,\n#storgePriceName,\n#cloudPriceName {\n    opacity: 0.9;\n    color: #000000;\n    font-family: Roboto-Regular;\n    font-size: 16px;\n}\n\n#cloudPrice {\n    opacity: 0.9;\n    font-family: Roboto-Bold;\n    font-weight: 600;\n    font-size: 26px;\n    float: right;\n}\n\n#processorDialog {\n    color: #000000;\n    padding-top: 12px;\n    padding-bottom: 12px;\n}\n\n#StorgeDialog {\n    color: #000000;\n    padding-top: 12px;\n    padding-bottom: 16px;\n}\n\n.bootstrap4 #pricing-slider .row {\n    box-shadow: none;\n}\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { SliderComponent, SliderChangeEventArgs } from '@syncfusion/ej2-angular-inputs';\nimport { CheckBoxComponent, ButtonModule } from '@syncfusion/ej2-angular-buttons';\nimport { DialogComponent } from '@syncfusion/ej2-angular-popups';\n\n/**\n * slider property customization\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n    @ViewChild('processorSlider')\n    public processorSlider: any;\n    @ViewChild('memorySlider')\n    public memorySlider: any;\n    @ViewChild('storageSlider')\n    public storageSlider: any;\n    @ViewChild('dialog')\n    public dialogInstance: DialogComponent;\n    @ViewChild('discountCheckbox')\n    public discountCheckbox: CheckBoxComponent;\n    @ViewChild('cPanelCheckbox')\n    public cPanelCheckbox: CheckBoxComponent;\n    public buttonCss: string = 'e-info';\n    public processorValue: number = 4;\n    public processorMin: number = 1;\n    public processorMax: number = 16;\n    public memoryValue: number = 4;\n    public memoryMin: number = 1;\n    public memoryMax: number = 12;\n    public storageValue: number = 300;\n    public storageMin: number = 10;\n    public storageMax: number = 500;\n    public storageStep: number = 10;\n    public target: string = '#pricing-slider';\n    public width: string = '360px';\n    public animationSettings: any = { effect: 'None' };\n    public alertContent: string = '<div id = \"dialog-content\"><div id = \"dialog-header\">Cloud Price Details</div>' +\n        '<div id=\"processorDialog\"><span id=\"processorPriceName\">Processor Price</span><span id=\"processorPrice\"></span></div>' +\n        '<div id=\"MemoryDialog\"><span id=\"memoryPriceName\">Memory Price</span><span id=\"memoryPrice\"></span></div>' +\n        '<div id=\"StorgeDialog\"><span id=\"storgePriceName\">Storge Price</span><span id=\"storgePrice\"></span></div>' +\n        '<div id=\"CloudDialog\"><span id=\"cloudPriceName\">Estimated Price</span><span id=\"cloudPrice\"></span></div></div>';\n    public alertDlgButtons: any = [{\n        click: this.alertDlgBtnClick.bind(this), buttonModel: { content: 'Close', isPrimary: true }\n    }];\n    public proceessorElem: HTMLElement;\n    public memoryElem: HTMLElement;\n    public storageElem: HTMLElement;\n    public elemValue: HTMLElement;\n    public finalValue: number;\n    public discountValue: number;\n    ngOnInit() {\n        //change the slider value based on workload\n        document.getElementById('xSmallBtn').onclick = (e: Event) => {\n            this.sliderPriceValue(1, 1, 10);\n        };\n        document.getElementById('smallBtn').onclick = (e: Event) => {\n            this.sliderPriceValue(1, 2, 10);\n        };\n        document.getElementById('mediumBtn').onclick = (e: Event) => {\n            this.sliderPriceValue(4, 4, 300);\n        };\n        document.getElementById('largeBtn').onclick = (e: Event) => {\n            this.sliderPriceValue(12, 6, 100);\n        };\n        document.getElementById('xLargeBtn').onclick = (e: Event) => {\n            this.sliderPriceValue(8, 12, 300);\n        };\n        document.getElementById('btn').onclick = (e: Event) => {\n            let processorPrice: HTMLElement = document.getElementById('processorPrice');\n            this.onChange(processorPrice, <number>this.processorSlider.value, 'CORE');\n            let memoryPrice: HTMLElement = document.getElementById('memoryPrice');\n            this.onChange(memoryPrice, <number>this.memorySlider.value, 'GB');\n            let storgePrice: HTMLElement = document.getElementById('storgePrice');\n            this.onChange(storgePrice, <number>this.storageSlider.value, 'GB');\n            let cloudPrice: HTMLElement = document.getElementById('cloudPrice');\n            cloudPrice.innerText = '$' + this.finalValue;\n            this.sliderValueChange();\n            this.dialogInstance.refreshPosition();\n            this.dialogInstance.show();\n        };\n    }\n\n    sliderPriceValue(processor: number, memory: number, storage: number): void {\n        this.processorSlider.value = processor;\n        this.processorSlider.dataBind();\n        this.memorySlider.value = memory;\n        this.memorySlider.dataBind();\n        this.storageSlider.value = storage;\n        this.storageSlider.dataBind();\n    }\n    //Sets processor value\n    onCreateProcessor(args: any): void {\n        document.getElementById('processor').innerHTML = this.processorSlider.value + '  ' + 'CORE';\n    }\n    //Sets memory value\n    onCreateMemory(args: any): void {\n        document.getElementById('memory').innerHTML = this.memorySlider.value + '  ' + 'GB';\n    }\n    //Sets storage value\n    onCreateStorage(args: any): void {\n        document.getElementById('storage').innerHTML = this.storageSlider.value + '  ' + 'GB';\n        this.sliderValueChange();\n    }\n\n    //Processor Slider value change method\n    onChangeProcessor(args: SliderChangeEventArgs): void {\n        this.onChange(document.getElementById('processor'), <number>args.value, 'CORE');\n    }\n\n    //Memory Slider value change method\n    onChangeMemory(args: SliderChangeEventArgs): void {\n        this.onChange(document.getElementById('memory'), <number>args.value, 'GB');\n    }\n\n    //Storage Slider value change method\n    onChangeStorage(args: SliderChangeEventArgs): void {\n        this.onChange(document.getElementById('storage'), <number>args.value, 'GB');\n    }\n    //common method for Slider value change\n    onChange(elem: HTMLElement, value: number, notation: string): void {\n        elem.innerText = value + '  ' + notation;\n        this.sliderValueChange();\n    }\n    sliderValueChange(): void {\n        this.elemValue = document.getElementById('value');\n        let porcessorValue: number = <number>this.processorSlider.value;\n        let memoryValue: number = <number>this.memorySlider.value;\n        let storageValue: number = <number>this.storageSlider.value;\n        //formula to calculate cloud price based on slider value\n        this.finalValue = Number(((((porcessorValue * memoryValue) * 1000) + ((porcessorValue * memoryValue) * storageValue)\n            + ((porcessorValue * memoryValue) * 100)) / 12).toFixed(2));\n        if (this.cPanelCheckbox && this.cPanelCheckbox.checked) {\n            this.finalValue = Number((this.finalValue - 10).toFixed(2));\n        }\n        if (this.discountCheckbox && this.discountCheckbox.checked) {\n            this.finalValue = Number((this.finalValue - ((this.finalValue * 25) / 100)).toFixed(2));\n        }\n        this.elemValue.innerText = this.finalValue.toString();\n    }\n\n    alertDlgBtnClick(): void {\n        this.dialogInstance.hide();\n    }\n}\n"}