{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\r\n * Profile picture Sample\r\n */\r\n import { Component, ViewChild } from '@angular/core';\r\n import { ImageEditorComponent } from '@syncfusion/ej2-angular-image-editor';\r\n import { createElement } from '@syncfusion/ej2-base';\r\n import { DialogComponent, ButtonPropsModel, PositionDataModel } from '@syncfusion/ej2-angular-popups';\r\n import { AnimationSettingsModel } from '@syncfusion/ej2-splitbuttons';\r\n\r\n @Component({\r\n     selector: 'app-root',\r\n     templateUrl: 'app.component.html',\r\n     styleUrls: ['app.component.css'],\r\n })\r\n \r\n export class AppComponent {\r\n    @ViewChild('Dialog')\r\n    public DialogInstance: DialogComponent;\r\n    @ViewChild('ImageEditor')\r\n    public ImageEditorInstance: ImageEditorComponent;\r\n\r\n    public toolbarItems: string[] = [];\r\n    public header: string = 'Edit Profile Image';\r\n    public showCloseIcon: Boolean = true;\r\n    public closeOnEscape: Boolean = true;\r\n    public width: string = '340px';\r\n    public height: string = '420px';\r\n    public visible: boolean = false;\r\n    public animationSettings: AnimationSettingsModel = { effect: 'None' };\r\n    public target: string = '.sb-desktop-wrapper';\r\n    public position: PositionDataModel = { X: 'center', Y: 100 };\r\n\r\n    public created = (): void => {\r\n        if (this.ImageEditorInstance.theme && window.location.href.split('#')[1]) {\r\n            this.ImageEditorInstance.theme = window.location.href.split('#')[1].split('/')[1];\r\n        }\r\n    }\r\n\r\n    public imageLoaded = (): void => {\r\n        let canvas: HTMLCanvasElement = document.querySelector('#img-canvas');\r\n        let image: HTMLImageElement = document.querySelector('#demo-img');\r\n        let ctx: CanvasRenderingContext2D = canvas.getContext('2d');\r\n        canvas.width = image.width < image.height ? image.width : image.height; \r\n        canvas.height = canvas.width;\r\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n    }\r\n    \r\n    public dialogOpen = (): void => {\r\n        let canvas: HTMLCanvasElement = document.querySelector('#img-canvas');\r\n        this.ImageEditorInstance.open(canvas.toDataURL());\r\n    }\r\n\r\n    public dialogClose = (): void => {\r\n        let canvas: HTMLCanvasElement = document.querySelector('#img-canvas');\r\n        this.ImageEditorInstance.open(canvas.toDataURL());\r\n    }\r\n    \r\n    // canvas click event\r\n    public onOpenDialog = function(event: any): void {\r\n        this.DialogInstance.show();\r\n    };\r\n\r\n    public imageChanged = (args: any): void=> {\r\n        const URL = window.URL; const url = URL.createObjectURL((args.target as any).files[0]);  \r\n        this.ImageEditorInstance.open(url.toString());\r\n        (document.getElementById('img-upload') as HTMLInputElement).value = null;\r\n    }\r\n\r\n    public fileOpened = (): void=> {\r\n        this.ImageEditorInstance.select('circle');\r\n    }\r\n\r\n    public dlgOpenButtonClick = (): void => {\r\n        document.getElementById('img-upload').click();\r\n    }\r\n\r\n    public dlgResetBtnClick = (): void => {\r\n        this.ImageEditorInstance.reset();\r\n    }\r\n\r\n    public dlgRotateBtnClick = (): void => {\r\n        this.ImageEditorInstance.rotate(-90);\r\n    }\r\n\r\n    public dlgDoneBtnClick = (): void => {\r\n        this.ImageEditorInstance.crop();\r\n        const croppedData: ImageData = this.ImageEditorInstance.getImageData();\r\n        const canvas: HTMLCanvasElement = document.querySelector('#img-canvas');\r\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d');\r\n        const parentDiv: HTMLElement = document.querySelector('.e-profile');\r\n        const tempCanvas: HTMLCanvasElement = parentDiv.appendChild(createElement('canvas') as HTMLCanvasElement);\r\n        const tempContext: CanvasRenderingContext2D = tempCanvas.getContext('2d');\r\n        tempCanvas.width = croppedData.width; tempCanvas.height = croppedData.height;\r\n        tempContext.putImageData(croppedData, 0, 0);\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        ctx.drawImage(tempCanvas, 0, 0, canvas.width, canvas.height);\r\n        tempCanvas.remove();\r\n        parentDiv.style.borderRadius = '100%'; canvas.style.backgroundColor = '#fff';\r\n        this.DialogInstance.hide();\r\n    }\r\n\r\n    public dlgButtons: ButtonPropsModel[] = \r\n    [\r\n        { click: this.dlgOpenButtonClick.bind(this), buttonModel: { content: 'Open', isPrimary: false, cssClass: 'e-custom-img-btn e-img-custom-open' } },\r\n        { click: this.dlgResetBtnClick.bind(this), buttonModel: { content: 'Reset', isPrimary: false, cssClass: 'e-custom-img-btn e-img-custom-reset' } },\r\n        { click: this.dlgRotateBtnClick.bind(this), buttonModel: { content: 'Rotate', isPrimary: false, cssClass: 'e-custom-img-btn e-img-custom-rotate' } },\r\n        { click: this.dlgDoneBtnClick.bind(this), buttonModel: { content: 'Apply', isPrimary: true, cssClass: 'e-custom-img-btn e-img-custom-apply'} }\r\n    ];\r\n\r\n    public canvasClicked = (): void => {\r\n        this.DialogInstance.show();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        let imageHide = document.getElementsByClassName('sb-desktop-wrapper')[0];\r\n        if (imageHide) {\r\n            (document.getElementsByClassName('sb-desktop-wrapper')[0] as HTMLElement).onclick = (args: any) : void => {\r\n                if (args.target.className.indexOf('col-lg-12 control-section') > -1 || args.target.className.indexOf('sb-content') > -1) {\r\n                    this.DialogInstance.hide();\r\n                }\r\n            }\r\n          }\r\n        }\r\n        \r\n}\r\n","app/app.module.ts":"import { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { ImageEditorModule } from '@syncfusion/ej2-angular-image-editor';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ DialogModule, BrowserModule, CommonModule, ImageEditorModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"  \r\n  \r\n  <div class=\"col-lg-12 control-section\">\r\n    <div class=\"e-profile\">\r\n      <div class=\"e-custom-wrapper\">\r\n        <canvas id=\"img-canvas\" style=\"max-width: 200px; max-height: 200px;\"></canvas>\r\n        <img alt=\"img\" id=\"demo-img\" crossorigin=\"anonymous\" src=\"https://ej2.syncfusion.com/angular/demos/assets/image-editor/images/profile.png\"\r\n        style=\"display: none;\" (load)=\"imageLoaded()\"/>\r\n        <input type=\"file\" id=\"img-upload\" (change)=\"imageChanged($event)\" style=\"display:none\" accept=\"image/*\"/>\r\n        <span id=\"custom-edit\" class=\"e-custom-edit\" (click)=\"canvasClicked()\">\r\n            <span class=\"e-custom-icon sb-icons\"></span>\r\n        </span>\r\n      </div>    \r\n    </div>\r\n    <div class=\"e-img-editor-sample\" id=\"profile-dialog\">\r\n        <ejs-dialog [position]=\"position\" #Dialog [buttons]='dlgButtons' [visible]='visible' [header]='header' [showCloseIcon]='showCloseIcon' [target]='target' [width]='width' [height]='height' (open)=\"dialogOpen()\" (close)=\"dialogClose()\">\r\n        <ng-template #content>\r\n            <ejs-imageeditor #ImageEditor [toolbar]='toolbarItems' (created)=\"created()\" (fileOpened)=\"fileOpened()\"> </ejs-imageeditor>\r\n        </ng-template>\r\n    </ejs-dialog>\r\n    </div>\r\n  </div>\r\n  \r\n  \r\n","app.component.css":"ejs-imageeditor {\r\n    display: block;\r\n}\r\n\r\n.e-img-editor-sample,\r\n.e-img-editor-sample .control-wrapper {\r\n\tposition: relative;\r\n}\r\n\r\n.e-profile {\r\n\twidth: 200px;\r\n\theight: 200px;\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\t-webkit-transform: translate(-50%, 30%);\r\n\ttransform: translate(-50%, 30%);\r\n\tborder-radius: 50%;\r\n}\r\n\r\n.e-custom-wrapper {\r\n\tposition: relative;\r\n}\r\n\r\n.e-custom-edit {\r\n\tposition: absolute;\r\n\twidth: 36px;\r\n\theight: 36px;\r\n\tborder-radius: 50%;\r\n\tbackground-color: blue;\r\n\ttop: calc(100% - 54px);\r\n\tleft: calc(100% - 47px);\r\n}\r\n\r\n.e-custom-icon::before {\r\n\tcontent: '\\e911';\r\n\tfont-size: 28px;\r\n\tcolor: white;\r\n\tleft: 5px;\r\n\ttop: 4px;\r\n  line-height: initial;\r\n\tposition: absolute;\r\n}\r\n\r\n#custom-edit:hover {\r\n\tcursor: pointer;\r\n}\r\n\r\ncanvas#img-canvas {\r\n\tborder-radius: 50%;\r\n\tborder: 4px solid darkgrey;\r\n}\r\n\r\n.e-profile .e-custom-img {\r\n    display: none;\r\n}\r\n\r\n#profile-dialog .e-dlg-content div {\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n\r\n.e-img-custom-open {\r\n\tfloat: left;\r\n\tmargin-left: 0 !important;\r\n}\r\n\r\n.e-img-custom-reset {\r\n\tfloat: left;\r\n}\r\n\r\n.tailwind .e-custom-icon::before,\r\n.tailwind-dark .e-custom-icon::before {\r\n\ttop: 6px;\r\n}\r\n\r\n.e-bigger #profile-dialog .e-dlg-header {\r\n    font-size: 18px !important;\r\n}\r\n\r\n\r\n.highcontrast .e-custom-img-btn,\r\n.fabric .e-custom-img-btn,\r\n.fabric-dark .e-custom-img-btn {\r\n\tpadding: 2px 10px !important;\r\n}\r\n\r\n.e-bigger .e-custom-img-btn {\r\n\tfont-size: 14px !important;\r\n\tpadding: 6px 10px !important;\r\n}\r\n\r\n.e-bigger.highcontrast .e-custom-img-btn,\r\n.e-bigger.fabric .e-custom-img-btn,\r\n.e-bigger.fabric-dark .e-custom-img-btn,\r\n.e-bigger.material .e-custom-img-btn,\r\n.e-bigger.material-dark .e-custom-img-btn {\r\n\tpadding: 3px 10px !important;\r\n}\r\n.e-bigger.bootstrap .e-custom-img-btn,\r\n.e-bigger.bootstrap-dark .e-custom-img-btn {\r\n\tpadding: 1px 10px !important;\r\n}\r\n","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-image-editor\":\"*\",\"@syncfusion/ej2-angular-image-editor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}