{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { SliderModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { SmithchartAllModule} from '@syncfusion/ej2-angular-charts';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [   AppComponent ], imports: [ SmithchartAllModule, BrowserModule, SliderModule, DropDownListAllModule, CheckBoxModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-lg-9\">\n        <ejs-smithchart style='display:block' align='center' id='smithchartcontainer' #smithchart [horizontalAxis] = 'horizontalAxis' [radialAxis] = 'radialAxis' [title] = 'title' [radius] = 'radius'[legendSettings] = 'legend' (load)='load($event)' \n\t\t>\n            <e-seriesCollection>\n                <e-series [points]='data' name='Transmission1'[marker]='marker' fill='#0F94C4'[tooltip] = 'tooltip'> </e-series>\n                <e-series [points]='data1' name='Transmission2'[marker]='marker' fill='#EE0C88' [tooltip] = 'tooltip'> </e-series>\n            </e-seriesCollection>\n        </ejs-smithchart>\n       \n    </div>   \n<div class=\"col-lg-3 property-section\">\n<div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>\n    <table id=\"property\" style=\"width:100%\" title=\"Properties\">\n        <tbody>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\" id=\"radius1\">\n                    Radius<span>&nbsp;&nbsp;&nbsp;1</span>\n                </td>\n                <td style=\"width: 70%\">\n                    <div class='sliderwrap'>\n                            <ejs-slider #slide id='radius' [value]='value' [min]='min' [max]='max'step =0.1 (change)='setRadius($event)'(touchmove)='setRadius($event)'(pointermove)='setRadius($event)' ></ejs-slider>\n                        </div>\n                </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Marker\n                </td>\n                <td style=\"width: 50%\">\n                        <ejs-checkbox  [checked]=\"true\"  class=\"smithinput\" (change)='setMarker($event)' name=\"marker\" id=\"marker\" checked>\n                            </ejs-checkbox>\n                        </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Data Label\n                </td>\n                <td style=\"width: 50%\">\n                        <ejs-checkbox class=\"smithinput\" (change)='setDataLabel($event)'  name=\"datalabel\" id=\"datalabel\">\n                            </ejs-checkbox>\n                        </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Animation\n                </td>\n                <td style=\"width: 50%\">\n                        <ejs-checkbox class=\"smithinput\" (change)='setAnimation($event)' name=\"high\" id=\"animate\">\n                            </ejs-checkbox>\n                        </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Tooltip\n                </td>\n                <td style=\"width: 50%\">\n                        <ejs-checkbox  [checked]=\"true\" class=\"smithinput\" (change)='setTooltip($event)' name=\"high\" id=\"tooltip\" checked>\n                            </ejs-checkbox>\n                        </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\">\n                    Legend\n                </td>\n                <td style=\"width: 50%\">\n                        <ejs-checkbox  [checked]=\"true\" class=\"smithinput\" (change)='setLegend($event)' name=\"high\" id=\"legend\" checked>\n                            </ejs-checkbox>\n                            \n                        </td>\n            </tr>\n            <tr style=\"height: 35px\">\n                <td style=\"width: 70%\" >\n                    Legend Position\n                </td>\n                <td style=\"width: 50%\">\n                    <select id=\"legend1\" style=\"width: 50px; height: 20px\">\n                        <option value=\"top\">Top</option>\n                        <option value=\"bottom\">Bottom</option>\n                        <option value=\"right\">Right</option>\n                        <option value=\"left\">Left</option>\n                    </select>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n\t</div>\n\t</div>\n</div>\n</div>\n<style>\n   \n\t.control-section {\n        min-height: 450px;\n    }\n    .property-text {\n        font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\" !important;\n        font-size: 13px !important;\n        font-weight: 400 !important;\n    }\n    #radius > * {\n        padding: 0px !important;\n    }\n    label{\n        height: 32px !important;\n    }    \n</style>","app.component.css":"","app.component.ts":"/**\n * Customization Sample\n */\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { SmithchartTheme, ISmithchartLoadEventArgs, Smithchart} from '@syncfusion/ej2-angular-charts';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { Slider, SliderChangeEventArgs } from '@syncfusion/ej2-inputs';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport {  ChangeEventArgs as CheckBoxChangeEvents} from '@syncfusion/ej2-buttons';\nimport { SliderComponent } from '@syncfusion/ej2-angular-inputs';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('smithchart')\n    @ViewChild('slide')\n    //public slide : Slider;\n    public smithchart: Smithchart;\n    public horizontalAxis: Object = {\n            minorGridLines: {\n                visible: true\n            }\n        };\n    public radialAxis: Object = {\n            minorGridLines: {\n                visible: true\n            }\n        };\n    public data: Object[] = [\n       { resistance: 10, reactance: 25 }, { resistance: 8, reactance: 6 },\n                    { resistance: 6, reactance: 4.5 }, { resistance: 4.5, reactance: 4 },\n                    { resistance: 3.5, reactance: 3 }, { resistance: 2.5, reactance: 2 },\n                    { resistance: 2, reactance: 1.5 }, { resistance: 1.5, reactance: 1.25 },\n                    { resistance: 1, reactance: 0.9 }, { resistance: 0.5, reactance: 0.6 },\n                    { resistance: 0.3, reactance: 0.4 }, { resistance: 0, reactance: 0.15 }\n    ];\n    public data1: Object[] = [\n      { resistance: 20, reactance: -50 }, { resistance: 10, reactance: -10 },\n                    { resistance: 9, reactance: -4.5 }, { resistance: 8, reactance: -3.5 },\n                    { resistance: 7, reactance: -2.5 }, { resistance: 6, reactance: -1.5 },\n                    { resistance: 5, reactance: -1 }, { resistance: 4.5, reactance: -0.8 },\n                    { resistance: 3.5, reactance: -0.8 }, { resistance: 2.5, reactance: -0.4 },\n                    { resistance: 2, reactance: -0.2 }, { resistance: 1.5, reactance: 0 },\n                    { resistance: 1, reactance: 0.1 }, { resistance: 0.5, reactance: 0.2 },\n                    { resistance: 0.3, reactance: 0.15 }, { resistance: 0, reactance: 0.05 },\n    ];\n    // custom code start\n     // tslint:disable\n     // custom code end\n    public radius: number = 1;\n    public marker: Object = {\n        shape: 'Rectangle',\n        visible: true,\n        border: {\n            width: 2,\n        }\n    };\n    public title: Object = {\n     text: 'Impedance Transmission', enableTrim: true, maximumWidth: 200,\n            visible: true\n    };\n    public legend: Object = {\n         visible: true,\n         position: 'Top',\n         shape: 'Circle'\n    };\n    public tooltip: Object = {\n        visible: true\n    };\n    public value: number = 1;\n    public min: number = 0.1;\n    public max: number = 1;\n    // custom code start\n    public load = (args: ISmithchartLoadEventArgs) => {\n        let theme: string = location.hash.split('/')[1];\n        theme = theme ? theme : 'Material';\n        args.smithchart.theme = <SmithchartTheme>(theme.charAt(0).toUpperCase() + theme.slice(1));\n    }\n    // custom code end\n    public setRadius(e: SliderChangeEventArgs): void {\n        let slider: Element = document.getElementById('radius');\n        let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0];\n        let smith: Element = document.getElementById('smithchartcontainer');\n        let smith1: Smithchart = <Smithchart>smith['ej2_instances'][0];\n        smith1.radius = slider1.value as number;\n        document.getElementById('radius1').innerHTML = 'Radius <span> ' + (slider1.value as number);\n        smith1.refresh();\n    }\n    public setMarker(e: CheckBoxChangeEvents): void {\n        let boolean: boolean = e.checked;\n        let smith: Smithchart = <Smithchart>document.getElementById('smithchartcontainer')['ej2_instances'][0];\n        if (boolean) {\n            smith.series[0].marker.visible = true;\n            smith.series[1].marker.visible = true;\n        } else {\n            smith.series[0].marker.visible = false;\n            smith.series[1].marker.visible = false;\n        }\n        smith.refresh();\n    }\n    public setDataLabel(e: CheckBoxChangeEvents): void {\n        let boolean: boolean = e.checked;\n        let smith: Smithchart = <Smithchart>document.getElementById('smithchartcontainer')['ej2_instances'][0];\n        if (boolean) {\n            smith.series[0].marker.dataLabel.visible = true;\n            smith.series[1].marker.dataLabel.visible = true;\n        } else {\n            smith.series[0].marker.dataLabel.visible = false;\n            smith.series[1].marker.dataLabel.visible = false;\n        }\n        smith.refresh();\n    }\n    public setAnimation(e: CheckBoxChangeEvents): void {\n        let boolean: boolean = e.checked;\n        let smith: Smithchart = <Smithchart>document.getElementById('smithchartcontainer')['ej2_instances'][0];\n        if (boolean) {\n            smith.series[0].enableAnimation = true;\n            smith.series[1].enableAnimation = true;\n        } else {\n            smith.series[0].enableAnimation = false;\n            smith.series[1].enableAnimation = false;\n        }\n        smith.refresh();\n    }\n\n    public setTooltip(e: CheckBoxChangeEvents): void {\n        let boolean: boolean = e.checked;\n        let smith: Smithchart = <Smithchart>document.getElementById('smithchartcontainer')['ej2_instances'][0];\n        if (boolean) {\n            smith.series[0].tooltip.visible = true;\n            smith.series[1].tooltip.visible = true;\n        } else {\n            smith.series[0].tooltip.visible = false;\n            smith.series[1].tooltip.visible = false;\n        }\n        this.smithchart.refresh();\n    }\n    public setLegend(e: CheckBoxChangeEvents): void {\n        let boolean: boolean = e.checked;\n        let smith: Smithchart = <Smithchart>document.getElementById('smithchartcontainer')['ej2_instances'][0];\n        if (boolean) {\n            smith.legendSettings.visible = true;\n        } else {\n            smith.legendSettings.visible = false;\n        }\n        smith.refresh();\n    }\n    ngOnInit(): void {\n        let mode: DropDownList = new DropDownList({\n        index: 0,\n        width: 90,\n        change: () => {\n            let element: string = mode.value.toString();\n            let smith: Smithchart = <Smithchart>document.getElementById('smithchartcontainer')['ej2_instances'][0];\n           smith.legendSettings.position = element;\n            smith.refresh();\n        }\n    });\n        mode.appendTo('#legend1');\n    }\n    constructor() {\n        //code\n    };\n}"}