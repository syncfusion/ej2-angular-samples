{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, OnInit } from '@angular/core';\nimport { DropDownListComponent, ChangeEventArgs, DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { InPlaceEditorComponent, RenderMode, EditableType, InPlaceEditorModule } from '@syncfusion/ej2-angular-inplace-editor';\nimport { NumericTextBoxModel, MaskedTextBoxModel, TextBoxModel } from '@syncfusion/ej2-inputs';\nimport { PopupSettingsModel } from '@syncfusion/ej2-inplace-editor/src/inplace-editor/base/models-model';\n\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\n/**\n * In-place Editor default sample\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [InPlaceEditorModule, DropDownListModule, CheckBoxModule,  ]\n})\nexport class AppComponent {\n\n    @ViewChild('inplace_editor')\n    public inplaceObj: InPlaceEditorComponent;\n  \n    @ViewChild('numericTextBoxEle')\n    public numericTextBoxObj: InPlaceEditorComponent;\n  \n    @ViewChild('maskedTextBoxEle')\n    public maskedTextBoxObj: InPlaceEditorComponent;\n  \n    @ViewChild('editorMode')\n    public editorModeObj: DropDownListComponent;\n  \n    @ViewChild('editable')\n    public editableObj: DropDownListComponent;\n  \n    public date: Date = new Date();\n    public numericTextBoxModel: NumericTextBoxModel = {\n      format: 'c2',\n      placeholder: 'Currency format'\n    };\n    public maskedTextBoxModel: MaskedTextBoxModel = {\n      mask: '000-000-0000'\n    };\n    public overviewModel: TextBoxModel = {\n      placeholder: 'Enter employee name'\n    };\n    public settings: PopupSettingsModel = {\n      title: 'Enter Employee Name'\n    };\n    public numericValue: string = '$100.00';\n    public maskValue: string = '012-345-6789';\n    public editorModeData: string[] = ['Inline', 'Popup'];\n    public editableData: string[] = ['Click', 'Double Click', 'Edit Icon Click'];\n    public scrollParent: HTMLElement = document.querySelector('.sb-right-pane') as HTMLElement;\n  \n    ngOnInit(): void {\n      if(this.scrollParent){\n        this.scrollParent.addEventListener('scroll', this.hidePopup.bind(this));\n      }\n    }\n  \n    changeMode(e: ChangeEventArgs): void {\n      /*Apply selected mode to the component*/\n      this.inplaceObj.mode = e.value as RenderMode;\n      this.numericTextBoxObj.mode = e.value as RenderMode;\n      this.maskedTextBoxObj.mode = e.value as RenderMode;\n    }\n  \n    changeEditable(e: ChangeEventArgs) {\n      /* Apply selected editable mode to the component */\n      let value: string = e.value as string;\n      if (value === 'Double Click') {\n        value = 'DblClick';\n      }\n      if (value === 'Edit Icon Click') {\n        value = 'EditIconClick';\n      }\n      const editableOn: EditableType = value as EditableType;\n      this.inplaceObj.editableOn = editableOn;\n      this.numericTextBoxObj.editableOn = editableOn;\n      this.maskedTextBoxObj.editableOn = editableOn;\n    }\n  \n    showButtonsChange(args) {\n      this.inplaceObj.showButtons = args.checked;\n      this.numericTextBoxObj.showButtons = args.checked;\n      this.maskedTextBoxObj.showButtons = args.checked;\n    }\n  \n    enableChange(args) {\n      this.inplaceObj.disabled = !args.checked;\n      this.numericTextBoxObj.disabled = !args.checked;\n      this.maskedTextBoxObj.disabled = !args.checked;\n    }\n  \n    hidePopup(): void {\n      if (this.editorModeObj.value === 'Inline') { return; }\n      if (this.inplaceObj && this.inplaceObj.element.querySelectorAll('.e-editable-open').length > 0) {\n        this.inplaceObj.enableEditMode = false;\n      }\n      if (this.numericTextBoxObj && this.numericTextBoxObj.element.querySelectorAll('.e-editable-open').length > 0) {\n        this.numericTextBoxObj.enableEditMode = false;\n      }\n      if (this.maskedTextBoxObj && this.maskedTextBoxObj.element.querySelectorAll('.e-editable-open').length > 0) {\n        this.maskedTextBoxObj.enableEditMode = false;\n      }\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section inplace-control-section input-layout\">\n    <div class=\"control_wrapper\">\n        <table>\n            <tr>\n                <td>\n                    <label class=\"control-label\" style=\"text-align: left;font-size: 14px;font-weight: 400\">\n                        TextBox </label>\n                </td>\n                <td>\n                    <ejs-inplaceeditor #inplace_editor mode=\"Inline\" [popupSettings]=\"settings\" [model]=\"overviewModel\"\n                        type=\"Text\" value='Andrew'></ejs-inplaceeditor>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <label class=\"control-label\" style=\"text-align: left;font-size: 14px;font-weight: 400\">\n                        NumericTextBox </label>\n                </td>\n                <td>\n                    <ejs-inplaceeditor #numericTextBoxEle mode=\"Inline\" [model]=\"numericTextBoxModel\" type=\"Numeric\"\n                        [value]='numericValue'></ejs-inplaceeditor>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <label class=\"control-label\" style=\"text-align: left;font-size: 14px;font-weight: 400\">\n                        MaskedTextBox </label>\n                </td>\n                <td>\n                    <ejs-inplaceeditor #maskedTextBoxEle mode=\"Inline\" [model]=\"maskedTextBoxModel\" type=\"Mask\" [value]='maskValue'></ejs-inplaceeditor>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div>\n\n<div id=\"inplaceProperty\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-section\">\n        <div class=\"property-panel-header\"></div>\n        <div class=\"property-panel-content\">\n            <table id=\"property \" class=\"property-panel-table\" title=\"Properties\">\n                <tr>\n                    <td>\n                        <div> Mode</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-dropdownlist #editorMode [dataSource]='editorModeData' (change)='changeMode($event)' value='Inline'></ejs-dropdownlist>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Editable On</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-dropdownlist #editable [dataSource]='editableData' (change)='changeEditable($event)' value='Click'></ejs-dropdownlist>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Show Buttons</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-checkbox #showbuttons [checked]=\"true\" (change)=\"showButtonsChange($event)\"></ejs-checkbox>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Enable Edit</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-checkbox #editorEnable [checked]=\"true\" (change)=\"enableChange($event)\"></ejs-checkbox>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n","app.component.css":".inplace-control-section .control_wrapper .e-inplaceeditor:not(#colorPickerEle) {\n    width: inherit;\n}\n\n.inplace-control-section .control_wrapper .e-inplaceeditor {\n    min-width: 150px;\n}\n\n.inplace-control-section .control_wrapper table td {\n    width: 200px;\n    height: 100px;\n}\n\n.inplace-control-section.input-layout .control_wrapper table td .control-label {\n    margin-bottom: 0px;\n}\n\n.e-inplace-editor-tip .e-editable-component {\n    width: 150px;\n}\n\n@media (max-width: 768px) {\n    .inplace-control-section .control_wrapper table tr td:nth-child(1) {\n        width: 130px;\n    }\n\n    .inplace-control-section .control_wrapper table tr td:nth-child(2) {\n        width: 200px;\n    }\n}\n\n#inputsProperty .property-panel-section {\n    margin: 30px auto;\n    padding-top: 50px;\n}\n\n/* <!-- custom code start --> */\n    .inplace-control-section .control_wrapper {\n        margin: auto;\n        max-width: 400px;\n    }\n/* <!-- custom code end --> */","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-inplace-editor\":\"*\",\"@syncfusion/ej2-angular-inplace-editor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-inplace-editor/src/inplace-editor/base/models-model\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}