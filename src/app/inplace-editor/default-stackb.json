{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { InPlaceEditorModule } from '@syncfusion/ej2-angular-inplace-editor';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [   AppComponent ], imports: [ InPlaceEditorModule, BrowserModule, CheckBoxModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-8 control-section inplace-control-section input-layout\">\n    <div class=\"control_wrapper\">\n        <table>\n            <tr>\n                <td>\n                    <label class=\"control-label\" style=\"text-align: left;font-size: 14px;font-weight: 400\">\n                        TextBox </label>\n                </td>\n                <td>\n                    <ejs-inplaceeditor #inplace_editor mode=\"Inline\" [popupSetting]=\"settings\" [model]=\"overviewModel\"\n                        type=\"Text\" value='Andrew'></ejs-inplaceeditor>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <label class=\"control-label\" style=\"text-align: left;font-size: 14px;font-weight: 400\">\n                        NumericTextBox </label>\n                </td>\n                <td>\n                    <ejs-inplaceeditor #numericTextBoxEle mode=\"Inline\" [model]=\"numericTextBoxModel\" type=\"Numeric\"\n                        [value]='numericValue'></ejs-inplaceeditor>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <label class=\"control-label\" style=\"text-align: left;font-size: 14px;font-weight: 400\">\n                        MaskedTextBox </label>\n                </td>\n                <td>\n                    <ejs-inplaceeditor #maskedTextBoxEle mode=\"Inline\" [model]=\"maskedTextBoxModel\" type=\"Mask\" [value]='maskValue'></ejs-inplaceeditor>\n                </td>\n            </tr>\n        </table>\n    </div>\n</div>\n<div id=\"inplaceProperty\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-section\">\n        <div class=\"property-panel-header\"></div>\n        <div class=\"property-panel-content\">\n            <table id=\"property \" class=\"property-panel-table\" title=\"Properties\">\n                <tr>\n                    <td>\n                        <div> Mode</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-dropdownlist #editorMode [dataSource]='editorModeData' (change)='changeMode($event)' value='Inline'></ejs-dropdownlist>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Editable On</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-dropdownlist #editable [dataSource]='editableData' (change)='changeEditable($event)' value='Click'></ejs-dropdownlist>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Show Buttons</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-checkbox #showbuttons [checked]=\"true\" (change)=\"showButtonsChange($event)\"></ejs-checkbox>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Enable Edit</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-checkbox #editorEnable [checked]=\"true\" (change)=\"enableChange($event)\"></ejs-checkbox>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n\n<style>\n    .inplace-control-section .control_wrapper .e-inplaceeditor:not(#colorPickerEle) {\n        width: inherit;\n    }\n\n    .inplace-control-section .control_wrapper .e-inplaceeditor {\n        min-width: 150px;\n    }\n\n    .inplace-control-section .control_wrapper table td {\n        width: 200px;\n        height: 100px;\n    }\n\n    .inplace-control-section.input-layout .control_wrapper table td .control-label {\n        margin-bottom: 0px;\n    }\n\n    .e-inplace-editor-tip .e-editable-component {\n        width: 150px;\n    }\n\n    @media (max-width: 768px) {\n        .inplace-control-section .control_wrapper table tr td:nth-child(1) {\n            width: 130px;\n        }\n\n        .inplace-control-section .control_wrapper table tr td:nth-child(2) {\n            width: 200px;\n        }\n    }\n\n    #inputsProperty .property-panel-section {\n        margin: 30px auto;\n        padding-top: 50px;\n    }\n</style>\n\n<!-- custom code start -->\n<style>\n    .inplace-control-section .control_wrapper {\n        margin: auto;\n        max-width: 400px;\n    }\n</style>\n<!-- custom code end -->\n","app.component.css":"","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, OnInit } from '@angular/core';\nimport { DropDownListComponent, ChangeEventArgs } from '@syncfusion/ej2-angular-dropdowns';\nimport { InPlaceEditorComponent, RenderMode, EditableType } from '@syncfusion/ej2-angular-inplace-editor';\n\n/**\n * In-place Editor default sample\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    public date: Object = new Date();\n    @ViewChild('inplace_editor')\n    public inplaceObj: InPlaceEditorComponent;\n    @ViewChild('numericTextBoxEle')\n    public numericTextBoxObj: InPlaceEditorComponent;\n    @ViewChild('maskedTextBoxEle')\n    public maskedTextBoxObj: InPlaceEditorComponent;\n    @ViewChild('editorMode')\n    public editorModeObj: DropDownListComponent;\n    @ViewChild('editable')\n    public editableObj: DropDownListComponent;\n    public numericTextBoxModel: object;\n    public maskedTextBoxModel: object;\n    public overviewModel: object;\n    public settings: object;\n    public numericValue: string = '$100.00';\n    public maskValue: string = '012-345-6789';\n    public editorModeData: string[] = ['Inline', 'Popup'];\n    public editableData: string[] = ['Click', 'Double Click', 'Edit Icon Click'];\n    public scrollParent: HTMLElement = <HTMLElement>document.querySelector('.sb-right-pane');\n\n    ngOnInit(): void {\n        this.numericTextBoxModel = {\n            format: 'c2',\n            placeholder: 'Currency format'\n        };\n        this.maskedTextBoxModel = {\n            mask: '000-000-0000'\n        };\n        this.overviewModel = {\n            placeholder: 'Enter employee name'\n        };\n        this.settings = {\n            title: 'Enter Employee Name'\n        };\n        this.scrollParent.addEventListener('scroll', this.hidePopup.bind(this));\n    }\n\n    changeMode(e: ChangeEventArgs) {\n        /*Apply selected mode to the component*/\n        this.inplaceObj.mode = e.value as RenderMode;\n        this.numericTextBoxObj.mode = e.value as RenderMode;\n        this.maskedTextBoxObj.mode = e.value as RenderMode;\n    }\n\n    changeEditable(e: ChangeEventArgs) {\n        /* Apply selected editable mode to the component */\n        let value: string = e.value as string;\n        if (value === 'Double Click') {\n            value = 'DblClick';\n        }\n        if (value === 'Edit Icon Click') {\n            value = 'EditIconClick';\n        }\n        const editableOn: EditableType = value as EditableType;\n        this.inplaceObj.editableOn = editableOn;\n        this.numericTextBoxObj.editableOn = editableOn;\n        this.maskedTextBoxObj.editableOn = editableOn;\n    }\n    showButtonsChange(args) {\n        this.inplaceObj.showButtons = args.checked;\n        this.numericTextBoxObj.showButtons = args.checked;\n        this.maskedTextBoxObj.showButtons = args.checked;\n    }\n    enableChange(args) {\n        this.inplaceObj.disabled = !args.checked;\n        this.numericTextBoxObj.disabled = !args.checked;\n        this.maskedTextBoxObj.disabled = !args.checked;\n    }\n    hidePopup(): void {\n        if (this.editorModeObj.value === 'Inline') { return; }\n        if (this.inplaceObj && this.inplaceObj.element.querySelectorAll('.e-editable-open').length > 0) {\n            this.inplaceObj.enableEditMode = false;\n        }\n        if (this.numericTextBoxObj && this.numericTextBoxObj.element.querySelectorAll('.e-editable-open').length > 0) {\n            this.numericTextBoxObj.enableEditMode = false;\n        }\n        if (this.maskedTextBoxObj && this.maskedTextBoxObj.element.querySelectorAll('.e-editable-open').length > 0) {\n            this.maskedTextBoxObj.enableEditMode = false;\n        }\n    }\n}\n"}