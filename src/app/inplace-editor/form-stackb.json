{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, OnInit, ElementRef } from '@angular/core';\nimport { DropDownListComponent, ChangeEventArgs, MultiSelectModel, DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { InPlaceEditorComponent, RteService, MultiSelectService, RenderMode, InPlaceEditorModule } from '@syncfusion/ej2-angular-inplace-editor';\nimport { ActionEventArgs } from '@syncfusion/ej2-angular-inplace-editor';\nimport { RichTextEditorModel } from '@syncfusion/ej2-richtexteditor';\nimport { TextBoxModel } from '@syncfusion/ej2-inputs';\nimport { PopupSettingsModel } from '@syncfusion/ej2-inplace-editor/src/inplace-editor/base/models-model';\n\n\n\n/**\n * In-place Editor form sample\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [RteService, MultiSelectService],\n    standalone: true,\n    imports: [InPlaceEditorModule, DropDownListModule,  ]\n})\nexport class AppComponent {\n\n    @ViewChild('inplaceTitleEditor')\n    public titleEditorObj: InPlaceEditorComponent;\n\n    @ViewChild('inplaceCommentEditor')\n    public commentEditorObj: InPlaceEditorComponent;\n\n    @ViewChild('inplaceTagEditor')\n    public tagEditorObj: InPlaceEditorComponent;\n\n    @ViewChild('editorMode')\n    public editorModeObj: DropDownListComponent;\n\n    @ViewChild('formlayout')\n    public formlayout: ElementRef;\n\n    public date: Date = new Date();\n    public titleEditorValue: String = 'Succinctly E-Book about TypeScript';\n    public commentEditorValue: String = 'The extensive adoption of JavaScript for application development, and the ability to use HTML and JavaScript to create Windows Store apps, has made JavaScript a vital part of the Windows development ecosystem. Microsoft has done extensive work to make JavaScript easier to use';\n    public tagEditorValue: string[] = ['TypeScript', 'JavaScript'];\n    public editorModeData: string[] = ['Inline', 'Popup'];\n    public multiData: string[] = ['Android', 'JavaScript', 'Jquery', 'TypeScript', 'Angular', 'React', 'Vue', 'Ionic'];\n    public scrollParent: HTMLElement;\n    public titleEditorModel: TextBoxModel = {\n        placeholder: 'Enter your question title'\n    };\n    public commentEditorModel: RichTextEditorModel = {\n        toolbarSettings: {\n            enableFloating: false,\n            items: ['Bold', 'Italic', 'Underline', 'FontColor', 'BackgroundColor',\n                'LowerCase', 'UpperCase', '|', 'OrderedList', 'UnorderedList']\n        }\n    };\n    public tagEditorModel: MultiSelectModel = {\n        mode: 'Box',\n        dataSource: this.multiData,\n        placeholder: 'Enter your tags'\n    };\n    public tagPopSettings: PopupSettingsModel = { model: { width: 'auto' } };\n    public commentsPopSettings: PopupSettingsModel;\n    public titleRule: { [name: string]: { [rule: string]: Object } } = {\n        Title: { required: [true, 'Enter valid title'] }\n    };\n    public commentRule: { [name: string]: { [rule: string]: Object } } = {\n        rte: { required: [true, 'Enter valid comments'] }\n    };\n    public tagRule: { [name: string]: { [rule: string]: Object } } = {\n        Tag: { required: [true, 'Enter valid tags'] }\n    };\n\n    ngOnInit(): void {\n        this.scrollParent = <HTMLElement>document.querySelector('.sb-right-pane');\n        if(this.scrollParent){\n            this.scrollParent.addEventListener('scroll', this.hidePopup.bind(this));\n        }\n        \n    }\n\n    commentCreated(): void {\n        this.commentsPopSettings = {\n            model: {\n                width: this.formlayout.nativeElement.offsetWidth\n            }\n        };\n    }\n\n    changeMode(e: ChangeEventArgs): void {\n        /* Apply selected mode to the component */\n        this.titleEditorObj.mode = e.value as RenderMode;\n        this.tagEditorObj.mode = e.value as RenderMode;\n        this.commentEditorObj.mode = e.value as RenderMode;\n    }\n\n    actiononSuccess(args: ActionEventArgs): void {\n        args.value = this.chipCreation(args.value.split(','));\n    }\n\n    chipCreation(data: string[]): string {\n        let value: string = '<div class=\"e-chip-list\">';\n        [].slice.call(data).forEach((val: string) => {\n            value += '<div class=\"e-chip\"> <span class=\"e-chip-text\"> ' + val + '</span></div>';\n        });\n        value += '</div>';\n        return value;\n    }\n\n    tagCreation(): void {\n        this.chipOnCreate();\n    }\n\n    chipOnCreate(): void {\n        this.tagEditorObj.element.querySelector('.e-editable-value').innerHTML = this.chipCreation(this.tagEditorObj.value as string[]);\n    }\n\n    hidePopup(): void {\n        if (this.editorModeObj.value === 'Inline') { return; }\n        if (this.titleEditorObj && this.titleEditorObj.element.querySelectorAll('.e-editable-open').length > 0) {\n            this.titleEditorObj.enableEditMode = false;\n        }\n        if (this.tagEditorObj && this.tagEditorObj.element.querySelectorAll('.e-editable-open').length > 0) {\n            this.tagEditorObj.enableEditMode = false;\n        }\n        if (this.commentEditorObj && this.commentEditorObj.element.querySelectorAll('.e-editable-open').length > 0) {\n            this.commentEditorObj.enableEditMode = false;\n        }\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section inplace-editor-control-section form-layout\" #formlayout id='inplace-editor-control'>\n    <div class=\"content-wrapper\" style=\"margin-bottom: 25px\">\n        <div id=\"confirmation\">\n            <div id=\"submitDialog\"></div>\n            <form id=\"formId\" class=\"form-horizontal\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\" style=\"text-align: left;font-size: 14px;\">\n                        Title</label>\n                    <ejs-inplaceeditor #inplaceTitleEditor mode=\"Inline\" emptyText='Enter your question title'\n                        name='Title' [validationRules]='titleRule' data-underline=\"false\" [model]=\"titleEditorModel\" [value]='titleEditorValue'></ejs-inplaceeditor>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\" style=\"text-align: left;font-size: 14px;\">\n                        Comments</label>\n                    <ejs-inplaceeditor #inplaceCommentEditor mode=\"Inline\" emptyText='Enter your comment'\n                        submitOnEnter='false' type='RTE' name='rte' data-underline=\"false\" [popupSettings]=\"commentsPopSettings\"\n                        [model]=\"commentEditorModel\" [validationRules]='commentRule' [value]='commentEditorValue' (created)='commentCreated()'></ejs-inplaceeditor>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\" style=\"text-align: left;font-size: 14px;\">\n                        Tags</label>\n                    <ejs-inplaceeditor #inplaceTagEditor mode=\"Inline\" (actionSuccess)='actiononSuccess($event)' (created)='tagCreation()'\n                        emptyText='Enter your tags' type='MultiSelect' name='Tag' data-underline=\"false\" [popupSettings]=\"tagPopSettings\"\n                        [model]=\"tagEditorModel\" [validationRules]='tagRule' [value]='tagEditorValue'></ejs-inplaceeditor>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n<div id=\"formProperty\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-section\">\n        <div class=\"property-panel-header\"></div>\n        <div class=\"property-panel-content\">\n            <table id=\"property \" class=\"property-panel-table\" title=\"Properties\">\n                <tr>\n                    <td>\n                        <div> Mode</div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-dropdownlist #editorMode [dataSource]='editorModeData' (change)='changeMode($event)' value='Inline'></ejs-dropdownlist>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n","app.component.css":".inplace-editor-control-section #formId {\n    padding-top: 20px;\n    margin-bottom: 45px;\n    border: 1px solid #ccc;\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.36);\n    border-radius: 5px;\n}\n\n.inplace-editor-control-section .form-horizontal .form-group {\n    margin: 0 20px;\n}\n\n.inplace-editor-control-section .form-horizontal .form-group > * {\n    width: 100%;\n}\n\n.inplace-editor-control-section .form-horizontal .form-group:last-child {\n    padding-bottom: 40px;\n}\n\n.inplace-editor-control-section .form-title {\n    width: 100%;\n    text-align: center;\n    padding: 10px;\n    font-size: 16px;\n    font-weight: 500;\n    color: rgba(0, 0, 0, 0.70);\n}\n\n.inplace-editor-control-section .submit {\n    margin: auto;\n    width: 50%;\n    text-align: center;\n}\n\n.inplace-editor-control-section.form-layout .control-wrapper .form-horizontal .control-label {\n    padding: 15px 15px 15px 0;\n    font-weight: 600;\n}\n\n@media (max-width: 768px) {\n    .inplace-editor-control-section.form-layout .control-wrapper .form-horizontal .control-label {\n        padding-top: 7px;\n        margin-bottom: 0;\n    }\n}\n\n/* <!-- custom code start --> */\n.inplace-editor-control-section #confirmation {\n    max-width: 500px;\n    margin: auto;\n}\n/* <!-- custom code end --> */","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-inplace-editor\":\"*\",\"@syncfusion/ej2-angular-inplace-editor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-filemanager\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-inplace-editor/src/inplace-editor/base/models-model\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}