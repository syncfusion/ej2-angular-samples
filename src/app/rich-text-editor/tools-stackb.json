{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Rich Text Editor Overview Sample\n */\nimport { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ToolbarService, LinkService, ImageService, HtmlEditorService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { RichTextEditorComponent, TableService, FileManagerService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { FileManagerSettingsModel, QuickToolbarSettingsModel } from '@syncfusion/ej2-angular-richtexteditor';\nimport { createElement, addClass, removeClass, Browser } from '@syncfusion/ej2-base';\nimport * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css.js';\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['app.component.css'],\n    providers: [ToolbarService, LinkService, ImageService, HtmlEditorService, TableService, FileManagerService]\n})\nexport class AppComponent {\n\n    @ViewChild('toolsRTE')\n    public rteObj: RichTextEditorComponent;\n\n    private hostUrl: string = 'https://ej2-aspcore-service.azurewebsites.net/';\n\n    public tools: ToolbarModule = {\n        items: ['Bold', 'Italic', 'Underline', 'StrikeThrough',\n            'FontName', 'FontSize', 'FontColor', 'BackgroundColor',\n            'LowerCase', 'UpperCase','SuperScript', 'SubScript', '|',\n            'Formats', 'Alignments', 'NumberFormatList', 'BulletFormatList',\n            'Outdent', 'Indent', '|',\n            'CreateTable', 'CreateLink', 'Image', 'FileManager', '|', 'ClearFormat', 'Print',\n            'SourceCode', 'FullScreen', '|', 'Undo', 'Redo']\n    };\n\n    public fileManagerSettings: FileManagerSettingsModel = {\n        enable: true,\n        path: '/Pictures/Food',\n        ajaxSettings: {\n            url: this.hostUrl + 'api/FileManager/FileOperations',\n            getImageUrl: this.hostUrl + 'api/FileManager/GetImage',\n            uploadUrl: this.hostUrl + 'api/FileManager/Upload',\n            downloadUrl: this.hostUrl + 'api/FileManager/Download'\n        }\n    };\n\n    public quickToolbarSettings: QuickToolbarSettingsModel = {\n        table: ['TableHeader', 'TableRows', 'TableColumns', 'TableCell', '-', 'BackgroundColor', 'TableRemove', 'TableCellVerticalAlign', 'Styles']\n    };\n\n    public textArea: HTMLElement;\n    public myCodeMirror: any;\n\n    ngAfterViewInit(): void {\n        const rteObj: RichTextEditorComponent = this.rteObj;\n        setTimeout(() => { this.textArea = rteObj.contentModule.getEditPanel() as HTMLElement; }, 600);\n    }\n    public mirrorConversion(e?: any): void {\n        const id: string = this.rteObj.getID() + 'mirror-view';\n        let mirrorView: HTMLElement = this.rteObj.element.querySelector('#' + id) as HTMLElement;\n        const charCount: HTMLElement = this.rteObj.element.querySelector('.e-rte-character-count') as HTMLElement;\n        if (e.targetItem === 'Preview') {\n            this.textArea.style.display = 'block';\n            mirrorView.style.display = 'none';\n            this.textArea.innerHTML = this.myCodeMirror.getValue();\n            charCount.style.display = 'block';\n        } else {\n            if (!mirrorView) {\n                mirrorView = createElement('div', { className: 'e-content' });\n                mirrorView.id = id;\n                this.textArea.parentNode.appendChild(mirrorView);\n            } else {\n                mirrorView.innerHTML = '';\n            }\n            this.textArea.style.display = 'none';\n            mirrorView.style.display = 'block';\n            this.renderCodeMirror(mirrorView, this.rteObj.value);\n            charCount.style.display = 'none';\n        }\n    }\n\n    public renderCodeMirror(mirrorView: HTMLElement, content: string): void {\n        this.myCodeMirror = CodeMirror(mirrorView, {\n            value: content,\n            lineNumbers: true,\n            mode: 'text/html',\n            lineWrapping: true,\n\n        });\n    }\n    public handleFullScreen(e: any): void {\n        const sbCntEle: HTMLElement = document.querySelector('.sb-content.e-view');\n        const sbHdrEle: HTMLElement = document.querySelector('.sb-header.e-view');\n        const leftBar: HTMLElement = document.querySelector('#left-sidebar');\n        if (e.targetItem === 'Maximize') {\n            if (Browser.isDevice && Browser.isIos) {\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            addClass([leftBar], ['e-close']);\n            removeClass([leftBar], ['e-open']);\n        } else if (e.targetItem === 'Minimize') {\n            if (Browser.isDevice && Browser.isIos) {\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            removeClass([leftBar], ['e-close']);\n            if (!Browser.isDevice) {\n                addClass([leftBar], ['e-open']);\n            }\n        }\n    }\n    public actionCompleteHandler(e: any): void {\n        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {\n            (this.rteObj.sourceCodeModule.getPanel() as HTMLTextAreaElement).style.display = 'none';\n            this.mirrorConversion(e);\n        } else {\n            setTimeout(() => { this.rteObj.toolbarModule.refreshToolbarOverflow(); }, 1000);\n        }\n    }\n}\n","app/app.module.ts":"import { SwitchModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { TabModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ButtonModule} from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListModule, MentionModule  } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { SplitterModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, FormsModule, ReactiveFormsModule,TabModule,       RichTextEditorAllModule, SplitterModule, CheckBoxModule, DialogModule, NumericTextBoxModule,ButtonModule,SwitchModule, RadioButtonModule, TextBoxModule, DropDownListModule, MentionModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <ejs-richtexteditor #toolsRTE id='alltoolRTE' [toolbarSettings]='tools' [showCharCount]='true'\n        [fileManagerSettings]='fileManagerSettings' [quickToolbarSettings]='quickToolbarSettings'\n        (actionBegin)='handleFullScreen($event)' (actionComplete)='actionCompleteHandler($event)'>\n        <ng-template #valueTemplate>\n            <p>The Rich Text Editor is WYSIWYG (\"what you see is what you get\") editor useful to create and edit\n                content and return the valid <a href=\"https://ej2.syncfusion.com/home/\" target=\"_blank\">HTML markup</a>\n                or <a href=\"https://ej2.syncfusion.com/home/\" target=\"_blank\">markdown</a> of the content</p>\n\n            <p><b>Toolbar</b></p>\n            <ol>\n                <li>\n                    <p>The Toolbar contains commands to align the text, insert a link, insert an image, insert list,\n                        undo/redo operations, HTML view, etc </p>\n                </li>\n                <li>\n                    <p>The Toolbar is fully customizable </p>\n                </li>\n            </ol>\n\n            <p><b>Links</b></p>\n            <ol>\n                <li>\n                    <p>You can insert a hyperlink with its corresponding dialog </p>\n                </li>\n                <li>\n                    <p>Attach a hyperlink to the displayed text. </p>\n                </li>\n                <li>\n                    <p>Customize the quick toolbar based on the hyperlink </p>\n                </li>\n            </ol>\n\n            <p><b>Image.</b></p>\n            <ol>\n                <li>\n                    <p>Allows you to insert images from an online source as well as the local computer </p>\n                </li>\n                <li>\n                    <p>You can upload an image </p>\n                </li>\n                <li>\n                    <p>Provides an option to customize the quick toolbar for an image </p>\n                </li>\n            </ol>\n            <img alt=\"Logo\" src=\"https://ej2.syncfusion.com/angular/demos/assets/rich-text-editor/images/RTEImage-Feather.png\" style=\"width: 300px;\">\n        </ng-template>\n    </ejs-richtexteditor>\n</div>","app.component.css":".e-code-mirror::before {\n    content: '\\e345';\n}\n.CodeMirror-linenumber,\n.CodeMirror-gutters {\n    display: none;\n}\n\n.fabric-dark .cm-s-default .cm-tag,\n.bootstrap5-dark .cm-s-default .cm-tag,\n.material-dark .cm-s-default .cm-tag,\n.tailwind-dark .cm-s-default .cm-tag,\n.highcontrast .cm-s-default .cm-tag {\n    color: #00ff00;\n}\n\n.fabric-dark .cm-s-default .cm-string,\n.bootstrap5-dark .cm-s-default .cm-string,\n.material-dark .cm-s-default .cm-string,\n.tailwind-dark .cm-s-default .cm-string {\n    color: blue;\n}\n\n.highcontrast .cm-s-default .cm-string {\n    color: #ffd939;\n}\n\n.fabric-dark .cm-s-default .cm-attribute,\n.bootstrap5-dark .cm-s-default .cm-attribute,\n.material-dark .cm-s-default .cm-attribute,\n.tailwind-dark .cm-s-default .cm-attribute,\n.highcontrast .cm-s-default .cm-attribute {\n    color: #f00;\n}\n\n.fabric-dark .CodeMirror,\n.bootstrap5-dark .CodeMirror,\n.material-dark .CodeMirror,\n.tailwind-dark .CodeMirror {\n    background:  #303030;\n}\n\n.highcontrast .CodeMirror {\n    background: black;\n}\n\n.sb-content.e-view.hide-header {\n    top: 0 !important;\n}\n\n.sb-header.e-view.hide-header {\n    display: none;\n}\n\n.e-richtexteditor .e-rte-content .e-content pre {\n    padding: 10px;\n    background: #F4F5F7;\n}\n\n.fabric-dark .e-richtexteditor .e-rte-content .e-content pre,\n.bootstrap5-dark .e-richtexteditor .e-rte-content .e-content pre,\n.material-dark .e-richtexteditor .e-rte-content .e-content pre,\n.tailwind-dark .e-richtexteditor .e-rte-content .e-content pre,\n.highcontrast .e-richtexteditor .e-rte-content .e-content pre {\n    padding: 10px;\n    background: #303030;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}