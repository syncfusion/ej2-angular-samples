{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Rich Text Editor - Online HTML Editor Sample\n */\nimport { Component, ViewChild, ViewEncapsulation, OnInit, Inject } from '@angular/core';\nimport { createElement, KeyboardEventArgs } from '@syncfusion/ej2-base';\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\nimport { ToolbarService, LinkService, ImageService, TableService, HtmlEditorService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { RichTextEditorComponent, ToolbarType } from '@syncfusion/ej2-angular-richtexteditor';\nimport * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css.js';\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\n\n@Component({\n    selector: 'app-root',\n    encapsulation: ViewEncapsulation.None,\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    providers: [ToolbarService, LinkService, ImageService, HtmlEditorService, TableService]\n})\nexport class AppComponent {\n    @ViewChild('defaultRTE', { static: false })\n    public rteObj: RichTextEditorComponent;\n\n    public myCodeMirror: any;\n    public srcArea: HTMLElement;\n    public textArea: HTMLElement;\n\n    public tools: ToolbarModule = {\n        type: ToolbarType.Expand,\n        enableFloating :false,\n        items: ['Bold', 'Italic', 'Underline', 'StrikeThrough',\n            'FontName', 'FontSize', 'FontColor', 'BackgroundColor',\n            'Formats', 'Alignments', 'NumberFormatList', 'BulletFormatList',\n            'Outdent', 'Indent',\n            'CreateTable', 'CreateLink', 'Image', 'FileManager', '|', 'ClearFormat', 'Print',\n            'SourceCode', 'FullScreen', '|', 'Undo', 'Redo']\n    };\n\n    constructor() {\n        \n    }\n\n    public updateHtmlValue(): void {\n        this.textArea.innerHTML = this.myCodeMirror.getValue();\n    }\n\n    public renderCodeMirror(mirrorView: HTMLElement, content: string): void {\n        this.myCodeMirror = CodeMirror(mirrorView, {\n            value: content,\n            lineNumbers: true,\n            mode: 'text/html',\n            lineWrapping: true,\n        });\n    }\n\n    public onCreate(): void {\n        setTimeout(() => {\n            this.rteObj.refreshUI();\n            this.updateValue();\n            this.textArea = this.rteObj.contentModule.getEditPanel() as HTMLElement;\n            this.srcArea = document.querySelector('.source-code');\n            if (this.srcArea) {\n                this.srcArea.addEventListener('keyup', (e: KeyboardEventArgs) => {\n                  this.updateHtmlValue();\n                });\n            }\n        }, 400);\n    }\n\n    public onChange(): void {\n        this.updateValue();\n    }\n\n    public updateValue(): void {\n        let mirrorView: HTMLElement = document.querySelector('#src-view');\n        if (!mirrorView) {\n          mirrorView = createElement('div', {\n            className: 'e-content'\n          });\n          mirrorView.id = 'src-view';\n          let srcCodeElement: HTMLElement = document.querySelector('.source-code');\n          if (srcCodeElement) {\n            srcCodeElement.appendChild(mirrorView);\n          }\n          mirrorView.innerHTML = '';\n          mirrorView.style.display = 'block';\n        }\n        let srcViewEle: HTMLElement = document.querySelector('#src-view');\n        let codemirrorEle: HTMLElement = document.querySelector('.CodeMirror-wrap');\n        if (codemirrorEle) {\n          codemirrorEle.remove();\n        }\n        if(this.rteObj.value){\n        this.renderCodeMirror(srcViewEle, this.rteObj.value);\n        }\n    }\n}\n","app/app.module.ts":"import { SwitchModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { TabModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ButtonModule} from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListModule, MentionModule  } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { SplitterModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, FormsModule, ReactiveFormsModule,TabModule,       RichTextEditorAllModule, SplitterModule, CheckBoxModule, DialogModule, NumericTextBoxModule,ButtonModule,SwitchModule, RadioButtonModule, TextBoxModule, DropDownListModule, MentionModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"\n<div class=\"control-section\">\n    <div class=\"sample-container online-editor\">\n        <div class=\"default-section\">\n            <div class=\"sample-view\">\n                \n                <ejs-splitter height='450px' width='100%'>\n                    <e-panes>\n                        <e-pane size='50%' [resizable]='true' cssClass='pane1' min='400px' >\n                            <ng-template #content>\n                                <div class=\"content\">\n                                    <ejs-richtexteditor id=\"defaultRTE\" #defaultRTE height='447px' [toolbarSettings]='tools' saveInterval='1' [showCharCount]='true' maxLength='5000'\n                                        (created)='onCreate()' (change)='onChange()' (actionComplete)='updateValue()'>\n                                        <ng-template #valueTemplate>\n                                            <h3>Welcome to the HTML real-time live editor!</h3>\n                                            <p>Create and edit the valid HTML code simply! You don't worry about the HTML syntax to format your text content. \n                                            The WYSIWYG editor (left side view) provided the toolbar to make format text and insert images, tables, and more options.</p>\n                                            <h4>Don't worry about syntax</h4>\n                                            <p>The content editing works bi-directional, you can write the HTML code on the right-side view (code view), and changes will reflect in the WYSIWYG editor.</p>\n                                        </ng-template>\n                                    </ejs-richtexteditor>\n                                </div>\n                            </ng-template>\n                        </e-pane>\n                        <e-pane cssClass='pane2' min='60px'>\n                            <ng-template #content>\n                                <div class=\"heading right\">\n                                    <h6 class=\"title\"><b>HTML SOURCE</b></h6>\n                                    <div class=\"splitter-default-content source-code pane2\" contenteditable=\"true\"></div>\n                                </div>\n                            </ng-template>\n                        </e-pane>\n                    </e-panes>\n                </ejs-splitter>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".online-editor #defaultRTE {\n  overflow: hidden;\n  border: none;\n}\n.online-editor .CodeMirror .cm-s-default .CodeMirror-wrap {\n    height: 415px;\n  }\n.online-editor.heading {\n  float: left;\n  width: 100%;\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px;\n  padding-left:0px;\n  padding-right:0px;\n}\n\n.online-editor .title {\n  color: #333333;\n  letter-spacing: 1px;\n  padding-left: 10px;\n}\n.online-editor .title-head {\n  text-align: center\n}\n\n.online-editor .e-control.e-splitter .e-split-bar.e-split-bar-horizontal.e-last-bar {\n  margin: 0;\n}\n.online-editor .sb-content-section {\n border-bottom: none;\n border-right: none;  \n}\n\n.online-editor .sample-head {\n  height: 48px;\n  background: #ffffff;\n  box-shadow: 0 8px 11px -6px rgba(0, 0, 0, 0.12);\n  z-index: 1001;\n  opacity: 100;\n  display: none;\n}\n\n.online-editor .head-content {\n  padding: 15px 0 0 35px;\n  font-weight: 499;\n  line-height: 18px;\n  font-size: 15px;\n  color: #000000;\n  font-family: sans-serif;\n}\n\n.online-editor table {\n  width: 100%;\n}\n\n.online-editor table,\n.online-editor th,\n.online-editor td {\n  border: 1px solid black;\n  border-collapse: collapse;\n}\n\n.online-editor .content{\n  border: 1px solid #dddddd\n}\n\n.ej2-new .container-fluid {\n  padding-right: 0px; \n  padding-left: 0px;\n}\n.e-splitter.e-splitter-horizontal, .e-splitter.e-splitter-vertical {\nborder-left: none;\n}\n.ej2-new  .control-section {\n  padding-top: 0px;\n  padding-bottom: 0px;\n}\n.online-editor .e-tab .e-tab-header:not(.e-vertical)::before {\n  border-bottom: none;\n  border-right: 1px solid #dee2e6;\n}\n.online-editor .e-richtexteditor.e-rte-tb-expand .e-rte-content, .e-richtexteditor.e-rte-tb-expand .e-source-content\n.sb-content-section .e-lib .e-tab .e-control .e-template .e-keyboard .e-nested .sb-content-header  {\n  border-bottom: none;\n}\n.online-editor .e-toolbar.e-control[class*='e-toolbar']\n{\n  border-bottom: none;\n}\n.online-editor .CodeMirror-scroll\n{\n  border-top: 1px solid #e8e8e8 !important;\n}\n.online-editor .heading .right .e-pane .e-pane-horizontal .e-scrollable\n{\n  padding:0px;\n}\n.sb-content-section .sb-content-tab-header {\n  border-right: 1px solid #D7D7D7;\n}\n.online-editor .e-richtexteditor.e-rte-tb-expand {\n   border: none;\n}\n.fabric-dark .CodeMirror-gutters, .fabric-dark .CodeMirror {\n  background-color: #201F1F;\n  color: #fff;\n}\n.fluent-dark .CodeMirror-gutters, .fluent-dark .CodeMirror {\n  background-color: #1B1A19;\n  color: #fff;\n}\n.bootstrap-dark .CodeMirror-gutters, .bootstrap-dark .CodeMirror {\n  background-color: #1A1A1A;\n  color: #fff;\n}\n.bootstrap5-dark .CodeMirror-gutters, .bootstrap5-dark .CodeMirror {\n  background-color: #212529;\n  color: #fff;\n}\n.material-dark .CodeMirror-gutters, .material-dark .CodeMirror {\n  background-color: #303030;\n  color: #fff;\n}\n.tailwind-dark .CodeMirror-gutters, .tailwind-dark .CodeMirror {\n  background-color: #1F2937;\n  color: #fff;\n}\n.highcontrast .CodeMirror-gutters, .highcontrast .CodeMirror {\n  background-color: #000000;\n  color: #fff;\n}\n.fabric-dark .title, .bootstrap5-dark .title, .bootstrap-dark .title, .fluent-dark .title, \n.material-dark .title, .tailwind-dark .title, .highcontrast .title {\n  color: #fff;\n}\n","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}