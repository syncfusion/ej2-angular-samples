{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Rich Text Editor Enter Key Configuration Functionality Sample\n */\nimport { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { createElement } from '@syncfusion/ej2-base';\nimport { RichTextEditorComponent, ToolbarService, LinkService, ImageService, HtmlEditorService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { DropDownListComponent, FieldSettingsModel } from '@syncfusion/ej2-angular-dropdowns';\nimport { FloatLabelType } from '@syncfusion/ej2-angular-inputs';\nimport * as CodeMirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css.js';\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [ToolbarService, LinkService, ImageService, HtmlEditorService]\n})\nexport class AppComponent {\n\n    @ViewChild('defaultRTE')\n    public rteObj: RichTextEditorComponent;\n\n    @ViewChild('enterOption')\n    public enterObj: DropDownListComponent;\n\n    @ViewChild('shiftEnterOption')\n    public shiftEnterObj: DropDownListComponent;\n\n    public enterOptionData: { [key: string]: Object }[] = [\n        { Text: 'Create a new <p>', Value: 'P' },\n        { Text: 'Create a new <div>', Value: 'DIV' },\n        { Text: 'Create a new <br>', Value: 'BR' }\n    ];\n    public shiftEnterData: { [key: string]: Object }[] = [\n        { Text: 'Create a new <br>', Value: 'BR' },\n        { Text: 'Create a new <div>', Value: 'DIV' },\n        { Text: 'Create a new <p>', Value: 'P' }\n    ];\n\n    public enterPlaceHolder: string = 'When pressing the enter key';\n    public shiftEnterPlaceHolder: string = 'When pressing the shift + enter key';\n    public floatLabel: FloatLabelType = 'Always';\n    public fields: FieldSettingsModel = { text: 'Text', value: 'Value' };\n    public rteHeight = 220;\n    public saveInterval = 1;\n    public height: string = '200px';\n    public enterValue: string = 'P';\n    public shiftEnterValue: string = 'BR';\n\n    public onCreated(): void {\n        this.onChange();\n    }\n\n    public enterChange(): void {\n        if (this.enterObj.value === 'P') {\n            this.rteObj.enterKey = 'P';\n            this.rteObj.value = `<p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        } else if (this.enterObj.value === 'DIV') {\n            this.rteObj.enterKey = 'DIV';\n            this.rteObj.value = `<div>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</div><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        } else if (this.enterObj.value === 'BR') {\n            this.rteObj.enterKey = 'BR';\n            this.rteObj.value = `In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:<ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>`;\n        }\n        this.onChange();\n    }\n\n    public shiftEnterChange(): void {\n        if (this.shiftEnterObj.value === 'BR') {\n            this.rteObj.shiftEnterKey = 'BR';\n        } else if (this.shiftEnterObj.value === 'DIV') {\n            this.rteObj.shiftEnterKey = 'DIV';\n        } else if (this.shiftEnterObj.value === 'P') {\n            this.rteObj.shiftEnterKey = 'P';\n        }\n    }\n\n    public onChange(): void {\n        let id: string = this.rteObj.getID() + 'mirror-view';\n        let codeView: HTMLElement = document.getElementById('codeView');\n        let mirrorView: HTMLElement;\n        if (document.getElementById(id)) {\n            mirrorView = document.getElementById(id);\n            mirrorView.innerHTML = '';\n        } else {\n            mirrorView = createElement('div', { className: 'e-content codeViewContent' });\n            mirrorView.id = id;\n            codeView.appendChild(mirrorView);\n        }\n        mirrorView.style.display = 'block';\n        if (this.rteObj.value !== null) {\n            CodeMirror(mirrorView, {\n                value: this.rteObj.value,\n                mode: 'text/html',\n                lineWrapping: true,\n                readOnly: true\n            });\n        }\n    }\n}\n","app/app.module.ts":"import { SwitchModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { TabModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ButtonModule} from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListModule, MentionModule  } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { SplitterModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, FormsModule, ReactiveFormsModule,TabModule,       RichTextEditorAllModule, SplitterModule, CheckBoxModule, DialogModule, NumericTextBoxModule,ButtonModule,SwitchModule, RadioButtonModule, TextBoxModule, DropDownListModule, MentionModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <table class='api'>\n        <tbody>\n            <tr>\n                <td>\n                    <div>\n                        <ejs-dropdownlist id='enterOption' #enterOption\n                        [dataSource]='enterOptionData' (change)='enterChange()'\n                        [value]='enterValue' [fields]='fields' [popupHeight]='height'\n                        [placeholder]='enterPlaceHolder' [floatLabelType]='floatLabel'></ejs-dropdownlist>\n                    </div>\n                </td>\n                <td>\n                    <div>\n                        <ejs-dropdownlist id='shiftEnterOption' #shiftEnterOption\n                        [dataSource]='shiftEnterData' (change)='shiftEnterChange()'\n                        [value]='shiftEnterValue' [fields]='fields' [popupHeight]='height'\n                        [placeholder]='shiftEnterPlaceHolder' [floatLabelType]='floatLabel'></ejs-dropdownlist>\n                    </div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <br>\n    <ejs-richtexteditor id='defaultRTE' #defaultRTE (created)='onCreated()' (change)='onChange()' [saveInterval]='saveInterval' [height]='rteHeight'>\n        <ng-template #valueTemplate>\n            <p>In Rich text Editor, the enter key and shift + enter key actions can be customized using the enterKey and shiftEnterKey APIs. And the possible values are as follows:</p><ul><li>P - When 'P' is configured, pressing enter or shift + enter will create a 'p' tag</li><li>DIV - When 'DIV' is configured, pressing enter or shift + enter will create a 'div' tag</li><li>BR - When 'BR' is configured, pressing enter or shift + enter will create a 'br' tag</li></ul>\n        </ng-template>\n    </ejs-richtexteditor>\n    <br>\n    <label>Code View </label>\n    <div id=\"codeView\" class=\"codeView\"></div>\n</div>\n<style>\n    .api {\n        width: 75%;\n    }\n    .api td {\n        padding-right: 100px;\n        margin-top: 3px;\n    }\n    @media only screen and (max-width: 600px) {\n        .api {\n            width: 100%;\n        }\n        .api td {\n            display: block;\n        }\n    }\n    @media only screen and (min-width: 600px) and (max-width: 1000px) {\n        .api {\n            width: 100%;\n        }\n    }\n    .control-section {\n        padding: 20px;\n    }\n    .codeView {\n        border: 1px solid rgba(0,0,0,0.12);\n        height: 200px;\n        width: 100%;\n    }\n    .CodeMirror {\n        height: 190px;\n    }\n    .codeViewContent {\n        padding-left: 16px;\n    }\n</style>","app.component.css":".api {\n    width: 75%;\n}\n.api td {\n    padding-right: 100px;\n    margin-top: 3px;\n}\n@media only screen and (max-width: 600px) {\n    .api {\n        width: 100%;\n    }\n    .api td {\n        display: block;\n    }\n}\n@media only screen and (min-width: 600px) and (max-width: 1000px) {\n    .api {\n        width: 100%;\n    }\n}\n.control-section {\n    padding: 20px;\n}\n.codeView {\n    border: 1px solid rgba(0,0,0,0.12);\n    height: 200px;\n    width: 100%;\n}\n.CodeMirror {\n    height: 190px;\n}\n.codeViewContent {\n    padding-left: 16px;\n}\n.bootstrap-dark .CodeMirror-scroll, .bootstrap5-dark .CodeMirror-scroll, .fluent-dark .CodeMirror-scroll, .fabric-dark .CodeMirror-scroll, .material-dark .CodeMirror-scroll, .tailwind-dark .CodeMirror-scroll, .highcontrast .CodeMirror-scroll{\n    color: #fff;\n}\n.bootstrap-dark .CodeMirror-scroll{\n   background-color: #1b1b1b;\n}\n.bootstrap5-dark .CodeMirror-scroll{\n   background-color: #212529;\n}\n.fluent-dark .CodeMirror-scroll{\n   background-color: #1b1a19;\n}\n.fabric-dark .CodeMirror-scroll{\n   background-color: #242424;\n}\n.material-dark .CodeMirror-scroll{\n   background-color: #383838;\n}\n.tailwind-dark .CodeMirror-scroll{\n   background-color:#1f2937;\n}\n.highcontrast .CodeMirror-scroll{\n   background-color:#000000;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}