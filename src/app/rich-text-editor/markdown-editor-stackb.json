{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Rich Text Editor Markdown Overview Sample\n */\n\nimport { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { RichTextEditorComponent, ToolbarService, TableService, EditorMode } from '@syncfusion/ej2-angular-richtexteditor';\nimport { LinkService, ImageService, MarkdownEditorService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { MarkdownFormatter } from '@syncfusion/ej2-angular-richtexteditor';\nimport { createElement, KeyboardEventArgs } from '@syncfusion/ej2-base';\nimport * as Marked from 'marked';\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [ToolbarService, LinkService, ImageService, MarkdownEditorService, TableService]\n})\nexport class AppComponent {\n\n    @ViewChild('mdDefault')\n    public rteObj: RichTextEditorComponent;\n\n    public textArea: HTMLTextAreaElement;\n    public mdsource: HTMLElement;\n    public tools: ToolbarModule = {\n        items: ['Bold', 'Italic', 'StrikeThrough', '|',\n            'Formats', 'OrderedList', 'UnorderedList','SuperScript', 'SubScript', '|',\n            'CreateTable', 'CreateLink', 'Image', '|',\n            {\n                tooltipText: 'Preview',\n                template: '<button id=\"preview-code\" class=\"e-tbar-btn e-control e-btn e-icon-btn\">' +\n                    '<span class=\"e-btn-icon e-md-preview e-icons\"></span></button>'\n            }, '|', 'Undo', 'Redo']\n    };\n\n    public formatter: MarkdownFormatter = new MarkdownFormatter({ listTags: { 'OL': '1., 2., 3.' } });\n    public mode: EditorMode = 'Markdown';\n\n    public onCreate(): void {\n        this.textArea = this.rteObj.contentModule.getEditPanel() as HTMLTextAreaElement;\n        this.textArea.addEventListener('keyup', (e: KeyboardEventArgs) => {\n            this.markdownConversion();\n        });\n        this.mdsource = document.getElementById('preview-code');\n        this.mdsource.addEventListener('click', (e: MouseEvent) => {\n            this.fullPreview();\n            if ((e.target as HTMLElement).parentElement.classList.contains('e-active')) {\n                this.rteObj.disableToolbarItem(['Bold', 'Italic', 'StrikeThrough', 'Formats', 'OrderedList',\n                    'UnorderedList', 'CreateTable', 'SuperScript', 'SubScript', 'CreateLink', 'Image']);\n            } else {\n                this.rteObj.enableToolbarItem(['Bold', 'Italic', 'StrikeThrough', 'Formats', 'OrderedList',\n                    'UnorderedList', 'CreateTable', 'SuperScript', 'SubScript', 'CreateLink', 'Image']);\n            }\n        });\n    }\n    public markdownConversion(): void {\n        if (this.mdsource.classList.contains('e-active')) {\n            const id: string = this.rteObj.getID() + 'html-view';\n            const htmlPreview: Element = this.rteObj.element.querySelector('#' + id);\n            htmlPreview.innerHTML = Marked((this.rteObj.contentModule.getEditPanel() as HTMLTextAreaElement).value);\n        }\n    }\n    public fullPreview(): void {\n        const id: string = this.rteObj.getID() + 'html-preview';\n        let htmlPreview: HTMLElement = this.rteObj.element.querySelector('#' + id) as HTMLElement;\n        const previewTextArea: HTMLElement = this.rteObj.element.querySelector('.e-rte-content') as HTMLElement;\n        if (this.mdsource.classList.contains('e-active')) {\n            this.mdsource.classList.remove('e-active');\n            this.textArea.style.display = 'block';\n            htmlPreview.style.display = 'none';\n            previewTextArea.style.overflow = 'hidden';\n        } else {\n            this.mdsource.classList.add('e-active');\n            if (!htmlPreview) {\n                htmlPreview = createElement('div', { className: 'e-content e-pre-source' });\n                htmlPreview.id = id;\n                this.textArea.parentNode.appendChild(htmlPreview);\n                previewTextArea.style.overflow = 'auto';\n            }\n            if (previewTextArea.style.overflow === 'hidden') {\n                previewTextArea.style.overflow = 'auto';\n            }\n            this.textArea.style.display = 'none';\n            htmlPreview.style.display = 'block';\n            htmlPreview.innerHTML = Marked((this.rteObj.contentModule.getEditPanel() as HTMLTextAreaElement).value);\n        }\n    }\n}\n","app/app.module.ts":"import { SwitchModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { TabModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ButtonModule} from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListModule, MentionModule  } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { SplitterModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, FormsModule, ReactiveFormsModule,TabModule,       RichTextEditorAllModule, SplitterModule, CheckBoxModule, DialogModule, NumericTextBoxModule,ButtonModule,SwitchModule, RadioButtonModule, TextBoxModule, DropDownListModule, MentionModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"\n<div class=\"control-section\">\n    <div class=\"sample-container\">\n        <div class=\"default-section\">\n            <ejs-richtexteditor id='mdDefault' #mdDefault height='250px' [formatter]='formatter'\n                [toolbarSettings]='tools' [editorMode]='mode' (created)='onCreate()'>\n                <ng-template #valueTemplate>\n                    The sample is added to showcase **markdown editing**.\n                    Type or edit the content and apply formatting to view markdown formatted content.\n                    We can add our own custom formation syntax for the Markdown formation, [sample\n                    link](https://ej2.syncfusion.com/home/).\n                    The third-party library <b>Marked</b> is used in this sample to convert markdown into HTML content.\n                </ng-template>\n            </ejs-richtexteditor>\n        </div>\n    </div>\n</div>\n","app.component.css":".e-rte-custom-tbar-section #special_char,\n    .e-rte-custom-tbar-section .char_block {\n        display: inline-block;\n    }\n    .e-rte-custom-tbar-section .char_block.e-active {\n        /* box-shadow: inset 3px 3px 7px 0px; */\n        outline: 1.5px solid;\n    }\n\n    .e-rte-custom-tbar-section .char_block {\n        width: 30px;\n        height: 30px;\n        line-height: 30px;\n        margin: 0 5px 5px 0;\n        text-align: center;\n        vertical-align: middle;\n        border: 1px solid #DDDDDD;\n        font-size: 20px;\n        cursor: pointer;\n        user-select: none;\n    }\n\n    #custom_tbar,\n    #custom_tbar div{\n        cursor: pointer;\n    }\n\n  .e-rte-quick-popup .e-rte-quick-toolbar .e-roatate-left::before {\n        content: \"\\e76e\";\n    }\n\n    .e-rte-quick-popup .e-rte-quick-toolbar .e-roatate-right::before {\n        content: \"\\e726\";\n    }\n\n    .e-richtexteditor textarea.e-content {\n      float: left;\n    }\n    .e-richtexteditor .e-rte-content {\n      overflow: hidden;\n    }\n    .e-rte-content .e-content.e-pre-source{\n      width: 100%;\n    }\n\n    .property-panel-content td{\n        width: 50%;\n    }\n    .property-panel-content td div {\n        padding-left: 10px;\n        padding-top: 10px;\n    }\n\n    .e-icon-btn.e-active .e-md-preview::before {\n        content: '\\e350';\n    }\n\n\t.e-icon-btn .e-md-preview.e-icons::before {\n\t\tcontent: '\\e345';\n\t}\n\n    .bootstrap4 .e-icon-btn.e-active .e-md-preview::before {\n        content: '\\e790';\n    }\n\n    .bootstrap4 .e-icon-btn .e-md-preview::before {\n        content: '\\e787';\n    }\n    \n    .fluent .e-icon-btn.e-active .e-md-preview::before\n    .fluent-dark .e-icon-btn.e-active .e-md-preview::before\n    .tailwind .e-icon-btn.e-active .e-md-preview::before\n    .tailwind-dark .e-icon-btn.e-active .e-md-preview::before\n    .bootstrap5 .e-icon-btn.e-active .e-md-preview::before\n    .bootstrap5-dark .e-icon-btn.e-active .e-md-preview::before {\n        content: '\\e80e';\n    }\n\n    .tailwind .e-icon-btn .e-md-preview::before,\n    .tailwind-dark .e-icon-btn .e-md-preview::before,\n    .bootstrap5 .e-icon-btn .e-md-preview::before,\n    .bootstrap5-dark .e-icon-btn .e-md-preview::before,\n    .fluent .e-icon-btn .e-md-preview::before,\n    .fluent-dark .e-icon-btn .e-md-preview::before   {\n        content: '\\e7de';\n    }\n\n    #rteDialog.e-dialog .e-dlg-content {\n        padding: 0px 0px 5px 16px;\n    }\n    #custom_tbar .e-tbar-btn-text {\n        font-size: 16px;\n    }\n    .e-bigger #custom_tbar .e-tbar-btn-text {\n        font-size: 18px;\n    }\n    @media (min-width: 320px) and (max-width: 480px) {\n        .fabric.e-bigger #rteDialog {\n            min-width: 281px;\n        }\n\t\t\n\t\t#rteSpecial_char {\n        padding: 15px 0 15px 10px;\n\t\t}\n\t\t\n        .fabric #rteDialog {\n            min-width: 241px;\n        }\n\n        .bootstrap.e-bigger #rteDialog,\n        .bootstrap #rteDialog {\n            min-width: 223px;\n        }\n\n        .highcontrast.e-bigger #rteDialog {\n            min-width: 283px;\n        }\n        .highcontrast #rteDialog {\n            min-width: 243px;\n        }\n        .material #rteDialog {\n            min-width: 224px;\n        }\n        .material.e-bigger #rteDialog {\n            min-width: 236px;\n        }\n    }\n\n    .material .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #e3165b;\n        border-color: #e3165b;\n    }\n\n    .material-dark .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #56a4fd;\n        border-color: #56a4fd;\n    }\n\n    .fabric .e-rte-custom-tbar-section .char_block.e-active,\n    .fabric-dark .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #0078d6;\n        border-color: #0078d6;\n    }\n\n    .bootstrap4 .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #007bff;\n        border-color: #007bff;\n    }\n\n    .bootstrap .e-rte-custom-tbar-section .char_block.e-active,\n    .bootstrap-dark .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #317ab9;\n        border-color: #317ab9;\n    }\n\n    .fluent .e-rte-custom-tbar-section .char_block.e-active,\n    .fluent-dark .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #0078DE;\n        border-color: #0078DE;\n    }\n\n    .highcontrast .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #ffd939;\n        border-color: #ffd939;\n    }\n\n    .tailwind .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #3730a3;\n        border-color: #3730a3;\n    }\n\n    .tailwind-dark .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #22d3ee;\n        border-color: #22d3ee;\n    }\n\n    .bootstrap5 .e-rte-custom-tbar-section .char_block.e-active,\n    .bootstrap5-dark .e-rte-custom-tbar-section .char_block.e-active {\n        outline: 1px solid #0D6EFD;\n        border-color: #0D6EFD;\n    }\n\t\n\t#rteSection {\n        height: 500px;\n    }\n","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}