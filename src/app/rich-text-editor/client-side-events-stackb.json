{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"/**\n * Rich Text Editor Event functionality Sample\n */\nimport { Component, ViewChild, ViewEncapsulation, ElementRef } from '@angular/core';\nimport { addClass, removeClass, Browser } from '@syncfusion/ej2-base';\nimport { ToolbarService, LinkService, ImageService, HtmlEditorService, QuickToolbarService, TableService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { ActionBeginEventArgs, ActionCompleteEventArgs } from '@syncfusion/ej2-angular-richtexteditor';\nimport { RichTextEditorComponent, RichTextEditorModel } from '@syncfusion/ej2-angular-richtexteditor';\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['app.component.css'],\n    providers: [ToolbarService, LinkService, ImageService, HtmlEditorService, QuickToolbarService, TableService]\n})\nexport class AppComponent {\n\n    @ViewChild('RTEevents')\n    private rteObj: RichTextEditorComponent;\n\n    @ViewChild('EventLog')\n    public log: ElementRef;\n\n    public tools: ToolbarModule = {\n        items: ['Bold', 'Italic', 'Underline', 'StrikeThrough',\n            'FontName', 'FontSize', 'FontColor', 'BackgroundColor',\n            'LowerCase', 'UpperCase', '|',\n            'Formats', 'Alignments', 'OrderedList', 'UnorderedList',\n            'Outdent', 'Indent', '|',\n            'CreateLink', 'Image', '|', 'ClearFormat', 'Print',\n            'SourceCode', 'FullScreen', '|', 'Undo', 'Redo']\n    };\n\n    // Display event log\n    appendElement(html: string): void {\n        const span: HTMLElement = document.createElement('span');\n        span.innerHTML = html;\n        this.log.nativeElement.insertBefore(span, this.log.nativeElement.firstChild);\n    }\n\n    // Handler for created event trace\n    onCreate(): void {\n        this.appendElement('Rich Text Editor <b>create</b> event called<hr>');\n    }\n    //Handler for changed event trace\n    onChange(): void {\n        this.appendElement('Rich Text Editor <b>change</b> event called<hr>');\n    }\n    begin(args: ActionBeginEventArgs): void {\n        this.appendElement('<b>' + args.requestType + '</b> action is called<hr>');\n        this.handleFullScreen(args);\n    }\n    complete(args: ActionCompleteEventArgs): void {\n        this.appendElement('<b>' + args.requestType + '</b> action is completed<hr>');\n        this.actionCompleteHandler();\n    }\n    focus(): void {\n        this.appendElement('Rich Text Editor <b>focus</b> event called<hr>');\n    }\n    blur(): void {\n        this.appendElement('Rich Text Editor <b>blur</b> event called<hr>');\n    }\n    toolbarClick(): void {\n        this.appendElement('Rich Text Editor <b>toolbar click</b> event called<hr>');\n    }\n\n    beforeDialogOpen(): void {\n         this.appendElement('Rich Text Editor <b>beforeDialogOpen</b> event called<hr>');\n    }\n\n    dialogOpen(): void {\n         this.appendElement('Rich Text Editor <b>dialogOpen</b> event called<hr>');\n    }\n\n    dialogClose(): void {\n         this.appendElement('Rich Text Editor <b>dialogClose</b> event called<hr>');\n    }\n\n    beforeQuickToolbarOpen(): void {\n         this.appendElement('Rich Text Editor <b>beforeQuickToolbarOpen</b> event called<hr>');\n    }\n\n    quickToolbarOpen(): void {\n         this.appendElement('Rich Text Editor <b>quickToolbarOpen</b> event called<hr>');\n    }\n\n    quickToolbarClose(): void {\n         this.appendElement('Rich Text Editor <b>quickToolbarClose</b> event called<hr>');\n    }\n\n    imageSelected(): void {\n         this.appendElement('Rich Text Editor <b>imageSelected</b> event called<hr>');\n    }\n\n    imageUploading(): void {\n         this.appendElement('Rich Text Editor <b>imageUploading</b> event called<hr>');\n    }\n\n    imageUploadSuccess(): void {\n         this.appendElement('Rich Text Editor <b>imageUploadSuccess</b> event called<hr>');\n    }\n\n    imageUploadFailed(): void {\n         this.appendElement('Rich Text Editor <b>imageUploadFailed</b> event called<hr>');\n    }\n\n    imageRemoving(): void {\n         this.appendElement('Rich Text Editor <b>imageRemoving</b> event called<hr>');\n    }\n\n    destroyed(): void {\n         this.appendElement('Rich Text Editor <b>destroyed</b> event called<hr>');\n    }\n\n    beforeSanitizeHtml(): void {\n         this.appendElement('Rich Text Editor <b>beforeSanitizeHtml</b> event called<hr>');\n    }\n\n    resizing(): void {\n         this.appendElement('Rich Text Editor <b>resizing</b> event called<hr>');\n    }\n\n    resizeStart(): void {\n         this.appendElement('Rich Text Editor <b>resizeStart</b> event called<hr>');\n    }\n\n    resizeStop(): void {\n         this.appendElement('Rich Text Editor <b>resizeStop</b> event called<hr>');\n    }\n\n    onClear(): void {\n        this.log.nativeElement.innerHTML = '';\n    }\n\n\n    handleFullScreen(e: any): void {\n        const sbCntEle: HTMLElement = document.querySelector('.sb-content.e-view');\n        const sbHdrEle: HTMLElement = document.querySelector('.sb-header.e-view');\n        const leftBar: HTMLElement = document.querySelector('#left-sidebar');\n        if (e.targetItem === 'Maximize') {\n            if (Browser.isDevice && Browser.isIos) {\n                addClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            addClass([leftBar], ['e-close']);\n            removeClass([leftBar], ['e-open']);\n        } else if (e.targetItem === 'Minimize') {\n            if (Browser.isDevice && Browser.isIos) {\n                removeClass([sbCntEle, sbHdrEle], ['hide-header']);\n            }\n            removeClass([leftBar], ['e-close']);\n            if (!Browser.isDevice) {\n                addClass([leftBar], ['e-open']);\n            }\n        }\n    }\n\n    actionCompleteHandler(): void {\n        setTimeout(() => { this.rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);\n    }\n}\n","app/app.module.ts":"import { SwitchModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { TabModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ButtonModule} from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListModule, MentionModule  } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { SplitterModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, FormsModule, ReactiveFormsModule,TabModule,       RichTextEditorAllModule, SplitterModule, CheckBoxModule, DialogModule, NumericTextBoxModule,ButtonModule,SwitchModule, RadioButtonModule, TextBoxModule, DropDownListModule, MentionModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-8 control-section sb-property-border\">\n    <div class=\"content-wrapper\">\n        <ejs-richtexteditor #RTEevents id='defaultRTE' [toolbarSettings]='tools' (created)='onCreate()' (toolbarClick)='toolbarClick()' (actionBegin)='begin($event)' (actionComplete)='complete($event)' (focus)='focus()' (change)='onChange()' (blur)='blur()' (beforeDialogOpen)='beforeDialogOpen()'\n            (dialogOpen)='dialogOpen()' (dialogClose)='dialogClose()' (beforeQuickToolbarOpen)='beforeQuickToolbarOpen()' (quickToolbarOpen)='quickToolbarOpen()' (quickToolbarClose)='quickToolbarClose()' (imageSelected)='imageSelected()' (imageUploading)='imageUploading()'\n            (imageUploadSuccess)='imageUploadSuccess()' (imageUploadFailed)='imageUploadFailed()' (imageRemoving)='imageRemoving()' (destroyed)='destroyed()' (beforeSanitizeHtml)='beforeSanitizeHtml()' (resizing)='resizing()' (resizeStart)='resizeStart()'\n            (resizeStop)='resizeStop()'>\n            <ng-template #valueTemplate>\n                <p>The Rich Text Editor component is a WYSIWYG (\"what you see is what you get\") editor that provides the best user experience to create and update the content. Users can format their content using standard toolbar commands.</p>\n\n                <p><b>Key features:</b></p>\n\n                <ul>\n                    <li>\n                        <p>Provides &lt;IFRAME&gt; and &lt;DIV&gt; modes</p>\n                    </li>\n                    <li>\n                        <p>Capable of handling markdown editing.</p>\n                    </li>\n                    <li>\n                        <p>Contains a modular library to load the necessary functionality on demand.</p>\n                    </li>\n                    <li>\n                        <p>Provides a fully customizable toolbar.</p>\n                    </li>\n                    <li>\n                        <p>Provides HTML view to edit the source directly for developers.</p>\n                    </li>\n                    <li>\n                        <p>Supports third-party library integration.</p>\n                    </li>\n                    <li>\n                        <p>Allows a preview of modified content before saving it.</p>\n                    </li>\n                    <li>\n                        <p>Handles images, hyperlinks, video, hyperlinks, uploads, etc.</p>\n                    </li>\n                    <li>\n                        <p>Contains undo/redo manager.</p>\n                    </li>\n                    <li>\n                        <p>Creates bulleted and numbered lists.</p>\n                    </li>\n                </ul>\n            </ng-template>\n        </ejs-richtexteditor>\n    </div>\n</div>\n<div id=\"rte_event\" class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-section\">\n        <div class=\"property-panel-header\">Event Trace</div>\n        <div class=\"property-panel-content\">\n            <table id=\"property\" title=\"Event Trace\">\n                <tr>\n                    <td>\n                        <div class=\"eventarea\" style=\"height: 245px;overflow: auto\">\n                            <!-- Event log element -->\n                            <span class=\"EventLog\" #EventLog id=\"EventLog\" style=\"word-break: normal;\"></span>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div class=\"evtbtn\" style=\"padding-top:10px;padding-bottom: 10px\">\n                            <!-- clear button element -->\n                            <button ejs-button id=\"clear\" (click)='onClear()'>Clear</button>\n                        </div>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>","app.component.css":"    .e-bigger .content-wrapper {\n        width: 80%;\n    }\n\n   \n    #EventLog b {\n        color: #388e3c;\n    }\n\n    hr {\n        margin-top: 6px;\n        margin-bottom: 6px;\n    }\n\n    #rte_event .property-panel-table div {\n        margin-top: -4px;\n        padding-bottom: 0px;\n    }\n\n    .sb-content.e-view.hide-header {\n        top: 0 !important;\n    }\n    \n    .sb-header.e-view.hide-header {\n        display: none;\n    }","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}