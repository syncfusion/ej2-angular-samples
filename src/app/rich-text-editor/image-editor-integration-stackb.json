{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"/**\r\n * Rich Text Editor Image Editor integration Functionality Sample\r\n */\r\nimport { Component, ViewEncapsulation, ViewChild } from '@angular/core';\r\nimport { ImageEditorModule } from '@syncfusion/ej2-angular-image-editor';\r\nimport { DialogComponent, DialogModule } from '@syncfusion/ej2-angular-popups';\r\nimport { ToolbarService, LinkService, ImageService, HtmlEditorService, NodeSelection, RichTextEditorComponent, RichTextEditorModule, QuickToolbarService, PasteCleanupService, CountService, VideoService, AudioService, TableService } from '@syncfusion/ej2-angular-richtexteditor';\r\n\r\n\r\nimport { getComponent } from '@syncfusion/ej2-base';\r\nimport { ImageEditor } from '@syncfusion/ej2-image-editor';\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: 'app.component.html',\r\n    styleUrls: ['app.component.css'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [ToolbarService, LinkService, ImageService, HtmlEditorService, QuickToolbarService, PasteCleanupService, CountService, VideoService, AudioService, TableService],\r\n    standalone: true,\r\n    imports: [ RichTextEditorModule, DialogModule, ImageEditorModule, ]\r\n})\r\nexport class AppComponent {\r\n    @ViewChild('toolsRTE')\r\n    public defaultRTE: RichTextEditorComponent;\r\n    @ViewChild('Dialog')\r\n    public dialogObj: DialogComponent;\r\n    @ViewChild('ImageEditor')\r\n    public imageEditorObj: ImageEditor;\r\n    public selection = new NodeSelection();\r\n    public header = 'Image Editor';\r\n    public range: Range;\r\n    public saveSelection: NodeSelection;\r\n    public dataURL: null;\r\n    public isLoaded = false;\r\n    public imageELement: any;\r\n    public dlgButtons = [\r\n        {\r\n            buttonModel: { content: 'Insert', isPrimary: true },\r\n            click: this.onInsert.bind(this),\r\n        },\r\n        { buttonModel: { content: 'Cancel' }, click: this.onCancel.bind(this), },\r\n    ];\r\n\r\n    public quickToolbarSettings = {\r\n        image: [\r\n            'Replace',\r\n            'Align',\r\n            'Caption',\r\n            'Remove',\r\n            '|',\r\n            'InsertLink',\r\n            'OpenImageLink',\r\n            'EditImageLink',\r\n            'RemoveImageLink',\r\n            'Display',\r\n            'AltText',\r\n            {\r\n                tooltipText: 'Image Editor',\r\n                template:\r\n                    '<button class=\"e-tbar-btn e-btn\" id=\"imageEditor\"><span class=\"e-btn-icon e-icons e-rte-image-editor\"></span></button>',\r\n            },\r\n        ],\r\n    };\r\n\r\n    public toolbarClick(args): void {\r\n        if (args.item.tooltipText === 'Image Editor') {\r\n            this.range = this.selection.getRange(document);\r\n            this.saveSelection = this.selection.save(this.range, document);\r\n            this.dialogObj.show();\r\n            this.defaultRTE.quickToolbarModule.imageQTBar.hidePopup();\r\n        }\r\n    }\r\n\r\n    public onInsert(): void {\r\n        if (this.defaultRTE.formatter.getUndoRedoStack().length === 0) {\r\n            this.defaultRTE.formatter.saveData();\r\n        }\r\n        this.saveSelection.restore();\r\n        var canvas = document.createElement('CANVAS');\r\n        var ctx = (canvas as any).getContext('2d');\r\n        var imgData: ImageData = (this.imageEditorObj as any).getImageData();\r\n        (canvas as any).height = imgData.height;\r\n        (canvas as any).width = imgData.width;\r\n        ctx.putImageData(imgData, 0, 0);\r\n        this.isLoaded = true;\r\n        this.defaultRTE.executeCommand('editImage', {\r\n            url: (canvas as any).toDataURL(),\r\n            width: { width: (canvas as any).width },\r\n            height: { height: (canvas as any).height },\r\n            selection: this.saveSelection,\r\n            cssClass: this.imageELement.getAttribute('class').replace('e-rte-image', '')\r\n        });\r\n        this.defaultRTE.formatter.saveData();\r\n        this.defaultRTE.formatter.enableUndo(this.defaultRTE);\r\n        this.dispose();\r\n        this.dialogObj.hide();\r\n    }\r\n\r\n    public onCancel(): void {\r\n        this.dispose();\r\n        this.dialogObj.hide();\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    public onclose() {\r\n        this.dispose();\r\n        this.dialogObj.hide();\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    public open(): void {\r\n        this.imageEditorObj.update();\r\n        this.imageEditorObj.open(this.dataURL);\r\n    }\r\n\r\n    public OnBeforeOpen(): void {\r\n        this.dispose();\r\n        this.isLoaded = false;\r\n        var selectNodes =\r\n            this.defaultRTE.formatter.editorManager.nodeSelection.getNodeCollection(\r\n                this.range\r\n            );\r\n        if (selectNodes.length == 1 && (selectNodes[0] as any).tagName == 'IMG') {\r\n            this.imageELement = selectNodes[0];\r\n            this.imageELement.crossOrigin = 'anonymous';\r\n            var canvas = document.createElement('CANVAS');\r\n            var ctx = (canvas as any).getContext('2d');\r\n            (canvas as any).height = this.imageELement.offsetHeight;\r\n            (canvas as any).width = this.imageELement.offsetWidth;\r\n            var imageELe = this.imageELement;\r\n            var isLoded = this.isLoaded;\r\n            this.imageELement.onload = () => {\r\n                ctx.drawImage(\r\n                    imageELe,\r\n                    0,\r\n                    0,\r\n                    (canvas as any).width,\r\n                    (canvas as any).height\r\n                );\r\n                this.dataURL = (canvas as any).toDataURL();\r\n            };\r\n            if (isLoded !== undefined && !isLoded) {\r\n                this.imageEditorObj = new ImageEditor({\r\n                    height: '450px'\r\n                });\r\n                this.imageEditorObj.appendTo('#image-editor');\r\n                isLoded = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        var imageEditorInstance = getComponent(\r\n            document.getElementById('image-editor'),\r\n            'image-editor'\r\n        ) as ImageEditor;\r\n        if (imageEditorInstance !== null && imageEditorInstance !== undefined) {\r\n            imageEditorInstance.destroy();\r\n        }\r\n    }\r\n}\r\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.css\"> </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\r\n    <ejs-richtexteditor\r\n     #toolsRTE\r\n     id=\"alltoolRTE\"\r\n     [showCharCount]=\"true\"\r\n     [quickToolbarSettings]=\"quickToolbarSettings\"\r\n     (toolbarClick)=\"toolbarClick($event)\"\r\n   >\r\n     <ng-template #valueTemplate>\r\n       <p>\r\n        An image can be edited within a Rich Text Editor using an Image Editor.\r\n         <img\r\n           id=\"img1\"\r\n           style=\"height: 350px;\"\r\n           src=\"https://ej2.syncfusion.com/angular/demos/assets/image-editor/images/default.png\"\r\n           aria-label=\"Bridge\"\r\n         />\r\n       </p>\r\n       <p>\r\n        It allows users to quickly and easily add an Image Editor to their Rich Text Editor.\r\n        It provides a variety of features, including image cropping, resizing, rotation, and more.\r\n        Additionally, it supports a wide range of image formats, including JPEG, PNG, and GIF.\r\n       </p>\r\n     </ng-template>\r\n   </ejs-richtexteditor>\r\n</div>\r\n\r\n<ejs-dialog\r\n     #Dialog\r\n     [buttons]=\"dlgButtons\"\r\n     (beforeOpen)=\"OnBeforeOpen()\"\r\n     (open)=\"open()\"\r\n     [header]=\"header\"\r\n     [visible]=\"false\"\r\n     [showCloseIcon]=\"true\"\r\n     width=\"800px\"\r\n     height=\"800px\"\r\n     [isModal]=\"true\"\r\n     (close)=\"onclose()\"\r\n   >\r\n     <ng-template #content>\r\n       <ejs-imageeditor #ImageEditor id=\"image-editor\" height=\"500px\">\r\n       </ejs-imageeditor>\r\n     </ng-template>\r\n   </ejs-dialog>\r\n\r\n","app.component.css":".e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e81e';\r\n}\r\n\r\n.fluent .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.fluent-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.fluent2 .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.fluent2-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.fluent2-highcontrast .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.bootstrap5 .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.bootstrap5\\.3 .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.bootstrap5\\.3-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.bootstrap5-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.tailwind .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.tailwind-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.tailwind3 .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.tailwind3-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.material3 .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.material3-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e730';\r\n}\r\n\r\n.fabric .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.fabric-dark .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before,\r\n.highcontrast .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e97c';\r\n}\r\n\r\n.bootstrap4 .e-rte-quick-popup .e-rte-quick-toolbar .e-rte-image-editor::before {\r\n    content: '\\e78f';\r\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-image-editor\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-image-editor\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}