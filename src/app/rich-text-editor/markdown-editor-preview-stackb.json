{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [   AppComponent ], imports: [ BrowserModule, FormsModule, ReactiveFormsModule,       RichTextEditorAllModule, CheckBoxModule, DialogModule, NumericTextBoxModule, RadioButtonModule, TextBoxModule, DropDownListModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"\n<div class=\"control-section\">\n    <div class=\"sample-container\">\n        <div class=\"default-section\">\n            <ejs-richtexteditor id='mdPreview' #mdPreview [toolbarSettings]='tools' [editorMode]='mode' (created)='onCreate()' (actionComplete)=\"actionComplete($event)\" (actionBegin)=\"handleFullScreen($event)\">\n                <ng-template #valueTemplate>\n                In RichTextEditor , you click the toolbar buttons to format the words and the changes are visible immediately.\n                Markdown is not like that. When you format the word in Markdown format, you need to add Markdown syntax to the word to indicate which words \n                and phrases should look different from each other.\n                RichTextEditor supports markdown editing when the editorMode set as **markdown** and using both *keyboard interaction* and *toolbar action*, you can apply the formatting to text.\n                We can add our own custom formation syntax for the Markdown formation, [sample link](https://ej2.syncfusion.com/home/).\n                The third-party library <b>Marked</b> is used in this sample to convert markdown into HTML content.\n                </ng-template>\n            </ejs-richtexteditor>\n        </div>\n    </div>\n</div>\n\n","app.component.css":"    /* csslint ignore:start */\n    #mdPreview.e-richtexteditor textarea.e-content {\n        float: left;\n        border-right: 1px solid rgba(0, 0, 0, 0.12);\n    }\n    #mdPreview.e-richtexteditor .e-rte-content .e-content{\n        min-height: 150px;\n    }\n\n    #mdPreview.e-richtexteditor .e-rte-content {\n        overflow: hidden;\n    }\n\n    .e-icon-btn.e-active .e-md-preview::before {\n        content: '\\e350';\n    }\n\n    .e-icon-btn .e-md-preview::before {\n        content: '\\e345';\n    }\n   .bootstrap4 .e-icon-btn.e-active .e-md-preview::before {\n        content: '\\e790';\n    }\n\n    .bootstrap4 .e-icon-btn .e-md-preview::before {\n        content: '\\e787';\n    }\n\n    #mdPreview .e-rte-content .e-content.e-pre-source {\n        width: 100%;\n    }\n\n    .highcontrast #mdPreview.e-richtexteditor textarea.e-content {\n        border-right: 1px solid #fff;\n    }\n/* csslint ignore:end */","app.component.ts":"/**\n * RichTextEditor Markdown Preview Sample\n */\nimport { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { addClass, removeClass, Browser } from '@syncfusion/ej2-base';\nimport { RichTextEditorComponent, ToolbarService, LinkService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { ImageService, MarkdownEditorService, TableService } from '@syncfusion/ej2-angular-richtexteditor';\nimport { createElement, KeyboardEventArgs, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport * as Marked from 'marked';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [ToolbarService, LinkService, ImageService, MarkdownEditorService, TableService]\n})\nexport class AppComponent {\n    @ViewChild('mdPreview')\n    public rteObj: RichTextEditorComponent;\n    public textArea: HTMLTextAreaElement;\n    public mdsource: HTMLElement;\n    public mdSplit: HTMLElement;\n    public htmlPreview: HTMLElement;\n    public tools: object = {\n        items: ['Bold', 'Italic', 'StrikeThrough', '|', 'Formats', 'OrderedList', 'UnorderedList', '|', 'CreateTable', 'CreateLink', 'Image', '|',\n            {\n                tooltipText: 'Preview',\n                template: '<button id=\"preview-code\" class=\"e-tbar-btn e-control e-btn e-icon-btn\">' +\n                '<span class=\"e-btn-icon e-md-preview e-icons\"></span></button>'\n            }, {\n                tooltipText: 'Split Editor',\n                template: '<button id=\"MD_Preview\" class=\"e-tbar-btn e-control e-btn e-icon-btn\">' +\n                '<span class=\"e-btn-icon e-view-side e-icons\"></span></button>'\n            }, 'FullScreen', '|', 'Undo', 'Redo']\n    };\n    public mode: string = 'Markdown';\n    public onCreate(): void {\n        this.textArea = this.rteObj.contentModule.getEditPanel() as HTMLTextAreaElement;\n        this.textArea.addEventListener('keyup', (e: KeyboardEventArgs) => {\n            this.MarkDownConversion();\n        });\n        this.mdsource = document.getElementById('preview-code');\n        this.mdsource.addEventListener('click', (e: MouseEvent) => {\n            this.fullPreview({ mode: true, type: 'preview' });\n            if ((e.target as HTMLElement).parentElement.classList.contains('e-active')) {\n                this.rteObj.disableToolbarItem(['Bold', 'Italic', 'StrikeThrough', 'Formats', 'OrderedList',\n                    'UnorderedList', 'CreateTable', 'CreateLink', 'Image']);\n                (e.target as HTMLElement).parentElement.parentElement.nextElementSibling.classList.add('e-overlay');\n            } else {\n                this.rteObj.enableToolbarItem(['Bold', 'Italic', 'StrikeThrough', 'Formats', 'OrderedList',\n                    'UnorderedList', 'CreateTable', 'CreateLink', 'Image']);\n                (e.target as HTMLElement).parentElement.parentElement.nextElementSibling.classList.remove('e-overlay');\n            }\n        });\n        this.mdSplit = document.getElementById('MD_Preview');\n        this.mdSplit.addEventListener('click', (e: MouseEvent) => {\n            if (this.rteObj.element.classList.contains('e-rte-full-screen')) {\n                this.fullPreview({ mode: true, type: '' });\n            }\n            this.mdsource.classList.remove('e-active');\n            this.rteObj.showFullScreen();\n        });\n    }\n    public actionComplete(e: any): void {\n        if (e.targetItem === 'Maximize' && isNullOrUndefined(e.args)) {\n            this.fullPreview({ mode: true, type: '' });\n        } else if (!this.mdSplit.parentElement.classList.contains('e-overlay')) {\n            if (e.targetItem === 'Minimize') {\n                this.textArea.style.display = 'block';\n                this.textArea.style.width = '100%';\n                if (this.htmlPreview) { this.htmlPreview.style.display = 'none'; }\n                this.mdSplit.classList.remove('e-active');\n                this.mdsource.classList.remove('e-active');\n            }\n            this.MarkDownConversion();\n        }\n    }\n    public MarkDownConversion(): void {\n        if (this.mdSplit.classList.contains('e-active')) {\n            let id: string = this.rteObj.getID() + 'html-preview';\n            let htmlPreview: HTMLElement = this.rteObj.element.querySelector('#' + id) as HTMLElement;\n            htmlPreview.innerHTML = Marked((this.rteObj.contentModule.getEditPanel() as HTMLTextAreaElement).value);\n        }\n    }\n    public fullPreview(e: { [key: string]: string | boolean }): void {\n        let id: string = this.rteObj.getID() + 'html-preview';\n        this.htmlPreview = this.rteObj.element.querySelector('#' + id) as HTMLElement;\n        if ((this.mdsource.classList.contains('e-active') || this.mdSplit.classList.contains('e-active')) && e.mode) {\n            this.mdsource.classList.remove('e-active');\n            this.mdSplit.classList.remove('e-active');\n            this.textArea.style.display = 'block';\n            this.textArea.style.width = '100%';\n            this.htmlPreview.style.display = 'none';\n        } else {\n            this.mdsource.classList.add('e-active');\n            this.mdSplit.classList.add('e-active');\n            if (!this.htmlPreview) {\n                this.htmlPreview = createElement('div', { className: 'e-content' });\n                this.htmlPreview.id = id;\n                this.textArea.parentNode.appendChild(this.htmlPreview);\n            }\n            if (e.type === 'preview') {\n                this.textArea.style.display = 'none';\n                this.htmlPreview.classList.add('e-pre-source');\n            } else {\n                this.htmlPreview.classList.remove('e-pre-source');\n                this.textArea.style.width = '50%';\n            }\n            this.htmlPreview.style.display = 'block';\n            this.htmlPreview.innerHTML = Marked((this.rteObj.contentModule.getEditPanel() as HTMLTextAreaElement).value);\n        }\n    }\n    public handleFullScreen(e: any): void {\n        let leftBar: HTMLElement = document.querySelector('#left-sidebar');\n        if (e.targetItem === 'Maximize') {\n            addClass([leftBar], ['e-close']);\n            removeClass([leftBar], ['e-open']);\n        } else if (e.targetItem === 'Minimize') {\n            removeClass([leftBar], ['e-close']);\n            if (!Browser.isDevice) {\n                addClass([leftBar], ['e-open']);\n            }\n        }\n    }\n}"}