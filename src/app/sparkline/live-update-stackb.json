{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { Sparkline, ISparklineLoadEventArgs, SparklineTheme } from '@syncfusion/ej2-charts';\n/**\n * Sample for axis type in Sparkline \n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('cpuspark')\n    public cpuspark: Sparkline;\n    @ViewChild('memspark')\n    public memspark: Sparkline;\n    @ViewChild('diskspark')\n    public diskspark: Sparkline;\n    @ViewChild('netspark')\n    public netspark: Sparkline;\n\n    public cpuaxisSettings: object = {\n        minY: 0, maxY: 150\n    };\n    public cpucontainerArea: object = {\n        //background: 'white',\n        border: {\n            color: '#dcdfe0',\n            width: 2\n        }\n    };\n    public cpuborder: object = {\n        color: '#0358a0',\n        width: 1\n    };\n    public cpuData: object[] = [\n        { x: 0, yval: 50 },\n        { x: 1, yval: 30 },\n        { x: 2, yval: 20 },\n        { x: 3, yval: 30 },\n        { x: 4, yval: 50 },\n        { x: 5, yval: 40 },\n        { x: 6, yval: 20 },\n        { x: 7, yval: 10 },\n        { x: 8, yval: 30 },\n        { x: 9, yval: 10 },\n        { x: 10, yval: 40 },\n        { x: 11, yval: 50 },\n        { x: 12, yval: 10 },\n        { x: 13, yval: 30 },\n        { x: 14, yval: 50 },\n        { x: 15, yval: 20 },\n        { x: 16, yval: 10 },\n        { x: 17, yval: 40 },\n        { x: 18, yval: 30 },\n        { x: 19, yval: 40 }\n    ];\n    public memaxisSettings: object = {\n        minY: 4, maxY: 8\n    };\n    public memcontainerArea: object = {\n       // background: 'white',\n        border: {\n            color: '#dcdfe0',\n            width: 2\n        }\n    };\n    public memborder: object = {\n        color: '#b247c6',\n        width: 1\n    };\n    public memData: object[] = [\n        { x: 0, yval: 6.05 },\n        { x: 1, yval: 6.03 },\n        { x: 2, yval: 6.02 },\n        { x: 3, yval: 6.07 },\n        { x: 4, yval: 6.05 },\n        { x: 5, yval: 6.09 },\n        { x: 6, yval: 6.08 },\n        { x: 7, yval: 6.01 },\n        { x: 8, yval: 6.03 },\n        { x: 9, yval: 6.01 },\n        { x: 10, yval: 6.07 },\n        { x: 11, yval: 6.05 },\n        { x: 12, yval: 6.01 },\n        { x: 13, yval: 6.06 },\n        { x: 14, yval: 6.05 },\n        { x: 15, yval: 6.03 },\n        { x: 16, yval: 6.01 },\n        { x: 17, yval: 6.09 },\n        { x: 18, yval: 6.06 },\n        { x: 19, yval: 6.05 }\n    ];\n    public diskaxisSettings: object = {\n        minY: 0, maxY: 100\n    };\n    public diskcontainerArea: object = {\n       // background: 'white',\n        border: {\n            color: '#dcdfe0',\n            width: 2\n        }\n    };\n    public diskborder: object = {\n        color: '#27ad66',\n        width: 1\n    };\n    public diskData: object[] = [\n        { x: 0, yval: 50 },\n        { x: 1, yval: 30 },\n        { x: 2, yval: 20 },\n        { x: 3, yval: 70 },\n        { x: 4, yval: 50 },\n        { x: 5, yval: 20 },\n        { x: 6, yval: 80 },\n        { x: 7, yval: 10 },\n        { x: 8, yval: 30 },\n        { x: 9, yval: 10 },\n        { x: 10, yval: 70 },\n        { x: 11, yval: 50 },\n        { x: 12, yval: 10 },\n        { x: 13, yval: 60 },\n        { x: 14, yval: 50 },\n        { x: 15, yval: 30 },\n        { x: 16, yval: 10 },\n        { x: 17, yval: 20 },\n        { x: 18, yval: 60 },\n        { x: 19, yval: 50 }\n    ];\n    public netaxisSettings: object = {\n        minY: 0, maxY: 100\n    };\n    public netcontainerArea: object = {\n       // background: 'white',\n        border: {\n            color: '#dcdfe0',\n            width: 2\n        }\n    };\n    public netborder: object = {\n        color: '#AA907A',\n        width: 1\n    };\n    public netData: object[] = [\n        { x: 0, yval: 50 },\n        { x: 1, yval: 30 },\n        { x: 2, yval: 20 },\n        { x: 3, yval: 70 },\n        { x: 4, yval: 50 },\n        { x: 5, yval: 20 },\n        { x: 6, yval: 80 },\n        { x: 7, yval: 10 },\n        { x: 8, yval: 30 },\n        { x: 9, yval: 10 },\n        { x: 10, yval: 70 },\n        { x: 11, yval: 50 },\n        { x: 12, yval: 10 },\n        { x: 13, yval: 60 },\n        { x: 14, yval: 50 },\n        { x: 15, yval: 30 },\n        { x: 16, yval: 10 },\n        { x: 17, yval: 20 },\n        { x: 18, yval: 60 },\n        { x: 19, yval: 50 }\n    ];\n    public temp1: number = this.cpuData.length - 1;\n    public temp2: number = this.memData.length - 1;\n    public temp3: number = this.diskData.length - 1;\n    public temp4: number = this.netData.length - 1;\n    public time1: number;\n    public time2: number;\n    public time3: number;\n    public time4: number;\n    public update(): void {\n        if (this.cpuspark.element.className.indexOf('e-sparkline') > -1) {\n            let value: number = ((Math.random() * 100) + 5) % 50;\n            (this.cpuspark.dataSource as Object[]).push({ x: ++this.temp1, yval: value });\n            (this.cpuspark.dataSource as Object[]).shift();\n            this.cpuspark.refresh();\n            let cpu: Element = document.getElementById('cpu');\n            if (cpu) {\n            cpu.innerHTML = ((value / 150) * 100).toFixed(0) + '% ' + ((value * 3) / 100).toFixed(2) + 'GHz';\n            }\n        }\n    }\n    public update1(): void {\n        if (this.memspark.element.className.indexOf('e-sparkline') > -1) {\n            let value: number = Math.random();\n            if (value > 0.6) {\n                value = 6 + (value / 10);\n            } else {\n                value = 6 - (value / 10);\n            }\n           (this.memspark.dataSource as Object[]).push({ x: ++this.temp2, yval: value });\n           (this.memspark.dataSource as Object[]).shift();\n            this.memspark.refresh();\n            let memory: Element = document.getElementById('memory');\n            let gb: string = parseFloat(value.toString().replace('0', '')).toFixed(1);\n            if (memory) {\n            memory.innerHTML = gb + '/15.8 GB (' + ((value / 15.8) * 100).toFixed(0) + '%)';\n            }\n        }\n    }\n    public update2(): void {\n        if (this.diskspark.element.className.indexOf('e-sparkline') > -1) {\n            let value: number = ((Math.random() * 100) + 5) % 80;\n            (this.diskspark.dataSource as Object[]).push({ x: ++this.temp3, yval: value });\n            (this.diskspark.dataSource as Object[]).shift();\n            this.diskspark.refresh();\n            let disk: Element = document.getElementById('disk');\n            if (disk) {\n            disk.innerHTML = value.toFixed(0) + '%';\n            }\n        }\n    }\n    public update3(): void {\n        if (this.netspark.element.className.indexOf('e-sparkline') > -1) {\n            let value: number = ((Math.random() * 100) + 5) % 80;\n            (this.netspark.dataSource as Object[]).push({ x: ++this.temp4, yval: value });\n            (this.netspark.dataSource as Object[]).shift();\n            this.netspark.refresh();\n            let net: Element = document.getElementById('net');\n            if (net) {\n            net.innerHTML = 'R: ' + value.toFixed(0) + 'Kbps';\n            }\n        }\n    }\n    constructor() {\n        // live update\n    }\n    public cpuloaded(args: ISparklineLoadEventArgs): void {\n        clearInterval(this.time1);\n        this.time1 = window.setInterval(this.update.bind(this), 1000);\n    }\n    public cpuload(args: ISparklineLoadEventArgs): void {\n        var theme = location.hash.split('/')[1];\n        theme = theme ? theme : 'Material';\n        args.sparkline.theme = <SparklineTheme>(theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast');\n    }\n    public memloaded(args: ISparklineLoadEventArgs): void {\n        clearInterval(this.time2);\n        this.time2 = window.setInterval(this.update1.bind(this), 1000);\n    }\n    public diskloaded(args: ISparklineLoadEventArgs): void {\n        clearInterval(this.time3);\n        this.time3 = window.setInterval(this.update2.bind(this), 1000);\n    }\n    public netloaded(args: ISparklineLoadEventArgs): void {\n        clearInterval(this.time4);\n        this.time4 = window.setInterval(this.update3.bind(this), 1000);\n    }\n}","app/app.module.ts":"import { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { SliderModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { SparklineAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ SparklineAllModule, GridAllModule, SliderModule, DropDownListAllModule, CheckBoxModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\" align=\"center\">\n    <div id=\"spark-container\" class=\"row\">\n        <div class=\"cols-sample-area\" align=\"center\" style=\"margin-top: 8%;\">\n            <div align=\"center\" class=\"col-lg-3 col-m-3 col-sm-6\">\n                <div align=\"center\" class=\"spark\">\n                    <ejs-sparkline #cpuspark (load)=\"cpuload($event)\" (loaded)=\"cpuloaded($event)\" id=\"cpuspark1\" height=\"130px\" width=\"100%\"\n                        [axisSettings]=\"cpuaxisSettings\" [containerArea]=\"cpucontainerArea\" [border]=\"cpuborder\" fill='#e8f2fc'\n                        type='Area' [dataSource]='cpuData' xName='x' yName='yval' valueType='Numeric'></ejs-sparkline>\n                    <div style=\"font-size: 12px; position: absolute; margin-top: -125px; margin-left: 3%;\">\n                        <b>CPU</b>\n                    </div>\n                    <div id=\"cpu\" style=\"color: #0877d6;position: absolute; margin-top: -105px; margin-left: 3%;\">26%\n                        1.2GHz</div>\n                </div>\n            </div>\n            <div align=\"center\" class=\"col-lg-3 col-m-3 col-sm-6\">\n                <div align=\"center\" class=\"spark\">\n                    <ejs-sparkline #memspark (load)=\"cpuload($event)\" (loaded)=\"memloaded($event)\" id=\"memspark1\" height=\"130px\" width=\"100%\"\n                        [axisSettings]=\"memaxisSettings\" [containerArea]=\"memcontainerArea\" [border]=\"memborder\" fill='#f5e8fc'\n                        type='Area' [dataSource]='memData' xName='x' yName='yval' valueType='Numeric'></ejs-sparkline>\n                    <div style=\"font-size: 12px; position: absolute; margin-top: -125px; margin-left: 3%;\">\n                        <b>Disk</b>\n                    </div>\n                    <div id=\"disk\" style=\"color: #b247c6 ;position: absolute; margin-top: -105px; margin-left: 3%;\">50%</div>\n                </div>\n            </div>\n            <div align=\"center\" class=\"col-lg-3 col-m-3 col-sm-6\">\n                <div align=\"center\" class=\"spark\">\n                    <ejs-sparkline #diskspark (load)=\"cpuload($event)\" (loaded)=\"diskloaded($event)\" id=\"diskspark1\" height=\"130px\" width=\"100%\"\n                        [axisSettings]=\"diskaxisSettings\" [containerArea]=\"diskcontainerArea\" [border]=\"diskborder\"\n                        fill='#e0f9d1' type='Area' [dataSource]='diskData' xName='x' yName='yval' valueType='Numeric'></ejs-sparkline>\n                    <div style=\"font-size: 12px; position: absolute; margin-top: -125px; margin-left: 3%;\">\n                        <b>Memory</b>\n                    </div>\n                    <div id=\"memory\" style=\"color: #5bcc8f;position: absolute; margin-top: -105px; margin-left: 3%;\">6.5/15.8\n                        GB (41%)</div>\n                </div>\n            </div>\n            <div align=\"center\" class=\"col-lg-3 col-m-3 col-sm-6\">\n                <div align=\"center\" class=\"spark\">\n                    <ejs-sparkline #netspark (load)=\"cpuload($event)\" (loaded)=\"netloaded($event)\" id=\"netspark1\" height=\"130px\" width=\"100%\"\n                        [axisSettings]=\"netaxisSettings\" [containerArea]=\"netcontainerArea\" [border]=\"netborder\" fill='#F2D8C7'\n                        type='Area' [dataSource]='netData' xName='x' yName='yval' valueType='Numeric'></ejs-sparkline>\n                    <div style=\"font-size: 12px; position: absolute; margin-top: -125px; margin-left: 3%;\">\n                        <b>Ethernet</b>\n                    </div>\n                    <div id=\"net\" style=\"color: #d1a990;position: absolute;  margin-top: -105px; margin-left: 3%;\">R:\n                        50Kbps</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<style>\n    .spark {\n        float: left;\n        width: 95%;\n        margin-left: 3%;\n    }\n</style>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-compression\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-file-utils\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}