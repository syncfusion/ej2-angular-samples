{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","theme-color.ts":"import { EmitType } from \"@syncfusion/ej2/base\";\nimport { ISparklineLoadEventArgs, SparklineTheme } from \"@syncfusion/ej2/charts\";\n\nexport let loadSparkLineTheme: EmitType<ISparklineLoadEventArgs> = (args: ISparklineLoadEventArgs): void => {\n    let theme: string = location.hash.split('/')[1];\n    theme = theme ? theme : 'Tailwind3';\n    args.sparkline.theme = <SparklineTheme>(theme.charAt(0).toUpperCase() + theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n};","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { Sparkline, VisibleType } from '@syncfusion/ej2-charts';\nimport { DropDownList, ChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { Slider, SliderChangeEventArgs } from '@syncfusion/ej2-inputs';\nimport { SliderComponent, SliderModule } from '@syncfusion/ej2-angular-inputs';\nimport { EmitType } from '@syncfusion/ej2-base';\nimport { CheckBox, ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\nimport { ISparklineLoadEventArgs, SparklineTheme, SparklineAllModule } from '@syncfusion/ej2-angular-charts';\nimport { loadSparkLineTheme } from './theme-color';\n/**\n * Sample for axis type in Sparkline \n */\n// tslint:disable\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [SparklineAllModule, SliderModule]\n})\nexport class AppComponent {\n    // custom code start\n    public load(args: ISparklineLoadEventArgs): void {\n        loadSparkLineTheme(args);\n    };\n    // custom code end\n    public percentageData: object[] = [\n        { x: 0, xval: 'AUDI', yval: 1 },\n        { x: 1, xval: 'BMW', yval: 5 },\n        { x: 2, xval: 'BUICK', yval: -1 },\n        { x: 3, xval: 'CETROEN', yval: -6 },\n        { x: 4, xval: 'CHEVROLET', yval: 0 },\n        { x: 5, xval: 'FIAT', yval: 1 },\n        { x: 6, xval: 'FORD', yval: -2 },\n        { x: 7, xval: 'HONDA', yval: 7 },\n        { x: 8, xval: 'HYUNDAI', yval: -9 },\n        { x: 9, xval: 'JEEP', yval: 0 },\n        { x: 10, xval: 'KIA', yval: -10 },\n        { x: 11, xval: 'MAZDA', yval: 3 },\n        { x: 12, xval: 'MERCEDES', yval: 13 },\n        { x: 13, xval: 'NISSAN', yval: 5 },\n        { x: 14, xval: 'OPEL/VHALL', yval: -6 },\n        { x: 15, xval: 'PEUGEOT', yval: 0 },\n        { x: 16, xval: 'RENAULT', yval: 7 },\n        { x: 17, xval: 'SKODA', yval: 5 },\n        { x: 18, xval: 'SUBARU', yval: 5 },\n        { x: 19, xval: 'SUZUKI', yval: 11 },\n        { x: 20, xval: 'TOYOTA', yval: 5 },\n        { x: 21, xval: 'VOLKSWAGEN', yval: 3 },\n    ];\n    public peraxisSettings: object = {\n        lineSettings: {\n            color: 'red',\n            width: 2\n        }\n    };\n    public permarkerSettings: object = {\n        fill: 'red',\n        size: 5\n    };\n    public pertooltipSettings: object = {\n        format: '${xval}: ${yval}',\n        trackLineSettings: {\n            color: 'red',\n            width: 1\n        }\n    };\n    public salData: object[] = [\n        { x: 0, xval: 'AUDI', yval: 1847613 },\n        { x: 1, xval: 'BMW', yval: 2030331 },\n        { x: 2, xval: 'BUICK', yval: 1465823 },\n        { x: 3, xval: 'CETROEN', yval: 999888 },\n        { x: 4, xval: 'CHEVROLET', yval: 3857388 },\n        { x: 5, xval: 'FIAT', yval: 1503806 },\n        { x: 6, xval: 'FORD', yval: 5953122 },\n        { x: 7, xval: 'HONDA', yval: 4967689 },\n        { x: 8, xval: 'HYUNDAI', yval: 3951176 },\n        { x: 9, xval: 'JEEP', yval: 1390130 },\n        { x: 10, xval: 'KIA', yval: 2511293 },\n        { x: 11, xval: 'MAZDA', yval: 1495557 },\n        { x: 12, xval: 'MERCEDES', yval: 2834181 },\n        { x: 13, xval: 'NISSAN', yval: 4834694 },\n        { x: 14, xval: 'OPEL/VHALL', yval: 996559 },\n        { x: 15, xval: 'PEUGEOT', yval: 1590300 },\n        { x: 16, xval: 'RENAULT', yval: 2275227 },\n        { x: 17, xval: 'SKODA', yval: 1180672 },\n        { x: 18, xval: 'SUBARU', yval: 1050390 },\n        { x: 19, xval: 'SUZUKI', yval: 2891415 },\n        { x: 20, xval: 'TOYOTA', yval: 7843423 },\n        { x: 21, xval: 'VOLKSWAGEN', yval: 6639250 },\n    ];\n    public salaxisSettings: object = {\n        lineSettings: {\n            color: 'red',\n            width: 2\n        }\n    };\n    public salmarkerSettings: object = {\n        fill: 'red',\n        size: 5\n    };\n    public saltooltipSettings: object = {\n        format: '${xval}: ${yval}',\n        trackLineSettings: {\n            color: 'red',\n            width: 1\n        }\n    };\n    public value: number = 0;\n     data: string[] = [\n        'Sales Percentage',\n        'Sales Count',\n    ]\n    public mode: DropDownList;\n    ngOnInit(): void {\n        this.mode = new DropDownList({\n            index: 0,\n            width: 120,\n            dataSource: [\n                'Sales Percentage',\n                'Sales Count',\n            ],\n            \n            change: (e: ChangeEventArgs) => {\n                \n                this.onchange(e);\n            }\n        });\n        this.mode.appendTo('#spark');\n    }\n    @ViewChild('percentage')\n    public percentage: Sparkline;\n    @ViewChild('sales')\n    public sales: Sparkline;\n    @ViewChild('slide')\n    public slide: Slider;\n    // tslint:disable-next-line:max-func-body-length\n    public onchange = (element1: ChangeEventArgs) => {\n        if (element1.value === 'Sales Percentage') {\n            let slider: Element = document.getElementById('axis');\n            let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0];\n            slider1.min = 0;\n            slider1.max = 10;\n            slider1.value = 0;\n        } else {          \n            let slider: Element = document.getElementById('axis');\n            let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0];\n            slider1.min = 0;\n            slider1.max = 5000000;\n            slider1.value = 0;\n        }\n        if ((element1.value === 'Sales Percentage' && this.percentage.markerSettings.visible.length) ||\n            (element1.value === 'Sales Count' && this.sales.markerSettings.visible.length)) {\n            (document.getElementById('marker') as HTMLInputElement).checked = true;\n        } else {\n            (document.getElementById('marker') as HTMLInputElement).checked = false;\n        }\n        document.getElementById('marker').onchange = (e: Event) => {\n            let boolean: boolean = (e.target as HTMLInputElement).checked;\n            let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n            if (boolean) {\n                spark.markerSettings.visible = this.getVisible();\n            } else {\n                spark.markerSettings.visible = [];\n            }\n            spark.refresh();\n        };\n        if ((element1.value === 'Sales Percentage' && this.percentage.dataLabelSettings.visible.length) ||\n            (element1.value === 'Sales Count' && this.sales.dataLabelSettings.visible.length)) {\n            (document.getElementById('datalabel') as HTMLInputElement).checked = true;\n        } else {\n            (document.getElementById('datalabel') as HTMLInputElement).checked = false;\n        }\n        \n        let all: HTMLInputElement = document.getElementById('all') as HTMLInputElement;\n        let negative: HTMLInputElement = document.getElementById('negative') as HTMLInputElement;\n        let first: HTMLInputElement = document.getElementById('first') as HTMLInputElement;\n        let last: HTMLInputElement = document.getElementById('last') as HTMLInputElement;\n        let high: HTMLInputElement = document.getElementById('high') as HTMLInputElement;\n        let low: HTMLInputElement = document.getElementById('low') as HTMLInputElement;\n        let label: HTMLInputElement = document.getElementById('datalabel') as HTMLInputElement;\n        let marker: HTMLInputElement = document.getElementById('marker') as HTMLInputElement;\n        if (!marker.checked && !label.checked) {\n            all.checked = true;\n            negative.checked = false;\n            first.checked = false;\n            last.checked = false;\n            high.checked = false;\n            low.checked = false;\n        }\n        if (marker.checked) {\n            let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n            all.checked = spark.markerSettings.visible.indexOf('All') > -1;\n            negative.checked = spark.markerSettings.visible.indexOf('Negative') > -1;\n            first.checked = spark.markerSettings.visible.indexOf('Start') > -1;\n            last.checked = spark.markerSettings.visible.indexOf('End') > -1;\n            high.checked = spark.markerSettings.visible.indexOf('High') > -1;\n            low.checked = spark.markerSettings.visible.indexOf('Low') > -1;\n        }\n        if (label.checked) {\n            let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n            all.checked = spark.dataLabelSettings.visible.indexOf('All') > -1;\n            negative.checked = spark.dataLabelSettings.visible.indexOf('Negative') > -1;\n            first.checked = spark.dataLabelSettings.visible.indexOf('Start') > -1;\n            last.checked = spark.dataLabelSettings.visible.indexOf('End') > -1;\n            high.checked = spark.dataLabelSettings.visible.indexOf('High') > -1;\n            low.checked = spark.dataLabelSettings.visible.indexOf('Low') > -1;\n        }\n        document.getElementById('datalabel').onchange = (e: Event) => {\n            let boolean: boolean = (e.target as HTMLInputElement).checked;\n            let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n            if (boolean) {\n                spark.dataLabelSettings.visible = this.getVisible();\n            } else {\n                spark.dataLabelSettings.visible = [];\n            }\n            spark.refresh();\n        };\n        if ((element1.value === 'Sales Percentage' && this.percentage.tooltipSettings.visible === true) ||\n            (element1.value === 'Sales Count' && this.sales.tooltipSettings.visible === true)) {\n            (document.getElementById('tooltip') as HTMLInputElement).checked = true;\n        } else {\n            (document.getElementById('tooltip') as HTMLInputElement).checked = false;\n        }\n        document.getElementById('tooltip').onchange = (e: Event) => {\n            let boolean: boolean = (e.target as HTMLInputElement).checked;\n            let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n            if (boolean) {\n                spark.tooltipSettings.visible = true;\n            } else {\n                spark.tooltipSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if ((element1.value === 'Sales Percentage' && this.percentage.enableRtl === true) ||\n            (element1.value === 'Sales Count' && this.sales.enableRtl === true)) {\n            (document.getElementById('enableRTL') as HTMLInputElement).checked = true;\n        } else {\n            (document.getElementById('enableRTL') as HTMLInputElement).checked = false;\n        }\n        document.getElementById('enableRTL').onchange = (e: Event) => {\n            let boolean: boolean = (e.target as HTMLInputElement).checked;\n            let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n            if (boolean) {\n                spark.enableRtl = true;\n            } else {\n                spark.enableRtl = false;\n            }\n            spark.refresh();\n        };\n        if ((element1.value === 'Sales Percentage' && this.percentage.tooltipSettings.trackLineSettings.visible === true) ||\n            (element1.value === 'Sales Count' && this.sales.tooltipSettings.trackLineSettings.visible === true)) {\n            (document.getElementById('trackline') as HTMLInputElement).checked = true;\n        } else {\n            (document.getElementById('trackline') as HTMLInputElement).checked = false;\n        }\n        document.getElementById('trackline').onchange = (e: Event) => {\n            let boolean: boolean = (e.target as HTMLInputElement).checked;\n            let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n            if (boolean) {\n                spark.tooltipSettings.trackLineSettings.visible = true;\n            } else {\n                spark.tooltipSettings.trackLineSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if ((element1.value === 'Sales Percentage' && this.percentage.axisSettings.lineSettings.visible === true) ||\n            (element1.value === 'Sales Count' && this.sales.axisSettings.lineSettings.visible === true)) {\n            (document.getElementById('axis1') as HTMLInputElement).checked = true;\n        } else {\n            (document.getElementById('axis1') as HTMLInputElement).checked = false;\n        }\n        document.getElementById('axis1').onchange = (e: Event) => {\n            let boolean: boolean = (e.target as HTMLInputElement).checked;\n            let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n            if (boolean) {\n                spark.axisSettings.lineSettings.visible = true;\n            } else {\n                spark.axisSettings.lineSettings.visible = false;\n            }\n            spark.refresh();\n        };\n        if (element1.value === 'Sales Percentage' && this.percentage.axisSettings.value !== 0) {\n            let slider: Element = document.getElementById('axis');\n            let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0];\n            slider1.min = 0;\n            slider1.max = 10;\n            slider1.value = slider1.value;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + slider1.value;\n        }\n        if (element1.value === 'Sales Count' && this.sales.axisSettings.value !== 0) {\n            let slider: Element = document.getElementById('axis');\n            let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0];\n            slider1.min = 0;\n            slider1.max = 5000000;\n            slider1.value = slider1.value;\n            document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + slider1.value;\n        }\n        document.getElementById('axis').onpointermove = document.getElementById('axis').ontouchmove =\n            document.getElementById('axis').onchange = (e: Event) => {\n                let slider: Element = document.getElementById('axis');\n                let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0]; \n                let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n                spark.axisSettings.value = slider1.value as number;\n                document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + slider1.value;\n                spark.refresh();\n            };\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        if (element.value === 'Sales Percentage') {\n            let slider: Element = document.getElementById('axis');\n            let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0];\n            slider1.min = 0;\n            let max = slider1.max = 10;\n        } else {\n            let slider: Element = document.getElementById('axis');\n            let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0];\n            slider1.min = 0;\n            let max = slider1.max = 5000000;\n        }\n        \n    }\n    public onchangeAll = (e: CheckBoxChangeEvents) => {\n        let negative: HTMLInputElement = document.getElementById('negative') as HTMLInputElement;\n        let first: HTMLInputElement = document.getElementById('first') as HTMLInputElement;\n        let last: HTMLInputElement = document.getElementById('last') as HTMLInputElement;\n        let high: HTMLInputElement = document.getElementById('high') as HTMLInputElement;\n        let low: HTMLInputElement = document.getElementById('low') as HTMLInputElement;\n        let checked: boolean = e.checked;\n        negative.disabled = checked;\n        first.disabled = checked;\n        last.disabled = checked;\n        high.disabled = checked;\n        low.disabled = checked;\n        let marker: HTMLInputElement = document.getElementById('marker') as HTMLInputElement;\n        let label: HTMLInputElement = document.getElementById('datalabel') as HTMLInputElement;\n        let element1: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        let spark: Sparkline = element1.value === 'Sales Percentage' ? this.percentage : this.sales;\n        spark.markerSettings.visible = (checked && marker.checked) ? ['All'] : (marker.checked) ? this.getVisible() : [];\n        spark.dataLabelSettings.visible = (checked && label.checked) ? ['All'] : (label.checked) ? this.getVisible() : [];\n        spark.refresh();\n    }\n    public onchangeOthers = (e: CheckBoxChangeEvents) => {\n        this.processMarkerLabel(e);\n    }\n    public processMarkerLabel(e: CheckBoxChangeEvents): void {\n        let marker: HTMLInputElement = document.getElementById('marker') as HTMLInputElement;\n        let label: HTMLInputElement = document.getElementById('datalabel') as HTMLInputElement;\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        let spark: Sparkline = element.value === 'Sales Percentage' ? this.percentage : this.sales;\n        if (marker.checked) {\n            spark.markerSettings.visible = this.getVisible() as VisibleType[];\n            spark.refresh();\n        }\n        if (label.checked) {\n            spark.dataLabelSettings.visible = this.getVisible() as VisibleType[];\n            spark.refresh();\n        }\n    }\n    public getVisible(): VisibleType[] {\n        let all: HTMLInputElement = document.getElementById('all') as HTMLInputElement;\n        let negative: HTMLInputElement = document.getElementById('negative') as HTMLInputElement;\n        let first: HTMLInputElement = document.getElementById('first') as HTMLInputElement;\n        let last: HTMLInputElement = document.getElementById('last') as HTMLInputElement;\n        let high: HTMLInputElement = document.getElementById('high') as HTMLInputElement;\n        let low: HTMLInputElement = document.getElementById('low') as HTMLInputElement;\n        let visible: VisibleType[] = [];\n        if (all.checked) { return ['All']; }\n        if (negative.checked) { visible.push('Negative'); }\n        if (first.checked) { visible.push('Start'); }\n        if (last.checked) { visible.push('End'); }\n        if (high.checked) { visible.push('High'); }\n        if (low.checked) { visible.push('Low'); }\n        return visible;\n    };\n    public onchangeMarker = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n       let sparks: Sparkline  = (element.value === 'Sales Percentage') ? <Sparkline>document.getElementById('percentage1')['ej2_instances'][0] :\n       <Sparkline>document.getElementById('sales1')['ej2_instances'][0]; \n       if (true) {\n            sparks.markerSettings.visible = this.getVisible();\n        } \n        sparks.refresh();\n    };\n    public onchangeDatalabel = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        let sparks: Sparkline  = (element.value === 'Sales Percentage') ? <Sparkline>document.getElementById('percentage1')['ej2_instances'][0] :\n       <Sparkline>document.getElementById('sales1')['ej2_instances'][0];\n        if (true) {\n            sparks.dataLabelSettings.visible = this.getVisible();\n        }\n        sparks.refresh();\n    };\n    public onchangeTooltip = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        let sparks: Sparkline  = (element.value === 'Sales Percentage') ? <Sparkline>document.getElementById('percentage1')['ej2_instances'][0] :\n       <Sparkline>document.getElementById('sales1')['ej2_instances'][0];\n        sparks.tooltipSettings.visible = true;\n        sparks.tooltipSettings.format = '${xval}: ${yval}';\n        sparks.refresh();\n    };\n    public onchangeTrackline = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        let sparks: Sparkline  = (element.value === 'Sales Percentage') ? <Sparkline>document.getElementById('percentage1')['ej2_instances'][0] :\n       <Sparkline>document.getElementById('sales1')['ej2_instances'][0];\n        sparks.tooltipSettings.trackLineSettings.visible = true;\n        sparks.tooltipSettings.trackLineSettings.color = 'red';\n        sparks.tooltipSettings.trackLineSettings.width = 1;\n        sparks.refresh();\n    }\n    public onchangeline = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        let sparks: Sparkline  = (element.value === 'Sales Percentage') ? <Sparkline>document.getElementById('percentage1')['ej2_instances'][0] :\n        <Sparkline>document.getElementById('sales1')['ej2_instances'][0];\n        sparks.axisSettings.lineSettings.visible = true;\n            sparks.axisSettings.lineSettings.color = 'red';\n            sparks.axisSettings.lineSettings.width = 2;\n        \n        sparks.refresh();\n    }\n    public onchangeAxis = (e: SliderChangeEventArgs) => {\n        let slider: Element = document.getElementById('axis');\n        let slider1: SliderComponent = <SliderComponent>slider['ej2_instances'][0];\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        let spark: Sparkline = element.value === 'Sales Percentage' ? this.percentage : this.sales;\n        slider1.max = (element.value === 'Sales Percentage') ? 10 : 5000000 \n        spark.axisSettings.value = slider1.value as number;\n        document.getElementById('axisval').innerHTML = 'Axis value: <span> ' + slider1.value;\n        spark.refresh();\n    }\n    public onshowLastLabel = (e: CheckBoxChangeEvents) => {\n        let boolean: boolean = e.checked;\n        let element: HTMLSelectElement = <HTMLSelectElement>(document.getElementById('spark'));\n        let sparks: Sparkline  = (element.value === 'Sales Percentage') ? <Sparkline>document.getElementById('percentage1')['ej2_instances'][0] :\n       <Sparkline>document.getElementById('sales1')['ej2_instances'][0];\n        sparks.enableRtl = (<HTMLInputElement>document.getElementById('enableRTL')).checked;\n        sparks.refresh();\n    };\n    \n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section sb-property-border\">\n    <div id=\"spark-container\" class=\"row\">\n        <div class=\"cols-sample-area\" align=\"center\">\n            <p>\n                <font size=4px> Worldwide car sales by brand - 2017</font>\n            </p>\n            <table style=\"width:150%;\">\n                <tr>\n                    <td align=\"center\">Sales Percentage</td>\n                    <td>\n                        <ejs-sparkline #percentage style=\"margin-right: 20px;\" id=\"percentage1\" height=\"200px\" width=\"200px\" [markerSettings]=\"permarkerSettings\"\n                            [axisSettings]=\"peraxisSettings\" [tooltipSettings]=\"pertooltipSettings\" type='Column'\n                            [dataSource]='percentageData' xName='xval' yName='yval' valueType='Category' (load)='load($event)'></ejs-sparkline>\n                    </td>\n                </tr>\n                <tr>\n                    <td align=\"center\">Sales Count</td>\n                    <td>\n                        <ejs-sparkline #sales style=\"margin-right: 20px;\" id=\"sales1\" height=\"200px\" width=\"200px\" [markerSettings]=\"salmarkerSettings\"\n                            [axisSettings]=\"salaxisSettings\" [tooltipSettings]=\"saltooltipSettings\" type='Column'\n                            [dataSource]='salData' xName='xval' yName='yval' valueType='Category' (onchange)=\"onchange($event)\" (load)='load($event)'></ejs-sparkline>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div style=\"float: right; margin-right: 10px;\">Source:\n        <a href=\" http://carsalesbase.com/global-car-sales-2017\" target=\"_blank\" aria-label=\"Navigate to the documentation for car sales base\">carsalesbase.com</a>\n    </div>\n</div>\n\n<div class=\"col-lg-4 property-section\">\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>\n    <div class=\"property-panel-section\">\n        <div class=\"property-panel-header\">Properties</div>\n        <div class=\"property-panel-content\">\n    <table id=\"property\" style=\"width:100%\" title=\"Properties\">\n        <tbody>\n            <tr style=\"height: 40px\">\n                <td style=\"width: 50%\">\n                    Sparkline\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"text\" id=\"spark\" (change)=\"onchange($event)\" style=\"width: 100px; height: 20px\">\n\n                </td>\n            </tr>\n            <tr style=\"height: 40px\">\n                <td style=\"width: 50%\">\n                    Special Points\n                </td>\n                <td style=\"width: 50%\">\n                    <table>\n                        <tr>\n                            <td id=\"checkboxAll\">All</td>&nbsp; &nbsp;\n                            <td>\n                                <input type=\"checkbox\" (change)=\"onchangeAll($event)\" checked class=\"sparkinput\"\n                                    checked=true id=\"all\" aria-labelledby=\"Checkbox checked\">\n                            </td> &nbsp; &nbsp;\n                            <td id=\"checkboxNegative\">Negative</td>&nbsp; &nbsp;\n                            <td>\n                                <input type=\"checkbox\" (change)=\"onchangeOthers($event)\" disabled class=\"sparkinput\" id=\"negative\" aria-labelledby=\"Checkbox unchecked\">\n                            </td>\n                        </tr>\n                        <tr>\n                            <td id=\"checkboxFirst\">First</td>&nbsp; &nbsp;\n                            <td>\n                                <input type=\"checkbox\" (change)=\"onchangeOthers($event)\" disabled class=\"sparkinput\" id=\"first\" aria-labelledby=\"Checkbox unchecked\">\n                            </td>&nbsp; &nbsp;\n                            <td id=\"checkboxLast\">Last</td>&nbsp; &nbsp;\n                            <td>\n                                <input type=\"checkbox\" (change)=\"onchangeOthers($event)\" disabled class=\"sparkinput\" id=\"last\" aria-labelledby=\"Checkbox unchecked\">\n                            </td>\n                        </tr>\n                        <tr>\n                            <td id=\"checkboxHigh\">High</td>&nbsp; &nbsp;\n                            <td>\n                                <input type=\"checkbox\" (change)=\"onchangeOthers($event)\" disabled class=\"sparkinput\" id=\"high\" aria-labelledby=\"Checkbox unchecked\">\n                            </td>&nbsp; &nbsp;\n                            <td id=\"checkboxLow\">Low</td>&nbsp; &nbsp;\n                            <td>\n                                <input type=\"checkbox\" (change)=\"onchangeOthers($event)\" disabled class=\"sparkinput\" id=\"low\" aria-labelledby=\"Checkbox unchecked\">\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n            </tr>\n            <tr style=\"height: 40px\">\n                <td style=\"width: 50%\" id=\"checkboxMarker\">\n                    Marker\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" [checked]=\"false\" (change)=\"onchangeMarker($event)\" class=\"sparkinput\" name=\"marker\"\n                        id=\"marker\" aria-labelledby=\"Checkbox unchecked\">\n                </td>\n            </tr>\n            <tr style=\"height: 40px\">\n                <td style=\"width: 50%\" id=\"checkboxDatalabel\">\n                    Data Label\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" [checked]=\"false\" (change)=\"onchangeDatalabel($event)\" class=\"sparkinput\"\n                        name=\"datalabel\" id=\"datalabel\" aria-labelledby=\"Checkbox unchecked\">\n                </td>\n            </tr>\n            <tr style=\"height: 40px\">\n                <td style=\"width: 50%\" id=\"checkboxRtl\">\n                    Enable RTL\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" [checked]=\"false\" (change)=\"onshowLastLabel($event)\" class=\"sparkinput\" name=\"enableRTL\"\n                        id=\"enableRTL\" aria-labelledby=\"Checkbox unchecked\">\n                </td>\n            </tr>\n            <tr style=\"height: 40px\">\n                <td style=\"width: 50%\" id=\"checkboxTooltip\">\n                    Tooltip\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" [checked]=\"false\" (change)=\"onchangeTooltip($event)\" class=\"sparkinput\" name=\"tooltip\"\n                        id=\"tooltip\" aria-labelledby=\"Checkbox unchecked\">\n                </td>\n            </tr>\n            <tr style=\"height: 40px\">\n                <td style=\"width: 50%\" id=\"checkboxTrackline\">\n                    Track Line\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" [checked]=\"false\" (change)=\"onchangeTrackline($event)\" class=\"sparkinput\"\n                        name=\"trackline\" id=\"trackline\" aria-labelledby=\"Checkbox unchecked\">\n                </td>\n            </tr>\n            <tr style=\"height: 40px\">\n                <td style=\"width: 50%\" id=\"checkboxAxisline\">\n                    Axis Line\n                </td>\n                <td style=\"width: 50%\">\n                    <input type=\"checkbox\" [checked]=\"false\" (change)=\"onchangeline($event)\" class=\"sparkinput\" name=\"axis\"\n                        id=\"axis1\" aria-labelledby=\"Checkbox unchecked\">\n                </td>\n            </tr>\n            <tr>\n                <td id='axisval'>\n                    Axis Value<span>&nbsp;&nbsp;&nbsp;0</span>\n                </td>\n                <td>\n                    <div>\n                        <ejs-slider #slider (change)=\"onchangeAxis($event)\" id=\"axis\" value=0 min=0 step=1 style=\"width:100%\">\n                        </ejs-slider>\n                    </div>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n</div>\n</div>\n</div>\n<style>\n    .property-text {\n        font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\" !important;\n        font-size: 13px !important;\n        font-weight: 400 !important;\n    }\n\n    .control-section {\n        min-height: 450px;\n    }\n\n    #range>* {\n        padding: 0px !important;\n    }\n\n    label {\n        height: 32px !important;\n    }\n</style>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}