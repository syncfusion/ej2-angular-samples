{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [   AppComponent ], imports: [ BrowserModule, FormsModule, ReactiveFormsModule, CommonModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-12 control-section\">\n    <div class=\"content-wrapper\" style=\"margin-bottom: 25px;\">\n        <div class=\"formtitle\">\n            <span>Add Customer Details</span>\n        </div>\n\n        <form id=\"formId\" [formGroup]=\"reactForm\" #formDir=\"ngForm\" class=\"form-horizontal\" novalidate=\"\">\n\n            <div class=\"form-group\">\n                <div class=\"e-float-input\">\n                    <input id=\"check\" type=\"text\" formControlName=\"check\">\n                    <span class=\"e-float-line\"></span>\n                    <label for=\"check\" class=\"e-float-text\">User Name</label>\n                </div>\n                <div *ngIf=\"check.errors\">\n                    <div *ngIf=\"check.errors.required && check.touched\" class=\"e-error\">\n                        This field is required.\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"e-float-input\">\n                    <input id=\"email_check\" type=\"text\" formControlName=\"email_check\">\n                    <span class=\"e-float-line\"></span>\n                    <label for=\"email_check\" class=\"e-float-text\">Email</label>\n                </div>\n                <div *ngIf=\"email_check.errors \">\n                    <div *ngIf=\"email_check.errors.email && email_check.touched\" class=\"e-error\">\n                        Please enter a valid email address.\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"e-float-input\">\n                    <input id=\"date_check\" type=\"text\" formControlName=\"date_check\">\n                    <span class=\"e-float-line\"></span>\n                    <label for=\"date_check\" class=\"e-float-text\">DOB</label>\n                    <div *ngIf=\"date_check.errors \">\n                        <div *ngIf=\"date_check.errors.date && date_check.touched\" class=\"e-error\">\n                            Please enter a valid date.\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"e-float-input\">\n                    <textarea rows=\"4\" id=\"Address\" name=\"Address\" formControlName=\"Address\"></textarea>\n                    <span class=\"e-float-line\"></span>\n                    <label class=\"e-float-text\" for=\"address\">Address</label>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"e-float-input\">\n                    <input id=\"city\" formControlName=\"city\">\n                    <span class=\"e-float-line\"></span>\n                    <label for=\"city\" class=\"e-float-text\">City</label>\n                    <div *ngIf=\"city.errors \">\n                        <div *ngIf=\"city.errors.required && city.touched\" class=\"e-error\">\n                            This field is required.\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"e-float-input\">\n                    <input id=\"state\" formControlName=\"state\">\n                    <span class=\"e-float-line\"></span>\n                    <label for=\"state\" class=\"e-float-text\">State</label>\n                    <div *ngIf=\"state.errors \">\n                        <div *ngIf=\"state.errors.required && state.touched\" class=\"e-error\">\n                            This field is required.\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div style=\"width: 320px;margin:0px auto;height: 100px;padding-top: 25px;\">\n                    <div style=\"display: inline-block;\">\n                        <button id=\"validateSubmit\" class=\"samplebtn e-control e-btn e-primary\" type=\"submit\" style=\"height:40px;width: 150px;\" data-ripple=\"true\">Add Customer</button>\n                    </div>\n                    <div style=\"float: right;\">\n                        <button id=\"resetbtn\" class=\"samplebtn e-control e-btn\" type=\"reset\" style=\"height:40px;width: 150px;\" data-ripple=\"true\">Clear</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n\n\n<div id=\"description\">\n\n<style>\n    .formtitle {\n        width: 100%;\n        text-align: center;\n        padding: 10px;\n        font-size: 16px;\n        font-weight: 500;\n        color: rgba(0, 0, 0, 0.70);\n    }\n\n    .e-error,\n    .e-float-text {\n        font-weight: 500;\n    }\n\n    .e-custom-label {\n        font-size: 14px;\n        font-weight: 500;\n        margin-left: 20px;\n    }\n\n    form {\n        padding-top: 20px;\n        margin-bottom: 45px;\n        border: 1px solid #ccc;\n        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.36);\n        border-radius: 5px;\n        background: #f9f9f9;\n    }\n\n    .highcontrast form,\n    .highcontrast .header {\n        color: #fff;\n        background: #000000;\n    }\n\n    .header {\n        color: rgba(0, 0, 0, 0.7);\n    }\n\n    table,\n    td,\n    th {\n        padding: 5px;\n    }\n\n    .form-horizontal .form-group {\n        margin-left: 20px;\n        margin-right: 20px;\n    }\n\n    .row {\n        padding-bottom: 30px;\n        padding-top: 25px;\n    }\n</style>\n","app.component.css":"","app.component.ts":"/* tslint:disable: member-ordering forin */\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormsModule, AbstractControl } from '@angular/forms';\nimport { FormValidators } from '@syncfusion/ej2-angular-inputs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html'\n})\n\n\nexport class AppComponent {\n\n  reactForm: FormGroup;\n\n  constructor() {\n    this.reactForm = new FormGroup({\n      'check': new FormControl('', [FormValidators.required]),\n      'email_check': new FormControl('', [FormValidators.email]),\n      'date_check': new FormControl('', [FormValidators.date]),\n      'city': new FormControl('', [FormValidators.required]),\n      'state': new FormControl('', [FormValidators.required]),\n      'Address':new FormControl(''),\n    });\n  }\n\n  ngOnInit(): void {\n    let formId: HTMLElement = <HTMLElement>document.getElementById('formId');\n    document.getElementById('formId').addEventListener(\n      'submit',\n      (e: Event) => {\n        e.preventDefault();\n        if (this.reactForm.valid) {\n          alert('Customer details added!');\n          this.reactForm.reset();\n        } else {\n          // validating whole form\n          Object.keys(this.reactForm.controls).forEach(field => {\n            const control = this.reactForm.get(field);\n            control.markAsTouched({ onlySelf: true });\n          });\n        }\n      });\n  }\n\n  get check() { return this.reactForm.get('check'); }\n  get email_check() { return this.reactForm.get('email_check'); }\n  get date_check() { return this.reactForm.get('date_check'); }\n  get city() { return this.reactForm.get('city'); }\n  get state() { return this.reactForm.get('state'); }\n  get Address() { return this.reactForm.get('Address'); }\n\n}"}