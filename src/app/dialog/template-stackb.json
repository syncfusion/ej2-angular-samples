{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { CheckBoxModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { RadioButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [   AppComponent ], imports: [ RadioButtonModule, CheckBoxModule, BrowserModule, DialogModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section template\">\n\n    <!-- Render Button to open the Dialog -->\n    <button ejs-button id='dlgbtn' #ButtonInstance (click)=\"BtnClick()\">Open</button>\n\n    <ejs-dialog #template [height]='height' [animationSettings]='animationSettings' [showCloseIcon]='showCloseIcon' [target]='target' [width]='width' (open)=\"dialogOpen()\"\n        (close)=\"dialogClose()\">\n        <ng-template #footerTemplate>\n            <input id=\"inVal\" class=\"e-input\" type=\"text\" placeholder=\"Enter your message here!\"/>\n            <button id=\"sendButton\" class=\"e-control e-btn e-primary sendButton\" data-ripple=\"true\">Send</button>\n        </ng-template>\n        <ng-template #content>\n            <div class=\"dialogContent\">\n                <span class=\"dialogText\">Greetings Nancy! When will you share me the source files of the project?</span>\n            </div>\n        </ng-template>\n        <ng-template #header>\n            <div class=\"e-avatar template-image e-avatar-xsmall e-avatar-circle\"></div>\n            <div id=\"dlg-template\" title=\"Nancy\" class=\"e-icon-settings\"> Nancy </div>\n        </ng-template>\n    </ejs-dialog>\n</div>\n","app.component.css":".material button#sendButton, button#sendButton {\n    top: 4px;\n    position: relative;\n}\n.control-section.template {\n    padding-top: 20px;\n    padding-bottom: 20px;\n    min-height: 350px;\n}\n.bootstrap button#sendbtn {\n    margin-right: 1%;\n}\n.material .template .e-dialog .e-dlg-header-content, .template .e-dialog .e-dlg-header-content {\n    background-color: #3f51b5;\n}\n.fabric .template .e-dialog .e-dlg-header-content {\n    background-color: #0078d7;\n}\n.bootstrap .template .e-dialog .e-dlg-header-content {\n    background-color: #428bca;\n}\n.bootstrap4 .template .e-dialog .e-dlg-header-content {\n    background-color: #007bff;\n}\n.highcontrast .template .e-dialog .e-dlg-header-content {\n    background-color: #ffd939;\n}\n.material.e-bigger .template .e-dialog .e-footer-content {\n    padding-left: 23px;\n}\n\n.template .e-dlg-header-content .e-btn.e-dlg-closeicon-btn,  .e-bigger .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {\n    top: 5px;\n    left: -11px;\n}\n.e-bigger .template .target-element .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {\n    top: 3px;\n    left: -11px;\n}\n.bootstrap4 .template .e-dlg-header-content .e-btn.e-dlg-closeicon-btn,\n.bootstrap4.e-bigger .template .target-element .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {\n    top: 8px;\n}\n.template .e-dialog.e-rtl .e-dlg-header-content .e-btn.e-dlg-closeicon-btn,  .e-bigger .template .e-dialog.e-rtl .e-dlg-header-content .e-btn.e-dlg-closeicon-btn {\n    left: 11px;\n}\n.template .e-dialog .e-dlg-header {\n    position: relative;\n}\n.template .e-dialog.e-rtl .e-dlg-header {\n    left: -7px;\n}\n.template .e-dialog .e-footer-content, .highcontrast.e-bigger .template .e-dialog .e-footer-content {\n    padding: 15px;\n}\n.template .e-dialog .e-dlg-content {\n    padding: 0;\n}\n.fabric button#sendButton, .highcontrast button#sendButton {\n    position: relative;\n}\n\n.fabric button#sendbtn, .highcontrast button#sendbtn {\n    top: -2px;\n}\n\n .fabric .template input.e-input,  .highcontrast .template input.e-input {\n    float: left;\n    height: 35px;\n}\n\n.fabric.e-bigger .template input.e-input {\n    height: 40px;\n}\n\n.e-bigger.highcontrast button#sendbtn {\n    margin-right: -17px;\n    margin-top: -2%;\n}\n\n.template .e-dialog .e-dlg-header-content {\n    padding: 6px;\n}\n.e-bigger.e-dialog .e-dlg-header-content, .e-bigger .template .e-dialog .e-dlg-header-content {\n    padding: 8px;\n}\n.template .e-open-icon::before {\n    content: '\\e782';\n}\n.template .e-dialog .e-dlg-header >img.img2 {\n    height: 36px;\n    width: 36px;\n    border-radius: 50%;\n    vertical-align: middle;\n}\n#dlg-template {\n    display: inline-block;\n    padding: 0px 10px;\n    vertical-align: middle;\n    height: 40px;\n    line-height: 40px;\n}\n.template input.e-input {\n    width: 75%;\n    float: left;\n}\n.template .e-rtl input.e-input {\n    float: right;\n}\n\n.template .e-icon-settings.e-icons {\n    float: left;\n    position: relative;\n    left: 14%;\n    top: -33px;\n}\n\n.template .e-dialog.e-rtl .e-footer-content .e-btn {\n    margin-left: 0;\n}\n\n.template .e-dialog.e-rtl .e-icon-settings.e-icons {\n    left: 0;\n}\n\n.fabric .template .e-icon-settings.e-icons, .highcontrast .template .e-icon-settings.e-icons {\n    top: -37px;\n}\n\n.e-bigger.fabric .template .e-icon-settings.e-icons, .e-bigger.highcontrast .template .e-icon-settings.e-icons {\n    top: -35px;\n}\n.template .dialogContent .dialogText {\n    font-size: 13px;\n    padding: 5%;\n    word-wrap: break-word;\n    border-radius: 6px;\n    text-align: justify;\n    font-style: initial;\n    display: block;\n}\n.template .e-dlg-header .e-icon-settings, .e-icon-btn {\n    color: #fff;\n}\n\n.template .dialogContent .dialogText, .template .dialogContent .dialogText  {\n    background-color: #f5f5f5;\n}\n\n.material .template .e-dialog .e-footer-content, .template .e-dialog .e-footer-content, .fabric .template .e-dialog .e-footer-content {\n    border-top: 0.5px solid rgba(0, 0, 0, 0.42);\n}\n.highcontrast .template .e-dialog .e-footer-content, .fabric .template .e-dialog .e-footer-content {\n    padding: 20px 25px;\n}\n\n.highcontrast .template .e-dialog .e-footer-content {\n    border-top: 0.5px solid #fff;\n}\n.bootstrap4 .template .e-dialog .e-footer-content {\n    border-top: 1px solid #e9ecef;\n}\n.highcontrast .template .dialogContent .dialogText { \n    background-color: #bfbfbf;\n}\n.template .dialogContent {\n    display: block;\n    font-size: 15px;\n    word-wrap: break-word;\n    text-align: center;\n    font-style: italic;\n    border-radius: 6px;\n    padding: 3%;\n    position: relative;\n    top: 25px;\n}\n.e-bigger.e-dialog .e-dlg-content, .e-bigger .template .e-dialog .e-dlg-content {\n    padding: 0;\n}\n.e-bigger .template .e-dialog .dialogContent {\n    top: 20px;\n}\n.e-bigger.bootstrap .template .e-dialog .dialogContent {\n    top: 30px;\n}\n.control-wrapper .e-control.e-dialog {\n    width: 30%;\n}\n.template .e-dialog .e-dlg-header-content .e-icon-dlg-close {\n  color: #fff;\n}\n.fabric .template .e-dialog .e-btn.e-dlg-closeicon-btn:hover span {\n    color: #8ECBFF;\n}\n.material .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:hover, .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:hover,\n.material .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:focus, .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:focus {\n    background-color: rgba(255,255,255, 0.10);\n}\n.bootstrap4 .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:hover,\n.bootstrap4 .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:focus {\n    background-color : transparent;\n}\n.material .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:active .e-icon-dlg-close ,\n.material .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:focus .e-icon-dlg-close,\n.material .template .e-dialog .e-dlg-header-content .e-btn.e-dlg-closeicon-btn:hover .e-icon-dlg-close {\n    color: #fff;\n}\n.template .e-dialog .e-dlg-header-content .e-dlg-header .e-avatar.template-image {\n    background-image: url(~/assets/dialog/images/1.png);\n    vertical-align: middle;\n    display: inline-block;\n    width: 36px;\n    height: 36px;\n}\n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { DialogComponent } from '@syncfusion/ej2-angular-popups';\nimport { detach, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { EmitType } from '@syncfusion/ej2-base';\n\n/**\n * Template Dialog Component\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('template')\n    public Dialog: DialogComponent;\n    public proxy: any = this;\n    public BtnClick: EmitType<object> = () => {\n        this.Dialog.show();\n    }\n\n    public showCloseIcon: Boolean = true;\n\n    public height: string = '75%';\n    \n    public target: string = '.control-section';\n    \n    public animationSettings: Object = { effect: 'None' };\n    \n    public width: string = '435px';\n\n    public dialogClose: EmitType<object> = () => {\n        document.getElementById('dlgbtn').style.display = '';\n    }\n\n    public dialogOpen: EmitType<object> = () => {\n        document.getElementById('dlgbtn').style.display = 'none';\n        (document.getElementById('sendButton') as any).keypress = (e: any) => {\n            if (e.keyCode === 13) { this.updateTextValue(); }\n        };    \n        (document.getElementById('inVal')as HTMLElement).onkeydown = (e: any) => {\n            if (e.keyCode === 13) { this.updateTextValue(); }\n        };    \n        document.getElementById('sendButton').onclick = (): void => {\n            this.updateTextValue();\n        };\n    }\n\n    public updateTextValue: EmitType<object> = () => {\n        let enteredVal: HTMLInputElement = document.getElementById('inVal') as HTMLInputElement;\n        let dialogTextElement: HTMLElement = document.getElementsByClassName('dialogText')[0] as HTMLElement;\n        let dialogTextWrap : HTMLElement = document.getElementsByClassName('dialogContent')[0] as HTMLElement;\n        if (!isNullOrUndefined(document.getElementsByClassName('contentText')[0])) {\n            detach(document.getElementsByClassName('contentText')[0]);\n        }\n        if (enteredVal.value !== '') {\n            dialogTextElement.innerHTML = enteredVal.value;\n        }\n        enteredVal.value = '';\n    }\n    constructor() { }\n}"}