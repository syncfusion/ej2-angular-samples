{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ChartComponent, ChartTheme, ILoadedEventArgs, IAxisLabelRenderEventArgs, IAnnotationRenderEventArgs,ChartAllModule } from '@syncfusion/ej2-angular-charts';\nimport { Browser } from '@syncfusion/ej2-base';\n\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [ ChartAllModule, ]\n})\nexport class AppComponent {\n  @ViewChild('chart', { static: true }) \n  public chart: ChartComponent;\n\n  public primaryXAxis: Object = {\n    interval: 1,\n    zoomFactor: 0.175, \n    zoomPosition: 0,\n    majorGridLines: { width: 0 },\n    enableAutoIntervalOnZooming: false,\n    labelPlacement: 'OnTicks',\n    labelRotation: Browser.isDevice ? -90 : 0,\n    valueType: 'Category',\n    edgeLabelPlacement: 'Shift',\n    isIndexed: true\n  };\n\n  public primaryYAxis: Object = {\n    majorGridLines: { width: 0 },\n    visible: false,\n    maximum: 32\n  };\n  //Initializing Legend\n  public legendSettings: Object = {\n    visible: false\n  };\n  public chartArea: Object = { border: { width: 0 } };\n  public width: string = Browser.isDevice ? '100%' : '75%';\n  public border: Object = {\n    width: 2\n  };\n\n  public chartData: any[] = [\n    { x: 1, xValue: '1 am', y: 20 }, { x: 2, xValue: '4 am', y: 20 }, { x: 3, xValue: '7 am', y: 20 },\n    { x: 4, xValue: '10 am', y: 21 }, { x: 5, xValue: '1 pm', y: 21 }, { x: 6, xValue: '4 pm', y: 24 },\n    { x: 7, xValue: '1 am', y: 19 }, { x: 8, xValue: '4 am', y: 20 }, { x: 9, xValue: '7 am', y: 20 },\n    { x: 10, xValue: '10 am', y: 21 }, { x: 11, xValue: '1 pm', y: 24 }, { x: 12, xValue: '4 pm', y: 24 },\n    { x: 13, xValue: '1 am', y: 21 }, { x: 14, xValue: '4 am', y: 21 }, { x: 15, xValue: '7 am', y: 21 },\n    { x: 16, xValue: '10 am', y: 22 }, { x: 17, xValue: '1 pm', y: 23 }, { x: 18, xValue: '4 pm', y: 24 },\n    { x: 19, xValue: '1 am', y: 20 }, { x: 20, xValue: '4 am', y: 19 }, { x: 21, xValue: '7 am', y: 19 },\n    { x: 22, xValue: '10 am', y: 18 }, { x: 23, xValue: '1 pm', y: 19 }, { x: 24, xValue: '4 pm', y: 19 },\n    { x: 25, xValue: '1 am', y: 16 }, { x: 26, xValue: '4 am', y: 15 }, { x: 27, xValue: '7 am', y: 14 },\n    { x: 28, xValue: '10 am', y: 15 }, { x: 29, xValue: '1 pm', y: 16 }, { x: 30, xValue: '4 pm', y: 18 }\n  ];\n\n\n  public image: string = 'sunny_image';\n  public count: number = 25;\n  public day: string = 'Friday';\n  public marker: Object = { visible: false, dataLabel: { visible: true, format:'{value}°C', position:'Top' } };\n\n  constructor() {\n  }\n\n  public load(args: ILoadedEventArgs): void {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n    args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n      selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n      const isDarkTheme = /dark/i.test(selectedTheme) || /contrast/i.test(selectedTheme);\n      const buttons = document.querySelectorAll('.custom-button');\n      const buttonContainer = document.getElementById('button-container');\n      buttons.forEach(button => {\n          if (isDarkTheme) {\n              button.classList.add('dark-theme-bg');\n              button.classList.remove('light-theme-bg');\n              buttonContainer.style.backgroundColor = '#333';\n          } else {\n              button.classList.add('light-theme-bg');\n              button.classList.remove('dark-theme-bg');\n              buttonContainer.style.backgroundColor = 'rgb(237, 236, 236)';\n          }\n      });\n    if (Browser.isDevice) {\n      buttonContainer.style.width = '97%';\n    } else {\n      buttonContainer.style.width = '75%';\n    }\n  }\n\n  public annotations: Object[] = [\n    {\n        content: '<div id=\"chart_image\"><img src=\"./assets/chart/images/cloudy.png\" alt=\"Cloud Picture\" style=\"width: 41px; height: 41px\"/></div>',\n        coordinateUnits: 'Pixel',\n        region: 'Chart',\n        x: Browser.isDevice ? '6%' : '3%',\n        y: '9%'\n    },\n    {\n        content: '<div id=\"days\" style=\"font-size: 11px;\">Friday, 01:00 am</div>',\n        coordinateUnits: 'Pixel',\n        region: 'Chart',\n        x: Browser.isDevice ? '87%' : '94%',\n        y: Browser.isDevice ? '10%' : '11%'\n    },\n    {\n        content: '<div id=\"title\" style=\"font-size: 20px; font-weight: 600\">USA, Texas</div>',\n        coordinateUnits: 'Pixel',\n        region: 'Chart',\n        x: Browser.isDevice ? '88%' : '93%',\n        y: Browser.isDevice ? '4%' : '3%'\n    }\n]\npublic zoomSettings:Object = {\n    enableSelectionZooming: true,\n    toolbarItems: [],\n    mode: 'X'\n} \n\n  public annotationRender(args: IAnnotationRenderEventArgs): void {\n    if (args.content.id === 'container_Annotation_0') {\n      args.content.innerHTML = `<div id=\"chart_cloud\" align=\"center\"><img src=\"./assets/chart/images/${this.image}.png\" alt=\"Cloud Picture\" style=\"width: 41px; height: 41px; margin-right: 10px;\"/><b align=\"center\" style=\"font-size: 23px\">${this.count} <span style=\"font-size: 12px; vertical-align: super;\">°C | °F</span></b></div>`;\n    } else if (args.content.id === 'container_Annotation_1') {\n      args.content.innerHTML = Browser.isDevice ? `<div  id=\"days\" style=\"font-size: 9px;\">${this.day}, 01:00 am</div>` : `<div  id=\"days\" style=\"font-size: 11px;\">${this.day}, 01:00 am</div>`;\n      if (this.day === 'Saturday' || this.day === 'Tuesday') {\n        Browser.isDevice ? args.location.x -= 8 : args.location.x -= 12;\n      } else if (this.day === 'Sunday') {\n        Browser.isDevice ? args.location.x -= 5 : args.location.x -= 8;\n      } else if (this.day === 'Monday') {\n        args.location.x -= 10\n      }\n    } else {\n      args.content.innerHTML = Browser.isDevice ? `<div id=\"title\" style=\"font-size: 16px; font-weight: 600\">USA, Texas</div>` : `<div id=\"title\" style=\"font-size: 20px; font-weight: 600\">USA, Texas</div>`;\n    }\n  }\n\n  public updateChart(buttonId: string, img: string, tempCount: number, chartDay: string, zoomPos: number, zoomFactor: number): void {\n    this.image = img;\n    this.count = tempCount;\n    this.day = chartDay;\n    this.chart.primaryXAxis.zoomPosition = zoomPos;\n    this.chart.primaryXAxis.zoomFactor = zoomFactor;\n    this.chart.duration = 600;\n    const buttons = document.querySelectorAll('.custom-button');\n    buttons.forEach(button => button.classList.remove('active'));\n    const selectedButton = document.getElementById(buttonId) as HTMLElement;\n    selectedButton.classList.add('active');\n  }\n\n  public onClick(id: string, img: string, tempCount: number,day:string, zoomPos: number, zoomFactor: number): void {\n    this.updateChart(id, img, tempCount, day, zoomPos, zoomFactor);\n  }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<div class=\"control-section\" align='center'>\n    <div align='center'>\n        <ejs-chart id='container' #chart align='center' [chartArea]='chartArea' [width]='width' style='display:block;'\n            [primaryXAxis]='primaryXAxis' [primaryYAxis]='primaryYAxis' (load)='load($event)' [legendSettings]=\"legendSettings\"\n            (annotationRender)='annotationRender($event)' [annotations]='annotations' [zoomSettings]=\"zoomSettings\" height=\"70%\">\n            <e-series-collection>\n                <e-series [dataSource]='chartData' type='SplineArea' xName='xValue' yName='y'  opacity=0.5 width=2\n                    [marker]='marker' [border]='border'> </e-series>\n            </e-series-collection>\n        </ejs-chart>\n    </div>\n    <div id=\"button-container\" align='center'>\n        <button id=\"friday\" class=\"custom-button active\" (click)=\"onClick('friday', 'sunny_image', 25, 'Friday', 0, 0.175)\">\n            <div class=\"day\">Fri</div>\n            <img src=\"https://ej2.syncfusion.com/angular/demos/assets/chart/images/sunny_image.png\" alt=\"Friday\">\n            <div class=\"temp\">24°C - 19°C</div>\n        </button>\n        <button id=\"saturday\" class=\"custom-button\" (click)=\"onClick('saturday', 'sunny_image', 25, 'Saturday', 0.206, 0.175)\">\n            <div class=\"day\">Sat</div>\n            <img src=\"https://ej2.syncfusion.com/angular/demos/assets/chart/images/sunny_image.png\" alt=\"Saturday\">\n            <div class=\"temp\">20°C - 25°C</div>\n        </button>\n        <button id=\"sunday\" class=\"custom-button\" (click)=\"onClick('sunday', 'cloudy', 24, 'Sunday', 0.413, 0.175)\">\n            <div class=\"day\">Sun</div>\n            <img src=\"https://ej2.syncfusion.com/angular/demos/assets/chart/images/cloudy.png\" alt=\"Sunday\">\n            <div class=\"temp\">18°C - 24°C</div>\n        </button>\n        <button id=\"monday\" class=\"custom-button\" (click)=\"onClick('monday', 'cloudy', 19, 'Monday', 0.620, 0.175)\">\n            <div class=\"day\">Mon</div>\n            <img src=\"https://ej2.syncfusion.com/angular/demos/assets/chart/images/cloudy.png\" alt=\"Monday\">\n            <div class=\"temp\">14°C - 19°C</div>\n        </button>\n        <button id=\"tuesday\" class=\"custom-button\" (click)=\"onClick('tuesday', 'rainy', 18, 'Tuesday', 0.827, 0.175)\">\n            <div class=\"day\">Tue</div>\n            <img src=\"https://ej2.syncfusion.com/angular/demos/assets/chart/images/rainy.png\" alt=\"Tuesday\">\n            <div class=\"temp\">14°C - 18°C</div>\n        </button>\n    </div>\n</div>\n\n\n\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n\n    #button-container {\n        padding: 5px;\n        /* Remove padding around the container */\n        width: 75%;\n        background-color: rgb(237, 236, 236);\n        /* Same color as the button background */\n        display: flex;\n        justify-content: space-between;\n        /* Ensure buttons take up the full width */\n        align-items: center;\n        /* Align items in the center vertically */\n        border-radius: 10px;\n        /* Optional: for rounded corners */\n    }\n\n    .custom-button {\n        flex-grow: 1;\n        /* Make buttons grow to fill the container */\n        flex-basis: 0;\n        /* Ensure all buttons have the same width */\n        height: 35%;\n        /* Set a fixed height for the buttons */\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        border: none;\n        /* Remove the border for seamless alignment */\n        border-radius: 5px;\n        /* Remove the border-radius for no gaps */\n        justify-content: center;\n        /* Center content within the button */\n        background-color: rgb(237, 236, 236);\n        /* Button background */\n        cursor: pointer;\n        transition: background-color 0.3s, box-shadow 0.3s;\n        /* Smooth transition for background color and shadow */\n        position: relative;\n        /* To position the line correctly */\n    }\n\n    .custom-button:not(:last-child):not(.active)::after {\n        content: \"\";\n        position: absolute;\n        top: 50%;\n        right: 0;\n        transform: translateY(-50%);\n        width: 1px;\n        /* Width of the line */\n        height: 80%;\n        /* Height of the line, adjust as needed */\n        background-color: rgba(0, 0, 0, 0.2);\n        /* Light shadow color */\n    }\n\n    .custom-button.no-line::after {\n        display: none;\n    }\n\n    .custom-button img {\n        width: 30px;\n        height: 30px;\n    }\n\n    .day,\n    .temp {\n        font-size: 13px;\n    }\n    .light-theme-bg {\n        background-color: rgb(237, 236, 236) !important;\n    }\n\n    .light-theme-bg.active {\n        background-color: white !important;\n    }\n\n    .light-theme-bg:hover {\n        background-color: #dbdada !important;\n    }\n\n    .dark-theme-bg {\n        background-color: #333 !important;\n    }\n\n    .dark-theme-bg.active {\n        background-color: #7b7b7b !important;\n        box-shadow: 0 0 0 2px #7b7b7b !important;\n    }\n\n    .dark-theme-bg:hover {\n        background-color: #7b7b7b !important;\n    }\n\n\n    .custom-button.active {\n        box-shadow: 0 0 0 2px rgb(237, 236, 236);\n        z-index: 2;\n    }\n</style>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}