{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation } from '@angular/core';\nimport { ILoadedEventArgs, ChartTheme,} from '@syncfusion/ej2-angular-charts';\nimport { Browser } from '@syncfusion/ej2-base';\n\n/**\n * Sample for Line Series with dashed line\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    public data: Object[] = [\n        { Period : \"Jan\", Banana_ProductionRate : 100 },\n        { Period : \"Feb\", Banana_ProductionRate : 110 },\n        { Period : \"Mar\", Banana_ProductionRate : 125 },\n        { Period : \"Apr\", Banana_ProductionRate : 150 },\n        { Period : \"May\", Banana_ProductionRate : 140 },\n        { Period : \"Jun\", Banana_ProductionRate : 160 }\n    ];\n    public data1: Object[] = [\n        { Period : \"Jun\", Banana_ProductionRate : 160 },\n        { Period : \"Jul\", Banana_ProductionRate : 170 },\n        { Period : \"Aug\", Banana_ProductionRate : 180 },\n        { Period : \"Sep\", Banana_ProductionRate : 190 },\n        { Period : \"Oct\", Banana_ProductionRate : 200 },\n        { Period : \"Nov\", Banana_ProductionRate : 230 },\n        { Period : \"Dec\", Banana_ProductionRate : 270 }\n    ];\n    //Initializing Primary X Axis\n    public primaryXAxis: Object = {\n        valueType: 'Category',\n        edgeLabelPlacement: 'Shift',\n        majorGridLines: { width: 0 },\n        interval: 1,\n        labelIntersectAction: Browser.isDevice ? 'None' : 'Trim',\n        labelRotation: Browser.isDevice ? -45 : 0,\n        majorTickLines: { width: 0 },\n        minorTickLines: { width: 0 }\n    };\n    //Initializing Primary Y Axis\n    public primaryYAxis: Object = {\n        labelFormat: '{value}K',\n        rangePadding: 'None',\n        lineStyle: { width: 0 },\n        minimum: 0,\n        maximum: 300,\n        interval: 50,\n        majorTickLines: { width: 0 },\n        minorTickLines: { width: 0 }\n    };\n    //Initializing Marker\n    public marker: Object = {\n        visible: false,\n        width: 7,\n        height: 7\n    };\n    public crosshair: Object = {\n        enable: false,\n        line: {\n            color: 'rgba(204,214,235,0.25)',\n            width: Browser.isDevice ? 50 : 20,\n        },\n        lineType: 'Vertical'\n    };\n    public chartArea: Object = {\n        border: {\n            width: 0\n        }\n    };\n    public width: string = Browser.isDevice ? '100%' : '75%';\n    public tooltip: Object = {\n        header: '<b>Fruits Production</b>',\n        enable: true,\n        shared: true,\n        format: '${point.x} : <b>${point.y}'\n    };\n      // custom code start\n    public AnnotationColor: string = \"light\";\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\");\n        args.chart.annotations[0].content = '<div style=\"color:black; font-family: bold \">Actual</div>';\n        args.chart.annotations[1].content = '<div style=\"color:black; font-family: bold \">Forecast</div>';\n        if (selectedTheme==='material-dark')\n        {\n            this.AnnotationColor = 'dark';\n        }\n        else if(selectedTheme==='material')\n        {\n            this.AnnotationColor = \"light\";  \n        }\n        else if (selectedTheme==='fabric-dark')\n        {\n            this.AnnotationColor = 'dark';\n        }\n        else if(selectedTheme==='fabric')\n        {\n            this.AnnotationColor = \"light\";  \n        }\n        else if (selectedTheme==='bootstrap5-dark')\n        {\n            this.AnnotationColor = 'dark';\n        }\n        else if (selectedTheme==='bootstrap5')\n        {\n            this.AnnotationColor = \"light\";  \n        }\n        else if (selectedTheme==='fluent-dark')\n        {\n            this.AnnotationColor = \"dark\";    \n        }\n        else if (selectedTheme==='fluent')\n        {\n            this.AnnotationColor = \"light\";  \n        }\n        else if (selectedTheme==='bootstrap4')\n        {\n            this.AnnotationColor = \"light\";          \n        }\n        else if (selectedTheme==='bootstrap-dark')\n        {\n            this.AnnotationColor = \"dark\";         \n        }\n        else if (selectedTheme==='bootstrap')\n        {\n            this.AnnotationColor = \"light\";          \n        }\n        else if (selectedTheme==='tailwind-dark')\n        {\n            this.AnnotationColor = \"dark\";    \n        }\n        else if (selectedTheme==='tailwind')\n        {                    \n            this.AnnotationColor = \"light\";  \n        }\n        else if (selectedTheme==='highcontrast')\n        {\n            this.AnnotationColor = \"dark\";            \n        }\n        else\n        {\n            this.AnnotationColor = \"light\";  \n        }\n        \n        if(this.AnnotationColor==\"light\")\n        {\n            args.chart.annotations[0].content = '<div style=\"color:black; font-weight: bold \">Actual</div>';\n            args.chart.annotations[1].content = '<div style=\"color:black; font-weight: bold \">Forecast</div>';\n        }\n        else\n        {\n            args.chart.annotations[0].content = '<div style=\"color:whitesmoke; font-weight: bold \">Actual</div>';\n            args.chart.annotations[1].content = '<div style=\"color:whitesmoke; font-weight: bold \">Forecast</div>';\n        }\n    };\n      // custom code end\n    public title: string = 'Fruits Production Statistics';\n    constructor() {\n        //code\n    };\n\n}","app/app.module.ts":"import { DashboardLayoutModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { ChartAllModule, AccumulationChartAllModule, RangeNavigatorAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DatePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ ChartAllModule, RangeNavigatorAllModule, BrowserModule, ButtonModule, AccumulationChartAllModule, NumericTextBoxModule, DatePickerModule, DropDownListAllModule, DashboardLayoutModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <ejs-chart style='display:block' align='center' id='dashed-chartcontainer' [chartArea]='chartArea' [title]='title' [primaryXAxis]='primaryXAxis' [primaryYAxis]='primaryYAxis' [tooltip]='tooltip' (load)='load($event)' [crosshair]='crosshair' [width]='width'>\n        <e-annotations>\n            <e-annotation content='<div >Actual</div>' coordinateUnits='Point' x='Feb' y='125' >\n            </e-annotation>\n            <e-annotation content='<div >Forecast</div>' coordinateUnits='Point' x='Aug' y='210'>\n            </e-annotation>\n          </e-annotations>\n        <e-series-collection>\n            <e-series [dataSource]='data' type='Line' xName='Period' yName='Banana_ProductionRate' width=2 [marker]='marker' opacity=1> </e-series>\n            <e-series [dataSource]='data1' type='Line' xName='Period' yName='Banana_ProductionRate' dashArray='10' width=2 [marker]='marker' opacity=1> </e-series>\n        </e-series-collection>\n    </ejs-chart>\n</div>\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n    \n    #dashed-chartcontainer_Series_1 {\n        stroke-dasharray: 10px 10px;\n        stroke-linejoin: round;\n        stroke-linecap: round;\n        -webkit-animation: dash 1s linear infinite;\n        animation: dash 1s linear infinite;\n    }\n    \n    #dashed-chartcontainer_Series_0_Point_3_Symbol {\n        -webkit-animation: opac 1s ease-out infinite;\n        animation: opac 1s ease-out infinite;\n    }\n    \n    @-webkit-keyframes dash {\n        100% {\n            stroke-dashoffset: -20px;\n        }\n    }\n    \n    @keyframes dash {\n        100% {\n            stroke-dashoffset: -20px;\n        }\n    }\n    \n    @keyframes opac {\n        0% {\n            stroke-opacity: 1;\n            stroke-width: 0px;\n        }\n        100% {\n            stroke-opacity: 0;\n            stroke-width: 10px;\n        }\n    }\n    #e-annotaion{\n        color: black ;\n        background-color: azure;\n    } \n</style>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}