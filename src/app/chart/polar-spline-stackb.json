{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","chart-data.service.ts":"/**\n * chart data source\n */\nexport class ChartDataService {\n    GetCrosshairData(): any {\n        let series1: Object[] = [];\n        let series2: Object[] = [];\n        let point1: Object;\n        let point2: Object;\n        let value: number = 60;\n        let value1: number = 50;\n        let i: number;\n        for (i = 1; i < 250; i++) {\n\n            if (Math.random() > .5) {\n                value += Math.random();\n                value1 += Math.random();\n            } else {\n                value -= Math.random();\n                value1 -= Math.random();\n            }\n            point1 = { x: new Date(2000, i, 1), y: value };\n            point2 = { x: new Date(2000, i, 1), y: value1 };\n            series1.push(point1);\n            series2.push(point2);\n        }\n        return { 'series1': series1, 'series2': series2 };\n    }\n    GetScatterData(): any {\n        let series1: Object[] = [];\n        let series2: Object[] = [];\n        let point1: Object;\n        let value: number = 80;\n        let value1: number = 70;\n        let i: number;\n        for (i = 1; i < 120; i++) {\n            if (Math.random() > 0.5) {\n                value += Math.random();\n            } else {\n                value -= Math.random();\n            }\n            value = value < 60 ? 60 : value > 90 ? 90 : value;\n            point1 = { x: (145 + (i / 3)).toFixed(1), y: value.toFixed(1) };\n            series1.push(point1);\n        }\n        for (i = 1; i < 120; i++) {\n            if (Math.random() > 0.5) {\n                value1 += Math.random();\n            } else {\n                value1 -= Math.random();\n            }\n            value1 = value1 < 60 ? 60 : value1 > 90 ? 90 : value1;\n            point1 = { x: (145 + (i / 3)).toFixed(1), y: value1.toFixed(1) };\n            series2.push(point1);\n        }\n        return { 'series1': series1, 'series2': series2 };\n    }\n    GetLocalData(): any {\n        let series1: Object[] = [];\n        let series2: Object[] = [];\n        let point1: Object;\n        let point2: Object;\n        let value: number = 80;\n        let value1: number = 90;\n        let i: number;\n        for (i = 1; i < 500; i++) {\n\n            if (Math.random() > .5) {\n                value += Math.random();\n                value1 += Math.random();\n            } else {\n                value -= Math.random();\n                value1 -= Math.random();\n            }\n            point1 = { x: new Date(1960, (i + 1), i), y: Math.round(value) };\n            point2 = { x: new Date(1960, (i + 1), i), y: Math.round(value1) };\n            series1.push(point1);\n            series2.push(point2);\n        }\n        return { 'series1': series1, 'series2': series2 };\n    }\n    GetZoomingData(): any {\n        let series1: Object[] = [];\n        let point1: Object;\n        let value: number = 80;\n        let i: number;\n        for (i = 1; i < 500; i++) {\n            if (Math.random() > .5) {\n                value += Math.random();\n            } else {\n                value -= Math.random();\n            }\n            point1 = { x: new Date(1960, i + 1, i), y: Math.round(value) };\n            series1.push(point1);\n        }\n        return { 'series1': series1 };\n    }\n    GetPolarSplineData(): any {\n        let cardData: Object[] = [];\n        let biDirData: Object[] = [];\n        let omniDirData: Object[] = [];\n        let point1: Object;\n        let point2: Object;\n    \n        for (let x: number = -180; x < 180; x++) {\n          point1 = { x: x, y: -12.6 * (1 - Math.cos(x * 3.14 / 180)) };\n          cardData.push(point1);\n          point2 = { x: x, y: -3};\n          omniDirData.push(point2);\n        }\n    \n        for (let x: number = -180; x < -90; x++) {\n          point1 = { x: x, y: -26 * (1 + Math.cos(x * 3.14 / 180))};\n          biDirData.push(point1);\n        }\n    \n        for (let x: number = -90; x < 90; x++) {\n          point1 = { x: x, y: -26 * (1 - Math.cos(x * 3.14 / 180))};\n          biDirData.push(point1);\n        }\n    \n        for (let x: number = 90; x < 180; x++) {\n          point1 = { x: x, y: -26 * (1 + Math.cos(x * 3.14 / 180))};\n          biDirData.push(point1);\n        }\n        return { 'series1': cardData, 'series2': omniDirData, 'series3': biDirData };\n    }\n}","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { ILoadedEventArgs, ChartComponent, ChartTheme } from '@syncfusion/ej2-angular-charts';\nimport { ChartDataService } from './chart-data.service';\nimport { ChartSeriesType } from '@syncfusion/ej2-charts';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nimport { Browser } from '@syncfusion/ej2-base';\n\n/**\n * Sample for Polar series with drawType Spline\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n\n    public series1: Object = ChartDataService.prototype.GetPolarSplineData().series1;\n    public series2: Object = ChartDataService.prototype.GetPolarSplineData().series2;\n    public series3: Object = ChartDataService.prototype.GetPolarSplineData().series3;\n    //Initializing Primary X Axis\n    public primaryXAxis: Object = {\n        minimum: -180,\n        maximum: 180,\n        interval: 30,\n        labelFormat: '{value}°',\n        coefficient: Browser.isDevice ? 80 : 100\n    };\n    public legend: Object = {\n        enableHighlight : true\n    };\n    public title: string = 'Microphone Types Polar Patterns';\n    public tooltip: Object = {\n        enable: true\n    };\n    public closed: boolean = false;\n      // custom code start\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\");\n\n    };\n      // custom code end\n    @ViewChild('chart')\n    public chart: ChartComponent;\n    public seriesType: DropDownList;\n    ngOnInit(): void {\n        this.seriesType = new DropDownList({\n            index: 0,\n            width: 80,\n            change: () => {\n                let type: string = this.seriesType.value.toString();\n                this.chart.series[0].type = <ChartSeriesType>type;\n                this.chart.series[1].type = <ChartSeriesType>type;\n                this.chart.series[2].type = <ChartSeriesType>type;\n                this.chart.refresh();\n            }\n        });\n        this.seriesType.appendTo('#selmode');\n    }\n    constructor() {\n        //code\n    };\n\n}","app/app.module.ts":"import { DashboardLayoutModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { ChartAllModule, AccumulationChartAllModule, RangeNavigatorAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { DropDownListAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DatePickerModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ ChartAllModule, RangeNavigatorAllModule, BrowserModule, ButtonModule, AccumulationChartAllModule, NumericTextBoxModule, DatePickerModule, DropDownListAllModule, DashboardLayoutModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-lg-9\">\n        <ejs-chart #chart style='display:block;' id='chartcontainer' [primaryXAxis]='primaryXAxis' [title]='title'\n            [tooltip]='tooltip' (load)='load($event)' [legendSettings]='legend'>\n            <e-series-collection>\n                <e-series [dataSource]='series1' type='Polar' drawType='Spline' xName='x' yName='y' name='Cardioid (unidirectional)' width=2\n                    dashArray='5 5 2' [isClosed] = 'closed'>\n                </e-series>\n                <e-series [dataSource]='series2' type='Polar' drawType='Spline' xName='x' yName='y' name='Omnidirectional' width=2\n                    dashArray='2' [isClosed] = 'closed'>\n                </e-series>\n                <e-series [dataSource]='series3' type='Polar' drawType='Spline' xName='x' yName='y' name='Bidirectional' width=2\n                    [isClosed] = 'closed'>\n                </e-series>\n            </e-series-collection>\n        </ejs-chart>\n    </div>\n    <div class=\"col-lg-3 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%\">\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 50%\">\n                            <div>Series Type:</div>\n                        </td>\n                        <td style=\"width: 50%;\">\n                            <div>\n                                <select name=\"selectIndex\" autocomplete=\"off\" id=\"selmode\" style=\"width:90%\">\n                                                     <option value=\"Polar\">Polar</option>\n                                                     <option value=\"Radar\">Radar</option>\n                                                 </select>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-compression\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-file-utils\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}