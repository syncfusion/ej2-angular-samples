{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { IPointRenderEventArgs, ChartComponent, ChartAllModule } from '@syncfusion/ej2-angular-charts';\nimport { ChartTheme, ScrollBar, Zoom, IScrollEventArgs, LineSeries, Tooltip } from '@syncfusion/ej2-charts';\nimport { Chart, DateTime, ILoadedEventArgs } from '@syncfusion/ej2-charts';\nimport { Internationalization, DateFormatOptions } from '@syncfusion/ej2-base';\nimport { DropDownList, ChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { DatePicker, ChangedEventArgs } from '@syncfusion/ej2-calendars';\nimport { NumericTextBox, ChangeEventArgs as NumericChange } from '@syncfusion/ej2-inputs';\nimport { DropDownListComponent, DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { DatePickerComponent, DatePickerModule } from '@syncfusion/ej2-angular-calendars';\nimport { NumericTextBoxComponent, NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\n\n\n/**\n * Sample for Lazy Loading\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ChartAllModule, DropDownListModule, DatePickerModule, NumericTextBoxModule,  ]\n})\n// tslint:disable:max-func-body-length\nexport class AppComponent {\n    public intl: Internationalization = new Internationalization();\n    @ViewChild('point')\n    private pointslength: NumericTextBoxComponent;\n    public min: number = 1000;\n    public max: number = 10000;\n    public value: number = 1000;\n    public step: number = 100;\n    public enabled: boolean = false;\n    public format: string = 'n';\n    public dropValue: string = 'Range';\n    public minValue: Date = new Date(2009, 0, 1);\n    public maxValue: Date = new Date(2014, 0, 1);\n    public dropDownData: Object = [\n        { value: 'Range' },\n        { value: 'Points Length' }\n\n    ];\n    public fields: Object = { text: 'value', value: 'value' };\n    public data: Object[] = this.GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1));\n    @ViewChild('chart')\n    public chart: ChartComponent;\n    // Initializing Primary X Axis\n    public primaryXAxis: Object = {\n        valueType: 'DateTime',\n        edgeLabelPlacement: 'Shift',\n        skeleton: 'yMMM',\n        skeletonType: 'Date',\n        scrollbarSettings: {\n            range: {\n                minimum: new Date(2009, 0, 1),\n                maximum: new Date(2014, 0, 1)\n            },\n            enable: true,\n            pointsLength: 1000,\n            enableZoom: false,\n            height: 14\n        }\n    };\n    public height: string = '450';\n    public width: string = '100%';\n    //Initializing Primary Y Axis\n    public primaryYAxis: Object = {\n        title: 'Server Load',\n        labelFormat: '{value}MB'\n    };\n    public tooltip: Object = {\n        enable: true, shared: true,\n        header : \"<b>${point.x}</b>\", format : \"Server load : <b>${point.y}</b>\"\n    };\n    public legend: Object = {\n        visible: false\n    };\n    public title: string = 'Network Load';\n    public animation: Object = { enable: false };\n    public chartArea: Object = {\n        border: {\n            width: 0\n        }\n    };\n    public scrollEnd(args: IScrollEventArgs): void {\n        if (this.lazymode.value === 'Range') {\n            this.chart.series[0].dataSource = this.GetDateTimeData(args.currentRange.minimum as Date, args.currentRange.maximum as Date);\n        } else {\n            this.chart.series[0].dataSource = this.GetNumericData(args.currentRange.minimum as number, args.currentRange.maximum as number);\n        }\n        this.chart.dataBind();\n    };\n    // custom code start\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i,Â 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    };\n    // custom code end\n    public GetDateTimeData(start: Date, end: Date): { x: Date, y: number }[] {\n        let series1: { x: Date, y: number }[] = [];\n        let date: number;\n        let value: number = 30;\n        let option: DateFormatOptions = {\n            skeleton: 'full',\n            type: 'dateTime'\n        };\n        let dateParser: Function = this.intl.getDateParser(option);\n        let dateFormatter: Function = this.intl.getDateFormat(option);\n        for (let i: number = 0; start <= end; i++) {\n            date = Date.parse(dateParser(dateFormatter(start)));\n            if (Math.random() > .5) {\n                value += (Math.random() * 10 - 5);\n            } else {\n                value -= (Math.random() * 10 - 5);\n            }\n            if (value < 0) {\n                value = this.getRandomInt(20, 40);\n            }\n            let point1: { x: Date, y: number } = { x: new Date(date), y: Math.round(value) };\n            new Date(start.setDate(start.getDate() + 1));\n            series1.push(point1);\n        }\n        return series1;\n    }\n    public GetNumericData(start: number, end: number): { x: number, y: number }[] {\n        let series1: { x: number, y: number }[] = [];\n        let value: number = 30;\n        for (let i: number = start; i <= end; i++) {\n            if (Math.random() > .5) {\n                value += (Math.random() * 10 - 5);\n            } else {\n                value -= (Math.random() * 10 - 5);\n            }\n            if (value < 0) {\n                value = this.getRandomInt(20, 40);\n            }\n            let point: { x: number, y: number } = { x: i, y: Math.round(value) };\n            series1.push(point);\n        }\n        return series1;\n    }\n    public getRandomInt(min: number, max: number): number {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    public minChange(args: ChangedEventArgs): void {\n        this.chart.primaryXAxis.scrollbarSettings.range.minimum = args.value;\n        this.chart.refresh();\n    };\n    public maxChange(args: ChangedEventArgs): void {\n\n        this.chart.primaryXAxis.scrollbarSettings.range.maximum = args.value;\n        this.chart.refresh();\n\n    }\n    public pointChange(arg: NumericChange): void {\n        this.chart.primaryXAxis.scrollbarSettings.pointsLength = arg.value;\n        this.chart.refresh();\n    }\n    public modeChange(arg: ChangeEventArgs): void {\n        let min: number | Date;\n        let max: number | Date;\n        if (arg.value === 'Range') {\n            this.chart.primaryXAxis.valueType = 'DateTime';\n            min = this.chart.primaryXAxis.scrollbarSettings.range.minimum = new Date(2009, 0, 1);\n            max = this.chart.primaryXAxis.scrollbarSettings.range.maximum = new Date(2014, 0, 1);\n            this.chart.series[0].dataSource = this.GetDateTimeData(new Date(2009, 0, 1), new Date(2009, 8, 1));\n            this.chart.refresh();\n            this.minDate.enabled = true;\n            this.maxDate.enabled = true;\n            this.pointslength.enabled = false;\n        } else {\n            this.chart.primaryXAxis.valueType = 'Double';\n            this.chart.primaryXAxis.scrollbarSettings.range.minimum = null;\n            this.chart.primaryXAxis.scrollbarSettings.range.maximum = null;\n            this.chart.primaryXAxis.scrollbarSettings.pointsLength = 1000;\n            this.chart.series[0].dataSource = this.GetNumericData(1, 200);\n            this.chart.refresh();\n            this.minDate.enabled = false;\n            this.maxDate.enabled = false;\n            this.pointslength.enabled = true;\n        }\n    };\n\n    @ViewChild('mode')\n    public lazymode: DropDownListComponent;\n    @ViewChild('min')\n    public minDate: DatePickerComponent;\n    public minimumDate: Date = new Date(2009, 0, 1);\n    @ViewChild('max')\n    public maxDate: DatePickerComponent;\n    public maximumDate: Date = new Date(2014, 0, 1);\n    constructor() {\n        //code\n    };\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div class=\"content-wrapper\">\n        <div id=\"container\" style=\"width:92%\"></div>\n    </div>\n    <div class=\"col-md-8\">\n        <ejs-chart style='display:block;' #chart [legendSettings]='legend' id='chart-container' [primaryXAxis]='primaryXAxis'\n            [tooltip]='tooltip' [height]='height' [width]='width' (scrollEnd)='scrollEnd($event)'\n            [primaryYAxis]='primaryYAxis' [title]='title' (load)='load($event)'>\n            <e-series-collection>\n                <e-series [dataSource]='data' [animation]='animation' type='Line' xName='x' yName='y'>\n                </e-series>\n            </e-series-collection>\n        </ejs-chart>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%\">\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 40%\">\n                            <div>Lazy Load </div>\n                        </td>\n                        <td style=\"width: 60%;\">\n                            <div>\n                                <ejs-dropdownlist id='lazymode' #mode (change)='modeChange($event)' [fields]='fields'\n                                    [dataSource]='dropDownData' [value]='dropValue'></ejs-dropdownlist>\n\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 40%\">\n                            <div>Min </div>\n                        </td>\n                        <td style=\"width: 60%;\">\n                            <div>\n                                <ejs-datepicker #min id=\"datepickermin\" [min]='minimumDate' (change)='minChange($event)'\n                                    [value]='minValue'></ejs-datepicker>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 40%\">\n                            <div>Max </div>\n                        </td>\n                        <td style=\"width: 60%;\">\n                            <div>\n                                <ejs-datepicker #max id=\"datepickermax\" [max]='maximumDate' (change)='maxChange($event)'\n                                    [value]='maxValue'></ejs-datepicker>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td style=\"width: 40%\">\n                            <div id=\"pointLength\">Point Length </div>\n                        </td>\n                        <td style=\"width: 60%;\">\n                            <div>\n                                <ejs-numerictextbox #point [value]=\"value\" id=\"pointslength\" [min]='1000' [max]='10000'\n                                    [step]=\"step\" [enabled]=\"enabled\" [format]=\"format\" (change)='pointChange($event)' aria-labelledby=\"Text\">\n                                </ejs-numerictextbox>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}