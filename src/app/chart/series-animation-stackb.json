{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","theme-color.ts":"/**\n * Initialize the Theme colors\n */\nimport { EmitType } from \"@syncfusion/ej2-base\";\nimport { IAccPointRenderEventArgs, IAccLoadedEventArgs, AccumulationTheme, IPointRenderEventArgs, ILoadedEventArgs, ChartTheme } from \"@syncfusion/ej2-charts\";\n\n\nexport let themes: string[] = ['bootstrap5', 'bootstrap5dark', 'tailwind', 'tailwinddark', 'material', 'materialdark', 'bootstrap4', 'bootstrap', 'bootstrapdark', 'fabric', 'fabricdark', 'highcontrast', 'fluent', 'fluentdark', 'material3', 'material3dark', 'fluent2', 'fluent2dark', 'fluent2highcontrast'];\nexport let borderColor: string[] = ['#FD7E14', '#FD7E14', '#5A61F6', '#8B5CF6', '#00bdae', '#9ECB08', '#a16ee5', '#a16ee5', '#a16ee5', '#4472c4', '#4472c4', '#79ECE4', '#1AC9E6', '#1AC9E6', '#6355C7', '#4EAAFF', '#6200EE', '#9BB449', '#9BB449'];\nexport let materialColors: string[] = [\"#00bdae\", \"#404041\", \"#357cd2\", \"#e56590\", \"#f8b883\", \"#70ad47\", \"#dd8abd\", \"#7f84e8\", \"#7bb4eb\",\n    \"#ea7a57\", \"#404041\", \"#00bdae\"];\nexport let fabricColors: string[] = [\"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\",\n    \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\", \"#997300\", \"#4472c4\", \"#70ad47\", \"#ffc000\", \"#ed7d31\"];\nexport let bootstrapColors: string[] = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\",\n    \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\", \"#b91c52\"];\nexport let bootstrap5Colors: string[] = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545',\n    '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2'];\nexport let highContrastColors: string[] = [\"#79ECE4\", \"#E98272\", \"#DFE6B6\", \"#C6E773\", \"#BA98FF\",\n    \"#FA83C3\", \"#00C27A\", \"#43ACEF\", \"#D681EF\", \"#D8BC6E\"];\nexport let fluentColors: string[] = [\"#1AC9E6\", \"#DA4CB2\", \"#EDBB40\", \"#AF4BCF\", \"#FF7266\", \"#1BD565\", \"#EE993D\", \"#5887FF\", \"#EC548D\",\n    \"#7D39C0\"];\nexport let fluentDarkColors: string[] = [\"#1AC9E6\", \"#DA4CB2\", \"#EDBB40\", \"#AF4BCF\", \"#FF7266\", \"#1BD565\", \"#EE993D\", \"#5887FF\", \"#EC548D\",\n    \"#7D39C0\"];\nexport let fluent2Colors: string[] = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nexport let fluent2HighContrastColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let fluent2DarkColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\n\nexport let bubbleMaterialColors: string[] = [\"rgba(0, 189, 174, 0.5)\", \"rgba(64, 64, 65, 0.5)\", \"rgba(53, 124, 210, 0.5)\", \"rgba(229, 101, 144, 0.5)\", \"rgba(248, 184, 131, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(221, 138, 189, 0.5)\",\n    \"rgba(127, 132, 232, 0.5)\", \"rgba(123, 180, 235, 0.5)\", \"rgba(234, 122, 87, 0.5)\", \"rgba(64, 64, 65, 0.5)\", \"rgba(0, 189, 174, 0.5)\"];\nexport let bubbleFabricColors: string[] = [\"rgba(68, 114, 196, 0.5)\", \"rgba(237, 125, 49, 0.5)\", \"rgba(255, 192, 0, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(91, 155, 213, 0.5)\", \"rgba(193, 193, 193, 0.5)\", \"rgba(111, 111, 226, 0.5)\",\n    \"rgba(226, 105, 174, 0.5)\", \"rgba(158, 72, 14, 0.5)\", \"rgba(153, 115, 0, 0.5)\", \"rgba(68, 114, 196, 0.5)\", \"rgba(112, 173, 71, 0.5)\", \"rgba(255, 192, 0, 0.5)\", \"rgba(237, 125, 49, 0.5)\"];\nexport let bubbleBootstrapColors: string[] = [\"rgba(161, 110, 229, 0.5)\", \"rgba(247, 206, 105, 0.5)\", \"rgba(85, 165, 194, 0.5)\", \"rgba(125, 223, 30, 0.5)\", \"rgba(255, 110, 166, 0.5)\", \"rgba(121, 83, 172, 0.5)\",\n    \"rgba(185, 155, 79, 0.5)\", \"rgba(64, 124, 146, 0.5)\", \"rgba(94, 167, 22, 0.5)\", \"rgba(185, 28, 82, 0.5)\"];\nexport let bubbleHighContrastColors: string[] = [\"rgba(121, 236, 228, 0.5)\", \"rgba(233, 130, 114, 0.5)\", \"rgba(223, 230, 182, 0.5)\", \"rgba(198, 231, 115, 0.5)\", \"rgba(186, 152, 255, 0.5)\", \"rgba(250, 131, 195, 0.5)\", \"rgba(0, 194, 122, 0.5)\",\n    \"rgba(67, 172, 239, 0.5)\", \"rgba(214, 129, 239, 0.5)\", \"rgba(216, 188, 110, 0.5)\"];\nexport let bubbleFluentColors: string[] = [\"rgba(26, 201, 230, 0.5)\", \"rgba(218, 76, 178, 0.5)\", \"rgba(237, 187, 64, 0.5)\", \"rgba(175, 75, 207, 0.5)\", \"rgba(255, 114, 102, 0.5)\", \"rgba(27, 213, 101, 0.5)\", \"rgba(238, 153, 61, 0.5)\",\n    \"rgba(88, 135, 255, 0.5)\", \"rgba(236, 84, 141, 0.5)\", \"rgba(125, 57, 192, 0.5)\"];\nexport let bubbleMaterialDarkColors: string[] = [\"rgba(158, 203, 8, 0.5)\", \"rgba(86, 174, 255, 0.5)\", \"rgba(197, 122, 255, 0.5)\", \"rgba(97, 234, 169, 0.5)\", \"rgba(235, 187, 62, 0.5)\", \"rgba(244, 92, 92, 0.5)\", \"rgba(138, 119, 255, 0.5)\",\n    \"rgba(99, 199, 255, 0.5)\", \"rgba(255, 132, 176, 0.5)\", \"rgba(247, 201, 40, 0.5)\"];\nexport let bubbleFluentDarkColors: string[] = [\"rgba(26, 201, 230, 0.5)\", \"rgba(218, 76, 178, 0.5)\", \"rgba(237, 187, 64, 0.5)\", \"rgba(175, 75, 207, 0.5)\", \"rgba(255, 114, 102, 0.5)\", \"rgba(27, 213, 101, 0.5)\", \"rgba(238, 153, 61, 0.5)\",\n    \"rgba(88, 135, 255, 0.5)\", \"rgba(236, 84, 141, 0.5)\", \"rgba(125, 57, 192, 0.5)\"];\nexport let bubbleTailwindColors: string[] = [\"rgba(90, 97, 246, 0.5)\", \"rgba(101, 163, 13, 0.5)\", \"rgba(51, 65, 85, 0.5)\", \"rgba(20, 184, 166, 0.5)\", \"rgba(139, 92, 246, 0.5)\", \"rgba(3, 105, 161, 0.5)\", \"rgba(249, 115, 22, 0.5)\",\n    \"rgba(147, 51, 234, 0.5)\", \"rgba(245, 158, 11, 0.5)\", \"rgba(21, 128, 61, 0.5)\"];\nexport let bubbleTailwindDarkColors: string[] = [\"rgba(139, 92, 246, 0.5)\", \"rgba(34, 211, 238, 0.5)\", \"rgba(248, 113, 113, 0.5)\", \"rgba(74, 222, 128, 0.5)\", \"rgba(232, 121, 249, 0.5)\", \"rgba(252, 211, 77, 0.5)\", \"rgba(249, 115, 22, 0.5)\",\n    \"rgba(45, 212, 191, 0.5)\", \"rgba(244, 114, 182, 0.5)\", \"rgba(16, 185, 129, 0.5)\"];\nexport let bubbleTailwind3Colors: string[] = [\"rgba(47, 64, 116, 0.5)\", \"rgba(3, 180, 180, 0.5)\", \"rgba(13, 114, 222, 0.5)\", \"rgba(255, 87, 51, 0.5)\", \"rgba(214, 51, 132, 0.5)\", \"rgba(243, 156, 18, 0.5)\", \"rgba(239, 41, 31, 0.5)\", \"rgba(145, 200, 34, 0.5)\", \"rgba(47, 64, 116, 0.5)\", \"rgba(3, 180, 180, 0.5)\"];\nexport let bubbleTailwind3DarkColors: string[] = [\"rgba(128, 41, 241, 0.5)\", \"rgba(26, 188, 156, 0.5)\", \"rgba(13, 114, 222, 0.5)\", \"rgba(255, 87, 51, 0.5)\", \"rgba(214, 51, 132, 0.5)\", \"rgba(243, 156, 18, 0.5)\", \"rgba(239, 41, 31, 0.5)\", \"rgba(145, 200, 34, 0.5)\", \"rgba(128, 41, 241, 0.5)\", \"rgba(26, 188, 156, 0.5)\"];\nexport let bubbleBootstrap5Colors: string[] = ['rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(25, 135, 84, 0.5)', 'rgba(13, 202, 240, 0.5)', 'rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)'];\nexport let bubbleBootstrap5DarkColors: string[] = ['rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)', 'rgba(255, 193, 7, 0.5)', 'rgba(25, 135, 84, 0.5)', 'rgba(13, 202, 240, 0.5)', 'rgba(253, 126, 20, 0.5)', 'rgba(102, 16, 242, 0.5)', 'rgba(111, 66, 193, 0.5)', 'rgba(214, 51, 132, 0.5)', 'rgba(220, 53, 69, 0.5)'];\nexport let bubbleMaterial3Colors: string[] = [\"rgba(99, 85, 199, 0.5)\", \"rgba(0, 174, 224, 0.5)\", \"rgba(255, 180, 0, 0.5)\", \"rgba(247, 82, 63, 0.5)\", \"rgba(150, 60, 112, 0.5)\", \"rgba(253, 116, 0, 0.5)\", \"rgba(75, 224, 188, 0.5)\", \"rgba(33, 150, 245, 0.5)\", \"rgba(222, 61, 138, 0.5)\", \"rgba(22, 47, 136, 0.5)\"];\nexport let bubbleMaterial3DarkColors: string[] = [\"rgba(78, 170, 255, 0.5)\", \"rgba(250, 78, 171, 0.5)\", \"rgba(255, 245, 0, 0.5)\", \"rgba(23, 234, 88, 0.5)\", \"rgba(56, 255, 231, 0.5)\", \"rgba(255, 158, 69, 0.5)\", \"rgba(179, 243, 47, 0.5)\", \"rgba(185, 60, 228, 0.5)\", \"rgba(252, 86, 100, 0.5)\", \"rgba(155, 85, 255, 0.5)\"];\nexport let bubbleFluent2Colors: string[] = [\"rgba(98, 0, 238, 0.5)\", \"rgba(9, 175, 116, 0.5)\", \"rgba(0, 118, 229, 0.5)\", \"rgba(203, 53, 135, 0.5)\", \"rgba(231, 145, 15, 0.5)\", \"rgba(3, 100, 222, 0.5)\", \"rgba(102, 205, 21, 0.5)\", \"rgba(243, 169, 60, 0.5)\",\n    \"rgba(16, 124, 16, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let bubbleFluent2HighContrastColors: string[] = [\"rgba(155, 180, 73, 0.5)\", \"rgba(42, 114, 213, 0.5)\", \"rgba(67, 183, 134, 0.5)\", \"rgba(63, 87, 154, 0.5)\", \"rgba(88, 78, 198, 0.5)\", \"rgba(232, 95, 156, 0.5)\", \"rgba(110, 122, 137, 0.5)\", \"rgba(234, 98, 102, 0.5)\",\n    \"rgba(11, 106, 11, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\nexport let bubbleFluent2DarkColors: string[] = [\"rgba(155, 180, 73, 0.5)\", \"rgba(42, 114, 213, 0.5)\", \"rgba(67, 183, 134, 0.5)\", \"rgba(63, 87, 154, 0.5)\", \"rgba(88, 78, 198, 0.5)\", \"rgba(232, 95, 156, 0.5)\", \"rgba(110, 122, 137, 0.5)\", \"rgba(234, 98, 102, 0.5)\",\n    \"rgba(11, 106, 11, 0.5)\", \"rgba(193, 156, 0, 0.5)\"];\n\n\nexport let pointMaterialColors: string[] = [\"#00bdae\", \"#404041\", \"#357cd2\", \"#e56590\", \"#f8b883\", \"#70ad47\", \"#dd8abd\", \"#7f84e8\", \"#7bb4eb\",\n    \"#ea7a57\", \"#404041\", \"#00bdae\"];\nexport let pointFabricColors: string[] = [\"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\", \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\",\n    \"#997300\", \"#4472c4\", \"#70ad47\", \"#ffc000\", \"#ed7d31\"];\nexport let pointBootstrapColors: string[] = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\",\n    \"#b91c52\"];\nexport let pointHighContrastColors: string[] = [\"#79ECE4\", \"#E98272\", \"#DFE6B6\", \"#C6E773\", \"#BA98FF\", \"#FA83C3\", \"#00C27A\", \"#43ACEF\", \"#D681EF\",\n    \"#D8BC6E\"];\nexport let pointFluentColors: string[] = [\"#1AC9E6\", \"#DA4CB2\", \"#EDBB40\", \"#AF4BCF\", \"#FF7266\", \"#1BD565\", \"#EE993D\", \"#5887FF\", \"#EC548D\",\n    \"#7D39C0\"];\nexport let pointMaterialDarkColors: string[] = [\"#9ECB08\", \"#56AEFF\", \"#C57AFF\", \"#61EAA9\", \"#EBBB3E\", \"#F45C5C\", \"#8A77FF\", \"#63C7FF\", \"#FF84B0\",\n    \"#F7C928\"];\nexport let pointFluentDarkColors: string[] = [\"#1AC9E6\", \"#DA4CB2\", \"#EDBB40\", \"#AF4BCF\", \"#FF7266\", \"#1BD565\", \"#EE993D\", \"#5887FF\", \"#EC548D\",\n    \"#7D39C0\"];\nexport let pointTailwindColors: string[] = [\"rgba(90, 97, 246)\", \"rgba(101, 163, 13)\", \"rgba(51, 65, 85)\", \"rgba(20, 184, 166)\", \"rgba(139, 92, 246)\", \"rgba(3, 105, 161)\", \"rgba(249, 115, 22)\",\n    \"rgba(147, 51, 234)\", \"rgba(245, 158, 11)\", \"rgba(21, 128, 61)\"];\nexport let pointTailwindDarkColors: string[] = [\"#8B5CF6\", \"#22D3EE\", \"#F87171\", \"#4ADE80\", \"#E879F9\", \"#FCD34D\", \"#F97316\", \"#2DD4BF\", \"#F472B6\", \"#10B981\"];\nexport let pointTailwind3Colors: string[] = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#2F4074', '#03B4B4'];\nexport let pointTailwind3DarkColors: string[] = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822', '#8029F1', '#1ABC9C'];\nexport let pointBootstrap5Colors: string[] = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2',];\nexport let pointBootstrap5DarkColors: string[] = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754', '#0DCAF0', '#FD7E14', '#6610F2',];\nexport let pointMaterial3Colors: string[] = [\"#6355C7\", \"#00AEE0\", \"#FFB400\", \"#F7523F\", \"#963C70\", \"#FD7400\", \"#4BE0BC\", \"#2196F5\", \"#DE3D8A\", \"#162F88\"];\nexport let pointMaterial3DarkColors: string[] = [\"#4EAAFF\", \"#FA4EAB\", \"#FFF500\", \"#17EA58\", \"#38FFE7\", \"#FF9E45\", \"#B3F32F\", \"#B93CE4\", \"#FC5664\", \"#9B55FF\"];\nexport let pointFluent2Colors: string[] = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n    \"#C19C00\"];\nexport let pointFluent2HighContrastColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\nexport let pointFluent2DarkColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n    \"#0B6A0B\", \"#C19C00\"];\n\nexport let keyFabricDark: string[] = [\"#4472C4\", \"#ED7D31\", \"#FFC000\", \"#70AD47\"];\nexport let keyBootstrap4Colors: string[] = ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6', '#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\nexport let keyBootstrapdarkColors: string[] = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\", \"#b91c52\"];\n\nexport let bubblePointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = bubbleFabricColors[args.point.index % 10];\n        args.border.color = pointFabricColors[args.point.index % 10];;\n    } else if (selectedTheme === 'material-dark') {\n        args.fill = bubbleMaterialDarkColors[args.point.index % 10];\n        args.border.color = pointMaterialDarkColors[args.point.index % 10];;\n    } else if (selectedTheme === 'material') {\n        args.fill = bubbleMaterialColors[args.point.index % 10];\n        args.border.color = pointMaterialColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = bubbleBootstrap5DarkColors[args.point.index % 10];\n        args.border.color = pointBootstrap5DarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap5') {\n        args.fill = bubbleBootstrap5Colors[args.point.index % 10];\n        args.border.color = pointBootstrap5Colors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap4') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = bubbleBootstrapColors[args.point.index % 10];\n        args.border.color = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'highcontrast') {\n        args.fill = bubbleHighContrastColors[args.point.index % 10];\n        args.border.color = pointHighContrastColors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent-dark') {\n        args.fill = bubbleFluentDarkColors[args.point.index % 10];\n        args.border.color = pointFluentDarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent') {\n        args.fill = bubbleFluentColors[args.point.index % 10];\n        args.border.color = pointFluentColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind-dark') {\n        args.fill = bubbleTailwindDarkColors[args.point.index % 10];\n        args.border.color = pointTailwindDarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind') {\n        args.fill = bubbleTailwindColors[args.point.index % 10];\n        args.border.color = pointTailwindColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3') {\n        args.fill = bubbleMaterial3Colors[args.point.index % 10];\n        args.border.color = pointMaterial3Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'material3-dark') {\n        args.fill = bubbleMaterial3DarkColors[args.point.index % 10];\n        args.border.color = pointMaterial3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2') {\n        args.fill = bubbleFluent2Colors[args.point.index % 10];\n        args.border.color = pointFluent2Colors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2-highcontrast') {\n        args.fill = bubbleFluent2HighContrastColors[args.point.index % 10];\n        args.border.color = pointFluent2HighContrastColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'fluent2-dark') {\n        args.fill = bubbleFluent2DarkColors[args.point.index % 10];\n        args.border.color = pointFluent2DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = bubbleTailwind3DarkColors[args.point.index % 10];\n        args.border.color = pointTailwind3DarkColors[args.point.index % 10];\n    }\n    else if (selectedTheme === 'tailwind3') {\n        args.fill = bubbleTailwind3Colors[args.point.index % 10];\n        args.border.color = pointTailwind3Colors[args.point.index % 10];\n    }\n};\nexport let pointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = pointFabricColors[args.point.index % 10];\n    } else if (selectedTheme === 'material-dark') {\n        args.fill = pointMaterialDarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'material') {\n        args.fill = pointMaterialColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = pointBootstrap5DarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap5') {\n        args.fill = pointBootstrap5Colors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap') {\n        args.fill = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap4') {\n        args.fill = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = pointBootstrapColors[args.point.index % 10];\n    } else if (selectedTheme === 'highcontrast') {\n        args.fill = pointHighContrastColors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent-dark') {\n        args.fill = pointFluentDarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent') {\n        args.fill = pointFluentColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind-dark') {\n        args.fill = pointTailwindDarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind') {\n        args.fill = pointTailwindColors[args.point.index % 10];\n    } else if (selectedTheme === 'material3') {\n        args.fill = pointMaterial3Colors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent2') {\n        args.fill = pointFluent2Colors[args.point.index % 10];\n    } else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        args.fill = pointFluent2HighContrastColors[args.point.index % 10];\n    } else if (selectedTheme === 'material3-dark') {\n        args.fill = pointMaterial3DarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = pointTailwind3DarkColors[args.point.index % 10];\n    } else if (selectedTheme === 'tailwind3') {\n        args.fill = pointTailwind3Colors[args.point.index % 10];\n    }\n};\n\nexport let funnelPointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {\n        args.fill = pointFabricColors[0];\n    } else if (selectedTheme === 'material-dark') {\n        args.fill = pointMaterialDarkColors[0];\n    } else if (selectedTheme === 'material') {\n        args.fill = pointMaterialColors[0];\n    } else if (selectedTheme === 'bootstrap5-dark') {\n        args.fill = pointBootstrap5DarkColors[0];\n    } else if (selectedTheme === 'bootstrap5') {\n        args.fill = pointBootstrap5Colors[0];\n    } else if (selectedTheme === 'bootstrap') {\n        args.fill = pointBootstrapColors[0];\n    } else if (selectedTheme === 'bootstrap4') {\n        args.fill = pointBootstrapColors[0];\n    } else if (selectedTheme === 'bootstrap-dark') {\n        args.fill = pointBootstrapColors[0];\n    } else if (selectedTheme === 'highcontrast') {\n        args.fill = pointHighContrastColors[0];\n    } else if (selectedTheme === 'fluent-dark') {\n        args.fill = pointFluentDarkColors[0];\n    } else if (selectedTheme === 'fluent') {\n        args.fill = pointFluentColors[0];\n    } else if (selectedTheme === 'tailwind-dark') {\n        args.fill = pointTailwindDarkColors[0];\n    } else if (selectedTheme === 'tailwind') {\n        args.fill = pointTailwindColors[0];\n    } else if (selectedTheme === 'material3') {\n        args.fill = pointMaterial3Colors[0];\n    } else if (selectedTheme === 'fluent2') {\n        args.fill = pointFluent2Colors[0];\n    } else if (selectedTheme === 'fluent2-highcontrast' || selectedTheme === 'fluent2-dark') {\n        args.fill = pointFluent2HighContrastColors[0];\n    } else if (selectedTheme === 'material3-dark') {\n        args.fill = pointMaterial3DarkColors[0];\n    } else if (selectedTheme === 'tailwind3-dark') {\n        args.fill = pointTailwind3DarkColors[0];\n    } else if (selectedTheme === 'tailwind3') {\n        args.fill = pointTailwind3Colors[0];\n    }\n};\n\nexport let layoutColor: string;\nexport let accPointRender: EmitType<IAccPointRenderEventArgs> = (args: IAccPointRenderEventArgs): void => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n            layoutColor = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n            layoutColor = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n            layoutColor = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n            layoutColor = '#1F2937';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n            layoutColor = '#252423';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n            layoutColor = '#201f1f';\n        }\n        else {\n            args.border.color = '#222222';\n            layoutColor = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n        layoutColor = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n        layoutColor = '#FFFFFF';\n    }\n\n    if (selectedTheme.indexOf('highcontrast') > -1 || selectedTheme.indexOf('dark') > -1) {\n        let element = document.querySelector('#header1') as HTMLElement\n        element.style.color = '#F3F2F1';\n        let element1 = document.querySelector('#header2') as HTMLElement\n        element1.style.color = '#F3F2F1';\n        let element2 = document.querySelector('#header3') as HTMLElement\n        element2.style.color = '#F3F2F1';\n    }\n    if (selectedTheme.indexOf('tailwind') > -1) {\n        let element = document.querySelector('#layout_0_body') as HTMLElement\n        element.style.padding = '0';\n        let element1 = document.querySelector('#layout_1_body') as HTMLElement\n        element1.style.padding = '0';\n        let element2 = document.querySelector('#layout_2_body') as HTMLElement\n        element2.style.padding = '0';\n    }\n    let element = document.querySelector('#layout_0template') as HTMLElement\n    element.style.background = layoutColor;\n    let elementBody = document.getElementById('column');\n    elementBody.style.background = layoutColor;\n    let element1 = document.querySelector('#layout_1template') as HTMLElement\n    element1.style.background = layoutColor;\n    let element1Body = document.getElementById('pie');\n    element1Body.style.background = layoutColor;\n    let element2 = document.querySelector('#layout_2template') as HTMLElement\n    element2.style.background = layoutColor;\n    let element2Body = document.getElementById('spline');\n    element2Body.style.background = layoutColor;\n};\nexport let accpatternPointRender: EmitType<IAccPointRenderEventArgs> = (args: IAccPointRenderEventArgs): void => {\n    if (args.point.index == 0) {\n        args.pattern = 'DiagonalBackward'\n\n    }\n    else if (args.point.index == 1) {\n        args.pattern = 'DiagonalForward'\n\n    }\n    else if (args.point.index == 2) {\n        args.pattern = 'HorizontalStripe'\n\n    }\n    else if (args.point.index == 3) {\n        args.pattern = 'VerticalStripe'\n\n    }\n    else if (args.point.index == 4) {\n        args.pattern = 'HorizontalDash'\n\n    }\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\nlet seriesColor: string[] = ['#FFE066', \"#FAB666\", \"#F68F6A\", \"#F3646A\", \"#CC555A\", \"#9C4649\"];\nexport let donutPointRender: EmitType<IPointRenderEventArgs> = (args: IPointRenderEventArgs): void => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme === 'fluent') {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    else if (selectedTheme === 'bootstrap5') {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n        }\n        else {\n            args.border.color = '#222222';\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else if (selectedTheme.indexOf('fluent2') > -1) {\n        args.fill = seriesColor[args.point.index % 10];\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n};\n\nexport let roundedCornnerPointRender: EmitType<IAccPointRenderEventArgs> = (args: IAccPointRenderEventArgs): void => {\n    let selectedTheme = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    if (selectedTheme.indexOf('dark') > -1) {\n        if (selectedTheme.indexOf('material') > -1) {\n            args.border.color = '#303030';\n        }\n        else if (selectedTheme.indexOf('bootstrap5') > -1) {\n            args.border.color = '#212529';\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n\n        }\n        else if (selectedTheme.indexOf('fabric') > -1) {\n            args.border.color = '#201f1f';\n\n        }\n        else if (selectedTheme.indexOf('fluent') > -1) {\n            args.border.color = '#252423';\n\n        }\n        else if (selectedTheme.indexOf('bootstrap') > -1) {\n            args.border.color = '#1A1A1A';\n\n        }\n        else if (selectedTheme.indexOf('tailwind') > -1) {\n            args.border.color = '#1F2937';\n\n        }\n        else {\n            args.border.color = '#222222';\n\n        }\n    }\n    else if (selectedTheme.indexOf('highcontrast') > -1) {\n        args.border.color = '#000000';\n    }\n    else {\n        args.border.color = '#FFFFFF';\n    }\n}\n\nexport let loadChartTheme = (args?: ILoadedEventArgs, isgradient?: Boolean): ChartTheme | string => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    var theme: ChartTheme;\n    if (args) {\n        theme = args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    else {\n        theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    }\n    if(isgradient) {\n        return selectedTheme;\n    } else {\n        return theme;\n    }\n    \n};\n\nexport let loadAccumulationChartTheme = (args?: IAccLoadedEventArgs): string => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.accumulation.theme = <AccumulationTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return selectedTheme;\n};","app.component.ts":"import { Component, ViewEncapsulation } from '@angular/core';\nimport {\n  ChartAllModule, ChartComponent, ChartTheme, ILoadedEventArgs,IPointRenderEventArgs\n} from '@syncfusion/ej2-angular-charts';\nimport { TabModule, TabAllModule, SelectingEventArgs } from '@syncfusion/ej2-angular-navigations'\nimport { Browser } from '@syncfusion/ej2-base';\n\n\nimport { loadChartTheme, bubblePointRender } from './theme-color';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  standalone: true,\n  imports: [ ChartAllModule,  TabAllModule, TabModule],\n})\nexport class AppComponent {\n\n  public activeChart: string = 'lineCharts';\n  public headerText: { text: string, content: string }[] = [\n    { text: \"Line\", content: \"lineCharts\" },\n    { text: \"Column\", content: \"columnCharts\" },\n    { text: \"Spline\", content: \"splineCharts\" },\n    { text: \"Area\", content: \"areaCharts\" },\n    { text: \"Bar\", content: \"barCharts\" },\n    { text: \"Bubble\", content: \"bubbleCharts\" },\n    { text: \"Scatter\", content: \"scatterCharts\" },\n    { text: \"Step Line\", content: \"stepLineCharts\" },\n    { text: \"Range Column\", content: \"rangeCharts\" }\n  ];\n\n  public primaryXAxis: Object = {\n    valueType: 'Category',\n    majorGridLines: { width: 0 },\n    majorTickLines: { width: 0 },\n    minorTickLines: { width: 0 }\n  };\n\n  public primaryYAxis: Object = {\n    labelFormat: '{value}',\n    maximum: 100,\n    minimum: 0,\n    edgeLabelPlacement: 'Shift',\n    lineStyle: { width: 0 },\n    majorTickLines: { width: 0 }\n  };\n\n  public bubbleXAxis: Object = {\n    minimum: 1,\n    maximum: 7,\n    interval: 1,\n    majorGridLines: { width: 0 },\n    majorTickLines: { width: 0 }\n  };\n\n  public bubbleYAxis: Object = {\n    minimum: 0,\n    maximum: 100,\n    lineStyle: { width: 0 },\n    majorTickLines: { width: 0 }\n  };\n\n  public scatterXAxis: Object = {\n    minimum: 1,\n    interval: 1,\n    maximum: 10,\n    majorGridLines: { width: 0 },\n    majorTickLines: { width: 0 },\n    edgeLabelPlacement: 'Shift'\n  };\n\n  public scatterYAxis: Object = {\n    majorTickLines: { width: 0 },\n    lineStyle: { width: 0 },\n    minimum: 0,\n    maximum: 80,\n    interval: 10,\n    rangePadding: 'None'\n  };\n\n  public chartArea: Object = { border: { width: 0 } };\n  public width: string = '100%';\n\n  public splineSeries: Object = {\n    dataSource: this.getSpline(),\n    xName: \"x\",\n    yName: \"y\",\n    type: \"Spline\",\n    width: 2.5,\n    marker: { visible: true, height: 8, width: 8, dataLabel: { visible: true, position: 'Outer' } },\n    animation: { enable: true }\n  };\n\n  public lineSeries: Object = {\n    dataSource: this.getLine(),\n    xName: \"x\",\n    yName: \"y\",\n    type: \"Line\",\n    width: 2.5,\n    marker: { visible: true, height: 8, width: 8, dataLabel: { visible: true, position: 'Outer' } },\n    animation: { enable: true }\n  };\n\n  public columnSeries: Object = {\n    dataSource: this.getColumn(),\n    xName: \"x\",\n    yName: \"y\",\n    type: \"Column\",\n    marker: { visible: false, dataLabel: { visible: true, position: 'Outer' } },\n    animation: { enable: true },\n    cornerRadius: { topLeft: 4, topRight: 4 }\n  };\n\n  public areaSeries: Object = {\n    dataSource: this.getArea(),\n    xName: \"x\",\n    yName: \"y\",\n    type: \"SplineArea\",\n    marker: { visible: false, dataLabel: { visible: true, position: 'Outer' } },\n    animation: { enable: true }\n  };\n\n  public barSeries: Object = {\n    dataSource: this.getBar(),\n    xName: \"x\",\n    yName: \"y\",\n    type: \"Bar\",\n    marker: { visible: false, dataLabel: { visible: true, position: 'Outer' } },\n    animation: { enable: true },\n    cornerRadius: { bottomRight: 4, topRight: 4 }\n  };\n\n  public bubbleSeries: Object = {\n    dataSource: this.getBubbleData(),\n    type: \"Bubble\",\n    border: { width: 2 },\n    xName: \"x\",\n    yName: \"y\",\n    size: \"size\",\n    animation: { enable: true }\n  };\n\n  public marker: Object = {\n    visible: false, width: 8, height: 8, shape: 'Circle', dataLabel: { visible: false }\n  };\n  public animation: Object = {\n    enable: true\n  };\n\n  public stepLineSeries: Object = {\n    dataSource: this.getStepLine(),\n    xName: \"x\",\n    yName: \"y\",\n    width: 2.5,\n    type: \"StepLine\",\n    marker: { visible: false, dataLabel: { visible: false } },\n    animation: { enable: true }\n  };\n\n  public rangeSeries: Object = {\n    dataSource: this.getRangeColumnData(),\n    xName: \"x\",\n    low: \"low\",\n    high: \"high\",\n    type: \"RangeColumn\",\n    columnSpacing: 0.1,\n    marker: { visible: false, dataLabel: { visible: true, position: 'Outer' } },\n    animation: { enable: true },\n    cornerRadius: { topLeft: 4, topRight: 4, bottomRight: 4, bottomLeft: 4 }\n  };\n\n  private getSpline(): DataPoint[] {\n    return [\n      { x: '1', y: 30 },\n      { x: '2', y: 10 },\n      { x: '3', y: 80 },\n      { x: '4', y: 20 },\n      { x: '5', y: 30 },\n      { x: '6', y: 5 },\n      { x: '7', y: 69 },\n      { x: '8', y: 15 },\n      { x: '9', y: 60 },\n      { x: '10', y: 70 }\n    ]\n  }\n\n  private getLine(): DataPoint[] {\n    return [\n      { x: '1', y: 10 },\n      { x: '2', y: 30 },\n      { x: '3', y: 80 },\n      { x: '4', y: 20 },\n      { x: '5', y: 30 },\n      { x: '6', y: 40 },\n      { x: '7', y: 69 },\n      { x: '8', y: 15 },\n      { x: '9', y: 60 },\n      { x: '10', y: 70 }\n    ];\n  }\n\n  private getColumn(): DataPoint[] {\n    return [\n      { x: '1', y: 90 },\n      { x: '2', y: 10 },\n      { x: '3', y: 50 },\n      { x: '4', y: 20 },\n      { x: '5', y: 30 },\n      { x: '6', y: 70 },\n      { x: '7', y: 9 }\n    ];\n  }\n\n  private getArea(): DataPoint[] {\n    return [\n      { x: '1', y: 10 },\n      { x: '2', y: 20 },\n      { x: '3', y: 80 },\n      { x: '4', y: 15 },\n      { x: '5', y: 30 },\n      { x: '6', y: 40 },\n      { x: '7', y: 69 },\n      { x: '8', y: 15 }\n    ];\n  }\n\n  private getBar(): DataPoint[] {\n    return [\n      { x: '1', y: 90 },\n      { x: '2', y: 10 },\n      { x: '3', y: 50 },\n      { x: '4', y: 20 },\n      { x: '5', y: 30 },\n      { x: '6', y: 70 },\n      { x: '7', y: 9 }\n    ];\n  }\n\n  private getStepLine(): DataPoint[] {\n    return [\n      { x: '1', y: 10 },\n      { x: '2', y: 30 },\n      { x: '3', y: 80 },\n      { x: '4', y: 20 },\n      { x: '5', y: 30 },\n      { x: '6', y: 40 },\n      { x: '7', y: 69 },\n      { x: '8', y: 15 },\n      { x: '9', y: 60 },\n      { x: '10', y: 70 }\n    ];\n  }\n\n  private getBubbleData(): Object[] {\n    return [\n      { x: '1.5', y: 80, size: 4 },\n      { x: '2', y: 60, size: 6 },\n      { x: '3', y: 70, size: 2 },\n      { x: '4', y: 13, size: 4 },\n      { x: '5', y: 30, size: 3 },\n      { x: '6', y: 20, size: 4 },\n      { x: '6.5', y: 40, size: 6 },\n    ];\n  }\n\n  public scatterData1: Object[] = [\n    { x: '1', y: 60, y1: 45 },\n    { x: '1.25', y: 40, y1: 30 },\n    { x: '1.5', y: 25, y1: 10 },\n    { x: '1.75', y: 15, y1: 50 },\n    { x: '2', y: 15, y1: 65 },\n    { x: '2.25', y: 35, y1: 50 },\n    { x: '2.5', y: 40, y1: 30 },\n    { x: '2.75', y: 60, y1: 25 },\n    { x: '3', y: 65, y1: 25 },\n    { x: '3.25', y: 30, y1: 15 },\n    { x: '3.5', y: 20, y1: 60 },\n    { x: '3.75', y: 50, y1: 40 },\n    { x: '4', y: 50, y1: 35 },\n    { x: '4.25', y: 55, y1: 50 },\n    { x: '4.5', y: 75, y1: 15 },\n    { x: '4.75', y: 45, y1: 60 },\n    { x: '5', y: 45, y1: 50 },\n    { x: '5.25', y: 35, y1: 30 },\n    { x: '5.5', y: 30, y1: 20 },\n    { x: '5.75', y: 55, y1: 40 },\n    { x: '6', y: 70, y1: 55 },\n    { x: '6.25', y: 60, y1: 25 },\n    { x: '6.5', y: 15, y1: 40 },\n    { x: '6.75', y: 40, y1: 15 },\n    { x: '7', y: 30, y1: 25 },\n    { x: '7.25', y: 60, y1: 35 },\n    { x: '7.5', y: 60, y1: 35 },\n    { x: '7.75', y: 25, y1: 15 },\n    { x: '8', y: 25, y1: 10 },\n    { x: '8.25', y: 50, y1: 30 },\n    { x: '8.5', y: 45, y1: 65 },\n    { x: '8.75', y: 55, y1: 20 },\n    { x: '9', y: 50, y1: 60 },\n    { x: '9.25', y: 30, y1: 45 },\n    { x: '9.5', y: 10, y1: 20 },\n    { x: '9.75', y: 40, y1: 35 },\n    { x: '10', y: 55, y1: 15 }\n  ];\n\n  public scatterData2: Object[] = [\n    { x: '1', y: 70, y1: 25 },\n    { x: '1.25', y: 55, y1: 40 },\n    { x: '1.5', y: 45, y1: 40 },\n    { x: '1.75', y: 30, y1: 45 },\n    { x: '2', y: 20, y1: 55 },\n    { x: '2.25', y: 30, y1: 45 },\n    { x: '2.5', y: 10, y1: 35 },\n    { x: '2.75', y: 25, y1: 15 },\n    { x: '3', y: 50, y1: 20 },\n    { x: '3.25', y: 60, y1: 30 },\n    { x: '3.5', y: 25, y1: 60 },\n    { x: '3.75', y: 50, y1: 45 },\n    { x: '4', y: 30, y1: 15 },\n    { x: '4.25', y: 55, y1: 20 },\n    { x: '4.5', y: 65, y1: 75 },\n    { x: '4.75', y: 45, y1: 35 },\n    { x: '5', y: 60, y1: 45 },\n    { x: '5.25', y: 35, y1: 10 },\n    { x: '5.5', y: 15, y1: 30 },\n    { x: '5.75', y: 30, y1: 60 },\n    { x: '6', y: 55, y1: 50 },\n    { x: '6.25', y: 25, y1: 45 },\n    { x: '6.5', y: 35, y1: 10 },\n    { x: '6.75', y: 20, y1: 30 },\n    { x: '7', y: 40, y1: 65 },\n    { x: '7.25', y: 30, y1: 45 },\n    { x: '7.5', y: 30, y1: 60 },\n    { x: '7.75', y: 45, y1: 30 },\n    { x: '8', y: 60, y1: 45 },\n    { x: '8.25', y: 50, y1: 40 },\n    { x: '8.5', y: 20, y1: 25 },\n    { x: '8.75', y: 70, y1: 15 },\n    { x: '9', y: 75, y1: 15 },\n    { x: '9.25', y: 30, y1: 50 },\n    { x: '9.5', y: 50, y1: 35 },\n    { x: '9.75', y: 55, y1: 20 },\n    { x: '10', y: 15, y1: 70 }\n  ];\n  public scatterData3: Object[] = [\n    { x: '1', y: 20, y1: 30 },\n    { x: '1.25', y: 30, y1: 20 },\n    { x: '1.5', y: 35, y1: 60 },\n    { x: '1.75', y: 40, y1: 30 },\n    { x: '2', y: 55, y1: 20 },\n    { x: '2.25', y: 45, y1: 35 },\n    { x: '2.5', y: 60, y1: 45 },\n    { x: '2.75', y: 25, y1: 30 },\n    { x: '3', y: 45, y1: 15 },\n    { x: '3.25', y: 50, y1: 45 },\n    { x: '3.5', y: 50, y1: 35 },\n    { x: '3.75', y: 15, y1: 40 },\n    { x: '4', y: 15, y1: 70 },\n    { x: '4.25', y: 45, y1: 55 },\n    { x: '4.5', y: 75, y1: 10 },\n    { x: '4.75', y: 60, y1: 25 },\n    { x: '5', y: 30, y1: 55 },\n    { x: '5.25', y: 45, y1: 35 },\n    { x: '5.5', y: 60, y1: 25 },\n    { x: '5.75', y: 40, y1: 45 },\n    { x: '6', y: 10, y1: 50 },\n    { x: '6.25', y: 20, y1: 65 },\n    { x: '6.5', y: 65, y1: 40 },\n    { x: '6.75', y: 30, y1: 30 },\n    { x: '7', y: 25, y1: 65 },\n    { x: '7.25', y: 35, y1: 40 },\n    { x: '7.5', y: 20, y1: 45 },\n    { x: '7.75', y: 60, y1: 50 },\n    { x: '8', y: 35, y1: 60 },\n    { x: '8.25', y: 25, y1: 45 },\n    { x: '8.5', y: 30, y1: 15 },\n    { x: '8.75', y: 50, y1: 70 },\n    { x: '9', y: 45, y1: 75 },\n    { x: '9.25', y: 20, y1: 35 },\n    { x: '9.5', y: 40, y1: 50 },\n    { x: '9.75', y: 45, y1: 30 },\n    { x: '10', y: 50, y1: 25 }\n  ];\n  public scatterData4: Object[] = [\n    { x: '1', y: 50, y1: 60 }, { x: '1.25', y: 45, y1: 55 },\n    { x: '1.5', y: 15, y1: 30 },\n    { x: '1.75', y: 55, y1: 20 },\n    { x: '2', y: 60, y1: 45 },\n    { x: '2.25', y: 55, y1: 35 },\n    { x: '2.5', y: 55, y1: 20 },\n    { x: '2.75', y: 30, y1: 50 },\n    { x: '3', y: 70, y1: 50 },\n    { x: '3.25', y: 25, y1: 35 },\n    { x: '3.5', y: 30, y1: 35 },\n    { x: '3.75', y: 45, y1: 60 },\n    { x: '4', y: 65, y1: 15 },\n    { x: '4.25', y: 20, y1: 70 },\n    { x: '4.5', y: 25, y1: 75 },\n    { x: '4.75', y: 35, y1: 25 },\n    { x: '5', y: 40, y1: 60 },\n    { x: '5.25', y: 50, y1: 30 },\n    { x: '5.5', y: 20, y1: 10 },\n    { x: '5.75', y: 35, y1: 40 },\n    { x: '6', y: 35, y1: 45 },\n    { x: '6.25', y: 30, y1: 25 },\n    { x: '6.5', y: 30, y1: 70 },\n    { x: '6.75', y: 60, y1: 20 },\n    { x: '7', y: 45, y1: 25 },\n    { x: '7.25', y: 40, y1: 35 },\n    { x: '7.5', y: 20, y1: 55 },\n    { x: '7.75', y: 50, y1: 40 },\n    { x: '8', y: 50, y1: 40 },\n    { x: '8.25', y: 35, y1: 55 },\n    { x: '8.5', y: 60, y1: 35 },\n    { x: '8.75', y: 30, y1: 60 },\n    { x: '9', y: 10, y1: 65 },\n    { x: '9.25', y: 25, y1: 50 },\n    { x: '9.5', y: 40, y1: 50 },\n    { x: '9.75', y: 30, y1: 25 },\n    { x: '10', y: 65, y1: 30 },\n  ];\n  public scatterData: Object[] = [\n    { x: '1', y: 15, y1: 10 }, { x: '1.25', y: 35, y1: 20 },\n    { x: '1.5', y: 60, y1: 50 }, { x: '1.75', y: 25, y1: 15 },\n    { x: '2', y: 25, y1: 35 }, { x: '2.25', y: 30, y1: 30 },\n    { x: '2.5', y: 45, y1: 30 }, { x: '2.75', y: 40, y1: 20 },\n    { x: '3', y: 30, y1: 45 }, { x: '3.25', y: 55, y1: 35 },\n    { x: '3.5', y: 65, y1: 20 }, { x: '3.75', y: 40, y1: 50 },\n    { x: '4', y: 40, y1: 60 }, { x: '4.25', y: 60, y1: 25 },\n    { x: '4.5', y: 15, y1: 25 }, { x: '4.75', y: 75, y1: 55 },\n    { x: '5', y: 50, y1: 40 }, { x: '5.25', y: 45, y1: 30 },\n    { x: '5.5', y: 20, y1: 15 }, { x: '5.75', y: 65, y1: 35 },\n    { x: '6', y: 65, y1: 65 }, { x: '6.25', y: 35, y1: 50 },\n    { x: '6.5', y: 70, y1: 35 }, { x: '6.75', y: 50, y1: 40 },\n    { x: '7', y: 25, y1: 60 }, { x: '7.25', y: 60, y1: 45 },\n    { x: '7.5', y: 45, y1: 20 }, { x: '7.75', y: 30, y1: 15 },\n    { x: '8', y: 60, y1: 50 }, { x: '8.25', y: 25, y1: 35 },\n    { x: '8.5', y: 30, y1: 10 }, { x: '8.75', y: 45, y1: 25 },\n    { x: '9', y: 75, y1: 45 }, { x: '9.25', y: 40, y1: 50 },\n    { x: '9.5', y: 20, y1: 15 }, { x: '9.75', y: 30, y1: 40 },\n    { x: '10', y: 60, y1: 25 }, { x: '7.25', y: 60, y1: 45 },\n    { x: '7.5', y: 45, y1: 20 }, { x: '7.75', y: 30, y1: 15 },\n    { x: '8', y: 60, y1: 50 }, { x: '8.25', y: 25, y1: 35 },\n    { x: '8.5', y: 30, y1: 10 }, { x: '8.75', y: 45, y1: 25 },\n    { x: '9', y: 75, y1: 45 }, { x: '9.25', y: 40, y1: 50 },\n    { x: '9.5', y: 20, y1: 15 }, { x: '9.75', y: 30, y1: 40 },\n    { x: '10', y: 60, y1: 25 }\n  ];\n\n  private getRangeColumnData(): Object[] {\n    return [\n      { x: '1', low: 30, high: 60 },\n      { x: '2', low: 42, high: 73 },\n      { x: '3', low: 35, high: 80 },\n      { x: '4', low: 20, high: 50 },\n      { x: '5', low: 30, high: 80 },\n      { x: '6', low: 10, high: 40 },\n      { x: '7', low: 15, high: 69 }\n    ];\n  }\n\n  private shuffleArray(array: any[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n    private  lineIntervalId: any;\n    private  columnIntervalId: any;\n    private  splineIntervalId: any;\n    private  areaIntervalId: any;\n    private  barIntervalId: any;\n    private  bubbleIntervalId: any;\n    private  scatterIntervalId: any;\n    private  stepLineIntervalId: any;\n    private  rangeIntervalId: any;\n\n\n  private lineClearInterval() {\n    if (this.lineIntervalId) {\n      clearInterval(this.lineIntervalId);\n      this.lineIntervalId = null;\n    }\n  }\n  private columnClearInterval() {\n    if (this.columnIntervalId) {\n      clearInterval(this.columnIntervalId);\n      this.columnIntervalId = null;\n    }\n  }\n  private splineClearInterval() {\n    if (this.splineIntervalId) {\n      clearInterval(this.splineIntervalId);\n      this.splineIntervalId = null;\n    }\n  }\n  private areaClearInterval() {\n    if (this.areaIntervalId) {\n      clearInterval(this.areaIntervalId);\n      this.areaIntervalId = null;\n    }\n  }\n  private barClearInterval() {\n    if (this.barIntervalId) {\n      clearInterval(this.barIntervalId);\n      this.barIntervalId = null;\n    }\n  }\n  private bubbleClearInterval() {\n    if (this.bubbleIntervalId) {\n      clearInterval(this.bubbleIntervalId);\n      this.bubbleIntervalId = null;\n    }\n  }\n  private scatterClearInterval() {\n    if (this.scatterIntervalId) {\n      clearInterval(this.scatterIntervalId);\n      this.scatterIntervalId = null;\n    }\n  }\n  private stepLineClearInterval() {\n    if (this.stepLineIntervalId) {\n      clearInterval(this.stepLineIntervalId);\n      this.stepLineIntervalId = null;\n    }\n  }\n  private rangeClearInterval() {\n    if (this.rangeIntervalId) {\n      clearInterval(this.rangeIntervalId);\n      this.rangeIntervalId = null;\n    }\n  }\n\n  public splineLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n\n  public lineLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n\n  public columnLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n\n  public areaLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n\n  public barLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n  public bubbleLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n\n  public scatterLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n\n  public stepLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n\n  public rangeLoaded(args: ILoadedEventArgs): void {\n    args.chart.element.setAttribute('title', '');\n  }\n\n  public splineLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.splineClearInterval();\n    this.splineIntervalId = setInterval(() => {\n      let container = document.getElementById('splineChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const newData = this.getSpline().map(item => ({\n        x: item.x,\n        y: Math.floor(Math.random() * (95 - 10 + 1)) + 10\n      }));\n      args.chart.series[0].setData(newData, 1400);\n    } else {\n      this.splineClearInterval();\n    }\n    }, 2000);\n  }\n\n  public lineLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.lineClearInterval();\n    this.lineIntervalId = setInterval(() => {\n      let container = document.getElementById('lineChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const newData = this.getLine().map(item => ({\n        x: item.x,\n        y: Math.floor(Math.random() * (95 - 10 + 1)) + 10\n      }));\n      args.chart.series[0].setData(newData, 1400);\n    } else {\n      this.lineClearInterval();\n    }\n    }, 2000);\n  }\n\n  public columnLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.columnClearInterval();\n    this.columnIntervalId = setInterval(() => {\n      let container = document.getElementById('columnChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const newData = this.getColumn().map(item => ({\n        x: item.x,\n        y: Math.floor(Math.random() * (95 - 10 + 1)) + 10\n      }));\n      args.chart.series[0].setData(newData, 1400);\n    } else {\n      this.columnClearInterval();\n    }\n    }, 2000);\n  }\n\n  public areaLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.areaClearInterval();\n    this.areaIntervalId = setInterval(() => {\n      let container = document.getElementById('areaChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const newData = this.getArea().map(item => ({\n        x: item.x,\n        y: Math.floor(Math.random() * (95 - 10 + 1)) + 10\n      }));\n      args.chart.series[0].setData(newData, 1400);\n    } else {\n      this.areaClearInterval();\n    }\n    }, 2000);\n  }\n\n  public barLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.barClearInterval();\n    this.barIntervalId = setInterval(() => {\n      let container = document.getElementById('barChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const newData = this.getBar().map(item => ({\n        x: item.x,\n        y: Math.floor(Math.random() * (95 - 10 + 1)) + 10\n      }));\n      args.chart.series[0].setData(newData, 1400);\n    } else {\n      this.barClearInterval();\n    }\n    }, 2000);\n  }\n\n  public bubbleLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.bubbleClearInterval();\n    this.bubbleIntervalId = setInterval(() => {\n      let container = document.getElementById('bubbleChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const newBubbleData = this.getBubbleData().map(item => ({\n        ...item,\n        y: Math.random() * (95 - 5) + 5,\n        size: Math.random() * (9.5 - 3.5) + 3.5\n      }));\n      args.chart.series[0].setData(this.shuffleArray(newBubbleData), 1400);\n    } else {\n      this.bubbleClearInterval();\n    }\n    }, 2000);\n  }\n\n  public scatterLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.scatterClearInterval();\n    let index = 1;\n    const datasets = [this.shuffleArray(this.scatterData), this.shuffleArray(this.scatterData1), this.shuffleArray(this.scatterData2), this.shuffleArray(this.scatterData3), this.shuffleArray(this.scatterData4)];\n    this.scatterIntervalId = setInterval(() => {\n      let container = document.getElementById('scatterChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const scatterDataSource = datasets[index % datasets.length];\n      index++;\n      if (scatterDataSource && scatterDataSource.length > 0) {\n        args.chart.series[0].setData(scatterDataSource, 2000);\n        args.chart.series[1].setData(scatterDataSource, 2000);\n      }\n    } else {\n      this.scatterClearInterval();\n    }\n    }, 2000);\n  }\n\n  public stepLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.stepLineClearInterval();\n    this.stepLineIntervalId = setInterval(() => {\n      let container = document.getElementById('stepLineChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const newData = this.getStepLine().map(item => ({\n        x: item.x,\n        y: Math.floor(Math.random() * (95 - 10 + 1)) + 10\n      }));\n      args.chart.series[0].setData(newData, 1400);\n    } else {\n      this.stepLineClearInterval();\n    }\n    }, 2000);\n  }\n\n  public rangeLoad(args: ILoadedEventArgs): void {\n    loadChartTheme(args);\n    this.rangeClearInterval();\n    this.rangeIntervalId = setInterval(() => {\n      let container = document.getElementById('rangeChart');\n        if (container && container.children.length > 0 && container.id === args.chart.element.id) {\n      const newData = this.getRangeColumnData().map((item: DataPoint) => ({\n        x: item.x,\n        high: Math.floor(Math.random() * (95 - 50 + 1)) + 50,\n        low: Math.floor(Math.random() * (45 - 5 + 1)) + 5\n      }));\n      args.chart.series[0].setData(newData, 1400);\n    } else {\n      this.rangeClearInterval();\n    }\n    }, 2000);\n  }\n\n  public bubblePointRender(args: IPointRenderEventArgs): void {\n    bubblePointRender(args);\n  }\n}\ninterface DataPoint {\n  x: string;\n  y: number;\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div class=\"content-wrapper\">\n        <ejs-tab heightAdjustMode='None' overflowMode='Scrollable' height='500px' headerPlacement='Top' >\n            <e-tabitems>\n                <e-tabitem [header]='headerText[0]'>\n                    <ng-template #content>\n                        <div id=\"lineCharts\">\n                            <ejs-chart id='lineChart' [series]='[lineSeries]' [primaryXAxis]='primaryXAxis'\n                                [primaryYAxis]='primaryYAxis' [chartArea]='chartArea' [width]='width' (load)='lineLoad($event)' (loaded)='lineLoaded($event)'>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n                <e-tabitem [header]='headerText[1]'>\n                    <ng-template #content>  \n                        <div id=\"columnCharts\">\n                            <ejs-chart id='columnChart' [series]='[columnSeries]' [primaryXAxis]='primaryXAxis'\n                                [primaryYAxis]='primaryYAxis' [chartArea]='chartArea' [width]='width' (load)='columnLoad($event)' (loaded)='columnLoaded($event)'>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n                <e-tabitem [header]='headerText[2]'>\n                    <ng-template #content>  \n                        <div id=\"splineCharts\">\n                            <ejs-chart id='splineChart' [series]='[splineSeries]' [primaryXAxis]='primaryXAxis'\n                                [primaryYAxis]='primaryYAxis' [chartArea]='chartArea' [width]='width' (load)='splineLoad($event)' (loaded)='splineLoaded($event)'>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n                <e-tabitem [header]='headerText[3]'>\n                    <ng-template #content>  \n                        <div id=\"areaCharts\">\n                            <ejs-chart id='areaChart' [series]='[areaSeries]' [primaryXAxis]='primaryXAxis'\n                                [primaryYAxis]='primaryYAxis' [chartArea]='chartArea' [width]='width' (load)='areaLoad($event)' (loaded)='areaLoaded($event)'>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n                <e-tabitem [header]='headerText[4]'>\n                    <ng-template #content>  \n                        <div id=\"barCharts\">\n                            <ejs-chart id='barChart' [series]='[barSeries]' [primaryXAxis]='primaryXAxis'\n                                [primaryYAxis]='primaryYAxis' [chartArea]='chartArea' [width]='width' (load)='barLoad($event)' (loaded)='barLoaded($event)'>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n                <e-tabitem [header]='headerText[5]'>\n                    <ng-template #content>  \n                        <div id=\"bubbleCharts\">\n                            <ejs-chart id='bubbleChart' [series]='[bubbleSeries]' [primaryXAxis]='bubbleXAxis' (pointRender)='bubblePointRender($event)'\n                                [primaryYAxis]='bubbleYAxis' [chartArea]='chartArea' (load)='bubbleLoad($event)' (loaded)='bubbleLoaded($event)'>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n                <e-tabitem [header]='headerText[6]'>\n                    <ng-template #content>  \n                        <div id=\"scatterCharts\">\n                            <ejs-chart id='scatterChart' [primaryXAxis]='scatterXAxis'\n                                [primaryYAxis]='scatterYAxis' [chartArea]='chartArea' [width]='width' (load)='scatterLoad($event)' (loaded)='scatterLoaded($event)'>\n                                <e-series-collection>\n                                    <e-series [dataSource]='scatterData' type='Scatter' xName='x' yName='y' [marker]='marker' [animation]='animation'> </e-series>\n                                    <e-series [dataSource]='scatterData' type='Scatter' xName='x' yName='y1'[marker]='marker' [animation]='animation'> </e-series>\n                                </e-series-collection>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n                <e-tabitem [header]='headerText[7]'>\n                    <ng-template #content>  \n                        <div id=\"stepLineCharts\">\n                            <ejs-chart id='stepLineChart' [series]='[stepLineSeries]' [primaryXAxis]='primaryXAxis'\n                                [primaryYAxis]='primaryYAxis' [chartArea]='chartArea' [width]='width' (load)='stepLoad($event)' (loaded)='stepLoaded($event)'>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n                <e-tabitem [header]='headerText[8]'>\n                    <ng-template #content>  \n                        <div id=\"rangeCharts\">\n                            <ejs-chart id='rangeChart' [series]='[rangeSeries]' [primaryXAxis]='primaryXAxis'\n                                [primaryYAxis]='primaryYAxis' [chartArea]='chartArea' [width]='width' (load)='rangeLoad($event)' (loaded)='rangeLoaded($event)'>\n                            </ejs-chart>\n                        </div>\n                    </ng-template>\n                </e-tabitem>\n            </e-tabitems>\n        </ejs-tab>\n    </div>    \n</div>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}