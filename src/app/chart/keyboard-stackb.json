{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { Chart, ChartComponent, Category, ColumnSeries, Legend, StripLine, ILoadedEventArgs, ChartTheme, ILegendClickEventArgs, legendClick, Selection, Zoom, ChartAllModule } from '@syncfusion/ej2-angular-charts';\nimport { Browser } from '@syncfusion/ej2-base';\n\n\n\n/**\n * Keyboard Navigation Chart\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ ChartAllModule, ]\n})\n\nexport class AppComponent {\n\n    @ViewChild('chart')\n    public chart: ChartComponent;\n\n    public getStriplineValues(legendClickedName: string) {\n        let seriesIndex: number = 0;\n        let Segments: number[][] = [[0, 5], [7, 12], [14, 19], [21, 26]];\n        for (let i: number = 0; i < this.chart.series.length; i++) {\n            let name: string = this.chart.series[i].name;\n            let visible: boolean = name === legendClickedName ? !this.chart.series[i].visible : this.chart.series[i].visible;\n            if (seriesIndex > 3) {\n                seriesIndex = 0;\n            }\n            if (name == \"Quarter 1\") {\n                this.chart.primaryYAxis.stripLines[0].visible =this.chart.primaryYAxis.stripLines[1].visible = visible;\n                if (this.chart.primaryYAxis.stripLines[0].visible) {\n                    this.chart.primaryYAxis.stripLines[0].segmentStart = this.chart.primaryYAxis.stripLines[1].segmentStart = Segments[seriesIndex][0];\n                    this.chart.primaryYAxis.stripLines[0].segmentEnd = this.chart.primaryYAxis.stripLines[1].segmentEnd = Segments[seriesIndex][1];\n                    seriesIndex++;\n                }\n            }\n            else if (name == \"Quarter 2\") {\n                this.chart.primaryYAxis.stripLines[2].visible = this.chart.primaryYAxis.stripLines[3].visible = visible;\n                if (this.chart.primaryYAxis.stripLines[2].visible) {\n                    this.chart.primaryYAxis.stripLines[2].segmentStart = this.chart.primaryYAxis.stripLines[3].segmentStart = Segments[seriesIndex][0];\n                    this.chart.primaryYAxis.stripLines[2].segmentEnd = this.chart.primaryYAxis.stripLines[3].segmentEnd = Segments[seriesIndex][1];\n                    seriesIndex++;\n                }\n            }\n            else if (name == \"Quarter 3\") {\n                this.chart.primaryYAxis.stripLines[4].visible = this.chart.primaryYAxis.stripLines[5].visible = visible;\n                if (this.chart.primaryYAxis.stripLines[4].visible) {\n                    this.chart.primaryYAxis.stripLines[4].segmentStart = this.chart.primaryYAxis.stripLines[5].segmentStart = Segments[seriesIndex][0];\n                    this.chart.primaryYAxis.stripLines[4].segmentEnd = this.chart.primaryYAxis.stripLines[5].segmentEnd = Segments[seriesIndex][1];\n                    seriesIndex++;\n                }\n            }\n            else {\n                this.chart.primaryYAxis.stripLines[6].visible = this.chart.primaryYAxis.stripLines[7].visible = visible;\n                if (this.chart.primaryYAxis.stripLines[6].visible) {\n                    this.chart.primaryYAxis.stripLines[6].segmentStart = this.chart.primaryYAxis.stripLines[7].segmentStart = Segments[seriesIndex][0];\n                    this.chart.primaryYAxis.stripLines[6].segmentEnd = this.chart.primaryYAxis.stripLines[7].segmentEnd = Segments[seriesIndex][1];\n                    seriesIndex++;\n                }\n            }\n        }\n        this.chart.refresh();\n    }\n\n    public primaryXAxis: Object = {\n        valueType: 'Category',\n        majorGridLines: { width: 0 },\n        labelStyle: { size: \"0px\" },\n        majorTickLines: { width: 0 }\n    };\n    public primaryYAxis: Object = {\n        title: \"Sales in Percentage\",\n        labelFormat: \"{value}%\",\n        maximum: 120,\n        lineStyle: { width: 0 },\n        majorTickLines: { width: 0 },\n        stripLines: [\n            {\n                isSegmented: true, start: 33, end: 35.5, visible: true, segmentStart: 0, segmentEnd: 5,\n            },\n            {\n                isSegmented: true, start: 39, end: 39.2, visible: true, text: \"Jan - Mar\", segmentStart: 0, segmentEnd: 5, color: \"transparent\"\n            },\n            {\n                isSegmented: true, start: 65, end: 67.5, visible: true, segmentStart: 7, segmentEnd: 12,\n            },\n            {\n                isSegmented: true, start: 70, end: 70.2, visible: true, text: \"Apr - Jun\", segmentStart: 7, segmentEnd: 12, color: \"transparent\"\n            },\n            {\n                isSegmented: true, start: 65, end: 67.5, visible: true, segmentStart: 14, segmentEnd: 19,\n            },\n            {\n                isSegmented: true, start: 70, end: 70.2, visible: true, text: \"Jul - Sep\", segmentStart: 14, segmentEnd: 19, color: \"transparent\"\n            },\n            {\n                isSegmented: true, start: 104, end: 106.5, visible: true, segmentStart: 21, segmentEnd: 26,\n            },\n            {\n                isSegmented: true, start: 109, end: 109.2, visible: true, text: \"Oct - Dec\", segmentStart: 21, segmentEnd: 26, color: \"transparent\"\n            }\n        ]\n    };\n\n    public enableAnimation: boolean = false;\n    \n    public enableSideBySidePlacement: boolean = false;\n\n    public selectionMode: string =  'Point';\n\n    public selectionPattern: string =  'DiagonalForward';\n\n    public legendSettings: Object = {\n        enable: true,\n    };\n\n    public zoomSettings: Object = {\n        enableSelectionZooming: true,\n    };\n\n    public chartArea: Object = {\n        border: {\n            width: 0\n        }\n    };\n    //Initializing Chart Series\n    public data1: Object[] = [\n        { Month: 'Jan 15', Sales: 10 },\n        { Month: 'Jan 31', Sales: 15 },\n        { Month: 'Feb 15', Sales: 15 },\n        { Month: 'Feb 28', Sales: 20 },\n        { Month: 'March 15', Sales: 20 },\n        { Month: 'March 31', Sales: 25 },\n        { Month: 'March', Sales: null },\n    ];\n\n    public data2: object[] = [\n        { Month: 'Apr 15', Sales: 36 },\n        { Month: 'Apr 30', Sales: 48 },\n        { Month: 'May 15', Sales: 43 },\n        { Month: 'May 31', Sales: 59 },\n        { Month: 'Jun 15', Sales: 35 },\n        { Month: 'Jun 30', Sales: 50 },\n        { Month: 'Jun', Sales: null },\n    ];\n\n    public data3: object[] = [\n        { Month: 'Jul 15', Sales: 30 },\n        { Month: 'Jul 31', Sales: 45 },\n        { Month: 'Aug 15', Sales: 30 },\n        { Month: 'Aug 31', Sales: 55 },\n        { Month: 'Sep 15', Sales: 57 },\n        { Month: 'Sep 30', Sales: 60 },\n        { Month: 'Sep', Sales: null },\n    ];\n\n    public data4: object[] = [\n        { Month: 'Oct 15', Sales: 60 },\n        { Month: 'Oct 31', Sales: 70 },\n        { Month: 'Nov 15', Sales: 70 },\n        { Month: 'Nov 30', Sales: 70 },\n        { Month: 'Dec 15', Sales: 90 },\n        { Month: 'Dec 31', Sales: 100 },\n    ];\n\n    //Initializing User Interaction Tooltip\n    public tooltip: object = {\n        enable: true,\n    };\n\n    //Initializing Chart title\n    public title: string = 'Quarterly Sales Chart';\n\n    public width: string = Browser.isDevice ? '100%' : '75%';\n\n    public legendClick(args: ILegendClickEventArgs) {\n        let seriesIndex = 0;\n        this.getStriplineValues(args.series.name);\n    };\n\n    // custom code start\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        let materialColors: string[] = [\"#00bdae\", \"#404041\", \"#357cd2\", \"#e56590\", \"#f8b883\", \"#70ad47\", \"#dd8abd\", \"#7f84e8\", \"#7bb4eb\",\n            \"#ea7a57\", \"#404041\", \"#00bdae\"];\n        let materialDarkColors: string[] = [\"#9ECB08\", \"#56AEFF\", \"#C57AFF\", \"#61EAA9\", \"#EBBB3E\", \"#F45C5C\", \"#8A77FF\", \"#63C7FF\", \"#FF84B0\",\n            \"#F7C928\"];\n        let fabricColors: string[] = [\"#4472c4\", \"#ed7d31\", \"#ffc000\", \"#70ad47\", \"#5b9bd5\", \"#c1c1c1\", \"#6f6fe2\", \"#e269ae\", \"#9e480e\",\n            \"#997300\", \"#4472c4\", \"#70ad47\", \"#ffc000\", \"#ed7d31\"];\n        let bootstrapColors: string[] = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\",\n            \"#b91c52\"];\n        let highContrastColors: string[] = [\"#79ECE4\", \"#E98272\", \"#DFE6B6\", \"#C6E773\", \"#BA98FF\", \"#FA83C3\", \"#00C27A\", \"#43ACEF\", \"#D681EF\",\n            \"#D8BC6E\"];\n        let bootstrap5Colors: string[] = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754',\n            '#0DCAF0'];\n        let bootstrap5DarkColors: string[] = ['#FD7E14', '#6610F2', '#6F42C1', '#D63384', '#DC3545', '#FFC107', '#198754',\n            '#0DCAF0'];\n        let fluentColors: string[] = ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D', \n            '#7D39C0'];\n        let fluentDarkColors: string[] =  ['#1AC9E6', '#DA4CB2', '#EDBB40', '#AF4BCF', '#FF7266', '#1BD565', '#EE993D', '#5887FF', '#EC548D', \n            '#7D39C0'];\n        let tailwindColors: string[] = [\"#5A61F6\", \"#65A30D\", \"#334155\", \"#14B8A6\", \"#8B5CF6\", \"#0369A1\", \"#F97316\", \"#9333EA\", \"#F59E0B\",\n            \"#15803D\"];\n        let tailwindDarkColors: string[] = [\"#8B5CF6\", \"#22D3EE\", \"#F87171\", \"#4ADE80\", \"#E879F9\", \"#FCD34D\", \"#F97316\", \"#2DD4BF\", \"#F472B6\",\n            \"#10B981\"];\n        let tailwind3Colors: string[] = ['#2F4074', '#03B4B4', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822'];\n        let tailwind3DarkColors: string[] = ['#8029F1', '#1ABC9C', '#0D72DE', '#FF5733', '#D63384', '#F39C12', '#EF291F', '#91C822'];\n        let material3Colors: string[] = [\"#6355C7\", \"#00AEE0\", \"#FFB400\", \"#F7523F\", \"#963C70\", \"#FD7400\", \"#4BE0BC\", \"#2196F5\", \"#DE3D8A\", \"#162F88\"];\n        let material3DarkColors: string[] = [\"#4EAAFF\", \"#FA4EAB\", \"#FFF500\", \"#17EA58\", \"#38FFE7\",\n        \"#FF9E45\", \"#B3F32F\", \"#B93CE4\", \"#FC5664\", \"#9B55FF\"];\n        let fabricDark: string[] =  [\"#4472C4\", \"#ED7D31\", \"#FFC000\", \"#70AD47\"];   \n        let bootstrap4Colors: string[] =  ['#a16ee5', '#f7ce69', '#55a5c2', '#7ddf1e', '#ff6ea6','#7953ac', '#b99b4f', '#407c92', '#5ea716', '#b91c52'];\n        let bootstrapdarkColors: string[] = [\"#a16ee5\", \"#f7ce69\", \"#55a5c2\", \"#7ddf1e\", \"#ff6ea6\", \"#7953ac\", \"#b99b4f\", \"#407c92\", \"#5ea716\", \"#b91c52\"];\n        let fluent2Colors: string[] = [\"#6200EE\", \"#09AF74\", \"#0076E5\", \"#CB3587\", \"#E7910F\", \"#0364DE\", \"#66CD15\", \"#F3A93C\", \"#107C10\",\n            \"#C19C00\"];\n        let fluent2HighContrastColors: string[] = [\"#9BB449\", \"#2A72D5\", \"#43B786\", \"#3F579A\", \"#584EC6\", \"#E85F9C\", \"#6E7A89\", \"#EA6266\",\n            \"#0B6A0B\", \"#C19C00\"];\n\n        let FontColor: string = \"#353535\";\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        FontColor = args.chart.theme.indexOf(\"dark\") > -1 || args.chart.theme.indexOf(\"highcontrast\") > -1 ? \"#F3F2F1\" : \"#353535\";\n        let FillColors: string[];\n        let TextColor: string;\n            if (args.chart.theme === 'MaterialDark') {\n                FillColors = materialDarkColors;\n                TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'Material') {\n                FillColors = materialColors;\n                TextColor = \"#000000\";\n            }\n            else if (args.chart.theme === \"Fabric\" ) {\n                FillColors = fabricColors;\n                TextColor = \"#000000\";\n            }\n            else if (args.chart.theme=== 'FabricDark') {\n                FillColors = fabricDark;\n                TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'Bootstrap5Dark') {\n                FillColors = bootstrap5DarkColors;\n                TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'Bootstrap4') {\n                FillColors = bootstrap4Colors;\n                TextColor = \"#000000\";\n            }\n            else if (args.chart.theme === 'Bootstrap5') {\n                FillColors = bootstrap5Colors;\n                TextColor = \"#000000\";\n            }\n            else if (args.chart.theme === \"Bootstrap\") {\n                FillColors = bootstrapColors;\n                TextColor = \"#000000\";\n            }\n            else if (args.chart.theme === 'BootstrapDark'){\n                FillColors = bootstrapdarkColors;\n                TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'TailwindDark') {\n                FillColors = tailwindDarkColors;\n                TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'Tailwind') {\n                FillColors = tailwindColors;\n                TextColor = \"#000000\";\n            }\n            else if (args.chart.theme===\"HighContrast\") {\n                FillColors = highContrastColors;\n                TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'Fluent') {\n                FillColors = fluentColors;\n                TextColor = '#000000'\n            }\n            else if (args.chart.theme === 'FluentDark') {\n                FillColors = fluentDarkColors;\n                 TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'Material3') {\n                FillColors = material3Colors;\n                 TextColor = \"#000000\";\n            }\n            else if (args.chart.theme === 'Material3Dark') {\n                FillColors = material3DarkColors;\n                 TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'Fluent2') {\n                FillColors = fluent2Colors;\n                TextColor = \"#000000\";\n            }\n            else if (args.chart.theme === 'Fluent2HighContrast' || args.chart.theme === 'Fluent2Dark') {\n                FillColors = fluent2HighContrastColors;\n                TextColor = \"#FFFFFF\";\n            } else if (args.chart.theme === 'Tailwind3Dark') {\n                FillColors = tailwind3DarkColors;\n                TextColor = \"#FFFFFF\";\n            }\n            else if (args.chart.theme === 'Tailwind3') {\n                FillColors = tailwind3Colors;\n                TextColor = \"#000000\";\n            }\n            else {\n                FillColors = fluentColors;\n                TextColor = \"#FFFFFF\";\n            }\n            args.chart.primaryYAxis.stripLines[0].color = FillColors[0 % 10];\n            args.chart.primaryYAxis.stripLines[1].textStyle.color = TextColor;\n            args.chart.primaryYAxis.stripLines[2].color = FillColors[1 % 10];\n            args.chart.primaryYAxis.stripLines[3].textStyle.color = TextColor;\n            args.chart.primaryYAxis.stripLines[4].color = FillColors[2 % 10];\n            args.chart.primaryYAxis.stripLines[5].textStyle.color = TextColor;\n            args.chart.primaryYAxis.stripLines[6].color = FillColors[3 % 10];\n            args.chart.primaryYAxis.stripLines[7].textStyle.color = TextColor;\n    };\n} \n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div id=\"container\"  align=\"center\">\n        <ejs-chart #chart id='keyboardcontainer' [chartArea]='chartArea' [width]='width' align='center' style=\"display:block;\" [title]='title' [primaryXAxis]='primaryXAxis' [primaryYAxis]='primaryYAxis'\n          [tooltip]='tooltip' (load)='load($event)' [zoomSettings]='zoomSettings' [enableAnimation]='enableAnimation' \n          [enableSideBySidePlacement]=\"enableSideBySidePlacement\"\n          [legendSettings]='legendSettings'\n          [selectionMode]=\"selectionMode\"\n          [selectionPattern]=\"selectionPattern\"\n          (legendClick)=\"legendClick($event)\">\n            <e-series-collection>\n                <e-series [dataSource]='data1' type='Column' xName='Month' yName='Sales' name='Quarter 1'  width=2 > </e-series>\n                <e-series [dataSource]='data2' type='Column' xName='Month' yName='Sales' name='Quarter 2'  width=2 > </e-series>\n                <e-series [dataSource]='data3' type='Column' xName='Month' yName='Sales' name='Quarter 3'  width=2 > </e-series>\n                <e-series [dataSource]='data4' type='Column' xName='Month' yName='Sales' name='Quarter 4'  width=2 > </e-series>\n            </e-series-collection>\n        </ejs-chart>\n    </div>\n</div>\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>\n","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}