{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { ILoadedEventArgs, IAxisRangeCalculatedEventArgs, ChartAnnotationSettingsModel, ChartTheme, ChartAllModule, Series } from '@syncfusion/ej2-angular-charts';\nimport { Browser } from '@syncfusion/ej2-base';\n\n\n\n/**\n * Sample for Spline Series\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ ChartAllModule, ]\n})\nexport class AppComponent {\n    public annotations: ChartAnnotationSettingsModel[] = [\n        {\n            x: new Date(2000, 5, 2, 2, 0, 1),\n            region: \"Series\",\n            coordinateUnits: 'Point',\n            y: 140,\n            content: `<div></div>`\n        }\n    ];\n    public chartArea: Object = {\n        border: {\n            width: 0\n        }\n    };\n    public width: string = Browser.isDevice ? '100%' : '90%';\n    //Initializing Primary X Axis\n    public primaryXAxis: Object = {\n        valueType: 'DateTime', \n        interval: Browser.isDevice ? 8 : 4, \n        crosshairTooltip: { enable: true }, \n        edgeLabelPlacement: Browser.isDevice ? 'None' : 'Shift',\n        majorGridLines: { width: 0 },\n        labelIntersectAction: 'Hide'\n    };\n    //Initializing Primary Y Axis\n    public primaryYAxis: Object = {\n        interval: 20, \n        opposedPosition: true, \n        minimum: 120, \n        crosshairTooltip: { enable: true }, \n        lineStyle: { width: 0 },\n        majorGridLines: { width: 1 }, \n        majorTickLines: { width: 0 }\n    };\n    public getData = (): { series: Candlestick[] } => {\n        let value: number = 180;\n        let series: Candlestick[] = [];\n        let point: Candlestick;\n        for (let i: number = 0; i < 30; i++) {\n        value = 180 + Math.round((Math.random() * 25) * Math.sin(i * Math.PI / 8)); // Adjust the function as needed\n        value = Math.max(140, Math.min(260, value));\n        if (value > 260) {\n            value = 260;\n        }\n        if (value < 140) {\n            value = 140;\n        }\n            let open: number = value + Math.round(Math.random() * 18);\n            let low: number = Math.min(value, open) - Math.round(Math.random() * 6);\n            let high: number = Math.min(220, Math.max(value, open) + Math.round(Math.random() * 15));\n            point = {\n                x: new Date(2000, 5, 2, 2, 0, i),\n                close: value,\n                open: open,\n                low: low,\n                high: high\n            };\n            series.push(point);\n        }\n        return { series: series };\n    };\n    public data: Candlestick[] = this.getData().series;\n    public updateVal: number = this.data.length;\n    public incVal: number = 0;\n    public pointAdded: boolean = false;\n    private intervalId: any;\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Fluent2';\n        args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n        let chart: this = this;\n        this.clearInterval(); // Clear any existing interval\n        this.intervalId = setInterval(function () {\n            var container = document.getElementById('stock');\n            if (container && container.id === args.chart.element.id) {\n                let newData1: Candlestick[] = [];\n                let value: number = 180;\n                chart.pointAdded = true;\n                for (let i: number = 0; i < (args.chart.series[0].dataSource as Object[]).length; i++) {\n                    newData1.push(Object.assign({}, args.chart.series[0].dataSource[i]));\n                }\n                if (newData1.length > 0) {\n                    const lastIndex: number = newData1.length - 1;\n                    const previousClose: number = newData1[lastIndex].close;\n                    newData1[lastIndex].close += (Math.random() < 0.5 ? 1 : -1) * Math.random() * 25;\n                    newData1[lastIndex].close = Math.min(Math.min(Math.max(newData1[lastIndex].close, newData1[lastIndex].low + 5), newData1[lastIndex].high - 5), newData1[lastIndex].open - 2);\n                    if (previousClose === newData1[lastIndex].close) {\n                        newData1[lastIndex].close -= 5;\n                    }\n                }\n                if (chart.incVal < 10) {\n                    if (args.chart.series.length > 0) {\n                        args.chart.series[0].setData(newData1);\n                        chart.incVal++;\n                    }\n                }\n                else {\n                    let change: number = Math.round((Math.random() < 0.49 ? 1 : -1) * Math.random() * 10);\n                    value += change;\n                    if (value > 260) {\n                        value = 260;\n                    }\n                    if (value < 140) {\n                        value = 140;\n                    }\n                    let open: number = value + Math.round(Math.random() * 12);\n                    let low: number = Math.min(value, open) - Math.round(Math.random() * 8);\n                    let high: number = Math.max(value, open) + Math.round(Math.random() * 15);\n                    if (args.chart.series.length > 0) {\n                        var lastDataPointIndex = (args.chart.series[0].dataSource as []).length - 1;\n                        if (lastDataPointIndex >= 0) {\n                            var timestamp = args.chart.series[0].dataSource[lastDataPointIndex].x;\n                            var lastTimestamp = new Date(timestamp).getTime();\n                            args.chart.series[0].addPoint({ x: new Date(lastTimestamp + 1000), high: high, low: low, open: open, close: value });\n                        }\n                    }\n                    chart.incVal = 0;\n                    chart.updateVal++;\n                }\n            } else {\n                this.clearInterval();\n            }\n        }, 1000);\n    };\n\n    private clearInterval(): void {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n        }\n    }\n \n    public axisRangeCalculated (args: IAxisRangeCalculatedEventArgs): void {\n        if (args.axis.name === 'primaryXAxis') {\n            let lastPoint: Object = args.axis.series[0].points[args.axis.series[0].points.length - 1].x;\n            args.maximum = new Date(Number(lastPoint)).getTime() + 2500;\n            let firstPoint: Object = args.axis.series[0].points[0].x;\n            args.minimum = new Date(Number(firstPoint)).getTime() + 500;\n        }\n    }\n    public pointRender (args): void {\n        if (args.series.chart.enableRtl) {\n            args.series.chart.annotations[0].x = 0;\n        }\n        if (this.pointAdded && args.series.points[args.series.points.length - 1] === args.point) {\n            const firstPoint = args.series.chart.enableRtl ? args.series.points[args.series.points.length - 1].x : args.series.points[0].x;\n            args.series.chart.annotations[0].x = new Date(Number(firstPoint)).getTime() + (args.series.chart.enableRtl ? 2000 : 1000);\n            args.series.chart.annotations[0].y = args.point.close;\n            args.series.chart.annotations[0].content = `<div style=\"width: ${args.series.chart.initialClipRect.width}px; height: 0; left: ${Browser.isDevice ? -10 : -16}px; position: absolute;\">\n            <svg width=\"100%\" height=\"2\" style=\"display: block;\">\n              <line x1=\"0\" y1=\"1\" x2=\"${args.series.chart.initialClipRect.width}\" y2=\"1\" \n                style=\"stroke:#868180; stroke-width:0.75; stroke-dasharray:5,5;\" />\n            </svg>\n          </div>\n          <div style=\"width: 40px; height: 18px; background-color: ${args.fill}; border: 1px solid rgba(48, 153, 245, 0.4); color: white; font-size: 11px; display: flex; align-items: center; justify-content: center; text-align: center; line-height: 18px; position: absolute; left: ${(args.series.chart.enableRtl ? -args.series.chart.initialClipRect : args.series.chart.initialClipRect.width - 20)}px; top: -9px;\">\n            ${(args.point.close as number).toFixed(2)}\n        </div>`;\n        }\n    };\n    public title: string = 'AAPL Historical';\n    public crosshair: Object = { enable: true, dashArray: '5,5' };\n    constructor() {\n        //code\n    };\n    ngOnDestroy(): void {\n        this.clearInterval();\n    }\n}\ninterface Candlestick {\n    open: number;\n    close: number;\n    high: number;\n    low: number;\n    x: Date;\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div align='center'>\n        <ejs-chart id='stock' align='center' [chartArea]='chartArea' [width]='width' style='display:block;' [primaryXAxis]='primaryXAxis'\n            [primaryYAxis]='primaryYAxis' (load)='load($event)' (pointRender)='pointRender($event)' (axisRangeCalculated)='axisRangeCalculated($event)' \n            [title]='title' [crosshair]='crosshair' [annotations]='annotations'>\n            <e-series-collection>\n                <e-series [dataSource]='data' type='Candle' xName='x' low='low' high='high' open='open' close='close' columnWidth=0.4 bearFillColor='#2ecd71' bullFillColor='#e74c3d'> </e-series>\n            </e-series-collection>\n        </ejs-chart>\n    </div>\n</div>\n\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n</style>","app.component.css":".control-fluid {\n    padding: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-layouts\":\"*\",\"@syncfusion/ej2-angular-layouts\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}