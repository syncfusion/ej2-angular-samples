{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, OnInit, ViewChild } from '@angular/core';\nimport { IDataOptions, IDataSet, PivotView,PivotViewModule, DisplayOption, PivotChartService, QueryCellInfoEventArgs } from '@syncfusion/ej2-angular-pivotview';\nimport { ButtonComponent, ButtonModule } from '@syncfusion/ej2-angular-buttons';\nimport { NumericTextBoxComponent, NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { ChartSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings';\nimport { GridSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings';\nimport { enableRipple } from '@syncfusion/ej2-base';\nimport { Observable } from 'rxjs';\nimport { ILoadedEventArgs, ChartTheme } from '@syncfusion/ej2-charts';\nimport { NgClass } from '@angular/common';\n\n\nenableRipple(false);\n\n/**\n * Pivot Table LiveData Sample.\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['app.component.css'],\n    providers: [PivotChartService],\n    standalone: true,\n    imports: [PivotViewModule,   NumericTextBoxModule, ButtonModule, NgClass]\n})\n\nexport class AppComponent {\n    public observable = new Observable();\n    public chartSettings: ChartSettings;\n    public displayOption: DisplayOption;\n    public dataSourceSettings: IDataOptions;\n    public gridSettings: GridSettings;\n    public colourScheme: string[] = ['bg-fade', 'bg-fade1', 'bg-fade2'];\n    public timerID: any;\n    public initial: boolean = true;\n    public previousPivotValues: any;\n    public REGIONS: any = [\n        {\n            \"Region\": \"North America\",\n            \"Countries\": [\"Canada\", \"United States\", \"Mexico\"]\n        },\n        {\n            \"Region\": \"Middle East\",\n            \"Countries\": [\"Turkey\", \"Saudi Arabia\"]\n        },\n        {\n            \"Region\": \"Europe\",\n            \"Countries\": [\"Russia\", \"Germany\", \"France\", \"United Kingdom\", \"Italy\"]\n        },\n        {\n            \"Region\": \"Africa\",\n            \"Countries\": [\"South Africa\"]\n        },\n        {\n            \"Region\": \"Asia Pacific\",\n            \"Countries\": [\"Australia\", \"China\", \"India\", \"Indonesia\",\n                \"Japan\", \"South Korea\"]\n        },\n        {\n            \"Region\": \"South America\",\n            \"Countries\": [\"Brazil\"]\n        }\n    ];\n    public DATA: IDataSet[] = [\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Corn\",\n            \"Spread\": 0.01,\n            \"Open Price\": 379.50,\n            \"Price\": 379.8026,\n            \"Buy\": 379.7976,\n            \"Sell\": 379.8076,\n            \"Change\": 0.3026,\n            \"Change(%)\": 0.0797,\n            \"Volume\": 11266\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Rice\",\n            \"Spread\": 0.01,\n            \"Open Price\": 11.245,\n            \"Price\": 10.4154,\n            \"Buy\": 10.4104,\n            \"Sell\": 10.4204,\n            \"Change\": -0.8296,\n            \"Change(%)\": -7.3779,\n            \"Volume\": 220\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Wheat\",\n            \"Spread\": 0.01,\n            \"Open Price\": 465.50,\n            \"Price\": 465.52,\n            \"Buy\": 465.50,\n            \"Sell\": 465.50,\n            \"Change\": 0.02,\n            \"Change(%)\": 0.0043,\n            \"Volume\": 4318\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Soybean\",\n            \"Spread\": 0.01,\n            \"Open Price\": 1038.00,\n            \"Price\": 1038.6171,\n            \"Buy\": 1038.6121,\n            \"Sell\": 1038.6221,\n            \"Change\": 0.6171,\n            \"Change(%)\": 0.0595,\n            \"Volume\": 20356\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Coffee\",\n            \"Spread\": 0.01,\n            \"Open Price\": 125.70,\n            \"Price\": 125.69,\n            \"Buy\": 125.70,\n            \"Sell\": 125.70,\n            \"Change\": -0.01,\n            \"Change(%)\": -0.008,\n            \"Volume\": 1654\n        },\n        {\n            \"Category\": \"Agriculture\",\n            \"Type\": \"Cocoa\",\n            \"Spread\": 0.01,\n            \"Open Price\": 307.00,\n            \"Price\": 307.03,\n            \"Buy\": 307.00,\n            \"Sell\": 307.00,\n            \"Change\": 0.03,\n            \"Change(%)\": 0.001,\n            \"Volume\": 978\n        },\n    ]\n\n    @ViewChild('pivotview')\n    public pivotObj: PivotView;\n\n    @ViewChild('update')\n    public updateButton: ButtonComponent;\n    @ViewChild('clear')\n    public clearButton: ButtonComponent;\n    @ViewChild('feeddelay')\n    public feedDelayInput: NumericTextBoxComponent;\n\n    destroyClear(_args: any): void {\n        if (this.timerID) {\n            clearInterval(this.timerID);\n            this.timerID = undefined;\n        }\n    }\n\n    generateData(): any {\n        const count: number = 1000;\n        const currData: Object[] = [];\n        let j: number = 0;\n        for (let i: number = 0; i < count; i++) {\n            const rand: number = Math.floor(Math.random() * Math.floor(this.DATA.length));\n            const region = this.REGIONS[j];\n            for (let k = 0; k < region.Countries.length; k++) {\n                const data = Object.assign({}, this.DATA[rand]);\n                const dataObj = {\n                    ...data,\n                    Region: region.Region,\n                    Country: region.Countries[k]\n                };\n                this.randomizeObjectData(dataObj);\n                currData.push(dataObj);\n            }\n            j++;\n            j = j > 5 ? 0 : j;\n        }\n        return currData;\n    }\n\n    randomizeObjectData(dataObj: any): any {\n        const changeP = \"Change(%)\";\n        const res: any = this.generateNewPrice(dataObj.Price, dataObj.Volume);\n        dataObj.Change = res.Price - dataObj.Price;\n        dataObj.Price = res.Price;\n        dataObj[changeP] = res.ChangePercent;\n        dataObj.Volume = res.Volume;\n    }\n\n    generateNewPrice(oldPrice: any, oldVolume: any): any {\n        let rnd: number = Math.random();\n        rnd = Math.round(rnd * 100) / 100;\n        const volatility: number = 15;\n        let newPrice: number = 0;\n        let newVolume: number = 0;\n        let changePercent: number = 2 * volatility * rnd;\n        if (changePercent > volatility) {\n            changePercent -= (2 * volatility);\n        }\n        let changeVolumnPercent: number = 2 * (volatility - 5) * rnd;\n        if (changeVolumnPercent > (volatility - 5)) {\n            changeVolumnPercent -= (2 * (volatility - 5));\n        }\n        let changeAmount: number = oldPrice * (changePercent / 100);\n        newPrice = oldPrice + changeAmount;\n        let changeVolume: number = oldVolume * (changeVolumnPercent / 100);\n        newVolume = oldVolume + changeVolume;\n        newPrice = Math.round(newPrice * 100) / 100;\n        newVolume = Math.round((newVolume * 100) / 100);\n        const result = { Price: 0, ChangePercent: 0, Volume: 0 };\n        changePercent = Math.round(changePercent * 100) / 100;\n        result.Price = newPrice;\n        result.ChangePercent = changePercent;\n        result.Volume = newVolume;\n        return result;\n    };\n\n    updateCellValues(): void {\n        if (this.pivotObj.pivotValues.length > 0) {\n            if (!this.previousPivotValues) {\n                this.previousPivotValues = this.pivotObj.pivotValues;\n            }\n            this.previousPivotValues = this.pivotObj.pivotValues;\n        }\n        this.pivotObj.dataSourceSettings.dataSource = this.generateData();\n    };\n    updateClick(): void {\n        if (!this.timerID) {\n            this.updateButton.disabled = true;\n            this.feedDelayInput.enabled = false;\n            this.clearButton.disabled = false;\n            this.timerID = setInterval(this.updateCellValues.bind(this), this.feedDelayInput.value);\n        }\n    };\n    clearClick(): void {\n        if (this.timerID) {\n            this.updateButton.disabled = false;\n            this.feedDelayInput.enabled = true;\n            this.clearButton.disabled = true;\n            clearInterval(this.timerID);\n            this.timerID = undefined;\n        }\n    };\n\n    getCellContent(args): any {\n        if (args != null && args.cellInfo) {\n            if (args.cellInfo.axis === 'value') {\n                if (args.cellInfo.axis === 'value' && !args.cellInfo.isGrandSum && args.cellInfo.actualText === 'Change') {\n                    args.targetCell.classList.add(this.cellColour(args.cellInfo.value));\n                }\n                \n            }\n        }\n    }\n\n    cellColour(value: any): string {\n        let colorIndex: number = value < 0 ? 0 : value > 0 ? 1 : 2;\n        return this.colourScheme[colorIndex];\n    }\n\n    ngOnInit(): void {\n        this.chartSettings = {\n            value: 'Price',\n            legendSettings: { visible: false },\n            chartSeries: { type: \"Column\" },\n            zoomSettings: {\n                enableScrollbar: false,\n                toolbarItems: [],\n                enableSelectionZooming: false,\n            } as any,\n            load: this.observable.subscribe(args => {\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                (args as ILoadedEventArgs).chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n                    selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n            }) as any\n        } as ChartSettings;\n\n        this.displayOption = { view: 'Both' } as DisplayOption;\n\n        this.gridSettings = {\n            columnWidth: 100\n        } as GridSettings;\n\n        this.dataSourceSettings = {\n            dataSource: this.generateData(),\n            enableSorting: true,\n            columns: [{ name: 'Type' }],\n            values: [{ name: 'Volume', caption: 'Volume' }, { name: 'Price', caption: 'Price' }, { name: 'Change', type: 'Avg', caption: 'Change(%)' }],\n            rows: [{ name: 'Country' }],\n            filters: [{ name: 'Category' }],\n            formatSettings: [{ name: 'Price', format: 'C2' }, { name: 'Open Price', format: 'C2' }, { name: 'Change', format: \"###.##'%'\" }, { name: 'Volume', format: 'N0' }],\n            expandAll: false,\n            showSubTotals: false,\n            showGrandTotals: false,\n            emptyCellsTextContent: 'Revising',\n            sortSettings: [{name: 'Type', order: 'Ascending', membersOrder: ['Corn', 'Rice', 'Wheat', 'Soybean', 'Coffee', 'Cocoa']}]\n        };\n    }\n\n    public ngOnDestroy(): void {\n        this.destroyClear(undefined);\n    }\n\n    ngAfterViewInit(args: any): void {\n        if (this.initial) {\n            document.getElementById('update1')?.click();\n            this.initial = false;\n            this.feedDelayInput.element.addEventListener('keypress', (e: any) => {\n                if (e && e.key === 'Enter' && (this.feedDelayInput.element.parentElement as HTMLElement).classList.contains('e-input-focus')) {\n                    this.feedDelayInput.value = parseInt(this.feedDelayInput.element.value);\n                    this.feedDelayInput.focusOut();\n                    this.feedDelayInput.element.click();\n                }\n            });\n        }\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div>\n    <div class='control-pane'>\n        <div class=\"control-section\">\n            <div style=\"margin-bottom: 10px\">\n                <strong style=\"display: inline-block; font-size: 14px; padding-Left: 5px\">Feed Delay(ms):</strong>\n                <ejs-numerictextbox #feeddelay format=\"N0\" value=\"5000\" min=\"5000\" step=\"1000\" width=\"150px\"\n                    style=\"margin-left: 7px;\" placeholder=\"0\">\n                </ejs-numerictextbox>\n                <button #update id=\"update1\" ejs-button (click)=\"updateClick()\" class=\"update-btn\">\n                    Start Updating...\n                </button>\n                <button #clear id=\"clear\" ejs-button (click)=\"clearClick()\" class=\"update-btn\">\n                    Stop Updating...\n                </button>\n            </div>\n            <ejs-pivotview #pivotview id='PivotView-LiveData' [dataSourceSettings]=dataSourceSettings width='100%'\n                height='350' [chartSettings]='chartSettings' [gridSettings]='gridSettings'\n                [displayOption]='displayOption'>\n                <ng-template #cellTemplate let-data>\n                    <span>{{getCellContent(data)}} </span>\n                </ng-template>\n            </ejs-pivotview>\n        </div>\n    </div>\n</div>\n","app.component.css":".e-pivotview {\n    width: 100%;\n    height: 100%;\n}\n\n.sb-sample-content-area {\n    min-height: 255px !important;\n}\n\n.control-section {\n    min-height: 255px !important;\n}\n\n#PivotView-LiveData_chart {\n    margin-top: 15px;\n}\n\n.bg-fade {\n    background-color: #FFEBE9 !important;\n    color: #FF3740 !important;\n}\n\n.bg-fade1 {\n    background-color: #DFFFE2 !important;\n    color: #00A653 !important;\n}\n\n.bg-fade2 {\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.update-btn {\n    margin-left: 10px;\n}\n\n/* Mobile mode */\n@media (max-width: 688px) {\n    .update-btn {\n        margin: 10px 10px 0 0;\n    }\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-pivotview\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings\":\"*\",\"@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}