{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, OnInit, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n    PivotView, FieldListService, CalculatedFieldService,\n    ToolbarService, ConditionalFormattingService, PivotViewModule, ToolbarItems, DisplayOption, GroupingBarService\n} from '@syncfusion/ej2-angular-pivotview';\nimport { GridSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings';\nimport { enableRipple } from '@syncfusion/ej2-base';\nimport { ChartSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings';\nimport { ILoadedEventArgs, ChartTheme } from '@syncfusion/ej2-charts';\nimport { Observable } from 'rxjs';\n\n\nenableRipple(false);\n\n/**\n * Pivot Table Olap Sample\n */\n/* tslint:disable */\ndeclare var require: any;\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['app.component.css'],\n    providers: [CalculatedFieldService, ToolbarService, ConditionalFormattingService, FieldListService, GroupingBarService],\n    standalone: true,\n    imports: [PivotViewModule,  ]\n})\nexport class AppComponent {\n    public dataSourceSettings;\n    public gridSettings: GridSettings;\n    public toolbarOptions: ToolbarItems[];\n    public chartSettings: ChartSettings;\n    public displayOption: DisplayOption;\n    public observable = new Observable();\n\n    @ViewChild('pivotview')\n    public pivotObj: PivotView;\n\n    fetchReport(args: any) {\n        let reportsCollection: string[] = [];\n        let reeportList: string[] = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        reportsCollection.map(function (item: any): void { reeportList.push(item.reportName); });\n        args.reportName = reeportList;\n    }\n    removeReport(args: any) {\n        let reportsCollection: any[] = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        for (let i: number = 0; i < reportsCollection.length; i++) {\n            if (reportsCollection[i].reportName === args.reportName) {\n                reportsCollection.splice(i, 1);\n            }\n        }\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n        }\n    }\n    loadReport(args: any) {\n        let reportsCollection: string[] = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        reportsCollection.map(function (item: any): void {\n            if (args.reportName === item.reportName) {\n                args.report = item.report;\n            }\n        });\n        if (args.report) {\n            this.pivotObj.dataSourceSettings = JSON.parse(args.report).dataSourceSettings;\n        }\n    }\n    beforeToolbarRender(args: any) {\n        args.customToolbar.splice(6, 0, {\n            type: 'Separator'\n        });\n        args.customToolbar.splice(9, 0, {\n            type: 'Separator'\n        });\n    }\n    renameReport(args: any) {\n        let reportsCollection: any[] = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportsCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        if (args.isReportExists) {\n            for (let i: number = 0; i < reportsCollection.length; i++) {\n                if (reportsCollection[i].reportName === args.rename) {\n                    reportsCollection.splice(i, 1);\n                }\n            }\n        }\n        reportsCollection.map(function (item: any): any { if (args.reportName === item.reportName) { item.reportName = args.rename; } });\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            localStorage.pivotviewReports = JSON.stringify(reportsCollection);\n        }\n    }\n    saveReport(args: any) {\n        let report = [];\n        let isSave: boolean = false;\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            report = JSON.parse(localStorage.pivotviewReports);\n        }\n        if (args.report && args.reportName && args.reportName !== '') {\n            report.map(function (item: any): any {\n                if (args.reportName === item.reportName) {\n                    item.report = args.report; isSave = true;\n                }\n            });\n            if (!isSave) {\n                report.push(args);\n            }\n            localStorage.pivotviewReports = JSON.stringify(report);\n        }\n    }\n    newReport() {\n        this.pivotObj.setProperties({ dataSourceSettings: { columns: [], rows: [], values: [], filters: [] } }, false);\n    }\n\n    ngOnInit(): void {\n        this.chartSettings = {\n            title: 'Sales Analysis',\n            chartSeries: { type: 'Column' },\n            load: this.observable.subscribe(args => {\n                let selectedTheme: string = location.hash.split('/')[1];\n                selectedTheme = selectedTheme ? selectedTheme : 'Material';\n                (args as ILoadedEventArgs).chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() +\n                  selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n            }) as any\n        } as ChartSettings;\n\n        this.displayOption = { view: 'Both' } as DisplayOption;\n        this.gridSettings = {\n            columnWidth: 160\n        } as GridSettings;\n\n        this.toolbarOptions = ['New', 'Save', 'SaveAs', 'Rename', 'Remove', 'Load',\n            'Grid', 'Chart', 'MDX', 'Export', 'SubTotal', 'GrandTotal', 'ConditionalFormatting', 'FieldList'] as ToolbarItems[];\n\n        this.dataSourceSettings = {\n            catalog: 'Adventure Works DW 2008 SE',\n            cube: 'Adventure Works',\n            providerType: 'SSAS',\n            url: 'https://bi.syncfusion.com/olap/msmdpump.dll',\n            localeIdentifier: 1033,\n            enableSorting: true,\n            rows: [\n                { name: '[Customer].[Customer Geography]', caption: 'Customer Geography' },\n            ],\n            columns: [\n                { name: '[Product].[Product Categories]', caption: 'Product Categories' },\n                { name: '[Measures]', caption: 'Measures' },\n            ],\n            values: [\n                { name: '[Measures].[Customer Count]', caption: 'Customer Count' },\n                { name: '[Measures].[Internet Sales Amount]', caption: 'Internet Sales Amount' }\n            ],\n            filters: [\n                { name: '[Date].[Fiscal]', caption: 'Date Fiscal' },\n            ]\n        };\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n\n<div class=\"control-section\" id=\"pivot-table-section\">\n    <div>\n        <ejs-pivotview #pivotview id='PivotView' [dataSourceSettings]=dataSourceSettings allowExcelExport='true'\n            allowConditionalFormatting='true' allowPdfExport='true' showToolbar='true' allowCalculatedField='true'\n            showFieldList='true' showGroupingBar='true' enableFieldSearching='true' width='100%' enableValueSorting='true' [chartSettings]='chartSettings'\n            [displayOption]='displayOption' height='500' [gridSettings]='gridSettings' [toolbar]='toolbarOptions'\n            (saveReport)='saveReport($event)' (loadReport)='loadReport($event)' (fetchReport)='fetchReport($event)'\n            (renameReport)='renameReport($event)' (removeReport)='removeReport($event)' (newReport)='newReport()'\n            (toolbarRender)='beforeToolbarRender($event)'>\n        </ejs-pivotview>\n    </div>\n</div>","app.component.css":"#PivotView {\n    width: 100%;\n    height: 100%;\n    display: block;\n}\n\n@media only screen and (max-width: 400px) {\n    #pivot-table-section {\n        overflow: auto;\n    }\n}\n\n#PivotViewcontainerwrapper {\n    height: auto !important;\n}\n\n.e-pivotview .e-pivotchart-type-dialog {\n    max-width: 380px !important;\n    max-height: 380px !important;\n }","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-pivotview\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-pivotview\":\"*\",\"@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-excel-export\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-pdf-export\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}