{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { addClass, createElement, getComponent } from '@syncfusion/ej2-base';\nimport { SignatureComponent } from '@syncfusion/ej2-angular-inputs';\nimport { SplitButton, ItemModel, MenuEventArgs, DropDownButton } from '@syncfusion/ej2-splitbuttons';\nimport { ClickEventArgs } from '@syncfusion/ej2-navigations';\nimport { Button, ChangeEventArgs, CheckBox } from '@syncfusion/ej2-buttons';\nimport { ColorPicker, ColorPickerEventArgs, NumericTextBox, PaletteTileEventArgs, Signature, SignatureFileType } from '@syncfusion/ej2-inputs';\nimport { debugOutputAstAsTypeScript } from '@angular/compiler';\nimport { DropDownList } from '@syncfusion/ej2-angular-dropdowns';\n\n/**\n * Default sample\n */\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n\n})\nexport class AppComponent {\n    @ViewChild('signature') signature: SignatureComponent;\n    public strokeWidth: number = 2;\n    public items: ItemModel[] = [\n    {\n        text: 'Png'\n    },\n    {\n        text: 'Jpeg'\n    },\n    {\n        text: 'Svg'\n    }];\n\n    public templateCheckbox1: any = new CheckBox({\n        label: 'Disabled',\n        checked: false,\n        change: (args: ChangeEventArgs) => {\n            this.signature.disabled = args.checked;\n        }\n    });\n\n    public change(): void {\n        let saveBtn: SplitButton = getComponent(document.getElementById(\"save-option\"), 'split-btn');\n        if (!this.signature.isEmpty()) {\n            this.clearButton();\n           saveBtn.disabled = false;\n        }\n        this.updateUndoRedo();\n    }\n    public onCreate (e: any) {\n        this.templateCheckbox1.appendTo('#chkelement1');\n        let ddl: DropDownList = new DropDownList({\n            dataSource:  [1, 2, 3, 4, 5],\n            width: '60',\n            value: 2,\n            change: function(args) {\n                let signature: Signature = getComponent(document.getElementById(\"signature\"), 'signature');\n                signature.maxStrokeWidth = args.value;\n            } \n        });\n        ddl.appendTo('#stroke-width');\n        new SplitButton({\n            iconCss: 'e-sign-icons e-save',\n            items: this.items,\n            content: 'Save',\n            select: (args: MenuEventArgs) => {\n                this.signature.save(args.item.text as SignatureFileType, 'Signature');\n            },\n            disabled: true\n        }, '#save-option');\n        let strokeColor: ColorPicker = new ColorPicker({\n            modeSwitcher: false,\n            columns: 4,\n            presetColors: {\n                'custom': ['#000000', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4',\n                '#009688', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107']\n            },\n            beforeTileRender: (args: PaletteTileEventArgs) => {\n                args.element.classList.add('e-circle-palette');\n                args.element.appendChild(createElement('span', { className: 'e-circle-selection' }));\n            },\n            showButtons: false,\n            mode: 'Palette',\n            cssClass: 'e-stroke-color', \n            change: (args: ColorPickerEventArgs) => {\n                if (this.signature.disabled) {\n                    return;\n                }\n                let selElem: HTMLElement = strokeColor.element.nextElementSibling.querySelector('.e-selected-color') as HTMLElement;\n                selElem.style.borderBottomColor = args.currentValue.rgba;\n                this.signature.strokeColor = args.currentValue.rgba;\n            }\n        });\n        strokeColor.appendTo('#stroke-color');\n        let bgColor: ColorPicker = new ColorPicker({\n            modeSwitcher: false,\n            columns: 4,\n            noColor: true,\n            presetColors: {\n                'custom': ['#ffffff', '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4',\n                '#009688', '#8bc34a', '#cddc39', '#ffeb3b']\n            },\n            beforeTileRender: (args: PaletteTileEventArgs) => {\n                args.element.classList.add('e-circle-palette');\n                args.element.appendChild(createElement('span', { className: 'e-circle-selection' }));\n            },\n            showButtons: false,\n            mode: 'Palette',\n            cssClass: 'e-bg-color',\n            change: (args:ColorPickerEventArgs) => {\n                if (this.signature.disabled) {\n                    return;\n                }\n                let selElem: HTMLElement = bgColor.element.nextElementSibling.querySelector('.e-selected-color') as HTMLElement;\n                this.signature.backgroundColor = args.currentValue.rgba;\n                selElem.style.borderBottomColor = args.currentValue.rgba;\n            }\n        });\n        bgColor.appendTo('#bg-color');\n      \n        addClass([strokeColor.element.nextElementSibling.querySelector('.e-selected-color')], 'e-sign-icons');\n        addClass([bgColor.element.nextElementSibling.querySelector('.e-selected-color')], 'e-sign-icons');\n        document.getElementById('save-option').addEventListener('click', this.saveBtnClick);\n        this.clearButton();\n        let toolbarlItems: NodeListOf<Element> = document.querySelectorAll('.e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-tbtn-txt');\n        for (var i = 0; i < toolbarlItems.length; i++) {\n            if (toolbarlItems[i].children[0].classList.contains('e-undo')) {\n                let undoButton: Button = getComponent(toolbarlItems[i] as HTMLElement, 'btn');\n                undoButton.disabled = true;\n            }\n            if (toolbarlItems[i].children[0].classList.contains('e-redo')) {\n                let redoButton: Button = getComponent(toolbarlItems[i] as HTMLElement, 'btn');\n                redoButton.disabled = true;\n            }\n        }\n    }\n\n    public clicked(args: ClickEventArgs): void {\n        let saveBtn: SplitButton = getComponent(document.getElementById(\"save-option\"), 'split-btn');\n        if (this.signature.disabled && args.item.tooltipText != 'Disabled') {\n            return;\n        }\n        switch (args.item.tooltipText) {\n            case 'Undo (Ctrl + Z)':\n                if (this.signature.canUndo()) {\n                    this.signature.undo();\n                    this.updateUndoRedo();\n                    this.updateSaveBtn();\n                }\n                break;\n            case 'Redo (Ctrl + Y)':\n                if (this.signature.canRedo()) {\n                    this.signature.redo();\n                    this.updateUndoRedo();\n                    this.updateSaveBtn();\n                }\n                break;\n            case 'Clear':\n                this.signature.clear();\n                if (this.signature.isEmpty) {\n                    this.clearButton();\n                    saveBtn.disabled = true;\n                }\n                break;\n        }\n    }\n\n    public saveBtnClick(): void {\n        let signature: Signature = getComponent(document.getElementById(\"signature\"), 'signature');\n        signature.save();\n    }\n\n    public clearButton() {\n        let tlItems: NodeListOf<Element> = document.querySelectorAll('.e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-tbtn-txt');\n        for (var i = 0; i < tlItems.length; i++) {\n            if (tlItems[i].children[0].classList.contains('e-clear')) {\n                let clrBtn: Button = getComponent(tlItems[i] as HTMLElement, 'btn');\n                if (this.signature.isEmpty()) {\n                    clrBtn.disabled = true;\n                } else {\n                    clrBtn.disabled = false;\n                }\n            }\n        }\n    }\n\n    public updateSaveBtn() {\n        let saveBtn: SplitButton = getComponent(document.getElementById(\"save-option\"), 'split-btn');\n        if (this.signature.isEmpty()) {\n            saveBtn.disabled = true;\n        }\n    }\n\n    public updateUndoRedo() {\n        let undoButton: Button; let redoButton: Button\n        let tlItems: NodeListOf<Element> = document.querySelectorAll('.e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-tbtn-txt');\n        for (var i = 0; i < tlItems.length; i++) {\n            if (tlItems[i].children[0].classList.contains('e-undo')) {\n                undoButton = getComponent(tlItems[i] as HTMLElement, 'btn'); \n            }\n            if (tlItems[i].children[0].classList.contains('e-redo')) {\n                redoButton = getComponent(tlItems[i] as HTMLElement, 'btn');\n            }\n        }\n        if (this.signature.canUndo()) {\n            undoButton.disabled = false;\n        } else {\n            undoButton.disabled = true;\n        }\n        if (this.signature.canRedo()) {\n            redoButton.disabled = false;\n        } else {\n            redoButton.disabled = true;\n        }\n    }\n}","app/app.module.ts":"import { TabModule, ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { UploaderModule, SignatureModule, TextBoxModule, NumericTextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { CheckBoxModule, ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { ColorPickerModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, ColorPickerModule, BrowserModule, CheckBoxModule, DropDownListModule, TabModule, ToolbarModule, UploaderModule, SignatureModule, TextBoxModule, DialogModule, ButtonModule, NumericTextBoxModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"\n<div class=\"col-lg-12 control-section\">\n    <div id=\"signature-toolbar-control\">\n        <ejs-toolbar id=\"toolbar\" (created)=\"onCreate($event)\" (clicked)=\"clicked($event)\" width=\"100%\">\n            <e-items>\n                <e-item text='Undo' prefixIcon='e-icons e-undo' tooltipText='Undo (Ctrl + Z)'></e-item>\n                <e-item text='Redo' prefixIcon='e-icons e-redo' tooltipText='Redo (Ctrl + Y)'></e-item>\n                <e-item type='Separator'></e-item>\n                <e-item tooltipText= 'Save (Ctrl + S)' type='Button' template= '<button id=\"save-option\"></button>'>\n                </e-item>\n                <e-item type='Separator'></e-item>\n                <e-item tooltipText= 'Stroke Color' template= '<input id=\"stroke-color\" type=\"color\"/>'>\n                </e-item>\n                <e-item type='Separator'></e-item>\n                <e-item tooltipText= 'Background Color' type= 'Input' template= '<input id=\"bg-color\" type=\"color\"/>'></e-item>\n                <e-item type='Separator'></e-item>\n                <e-item tooltipText= 'Stroke Width' type= 'Input' template= '<input id=\"stroke-width\" type=\"text\"/>'></e-item>\n                <e-item type='Separator'></e-item>\n                <e-item text= 'Clear' prefixIcon= 'e-sign-icons e-clear' tooltipText= 'Clear'></e-item>\n                <e-item tooltipText= 'Disabled' type='Input' template='<input id=\"chkelement1\" type=\"checkbox\"/>' align='Right'></e-item>\n            </e-items>\n        </ejs-toolbar>\n        <div id=\"signature-control\">\n            <canvas ejs-signature #signature id=\"signature\" [maxStrokeWidth]=\"strokeWidth\" style=\"height: 100%; width: 100%;\" (change)=\"change()\"></canvas>\n        </div>\n    </div>\n</div>\n\n","app.component.css":"@font-face {\n    font-family: 'font-icons';\n    src:\n    url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n\n.e-sign-icons {\n    font-family: 'font-icons' !important;\n    font-size: 55px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n#signature-toolbar-control {\n    border: 1px solid lightgray;\n}\n\n.highcontrast #signature-toolbar-control  {\n    border: 1px solid white;\n}\n\n#signature-toolbar-control #toolbar {\n    border: none;\n    border-bottom: 1px solid lightgray;\n    box-sizing: border-box;\n}\n\n/* custom code start */\n\n#signature-toolbar-control div#toolbar {\n    height: 44px !important;\n}\n\n.e-bigger #signature-toolbar-control #toolbar {\n    height: 54px !important;\n}\n\n.e-bigger .material #signature-toolbar-control div#toolbar,\n.e-bigger .material-dark #signature-toolbar-control div#toolbar {\n    height: 57px !important;\n}\n\n.e-bigger .bootstrap4 #signature-toolbar-control div#toolbar,\n.e-bigger .bootstrap4-dark #signature-toolbar-control div#toolbar {\n    height: 65px !important;\n}\n\n.bootstrap4 #signature-toolbar-control div#toolbar,\n.bootstrap4-dark #signature-toolbar-control div#toolbar,\n.bootstrap-dark #signature-toolbar-control div#toolbar,\n.bootstrap #signature-toolbar-control div#toolbar {\n    height: 49px !important;\n}\n\n.bootstrap5 #signature-toolbar-control #toolbar .e-split-btn,\n.bootstrap5 #signature-toolbar-control #toolbar .e-dropdown-btn {\n    color: #6c757d\n}\n\n.bootstrap4 #signature-toolbar-control #toolbar .e-split-btn,\n.bootstrap4 #signature-toolbar-control #toolbar .e-dropdown-btn {\n    color: #495057;\n}\n\n.highcontrast #signature-toolbar-control #toolbar .e-split-btn,\n.highcontrast #signature-toolbar-control #toolbar .e-dropdown-btn {\n    color: #fff;\n}\n\n.fabric #signature-toolbar-control #toolbar .e-split-btn,\n.fabric #signature-toolbar-control #toolbar .e-dropdown-btn,\n.bootstrap5 #signature-toolbar-control #toolbar .e-split-btn,\n.bootstrap5 #signature-toolbar-control #toolbar .e-dropdown-btn,\n.bootstrap4 #signature-toolbar-control #toolbar .e-split-btn,\n.bootstrap4 #signature-toolbar-control #toolbar .e-dropdown-btn {\n    background-color: transparent !important;\n    border-color: lightgray;\n}\n\n.fabric-dark #toolbar .e-dropdown-btn,\n.fabric-dark #toolbar .e-split-btn,\n.bootstrap5-dark #toolbar .e-split-btn,\n.bootstrap5-dark #toolbar .e-dropdown-btn,\n.bootstrap4-dark #toolbar .e-split-btn,\n.bootstrap4-dark #toolbar .e-dropdown-btn {\n    background-color: transparent !important;\n    border-color: gray;\n}\n\n#signature-toolbar-control .e-btn:disabled {\n    opacity: 0.5 !important;\n    pointer-events: none;\n}\n\n#signature-toolbar-control #signature-control {\n    height: 300px;\n    width: 100%;\n    margin: 0;\n}\n\n#signature-toolbar-control #signature {\n    border: none !important;\n}\n\n.e-colorpicker-wrapper.e-bg-color #bg-color+.e-split-btn-wrapper .e-split-btn .e-selected-color {\n    background: none;\n    border-bottom-style: solid;\n    border-bottom-width: 3px;\n    width: 14px;\n    margin: 0px 2px;\n    border-bottom-color: #ffffff;\n}\n.e-colorpicker-wrapper.e-stroke-color #stroke-color+.e-split-btn-wrapper .e-split-btn .e-selected-color {\n    background: none;\n    border-bottom-style: solid;\n    border-bottom-width: 3px;\n    width: 14px;\n    margin: 0px 2px;\n    border-bottom-color: #000000;\n}\n\n.e-colorpicker-wrapper.e-bg-color #bg-color+.e-split-btn-wrapper .e-split-btn .e-selected-color .e-split-preview,\n.e-colorpicker-wrapper.e-stroke-color #stroke-color+.e-split-btn-wrapper .e-split-btn .e-selected-color .e-split-preview {\n    display: none;\n}\n\n.e-colorpicker-wrapper.e-bg-color #bg-color+.e-split-btn-wrapper .e-split-btn .e-selected-color::before {\n    content: '\\e707';\n}\n\n.e-colorpicker-wrapper.e-stroke-color #stroke-color+.e-split-btn-wrapper .e-split-btn .e-selected-color::before {\n    content: '\\e704';\n}\n\n.bootstrap4 .e-colorpicker-wrapper.e-bg-color #bg-color+.e-split-btn-wrapper .e-split-btn:hover .e-selected-color::before {\n    color: black;\n}\n\n.bootstrap5 .e-colorpicker-wrapper.e-bg-color #bg-color+.e-split-btn-wrapper .e-split-btn:hover .e-selected-color::before {\n    color: grey;\n}\n\n.bootstrap4 .e-colorpicker-wrapper.e-stroke-color #stroke-color+.e-split-btn-wrapper .e-split-btn:hover .e-selected-color::before {\n    color: black;\n}\n\n.bootstrap5 .e-colorpicker-wrapper.e-stroke-color #stroke-color+.e-split-btn-wrapper .e-split-btn:hover .e-selected-color::before {\n    color: grey;\n}\n\n#signature-toolbar-control .e-clear::before {\n    content: '\\e706';\n}\n\n#signature-toolbar-control .e-save::before {\n    content: '\\e701';\n}\n\n/* Circle palette customization */\n.e-container .e-palette .e-circle-palette {\n    border: 0;\n    height: 32px;\n    width: 32px;\n    border-radius: 20px;\n    margin: 4px;\n}\n.e-bigger .e-container .e-palette .e-circle-palette {\n    height: 32px;\n    width: 32px;\n}\n.e-container .e-palette .e-circle-palette:hover {\n    box-shadow: none;\n    transform: scale(1.2);\n    transition: transform .2s ease-out;\n}\n.e-circle-palette .e-circle-selection {\n    height: 32px;\n    width: 32px;\n    border-radius: 20px;\n    display: inline-block;\n    transform: scale(0);\n    transition: transform 1.2s ease-in;\n}\n.e-circle-palette.e-selected .e-circle-selection {\n    transform: scale(0.8);\n    background-color: #fff;\n    transition: transform .2s ease-out;\n}\n#circle-palette+.e-container,\n#scroll-palette+.e-container {\n    background-color: transparent;\n    border-color: transparent;\n    box-shadow: none;\n}\n.e-container .e-palette .e-circle-palette.e-selected {\n    outline: none;\n}\n\n.e-bg-color .e-circle-palette.e-nocolor-item.e-selected .e-circle-selection {\n    background: transparent;\n}\n\n.e-bg-color .e-circle-palette.e-nocolor-item.e-selected {\n    border: 3px solid lightgray;\n}\n\n/* custom code end */","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}