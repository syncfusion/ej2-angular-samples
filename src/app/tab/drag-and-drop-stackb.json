{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, TemplateRef } from '@angular/core';\r\nimport { isNullOrUndefined } from \"@syncfusion/ej2-base\";\r\nimport {\r\n    TreeViewComponent, DragAndDropEventArgs, TabComponent, DragEventArgs\r\n} from '@syncfusion/ej2-angular-navigations';\r\nimport {\r\n    EventSettingsModel, DayService, WeekService, WorkWeekService,\r\n    MonthService, AgendaService\r\n} from '@syncfusion/ej2-angular-schedule';\r\nimport { DataManager, ODataV4Adaptor } from '@syncfusion/ej2-data';\r\nimport { CategoryService, LineSeriesService } from '@syncfusion/ej2-angular-charts';\r\n\r\n\r\n/**\r\n * Draggable Tab Component\r\n */\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: 'app.component.html',\r\n    styleUrls: ['app.component.css'],\r\n    providers: [DayService, WeekService, WorkWeekService, MonthService, AgendaService, CategoryService, LineSeriesService],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AppComponent {\r\n    @ViewChild('treeObj') public treeObj: TreeViewComponent;\r\n    @ViewChild('tabObj') public tabObj: TabComponent;\r\n    @ViewChild('GridtemplateRef') public Gridtemplate: TemplateRef<any>;\r\n    @ViewChild('CharttemplateRef') public Charttemplate: TemplateRef<any>;\r\n    @ViewChild('ScheduletemplateRef') public Scheduletemplate: TemplateRef<any>;\r\n    @ViewChild('DropDowntemplateRef') public DropDowntemplate: TemplateRef<any>;\r\n    @ViewChild('DatePickertemplateRef') public DatePickertemplate: TemplateRef<any>;\r\n    @ViewChild('UploadtemplateRef') public Uploadtemplate: TemplateRef<any>;\r\n    @ViewChild('CalendartemplateRef') public Calendartemplate: TemplateRef<any>;\r\n\r\n    public draggedItemHeader: string = '';\r\n    public i: number;\r\n\r\n    public headerText: Object = [{ text: 'Grid' }, { text: 'Chart' }, { text: 'Schedule' }];\r\n\r\n    public field: Object = {\r\n        dataSource: [\r\n            { text: \"DropDown List\", id: \"list-01\" },\r\n            { text: \"DatePicker\", id: \"list-02\" },\r\n            { text: \"Calendar\", id: \"list-03\" },\r\n            { text: \"File Upload\", id: \"list-04\" },\r\n        ],\r\n        id: \"id\", text: \"text\"\r\n    }\r\n    public sportsData: Object[] = [\r\n        { Id: 'Game1', Game: 'American Football' },\r\n        { Id: 'Game2', Game: 'Badminton' },\r\n        { Id: 'Game3', Game: 'Basketball' },\r\n        { Id: 'Game4', Game: 'Cricket' },\r\n        { Id: 'Game5', Game: 'Football' },\r\n        { Id: 'Game6', Game: 'Golf' },\r\n        { Id: 'Game7', Game: 'Hockey' },\r\n        { Id: 'Game8', Game: 'Rugby' },\r\n        { Id: 'Game9', Game: 'Snooker' },\r\n        { Id: 'Game10', Game: 'Tennis' }\r\n    ];\r\n    public fields: Object = { text: 'Game', value: 'Id' };\r\n    public value: string = 'Game3';\r\n\r\n    public allowDragAndDrop: boolean = true;\r\n    public gridData: Object[] = [\r\n        { OrderID: 10248, CustomerID: \"VINET\", OrderDate: new Date(8364186e5), Freight: 32.38 },\r\n        { OrderID: 10249, CustomerID: \"TOMSP\", OrderDate: new Date(836505e6), Freight: 11.61 },\r\n        { OrderID: 10250, CustomerID: \"HANAR\", OrderDate: new Date(8367642e5), Freight: 65.83 },\r\n        { OrderID: 10251, CustomerID: \"VICTE\", OrderDate: new Date(8367642e5), Freight: 41.34 },\r\n        { OrderID: 10252, CustomerID: \"SUPRD\", OrderDate: new Date(8368506e5), Freight: 51.3 }\r\n    ];\r\n\r\n    public primaryXAxis: Object = { valueType: 'Category' };\r\n    public chartData: Object = [\r\n        { month: 'Jan', sales: 35 }, { month: 'Feb', sales: 28 },\r\n        { month: 'Mar', sales: 34 }, { month: 'Apr', sales: 32 },\r\n        { month: 'May', sales: 40 }, { month: 'Jun', sales: 32 },\r\n        { month: 'Jul', sales: 35 }, { month: 'Aug', sales: 55 },\r\n        { month: 'Sep', sales: 38 }, { month: 'Oct', sales: 30 },\r\n        { month: 'Nov', sales: 25 }, { month: 'Dec', sales: 32 }\r\n    ];\r\n\r\n    public selectedDate: Date = new Date(2020, 9, 20);\r\n    public readonly: boolean = true;\r\n    private dataManger: DataManager = new DataManager({\r\n        url: \"https://services.syncfusion.com/angular/production/api/schedule\",\r\n        adaptor: new ODataV4Adaptor(),\r\n        crossDomain: true\r\n    });\r\n    public eventSettings: EventSettingsModel = { dataSource: this.dataManger };\r\n\r\n    onNodeDrag(args: DragAndDropEventArgs): void {\r\n        if (!isNullOrUndefined(args.target.closest('.tab-content'))) {\r\n            args.dropIndicator = 'e-no-drop';\r\n        } else if (!isNullOrUndefined(args.target.closest('#draggableTab .e-tab-header'))) {\r\n            args.dropIndicator = 'e-drop-in';\r\n        }\r\n    }\r\n    onNodeDragStop(args: DragAndDropEventArgs): void {\r\n        let dropElement = args.target.closest(\"#draggableTab .e-toolbar-item\");\r\n        if (dropElement != null) {\r\n            let tabElement = document.querySelector(\"#draggableTab\");\r\n            let itemPosition = (((args.event.type.indexOf('touch') > -1) ? args.event.changedTouches[0].clientX\r\n                : args.event.clientX) < dropElement.getBoundingClientRect().left + (dropElement as HTMLElement).offsetWidth / 2) ? 0 : 1;\r\n            let dropItemIndex = [].slice.call(tabElement.querySelectorAll(\".e-toolbar-item\")).indexOf(dropElement) + itemPosition;\r\n            let tabContent;\r\n            switch (args.draggedNodeData.text) {\r\n                case \"DropDown List\":\r\n                    tabContent = this.DropDowntemplate;\r\n                    break;\r\n                case \"DatePicker\":\r\n                    tabContent = this.DatePickertemplate;\r\n                    break;\r\n                case \"Calendar\":\r\n                    tabContent = this.Calendartemplate\r\n                    break;\r\n                case \"File Upload\":\r\n                    tabContent = this.Uploadtemplate\r\n                    break;\r\n                case \"Chart\":\r\n                    tabContent = this.Charttemplate;\r\n                    break;\r\n                case \"Grid\":\r\n                    tabContent = this.Gridtemplate;\r\n                    break;\r\n                case \"Schedule\":\r\n                    tabContent = this.Scheduletemplate;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            let newTabItem = [{ header: { text: args.draggedNodeData.text.toString() }, content: tabContent }];\r\n            this.tabObj.addTab(newTabItem, dropItemIndex);\r\n            this.treeObj.removeNodes([args.draggedNode]);\r\n        }\r\n        args.cancel = true;\r\n    }\r\n    onTabCreate(): void {\r\n        let tabElement: HTMLElement = document.getElementById('draggableTab');\r\n        if (!isNullOrUndefined(tabElement)) {\r\n            tabElement.querySelector(\".e-tab-header\").classList.add(\"e-droppable\");\r\n            tabElement.querySelector(\".e-content\").classList.add(\"tab-content\");\r\n        }\r\n    }\r\n    onTabDragStart(args: DragEventArgs): void {\r\n        this.draggedItemHeader = <string>this.tabObj.items[args.index].header.text;\r\n    }\r\n    onDraggedTab(args: DragEventArgs): void {\r\n        let dragTabIndex: number = Array.prototype.indexOf.call(this.tabObj.element.querySelectorAll('.e-toolbar-item'), args.draggedItem);\r\n        let dropNode: HTMLElement = <HTMLElement>args.target.closest('#ListView .e-list-item');\r\n        if (dropNode != null && !args.target.closest('#draggableTab .e-toolbar-item')) {\r\n            args.cancel = true;\r\n            let dropContainer: NodeListOf<Element> = (document.querySelector('.treeview-external-drag-tab')).querySelectorAll('.e-list-item');\r\n            let dropIndex: number = Array.prototype.indexOf.call(dropContainer, dropNode);\r\n            let newNode: { [key: string]: Object }[] = [{ id: 'list' + this.i, text: this.draggedItemHeader }];\r\n            this.tabObj.removeTab(dragTabIndex);\r\n            this.treeObj.addNodes(newNode, 'Treeview', dropIndex);\r\n        }\r\n    }\r\n}","app/app.module.ts":"import { TreeViewModule  } from '@syncfusion/ej2-angular-navigations';\n\nimport { ChartAllModule } from '@syncfusion/ej2-angular-charts';\n\nimport { CalendarAllModule, DateRangePickerAllModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { ScheduleAllModule } from '@syncfusion/ej2-angular-schedule';\n\nimport { RichTextEditorAllModule } from '@syncfusion/ej2-angular-richtexteditor';\n\nimport { AutoCompleteAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { NumericTextBoxAllModule, UploaderAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { DatePickerAllModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { DialogAllModule } from '@syncfusion/ej2-angular-popups';\n\nimport { GridAllModule } from '@syncfusion/ej2-angular-grids';\n\nimport { TabAllModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, NumericTextBoxAllModule, TabAllModule, GridAllModule, DialogAllModule, DatePickerAllModule, DropDownListModule, AutoCompleteAllModule, ScheduleAllModule, RichTextEditorAllModule, UploaderAllModule, CalendarAllModule, DateRangePickerAllModule, ChartAllModule, TreeViewModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<ng-template #GridtemplateRef>\r\n    <ejs-grid [dataSource]='gridData'>\r\n        <e-columns>\r\n            <e-column field='OrderID' headerText='Order ID' textAlign='Right' width=120 type='number'></e-column>\r\n            <e-column field='CustomerID' headerText='Customer ID' type='string' width=140>\r\n            </e-column>\r\n            <e-column field='Freight' headerText='Freight' textAlign='Right' width=120 format='C'>\r\n            </e-column>\r\n            <e-column field='OrderDate' headerText='Order Date' width=140 format='yMd'></e-column>\r\n        </e-columns>\r\n    </ejs-grid>\r\n</ng-template>\r\n\r\n<ng-template #CharttemplateRef>\r\n    <ejs-chart id=\"chart-container\" [primaryXAxis]='primaryXAxis'>\r\n        <e-series-collection>\r\n            <e-series [dataSource]='chartData' type='Line' xName='month' yName='sales' name='Sales'></e-series>\r\n        </e-series-collection>\r\n    </ejs-chart>\r\n</ng-template>\r\n<ng-template #ScheduletemplateRef>\r\n    <ejs-schedule height='350px' [selectedDate]='selectedDate' [eventSettings]='eventSettings' [readonly]=\"readonly\">\r\n    </ejs-schedule>\r\n</ng-template>\r\n\r\n<ng-template #DropDowntemplateRef>\r\n    <ejs-dropdownlist [dataSource]='sportsData' width='200px' [value]='value' [fields]='fields'></ejs-dropdownlist>\r\n</ng-template>\r\n<ng-template #DatePickertemplateRef>\r\n    <ejs-datepicker width='200px'></ejs-datepicker>\r\n</ng-template>\r\n\r\n<ng-template #UploadtemplateRef>\r\n    <ejs-uploader></ejs-uploader>\r\n</ng-template>\r\n\r\n<ng-template #CalendartemplateRef>\r\n    <ejs-calendar></ejs-calendar>\r\n</ng-template>\r\n\r\n<div id=\"TabContainer\">\r\n    <div class=\"col-lg-4\" style=\"margin-top: 10px;\">\r\n        <div class='property-panel-header'>List of Components</div>\r\n        <ejs-treeview id='ListView' #treeObj dragArea='#TabContainer' [fields]='field' cssClass='treeview-external-drag-tab'\r\n            [allowDragAndDrop]='allowDragAndDrop' (nodeDragStop)='onNodeDragStop($event)'\r\n            (nodeDragging)='onNodeDrag($event)'>\r\n        </ejs-treeview>\r\n    </div>\r\n    <div class=\"col-lg-8 content-wrapper control-section\">\r\n        <ejs-tab id='draggableTab' #tabObj [allowDragAndDrop]='allowDragAndDrop' dragArea='#TabContainer'\r\n            (created)='onTabCreate()' (onDragStart)='onTabDragStart($event)' (dragged)='onDraggedTab($event)'>\r\n            <e-tabitems>\r\n                <e-tabitem [header]='headerText[0]' [content]=\"Gridtemplate\">\r\n                </e-tabitem>\r\n                <e-tabitem [header]='headerText[1]' [content]=\"Charttemplate\">\r\n                </e-tabitem>\r\n                <e-tabitem [header]='headerText[2]' [content]=\"Scheduletemplate\">\r\n                </e-tabitem>\r\n            </e-tabitems>\r\n        </ejs-tab>\r\n    </div>\r\n\r\n</div>","app.component.css":"#draggableTab .e-content .e-item {\r\n    font-size: 12px;\r\n    padding: 10px;\r\n    text-align: justify;\r\n}\r\n#draggableTab .e-upload {\r\n    width: 300px;\r\n}\r\n#TabContainer .e-treeview .e-ul {\r\n    padding: 0 0 0 36px !important;\r\n}\r\n#TabContainer .property-panel-header {\r\n    text-align: center;\r\n}\r\n.treeview-external-drag-tab .e-list-item,\r\n.e-bigger .treeview-external-drag-tab .e-list-item {\r\n    border: 0.5px solid #E1E7EC;\r\n    line-height: 15px;\r\n    padding: 0 5px;\r\n}\r\n.treeview-external-drag-tab .e-list-item.e-hover>.e-fullrow,\r\n.treeview-external-drag-tab .e-list-item.e-active>.e-fullrow,\r\n.treeview-external-drag-tab .e-list-item.e-active.e-hover>.e-fullrow,\r\n.e-bigger .treeview-external-drag-tab .e-list-item.e-hover>.e-fullrow,\r\n.e-bigger .treeview-external-drag-tab .e-list-item.e-active>.e-fullrow,\r\n.e-bigger .treeview-external-drag-tab .e-list-item.e-active.e-hover>.e-fullrow {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n    box-shadow: none !important;\r\n}\r\n#TabContainer {\r\n    display: flex;\r\n}\r\n@media (max-width: 550px) {\r\n    #TabContainer {\r\n        display: block;\r\n    }\r\n}\r\n","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-angular-schedule\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}