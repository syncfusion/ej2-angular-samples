{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, TemplateRef } from '@angular/core';\r\nimport { isNullOrUndefined } from \"@syncfusion/ej2-base\";\r\nimport { TreeViewComponent, DragAndDropEventArgs, TabComponent, DragEventArgs, TreeViewModule, TabModule } from '@syncfusion/ej2-angular-navigations';\r\nimport { EventSettingsModel, DayService, WeekService, WorkWeekService, MonthService, AgendaService, ScheduleModule,View } from '@syncfusion/ej2-angular-schedule';\r\nimport { DataManager, ODataV4Adaptor } from '@syncfusion/ej2-data';\r\nimport { CategoryService, LineSeriesService, ChartModule } from '@syncfusion/ej2-angular-charts';\r\n\r\n\r\nimport { UploaderModule } from '@syncfusion/ej2-angular-inputs';\r\nimport { DatePickerModule, CalendarModule } from '@syncfusion/ej2-angular-calendars';\r\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\r\nimport { GridModule } from '@syncfusion/ej2-angular-grids';\r\n\r\n\r\n/**\r\n * Draggable Tab Component\r\n */\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: 'app.component.html',\r\n    styleUrls: ['app.component.css'],\r\n    providers: [DayService, WeekService, WorkWeekService, MonthService, AgendaService, CategoryService, LineSeriesService],\r\n    encapsulation: ViewEncapsulation.None,\r\n    standalone: true,\r\n    imports: [GridModule, ChartModule, ScheduleModule, DropDownListModule, DatePickerModule, UploaderModule, CalendarModule, TreeViewModule, TabModule,  ]\r\n})\r\nexport class AppComponent {\r\n    @ViewChild('treeObj') public treeObj: TreeViewComponent;\r\n    @ViewChild('tabObj') public tabObj: TabComponent;\r\n    @ViewChild('GridtemplateRef') public Gridtemplate: TemplateRef<any>;\r\n    @ViewChild('CharttemplateRef') public Charttemplate: TemplateRef<any>;\r\n    @ViewChild('ScheduletemplateRef') public Scheduletemplate: TemplateRef<any>;\r\n    @ViewChild('DropDowntemplateRef') public DropDowntemplate: TemplateRef<any>;\r\n    @ViewChild('DatePickertemplateRef') public DatePickertemplate: TemplateRef<any>;\r\n    @ViewChild('UploadtemplateRef') public Uploadtemplate: TemplateRef<any>;\r\n    @ViewChild('CalendartemplateRef') public Calendartemplate: TemplateRef<any>;\r\n\r\n    public draggedItemHeader: string = '';\r\n    public i: number;\r\n\r\n    public headerText: Object = [{ text: 'Grid' }, { text: 'Chart' }, { text: 'Schedule' }];\r\n\r\n    public field: Object = {\r\n        dataSource: [\r\n            { text: \"DropDown List\", id: \"list-01\" },\r\n            { text: \"DatePicker\", id: \"list-02\" },\r\n            { text: \"Calendar\", id: \"list-03\" },\r\n            { text: \"File Upload\", id: \"list-04\" },\r\n        ],\r\n        id: \"id\", text: \"text\"\r\n    }\r\n    public sportsData: Object[] = [\r\n        { Id: 'Game1', Game: 'American Football' },\r\n        { Id: 'Game2', Game: 'Badminton' },\r\n        { Id: 'Game3', Game: 'Basketball' },\r\n        { Id: 'Game4', Game: 'Cricket' },\r\n        { Id: 'Game5', Game: 'Football' },\r\n        { Id: 'Game6', Game: 'Golf' },\r\n        { Id: 'Game7', Game: 'Hockey' },\r\n        { Id: 'Game8', Game: 'Rugby' },\r\n        { Id: 'Game9', Game: 'Snooker' },\r\n        { Id: 'Game10', Game: 'Tennis' }\r\n    ];\r\n    public fields: Object = { text: 'Game', value: 'Id' };\r\n    public value: string = 'Game3';\r\n\r\n    public allowDragAndDrop: boolean = true;\r\n    public gridData: Object[] = [\r\n        { OrderID: 10248, CustomerID: \"VINET\", OrderDate: new Date(8364186e5), Freight: 32.38 },\r\n        { OrderID: 10249, CustomerID: \"TOMSP\", OrderDate: new Date(836505e6), Freight: 11.61 },\r\n        { OrderID: 10250, CustomerID: \"HANAR\", OrderDate: new Date(8367642e5), Freight: 65.83 },\r\n        { OrderID: 10251, CustomerID: \"VICTE\", OrderDate: new Date(8367642e5), Freight: 41.34 },\r\n        { OrderID: 10252, CustomerID: \"SUPRD\", OrderDate: new Date(8368506e5), Freight: 51.3 }\r\n    ];\r\n\r\n    public primaryXAxis: Object = { valueType: 'Category' };\r\n    public chartData: Object = [\r\n        { month: 'Jan', sales: 35 }, { month: 'Feb', sales: 28 },\r\n        { month: 'Mar', sales: 34 }, { month: 'Apr', sales: 32 },\r\n        { month: 'May', sales: 40 }, { month: 'Jun', sales: 32 },\r\n        { month: 'Jul', sales: 35 }, { month: 'Aug', sales: 55 },\r\n        { month: 'Sep', sales: 38 }, { month: 'Oct', sales: 30 },\r\n        { month: 'Nov', sales: 25 }, { month: 'Dec', sales: 32 }\r\n    ];\r\n\r\n    public currentView: View = 'Month';\r\n    public readonly: boolean = true;\r\n    private dataManger: DataManager = new DataManager({\r\n        url: \"https://services.syncfusion.com/angular/production/api/schedule\",\r\n        adaptor: new ODataV4Adaptor(),\r\n        crossDomain: true\r\n    });\r\n    public eventSettings: EventSettingsModel = { dataSource: this.dataManger };\r\n\r\n    onNodeDrag(args: DragAndDropEventArgs): void {\r\n        if (!isNullOrUndefined(args.target.closest('.tab-content'))) {\r\n            args.dropIndicator = 'e-no-drop';\r\n        } else if (!isNullOrUndefined(args.target.closest('#draggableTab .e-tab-header'))) {\r\n            args.dropIndicator = 'e-drop-in';\r\n        }\r\n    }\r\n    onNodeDragStop(args: DragAndDropEventArgs): void {\r\n        let dropElement = args.target.closest(\"#draggableTab .e-toolbar-item\");\r\n        if (dropElement != null) {\r\n            let tabElement = document.querySelector(\"#draggableTab\");\r\n            let itemPosition = (((args.event.type.indexOf('touch') > -1) ? args.event.changedTouches[0].clientX\r\n                : args.event.clientX) < dropElement.getBoundingClientRect().left + (dropElement as HTMLElement).offsetWidth / 2) ? 0 : 1;\r\n            let dropItemIndex = [].slice.call(tabElement.querySelectorAll(\".e-toolbar-item\")).indexOf(dropElement) + itemPosition;\r\n            let tabContent;\r\n            switch (args.draggedNodeData.text) {\r\n                case \"DropDown List\":\r\n                    tabContent = this.DropDowntemplate;\r\n                    break;\r\n                case \"DatePicker\":\r\n                    tabContent = this.DatePickertemplate;\r\n                    break;\r\n                case \"Calendar\":\r\n                    tabContent = this.Calendartemplate\r\n                    break;\r\n                case \"File Upload\":\r\n                    tabContent = this.Uploadtemplate\r\n                    break;\r\n                case \"Chart\":\r\n                    tabContent = this.Charttemplate;\r\n                    break;\r\n                case \"Grid\":\r\n                    tabContent = this.Gridtemplate;\r\n                    break;\r\n                case \"Schedule\":\r\n                    tabContent = this.Scheduletemplate;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            let newTabItem = [{ header: { text: args.draggedNodeData.text.toString() }, content: tabContent }];\r\n            this.tabObj.addTab(newTabItem, dropItemIndex);\r\n            this.treeObj.removeNodes([args.draggedNode]);\r\n        }\r\n        args.cancel = true;\r\n    }\r\n    onTabCreate(): void {\r\n        let tabElement: HTMLElement = document.getElementById('draggableTab');\r\n        if (!isNullOrUndefined(tabElement)) {\r\n            tabElement.querySelector(\".e-tab-header\").classList.add(\"e-droppable\");\r\n            tabElement.querySelector(\".e-content\").classList.add(\"tab-content\");\r\n        }\r\n    }\r\n    onTabDragStart(args: DragEventArgs): void {\r\n        this.draggedItemHeader = <string>this.tabObj.items[args.index].header.text;\r\n    }\r\n    onDraggedTab(args: DragEventArgs): void {\r\n        let dragTabIndex: number = Array.prototype.indexOf.call(this.tabObj.element.querySelectorAll('.e-toolbar-item'), args.draggedItem);\r\n        let dropNode: HTMLElement = <HTMLElement>args.target.closest('#ListView .e-list-item');\r\n        if (dropNode != null && !args.target.closest('#draggableTab .e-toolbar-item')) {\r\n            args.cancel = true;\r\n            let dropContainer: NodeListOf<Element> = (document.querySelector('.treeview-external-drag-tab')).querySelectorAll('.e-list-item');\r\n            let dropIndex: number = Array.prototype.indexOf.call(dropContainer, dropNode);\r\n            let newNode: { [key: string]: Object }[] = [{ id: 'list' + this.i, text: this.draggedItemHeader }];\r\n            this.tabObj.removeTab(dragTabIndex);\r\n            this.treeObj.addNodes(newNode, 'Treeview', dropIndex);\r\n        }\r\n    }\r\n}\r\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<ng-template #GridtemplateRef>\r\n    <ejs-grid [dataSource]='gridData'>\r\n        <e-columns>\r\n            <e-column field='OrderID' headerText='Order ID' textAlign='Right' width=120 type='number'></e-column>\r\n            <e-column field='CustomerID' headerText='Customer ID' type='string' width=140>\r\n            </e-column>\r\n            <e-column field='Freight' headerText='Freight' textAlign='Right' width=120 format='C'>\r\n            </e-column>\r\n            <e-column field='OrderDate' headerText='Order Date' width=140 format='yMd'></e-column>\r\n        </e-columns>\r\n    </ejs-grid>\r\n</ng-template>\r\n\r\n<ng-template #CharttemplateRef>\r\n    <ejs-chart id=\"chart-container\" [primaryXAxis]='primaryXAxis'>\r\n        <e-series-collection>\r\n            <e-series [dataSource]='chartData' type='Line' xName='month' yName='sales' name='Sales'></e-series>\r\n        </e-series-collection>\r\n    </ejs-chart>\r\n</ng-template>\r\n<ng-template #ScheduletemplateRef>\r\n    <ejs-schedule height='350px' [currentView]='currentView' [eventSettings]='eventSettings' [readonly]=\"readonly\">\r\n    </ejs-schedule>\r\n</ng-template>\r\n\r\n<ng-template #DropDowntemplateRef>\r\n    <ejs-dropdownlist [dataSource]='sportsData' width='200px' [value]='value' [fields]='fields'></ejs-dropdownlist>\r\n</ng-template>\r\n<ng-template #DatePickertemplateRef>\r\n    <ejs-datepicker width='200px'></ejs-datepicker>\r\n</ng-template>\r\n\r\n<ng-template #UploadtemplateRef>\r\n    <ejs-uploader></ejs-uploader>\r\n</ng-template>\r\n\r\n<ng-template #CalendartemplateRef>\r\n    <ejs-calendar></ejs-calendar>\r\n</ng-template>\r\n\r\n<div id=\"TabContainer\">\r\n    <div class=\"col-lg-4\" style=\"margin-top: 10px;\">\r\n        <div class='property-panel-header'>List of Components</div>\r\n        <ejs-treeview id='ListView' #treeObj dragArea='#TabContainer' [fields]='field' cssClass='treeview-external-drag-tab'\r\n            [allowDragAndDrop]='allowDragAndDrop' (nodeDragStop)='onNodeDragStop($event)'\r\n            (nodeDragging)='onNodeDrag($event)'>\r\n        </ejs-treeview>\r\n    </div>\r\n    <div class=\"col-lg-8 content-wrapper control-section\">\r\n        <ejs-tab id='draggableTab' #tabObj [allowDragAndDrop]='allowDragAndDrop' dragArea='#TabContainer'\r\n            (created)='onTabCreate()' (onDragStart)='onTabDragStart($event)' (dragged)='onDraggedTab($event)'>\r\n            <e-tabitems>\r\n                <e-tabitem [header]='headerText[0]' [content]=\"Gridtemplate\">\r\n                </e-tabitem>\r\n                <e-tabitem [header]='headerText[1]' [content]=\"Charttemplate\">\r\n                </e-tabitem>\r\n                <e-tabitem [header]='headerText[2]' [content]=\"Scheduletemplate\">\r\n                </e-tabitem>\r\n            </e-tabitems>\r\n        </ejs-tab>\r\n    </div>\r\n</div>\r\n","app.component.css":"#draggableTab .e-content .e-item {\r\n    font-size: 12px;\r\n    padding: 10px;\r\n    text-align: justify;\r\n}\r\n#draggableTab .e-upload {\r\n    width: 300px;\r\n}\r\n#TabContainer .property-panel-header {\r\n    text-align: center;\r\n}\r\n.treeview-external-drag-tab .e-list-item,\r\n.e-bigger .treeview-external-drag-tab .e-list-item {\r\n    border: 0.5px solid #E1E7EC;\r\n    line-height: 15px;\r\n    padding: 0 5px;\r\n}\r\n.treeview-external-drag-tab.e-treeview .e-ul  {\r\n    padding: unset;\r\n}\r\n#TabContainer {\r\n    display: flex;\r\n}\r\n@media (max-width: 550px) {\r\n    #TabContainer {\r\n        display: block;\r\n    }\r\n}\r\n\r\n#TabContainer .content-wrapper {\r\n    min-width: 100px;\r\n}","dependencies.json":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-angular-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}