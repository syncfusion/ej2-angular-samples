{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","theme-color.ts":"import { ILoadedEventArgs, ProgressTheme } from \"@syncfusion/ej2-progressbar\";\nimport { EmitType } from \"@syncfusion/ej2/base\";\n\nexport let loadProgressBarTheme = (args: ILoadedEventArgs): string => {\n    let selectedTheme: string = location.hash.split('/')[1];\n    selectedTheme = selectedTheme ? selectedTheme : 'Tailwind3';\n    args.progressBar.theme = <ProgressTheme>(selectedTheme.charAt(0).toUpperCase() +\n        selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-highContrast/i, 'HighContrast');\n    return selectedTheme as string;\n}; ","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { ProgressBar, ILoadedEventArgs, ProgressTheme, AnimationModel } from '@syncfusion/ej2-progressbar';\nimport { ProgressBarAllModule } from '@syncfusion/ej2-angular-progressbar';\nimport { loadProgressBarTheme } from './theme-color';\n/**\n * RTl sample\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ProgressBarAllModule]\n})\n\nexport class AppComponent {\n    public type = 'Circular';\n    public width: string = '160px';\n    public height: string = '160px';\n    public min: number = 0;\n    public max: number = 100;\n    public startAngle: number = 240;\n    public endAngle: number = 120;\n    public trackThickness: number = 5;\n    public progressThickness: number = 5;\n    public value: number = 100;\n    public cornerRadius: string = 'Round';\n    public type1: string = 'Circular';\n    public min1: number = 0;\n    public max1: number = 100;\n    public startAngle1: number = 180;\n    public endAngle1: number = 0;\n    public trackThickness1: number = 5;\n    public progressThickness1: number = 5;\n    public value1: number = 100;\n    public cornerRadius1: string = 'Round';\n    public type2: string = 'Circular';\n    public min2: number = 0;\n    public max2: number = 100;\n    public startAngle2: number = 0;\n    public endAngle2: number = 180;\n    public trackThickness2: number = 5;\n    public progressThickness2: number = 5;\n    public value2: number = 100;\n    public cornerRadius2: string = 'Round';\n    public type3: string = 'Circular';\n    public min3: number = 0;\n    public max3: number = 100;\n    public startAngle3: number = 270;\n    public endAngle3: number = 90;\n    public trackThickness3: number = 5;\n    public progressThickness3: number = 5;\n    public value3: number = 100;\n    public cornerRadius3: string = 'Round';\n    public animation: AnimationModel = { enable: true, duration: 2000, delay: 0 };\n    public animation1: AnimationModel = { enable: true, duration: 2000, delay: 0 };\n    public animation2: AnimationModel = { enable: true, duration: 2000, delay: 0 };\n    public animation3: AnimationModel = { enable: true, duration: 2000, delay: 0 };\n    public annotationElementContent(color: string, controlID: string): string {\n        let content: string;\n        switch (controlID) {\n            case 'semicircle':\n                content = '100%';\n                break;\n            case 'semicircle1':\n                content = '100%';\n                break;\n            case 'semicircle2':\n                content = '100%';\n                break;\n            case 'semicircle3':\n                content = '100%';\n                break;\n        }\n        return ('<div id=\"point1\" style=\"font-size:20px;font-weight:bold;color:' + color + '\"><span>' + content + '</span></div>');\n    }\n    public annotationColors: string[] = ['#e91e63', '#0078D6', '#317ab9', '#007bff', '#4F46E5', '#FFD939', '#9A9A9A', '#22D3EE', '#0D6EFD', '#6750A4', '#D0BCFF', '#0F6CBD', '#1AEBFF', '#115EA3', '#6366F1'];\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = loadProgressBarTheme(args);\n        switch (selectedTheme) {\n            case 'material':\n                args.progressBar.annotations[0].content =\n                    this.annotationElementContent(this.annotationColors[0], args.progressBar.element.id);\n                break;\n            case 'fabric':\n                args.progressBar.annotations[0].content =\n                    this.annotationElementContent(this.annotationColors[1], args.progressBar.element.id);\n                break;\n            case 'bootstrap':\n                args.progressBar.annotations[0].content =\n                    this.annotationElementContent(this.annotationColors[2], args.progressBar.element.id);\n                break;\n            case 'bootstrap4':\n                args.progressBar.annotations[0].content =\n                    this.annotationElementContent(this.annotationColors[3], args.progressBar.element.id);\n                break;\n            case 'tailwind':\n            case 'tailwind3':\n                args.progressBar.annotations[0].content =\n                    this.annotationElementContent(this.annotationColors[4], args.progressBar.element.id);\n                break;\n            case 'bootstrap-dark':\n            case 'fabric-dark':\n            case 'material-dark':\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[6], args.progressBar.element.id);\n                break;\n            case 'fluent':\n            case 'fluent-dark':\n            case 'bootstrap5':\n            case 'bootstrap5-dark':\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[8], args.progressBar.element.id);\n                break;\n            case 'tailwind-dark':\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[7], args.progressBar.element.id);\n                break;\n            case 'material3':\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[9], args.progressBar.element.id);\n                break;\n            case 'material3-dark':\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[10], args.progressBar.element.id);\n                break;\n            case \"fluent2\":\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[11], args.progressBar.element.id);\n                break;\n            case \"fluent2-dark\":\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[13], args.progressBar.element.id);\n                break;\n            case \"fluent2-highcontrast\":\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[12], args.progressBar.element.id);\n                break;\n            case 'tailwind3-dark':\n                args.progressBar.annotations[0].content = this.annotationElementContent(this.annotationColors[14], args.progressBar.element.id);\n                break;\n            default:\n                args.progressBar.annotations[0].content =\n                    this.annotationElementContent(this.annotationColors[5], args.progressBar.element.id);\n                break;\n        }\n    }\n    @ViewChild('semicircle')\n    public semicircle: ProgressBar;\n    @ViewChild('semicircle1')\n    public semicircle1: ProgressBar;\n    @ViewChild('semicircle2')\n    public semicircle2: ProgressBar;\n    @ViewChild('semicircle3')\n    public semicircle3: ProgressBar;\n    public onClick = () => {\n        this.semicircle.refresh();\n        this.semicircle1.refresh();\n        this.semicircle2.refresh();\n        this.semicircle3.refresh();\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section progress-bar-parent\">\n    <div class=\"row\" style=\"margin-top: 7%\">\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"angle-container\">\n                <ejs-progressbar #semicircle id='semicircle' [type]='type' [maximum]='max' [minimum]='min'\n                    [value]='value' [width]='width' [height]='height' [startAngle]='startAngle' [endAngle]='endAngle'\n                    [animation]='animation' (load)='load($event)'>\n                    <e-progressbar-annotations>\n                        <e-progressbar-annotation\n                            content='<div id=\"semicircle\" style=\"font-size:35px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>70%</span></div>'>\n                        </e-progressbar-annotation>\n                    </e-progressbar-annotations>\n                </ejs-progressbar>\n            </div>\n\n        </div>\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"vertical-container\">\n                <ejs-progressbar #semicircle1 id='semicircle1' [type]='type1' [maximum]='max1' [minimum]='min1'\n                    [value]='value1' [width]='width' [height]='height' [startAngle]='startAngle1' [endAngle]='endAngle1'\n                    [animation]='animation1' (load)='load($event)'>\n                    <e-progressbar-annotations>\n                        <e-progressbar-annotation\n                            content='<div id=\"invertedcircle\" style=\"font-size:35px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>'>\n                        </e-progressbar-annotation>\n                    </e-progressbar-annotations>\n                </ejs-progressbar>\n            </div>\n        </div>\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n\n            <div id=\"vsemi-container\">\n                <ejs-progressbar #semicircle2 id='semicircle2' [type]='type2' [maximum]='max2' [minimum]='min2'\n                    [value]='value2' [width]='width' [height]='height' [startAngle]='startAngle2' [endAngle]='endAngle2'\n                    [animation]='animation2' (load)='load($event)'>\n                    <e-progressbar-annotations>\n                        <e-progressbar-annotation\n                            content='<div id=\"invertedcircle1\" style=\"font-size:35px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>'>\n                        </e-progressbar-annotation>\n                    </e-progressbar-annotations>\n                </ejs-progressbar>\n            </div>\n\n        </div>\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"semi-container\">\n                <ejs-progressbar #semicircle3 id='semicircle3' [type]='type3' [maximum]='max3' [minimum]='min3'\n                    [value]='value3' [width]='width' [height]='height' [startAngle]='startAngle3' [endAngle]='endAngle3'\n                    [animation]='animation3' (load)='load($event)'>\n                    <e-progressbar-annotations>\n                        <e-progressbar-annotation\n                            content='<div id=\"invertedcircle2\" style=\"font-size:35px;font-weight:bold;color:#0078D6;fill:#0078D6\"><span>100%</span></div>'>\n                        </e-progressbar-annotation>\n                    </e-progressbar-annotations>\n                </ejs-progressbar>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\" align=\"center\">\n        <button id=\"reLoad\" (click)=\"onClick()\" class=\"e-control e-btn e-lib e-outline e-primary\">Reload</button>\n    </div>\n</div>\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n\n    #reLoad {\n        border-radius: 4px;\n        text-transform: capitalize;\n        margin-top: 3%;\n    }\n</style>\n\n","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-svg-base\":\"*\",\"@types/requirejs\":\"^2.1.37\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-progressbar\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}