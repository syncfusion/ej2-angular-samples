{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { ProgressBar, ILoadedEventArgs, ProgressTheme, AnimationModel } from '@syncfusion/ej2-progressbar';\n\n/**\n * RTl sample\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n})\n\nexport class AppComponent {\n    public type: string = 'Circular';\n    public height: string = '160px';\n    public width: string = '160px';\n    public min: number = 0;\n    public max: number = 100;\n    public value: number = 60;\n    public radius: string = '100%';\n    public innerRadius: string = '190%';\n    public theme: string = 'Material';\n    public trackThickness: number = 80;\n    public cornerRadius: string = 'Round';\n    public progressThickness: number = 10;\n\n    public min2: number = 0;\n    public max2: number = 100;\n    public value2: number = 90;\n    public progressThickness2: number = 8;\n    public cornerRadius2: string = 'Round';\n    public innerRadius2: string = '72';\n\n    public min3: number = 0;\n    public max3: number = 100;\n    public value3: number = 90;\n    public trackThickness3: number = 3;\n    public progressThickness3: number = 8;\n    public min4: number = 0;\n    public max4: number = 100;\n    public value4: number = 70;\n    public enablePieProgress4: boolean = true;\n    public animation: AnimationModel = { enable: true, duration: 2000, delay: 0 };\n    public load(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.progressBar.theme = <ProgressTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');\n    }\n    public load1(args: ILoadedEventArgs): void {\n        let selectedTheme: string = location.hash.split('/')[1];\n        args.progressBar.progressColor = '#FFFFFF';\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.progressBar.theme = <ProgressTheme>(selectedTheme.charAt(0).toUpperCase() +\n            selectedTheme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast');\n        switch (selectedTheme) {\n            case 'material':\n                args.progressBar.trackColor = '#e91e63';\n                break;\n            case 'fabric':\n                args.progressBar.trackColor = '#0078D6';\n                break;\n            case 'bootstrap':\n                args.progressBar.trackColor = '#317ab9';\n                break;\n            case 'tailwind':\n                args.progressBar.progressColor = '#4F46E5';\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:24px;font-weight:bold;color:#4F46E5\"><span></span></div>';\n                break;\n            case 'highcontrast':\n                args.progressBar.trackColor = '#FFD939';\n                args.progressBar.progressColor = '#000000';\n                args.progressBar.annotations[0].content = '<div id=\"point1\" style=\"font-size:20px;font-weight:bold;color:#000000;fill:#ffffff\"><span>60%</span></div>';\n                break;\n            case 'bootstrap-dark':\n            case 'fabric-dark':\n            case 'material-dark':\n                args.progressBar.progressColor = '#9A9A9A';\n                break;\n            case 'tailwind-dark':\n                args.progressBar.progressColor = '#22D3EE';\n                break;\n            case 'bootstrap5':\n            case 'bootstrap5-dark':\n                args.progressBar.progressColor = '#0D6EFD';\n                break;\n            default :\n                args.progressBar.trackColor = '#007bff';\n                break;\n        }\n}\n    @ViewChild('radius1')\n    public radius1: ProgressBar;\n    @ViewChild('radius2')\n    public radius2: ProgressBar;\n    @ViewChild('radius3')\n    public radius3: ProgressBar;\n    @ViewChild('radius4')\n    public radius4: ProgressBar;\n    public onClick = () => {\n        this.radius1.refresh();\n        this.radius2.refresh();\n        this.radius3.refresh();\n        this.radius4.refresh();\n    }\n}\n","app/app.module.ts":"import { TextBoxAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { CheckBoxModule, ButtonAllModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { ProgressBarAllModule } from '@syncfusion/ej2-angular-progressbar';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ ProgressBarAllModule, DropDownListModule, CheckBoxModule, TextBoxAllModule, BrowserModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"row\" style=\"margin-top: 8%;\">\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"circular-container\">\n                <ejs-progressbar #radius1 id='circular' [type]='type' [maximum]='max' [minimum]='min' [value]='value'\n                    [width]='width' [height]='height' [animation]='animation' [trackThickness]='trackThickness'\n                    [progressThickness]='progressThickness' [cornerRadius]='cornerRadius'\n                    [radius]='radius' [innerRadius]='innerRadius'\n                    [animation]='animation' (load)='load1($event)' [theme]='theme'>\n                    <e-progressbar-annotations>\n                        <e-progressbar-annotation\n                            content='<div id=\"point1\" style=\"font-size:20px;font-weight:bold;color:#ffffff;fill:#ffffff\"><span>60%</span></div>'>\n                        </e-progressbar-annotation>\n                    </e-progressbar-annotations>\n                </ejs-progressbar>\n            </div>\n        </div>\n\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"rtl-container\">\n                <ejs-progressbar #radius2 id='circular2' [type]='type' [maximum]='max2' [minimum]='min2'\n                    [value]='value2' [width]='width' [height]='height' [progressThickness]='progressThickness2'\n                    [cornerRadius]='cornerRadius2' [innerRadius]='innerRadius2' [animation]='animation'\n                    (load)='load($event)'>\n                </ejs-progressbar>\n            </div>\n        </div>\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"track-container\">\n                <ejs-progressbar #radius3 id='circular3' [type]='type' [maximum]='max3' [minimum]='min3'\n                    [value]='value3' [width]='width' [height]='height' [progressThickness]='progressThickness3'\n                    [animation]='animation' (load)='load($event)'>\n                </ejs-progressbar>\n            </div>\n        </div>\n\n        <div class=\"col-lg-3 col-md-3 col-3\" align=\"center\">\n            <div id=\"rounded-container\">\n                <ejs-progressbar #radius4 id='circular4' [type]='type' [maximum]='max4' [minimum]='min4'\n                    [value]='value4' [width]='width' [height]='height' [enablePieProgress]='enablePieProgress4'\n                    [animation]='animation' (load)='load($event)'>\n                </ejs-progressbar>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\" align=\"center\">\n        <button id=\"reLoad\" (click)=\"onClick()\" class=\"e-control e-btn e-lib e-outline e-primary\">Reload</button>\n    </div>\n</div>\n<style>\n    #control-container {\n        padding: 0px !important;\n    }\n\n    #circular_Circulartrack {\n        opacity: 1 !important;\n    }\n\n    .progress-text-align {\n        font-family: Roboto-Regular;\n        font-size: 14px;\n        color: #3D3E3C;\n    }\n\n    #reLoad {\n        border-radius: 4px;\n        text-transform: capitalize;\n        margin-top: 3%;\n    }\n</style>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-progressbar\":\"*\",\"@syncfusion/ej2-angular-progressbar\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}