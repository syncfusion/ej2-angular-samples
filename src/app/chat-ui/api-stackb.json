{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","messageData.ts":"let communityMessageAdmin = {\n    user: 'Alice Brown',\n    id: 'admin',\n    statusIconCss: 'e-icons e-user-busy'\n};\n\nlet communityMessageUser1 = {\n    user: 'Michale Suyama',\n    id: 'user1',\n    avatarBgColor: \"#87cefa\",\n    statusIconCss: 'e-icons e-user-online'\n};\n\nlet communityMessageUser2 = {\n    user: 'Charlie',\n    id: 'user2',\n    avatarUrl: \"https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/charlie.png\",\n    statusIconCss: 'e-icons e-user-away'\n};\n\nlet communityMessageUser3 = {\n    user: 'Janet',\n    id: 'user3',\n    avatarBgColor: \"#dec287\",\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/janet.png',\n    statusIconCss: 'e-icons e-user-offline'\n};\n\nlet communityMessageUser4 = {\n    user: 'Jordan Peele',\n    id: 'user4',\n    statusIconCss: 'e-icons e-user-busy'\n};\n\nlet chatMessageUser1 = {\n    user: 'Albert',\n    id: 'user1',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/andrew.png'\n};\n\nlet chatMessageUser2 = {\n    user: 'Reena',\n    id: 'user2',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/reena.png'\n};\n\nlet integrationMessageUser1 = {\n    user: 'Reena',\n    id: 'user1',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/reena.png'\n};\n\nlet integrationMessageUser2 = {\n    user: 'Albert',\n    id: 'user2',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/andrew.png'\n};\n\nlet botMessage = {\n    user: 'Bot',\n    id: 'bot',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/bot.png'\n};\n\nlet walterMessageUser1 = {\n    user: 'Sam',\n    id: 'user2',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/laura.png'\n};\n\nlet walterMessageUser2 = {\n    user: 'Charlie',\n    id: 'user5',\n    avatarUrl: \"https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/charlie.png\",\n};\n\nlet lauraMessageUser1 = {\n    user: 'Laura Callahan',\n    id: 'user1',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/laura.png'\n};\n\nlet lauraMessageUser2 = {\n    user: 'Sam',\n    id: 'user3',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/laura.png'\n};\n\nlet teamsMessageUser1 = {\n    user: 'Admin',\n    id: 'team'\n};\n\nlet teamsMessageUser2= {\n    user: 'Janet',\n    id: 'user2',\n    avatarUrl: 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/janet.png'\n};\n\nexport const communityMessagedata = [\n    {\n        author: communityMessageAdmin,\n        text: 'Hey Michale, Charlie! Seen the latest posts in the Design Community? Amazing projects!',\n        timeStamp: new Date(\"October 25, 2024 07:30\")\n    },\n    {\n        author: communityMessageUser1,\n        text: 'Hi Alice! Yes, Dana’s new UI design is incredible.',\n        timeStamp: new Date(\"October 25, 2024 08:00\")\n    },\n    {\n        author: communityMessageUser2,\n        text: 'Hey! I loved Dana’s use of color. Frank’s typography guide was great too.',\n        timeStamp: new Date(\"October 25, 2024 11:00\")\n    },\n    {\n        author: communityMessageUser4,\n        text: 'Dana’s work is so inspiring!',\n        timeStamp: new Date(\"October 25, 2024 11:30\")\n    },\n    {\n        author: communityMessageAdmin,\n        text: 'Absolutely! Any new community events planned?',\n        timeStamp: new Date(\"October 26, 2024 11:00\")\n    },\n    {\n        author: communityMessageUser1,\n        text: 'We should organize a design challenge.',\n        timeStamp: new Date(\"October 26, 2024 12:15\")\n    },\n    {\n        author: communityMessageUser3,\n        text: 'I am excited to see the new projects.',\n        timeStamp: new Date(\"October 26, 2024 12:17\")\n    },\n    {\n        author: communityMessageUser2,\n        text: 'Great idea! Let’s discuss it in the next meeting.',\n        timeStamp: new Date(\"October 26, 2024 12:30\")\n    },\n    {\n        author: communityMessageAdmin,\n        text: 'Sounds good! This community is so inspiring.',\n        timeStamp: new Date()\n    },\n    {\n        author: communityMessageUser1,\n        text: 'Agreed! Excited to see everyone’s ideas.',\n        timeStamp: new Date()\n    },\n    {\n        author: communityMessageUser2,\n        text: 'I am looking forward to the design challenge.',\n        timeStamp: new Date()\n    }\n];\n\nexport const chatMessagedata = [\n    {\n        author: chatMessageUser1,\n        text: \"Hi there! How's it going?\"\n    },\n    {\n        author: chatMessageUser2,\n        text: \"Hey! I'm doing well, thanks. How about you?\"\n    },\n    {\n        author: chatMessageUser1,\n        text: \"Mostly the usual stuff. I did start a new hobby - painting!\"\n    },\n];\n\nexport const integrationMessagedata = [\n    {\n        author: integrationMessageUser1,\n        text: \"Hey, I'm having trouble with my computer. It keeps freezing.\"\n    },\n    {\n        author: integrationMessageUser2,\n        text: \"Oh, that's annoying. Have you tried restarting it?\"\n    },\n    {\n        author: integrationMessageUser1,\n        text: \"Yeah, I did, but it didn't help.\"\n    },\n    {\n        author: integrationMessageUser2,\n        text: \"Sometimes, outdated software or malware can cause issues.\"\n    },\n    {\n        author: integrationMessageUser1,\n        text: \"Okay, I'll try that. Thanks for the help!\"\n    }\n];\n\nexport const botMessagedata = [\n    {\n        author: botMessage,\n        text: \"Hello Sam, I am a virtual assitant.\"\n    },\n    {\n        author: botMessage,\n        text: \"Which room are you looking to decorate?\"\n    }\n];\n\nexport const botData = [\n    {\n        text: \"Bedroom\",\n        reply: \"For a bedroom, we can create a serene and calm atmosphere with neutral colors and comfortable bedding.\",\n        suggestions: [\"Garden\", \"Balcony\"]\n    },\n    {\n        text: \"Kitchen\",\n        reply: \"For a kitchen, we can go for a modern, sleek look with stainless steel appliances and minimalist cabinetry. </br> <p>Any other home decor suggestions you'd like to explore ?</p>\",\n        suggestions: [\"Wall art\", \"Plants\"]\n    }\n    \n];\n\nexport const chatSuggestions = [\"Bedroom\", \"Kitchen\"];\n\nexport const walterMessagedata = [\n    {\n        author: walterMessageUser1,\n        text: \"Hey Charlie, have you thought about where you want to go for our vacation?\"\n    },\n    {\n        author: walterMessageUser2,\n        text: \"Hi Sam! I was thinking about going to Bali. I've heard the beaches are beautiful and there's so much to do.\"\n    },\n    {\n        author: walterMessageUser1,\n        text: \"Bali sounds amazing! I've always wanted to try surfing. Do you know any good places to stay?\"\n    },\n    {\n        author: walterMessageUser2,\n        text: \"Yes, I found a few nice resorts and some budget-friendly options too. I'll send you the links.\"\n    },\n    {\n        author: walterMessageUser1,\n        text: \"Great! Let's finalize our plans this weekend.\"\n    }\n];\n\nexport const lauraMessagedata = [\n    {\n        author: lauraMessageUser1,\n        text: \"Hey Sam, can we have a quick meeting tomorrow morning to discuss the new project?\"\n    },\n    {\n        author: lauraMessageUser2,\n        text: \"Sure, what time works best for you?\"\n    },\n    {\n        author: lauraMessageUser1,\n        text: \"10 AM?\"\n    },\n    {\n        author: lauraMessageUser2,\n        text: \"10 AM works for me.\"\n    }\n];\n\nexport const teamsMessagedate = [\n    {\n        author: teamsMessageUser1,\n        text: \"Hi, everyone!, welcome to the new web team\"\n    },\n    {\n        author: teamsMessageUser2,\n        text: \"Hi Sir, excited about the new team.\"\n    },\n    {\n        author: {\n            user: 'Margaret Peacock',\n            id: 'user3'\n        },\n        text: \"Good morning ! suprised with the new team message.\"\n    },\n    {\n        author: communityMessageUser2,\n        text: \"Hi all, what's the purpose of this new team formation ?\"\n    },\n    {\n        author: teamsMessageUser1,\n        text: \"Charlie, we are planning for a new portal launch hence, grouping all in one place.\"\n    }\n];\n\nexport const suyamaMessagedata = [\n    { \n        author: {\n            id: 'user4',\n            user: 'Reena'\n        },\n        text: \"Hi, are you available ?\"\n    }\n];\n\nexport const templateMessagedata = [\n    {\n        text: \"Hello! I'm the Order tracking bot. how can I help you today?\",\n        suggestions: [\"Track an order\", \"Cancel an order\"]\n    },\n    {\n        text: \"Track an order\",\n        reply: 'Please select the order you want to track.',\n        suggestions: [\"Order #67890\", \"Order #53461\"]\n    },\n    {\n        text: \"Order #67890\",\n        reply: \"Fetching details for order <b>#67890</b> </br></br> Your order is currently being processed and will ship in 2-3 days.\",\n        suggestions: [\"Back to main menu\", \"Need help with something else\"]\n    },\n    {\n        text: \"Order #53461\",\n        reply: \"Fetching details for order <b>#53461</b> </br></br> Your order is currently being processed and will ship in 2-3 days.\",\n        suggestions: [\"Back to main menu\", \"Need help with something else\"]\n    },\n    {\n        text: \"Order #87890\",\n        reply: \"Your order <b>#87890</b> has been cancelled.\",\n        suggestions: [\"Back to main menu\", \"Need help with something else\"]\n    },\n    {\n        text: \"Order #90910\",\n        reply: \"Your order <b>#90910</b> has been cancelled.\",\n        suggestions: [\"Back to main menu\", \"Need help with something else\"]\n    },\n    {\n        text: \"Cancel an order\",\n        reply: 'Pick the order you need to cancel.',\n        suggestions: [\"Order #87890\", \"Order #90910\"]\n    },\n    {\n        text: \"Back to main menu\",\n        reply: \"You have returned to the main menu. What would you like to do next?\",\n        suggestions: [\"Track an order\", \"Cancel an order\"]\n    },\n    {\n        text: \"Need help with something else\",\n        reply: \"Please hold while we connect you to a support agent. You can chat with them for any additional queries.\",\n        suggestions: []\n    }\n];\n\nexport const defaultChatSuggestions = [ \"Awesome!\", \"What kind of painting ?\" ];\n\nexport const integrationListTemplateData = [\n    {\n        id: '01',\n        title: 'Albert',\n        imgSrc: 'andrew', message: \"Okay, I'll try that. Thanks for the help!\"\n    },\n    {\n        id: '02',\n        title: 'Bot',\n        imgSrc: 'bot', message: 'Personal decor assistant'\n    },\n    {\n        id: '03',\n        title: 'Charlie',\n        imgSrc: 'charlie', message: \"Great! Let's finalize our plans this weekend.\"\n    },\n    {\n        id: '04',\n        title: 'Laura',\n        imgSrc: 'laura', message: '10 AM works for me.'\n    },\n    {\n        id: '05',\n        title: 'New Dev Team',\n        imgSrc: 'calendar', message: 'User added'\n    },\n    {\n        id: '06',\n        title: 'Reena',\n        imgSrc: 'reena', message: 'You: Hi, are you available ?'\n    },\n];\n\n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ChatUIComponent, ChatUIModule, MessageToolbarItemClickedEventArgs, MessageToolbarSettingsModel, UserModel } from '@syncfusion/ej2-angular-interactive-chat';\nimport { ChangeEventArgs, SwitchModule } from '@syncfusion/ej2-angular-buttons';\nimport { RemoveEventArgs, DropDownListModule, SelectEventArgs, MultiSelectModule, ChangeEventArgs as DDLChangeEventArgs } from '@syncfusion/ej2-angular-dropdowns';\nimport { communityMessagedata } from './messageData';\n\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ChatUIModule,SwitchModule, DropDownListModule, MultiSelectModule,  ]\n})\nexport class AppComponent {\n    @ViewChild('chatUI') public chatUI: ChatUIComponent;\n    public messages = communityMessagedata;\n    public user: UserModel = { user: 'Alice', id: 'admin' };\n    public headerText = 'Design Community';\n    public headerIconCss = 'chat_header_icon';\n    public timeStampFormatOptions: Object[] = [\n        { text: 'MM/dd hh:mm a', value: 'MM/dd hh:mm a' },\n        { text: 'dd/MM/yy hh:mm a', value: 'dd/MM/yy hh:mm a' },\n        { text: 'hh:mm a', value: 'hh:mm a' },\n        { text: 'MMMM hh:mm a', value: 'MMMM hh:mm a' }\n    ];\n    public typingUserOptions: Object[] = [\n        { text: 'Michale', value: 'Michale' },\n        { text: 'Laura', value: 'Laura' },\n        { text: 'Charlie', value: 'Charlie' },\n        { text: 'Jordan', value: 'Jordan'}\n    ];\n    public typingUsers: UserModel[] = [];\n    public toolbarSettings: MessageToolbarSettingsModel = {\n        items: [\n            { type: 'Button', iconCss: 'e-icons e-chat-forward', tooltip: 'Forward', },\n            { type: 'Button', iconCss: 'e-icons e-chat-copy', tooltip: 'Copy' },\n            { type: 'Button', iconCss: 'e-icons e-chat-reply', tooltip: 'Reply' },\n            { type: 'Button', iconCss: 'e-icons e-chat-pin', tooltip: 'Pin' },\n            { type: 'Button', iconCss: 'e-icons e-chat-trash', tooltip: 'Delete' }\n        ],\n        itemClicked: (args: MessageToolbarItemClickedEventArgs) => {\n            if (args.item.prefixIcon === 'e-icons e-chat-forward') {\n                const newMessageObj = args.message;\n                newMessageObj.isForwarded = true;\n                this.chatUI.addMessage(newMessageObj);\n            }\n        }\n    }\n\n    onTimeStampSwitchChange(args: ChangeEventArgs) {\n        this.chatUI.showTimeStamp = args.checked;\n    }\n\n    onTimeBreakSwitchChange(args: ChangeEventArgs) {\n        this.chatUI.showTimeBreak = args.checked;\n    }\n\n    onHeaderSwitchChange(args: ChangeEventArgs) {\n        this.chatUI.showHeader = args.checked;\n    }\n\n    onFooterSwitchChange(args: ChangeEventArgs) {\n        this.chatUI.showFooter = args.checked;\n    }\n\n    onTimeStampFormatChange(args: DDLChangeEventArgs) {\n        this.chatUI.timeStampFormat = args.value.toString();\n    }\n\n    onCompactModeSwitchChange(args: ChangeEventArgs) {\n        this.chatUI.enableCompactMode = args.checked;\n    }\n\n    onTypingUsersSelect(args: SelectEventArgs) {\n        const user = this.createUserForTyping(args.itemData.value);\n        this.typingUsers = [...this.typingUsers, user];\n        this.chatUI.typingUsers = this.typingUsers;\n    }\n\n    onTypingUsersRemove(args: RemoveEventArgs) {\n        this.typingUsers = this.typingUsers.filter(user => user.user !== args.itemData.value);\n        this.chatUI.typingUsers = this.typingUsers;\n    }\n\n    private createUserForTyping(userName: string) {\n        let avatarBgColor: string = '#87cefa';\n        let avatarUrl: string;\n        \n        if (userName === 'Laura') {\n            avatarBgColor = '#dec287';\n            avatarUrl = 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/laura.png';\n        } else if (userName === 'Charlie') {\n            avatarBgColor = '#e6cdde';\n            avatarUrl = 'https://ej2.syncfusion.com/angular/demos/assets/chat-ui/images/charlie.png';\n        }\n\n        return { user: userName, avatarBgColor, avatarUrl };\n    }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section sb-property-border\">\n    <div class=\"api-chatui\"> \n        <div id=\"chatui\" ejs-chatui #chatUI [messages]=\"messages\" [user]=\"user\" [headerText]=\"headerText\" [headerIconCss]=\"headerIconCss\" showTimeBreak=\"true\" timeStampFormat=\"MM/dd hh:mm a\" [messageToolbarSettings]=\"toolbarSettings\"></div>\n    </div>\n</div>\n\n<div class=\"col-lg-4 property-section chat-property-section\">\n    <div class=\"property-panel-header\"> Properties </div>\n    <div class=\"property-panel-content\">\n        <table class=\"property-panel-table\">\n            <tbody>\n                <tr>\n                    <td>\n                        <div>Timestamp format</div>\n                    </td>\n                    <td style=\"padding-right: 10px\">\n                        <ejs-dropdownlist id=\"chat_dateformats\" placeholder='Format' width='180px' value='MM/dd hh:mm a'\n                                        [dataSource]=\"timeStampFormatOptions\" (change)=\"onTimeStampFormatChange($event)\">\n                        </ejs-dropdownlist>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Show timestamp</div>\n                    </td>\n                    <td style=\"padding-right: 10px\">\n                        <ejs-switch id=\"chatTimestamp\" [checked]=\"true\" (change)=\"onTimeStampSwitchChange($event)\"></ejs-switch>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Show timebreak</div>\n                    </td>\n                    <td style=\"padding-right: 10px\">\n                        <ejs-switch id=\"chatTimebreak\" [checked]=\"true\" (change)=\"onTimeBreakSwitchChange($event)\"></ejs-switch>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Show header</div>\n                    </td>\n                    <td style=\"padding-right: 10px\">\n                        <ejs-switch id=\"chatHeader\" [checked]=\"true\" (change)=\"onHeaderSwitchChange($event)\"></ejs-switch>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Show footer</div>\n                    </td>\n                    <td style=\"padding-right: 10px\">\n                        <ejs-switch id=\"chatFooter\" [checked]=\"true\" (change)=\"onFooterSwitchChange($event)\"></ejs-switch>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Compact Mode</div>\n                    </td>\n                    <td style=\"padding-right: 10px\">\n                        <ejs-switch id=\"compactMode\" [checked]=\"false\" (change)=\"onCompactModeSwitchChange($event)\"></ejs-switch>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Typing users</div>\n                    </td>\n                    <td style=\"padding-right: 10px\">\n                        <ejs-multiselect id=\"chat_typingUsers\" placeholder='Typing users...' [dataSource]=\"typingUserOptions\"\n                                        (select)=\"onTypingUsersSelect($event)\" (removed)=\"onTypingUsersRemove($event)\">\n                        </ejs-multiselect>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n","app.component.css":".api-chatui {\n    height: 500px;\n    width: 60%;\n    margin: 0 auto;\n}\n\n.api-chatui .chat_header_icon {\n    background-image: url('/assets/chat-ui/images/public-event.png');\n    background-color: unset;\n}\n\n.chat-property-section .property-panel-content td {\n    padding: 10px 0px;\n}\n\n.chat-property-section .e-multiselect,\n.chat-property-section .e-multi-select-wrapper {\n    padding-left: 0;\n    padding-top: 0;\n}\n\n@media only screen and (max-width: 850px) {\n    .api-chatui {\n        width: 80%;\n    }\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-interactive-chat\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-interactive-chat\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}