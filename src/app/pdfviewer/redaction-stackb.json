{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, OnInit, ViewChild } from '@angular/core';\nimport { PdfViewerComponent, LinkAnnotationService, BookmarkViewService, MagnificationService, ToolbarService, NavigationService, TextSelectionService, PrintService, PageChangeEventArgs, LoadEventArgs, AnnotationService, FormDesignerService, PageOrganizerService, TextSearchService, PdfViewerModule, AnnotationAddEventArgs, AnnotationRemoveEventArgs, CreateArgs } from '@syncfusion/ej2-angular-pdfviewer';\nimport { ToolbarComponent, ToolbarModule, MenuModule, AppBarModule, ChangeEventArgs } from '@syncfusion/ej2-angular-navigations';\nimport { DialogComponent, DialogModule } from '@syncfusion/ej2-angular-popups';\nimport { ClickEventArgs } from '@syncfusion/ej2-buttons';\nimport { ButtonComponent, ButtonModule, SwitchModule } from '@syncfusion/ej2-angular-buttons';\n\n\nimport { ComboBoxModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { UploaderComponent, UploaderModule } from '@syncfusion/ej2-angular-inputs';\n/**\n * Default PdfViewer Controller\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    providers: [LinkAnnotationService, BookmarkViewService, TextSearchService, TextSelectionService, MagnificationService, ToolbarService, NavigationService, TextSelectionService, PrintService, AnnotationService, FormDesignerService, PageOrganizerService],\n    styleUrls: ['app.component.css'],\n    standalone: true,\n    imports: [\n        SwitchModule,\n        AppBarModule,\n        ToolbarModule,\n        MenuModule,\n        PdfViewerModule,\n        \n        \n        ButtonModule,\n        DialogModule,\n        UploaderModule,\n        ComboBoxModule\n    ],\n})\n\nexport class AppComponent {\n\n    @ViewChild('pdfviewer')\n    public pdfviewerControl: PdfViewerComponent;\n\n    @ViewChild('primaryToolbar')\n    public primaryToolbar: ToolbarComponent;\n\n    @ViewChild('secondaryToolbar')\n    public secondaryToolbar: ToolbarComponent;\n\n    @ViewChild('defaultButtonDownload') downloadBtn: ButtonComponent;\n\n    @ViewChild('dialogComponent')\n    public dialog: DialogComponent;\n\n    @ViewChild('cancelButton')\n    public cancelButton: ButtonComponent;\n    public showCloseIcon: Boolean = true;\n    public height = '482px';\n    public target = '#e-pv-redact-sb-panel';\n    public width = '477px';\n    public visible: Boolean = false;\n    public isModal: Boolean = true;\n\n    @ViewChild('defaultupload')\n    public uploadObj: UploaderComponent;\n    public path: Object = {\n        saveUrl: 'https://services.syncfusion.com/angular/production/api/FileUploader/Save',\n        removeUrl: 'https://services.syncfusion.com/angular/production/api/FileUploader/Remove'\n    };\n    public dropElement: HTMLElement = document.getElementsByClassName('drop-area-wrap')[0] as HTMLElement;\n    public allowedExtensions = '.png, .jpg, .jpeg';\n    public imageSrc: any;\n\n    public onFileChange(args: any): void {\n        var file = args.file[0].rawFile;\n        let imageElement = document.getElementById('imageView');\n        let imageElementContainer = document.getElementById('imageContainer');\n        let base64String: any;\n        var reader = new FileReader();\n        reader.onload = (e) => {\n            base64String = e.target?.result as string;\n            this.imageSrc = base64String;\n            this.customStampSource = this.imageSrc;\n            (imageElement as any).src = this.imageSrc;\n            imageElementContainer.className =\n                'image-container e-pv-redact-sb-image-container-selected';\n            (imageElement as any).style.display = 'block';\n            // Bind click event to the image element\n            imageElement.addEventListener('click', this.handleImageClick.bind(this));\n        };\n        reader.readAsDataURL(file);\n    }\n\n    public handleImageClick() {\n        this.customStampSource = this.imageSrc;\n        this.dialog.hide();\n        this.addImage();\n    }\n\n    public ngAfterViewInit(): void {\n        this.downloadBtn.element.setAttribute(\"aria-label\", \"menu\");\n    }\n\n    public document: string = \"https://cdn.syncfusion.com/content/pdf/programmatical-annotations.pdf\";\n    public resource: string = \"https://cdn.syncfusion.com/ej2/27.2.2/dist/ej2-pdfviewer-lib\"; \n    public url: string = \"https://ej2services.syncfusion.com/angular/development/api/pdfviewer/Redaction\";\n\n    //zoom value\n    public data: string[] = ['10%', '25%', '50%', '75%', '100%', '200%', '400%'];\n    ngOnInit(): void {\n        document.getElementById('fileUpload').addEventListener('change', this.readFile.bind(this));\n    }\n\n    public annotation: any;\n    public redactionCount: number = 0;\n    public fileName: string = \"programmatical-annotations.pdf\";\n    //Updating the number of redaction while the annotation has been added\n    annotationAdd = (e: AnnotationAddEventArgs): void => {\n        var pdfAnnotationList = new Array();\n        pdfAnnotationList = this.pdfviewerControl.annotationCollection;\n        var selectedAnnotationIndex = pdfAnnotationList.findIndex(item => item.annotationId == e.annotationId);\n        if (selectedAnnotationIndex != -1) {\n            this.annotation = pdfAnnotationList[selectedAnnotationIndex];\n        }\n        if (this.annotation.author == \"Redaction\" || this.annotation.customStampName == \"Image\" || this.annotation.author == \"Pattern\" || this.annotation.author == \"Text\") {\n            this.redactionCount = this.redactionCount + 1;\n            this.updateRedaction();\n        }\n\n    }\n    //Updating the number of redaction while the annotation has been removed\n    annotationRemove = (e: AnnotationRemoveEventArgs): void => {\n        if (this.annotation.author == \"Redaction\" || this.annotation.customStampName == \"Image\" || this.annotation.author == \"Pattern\" || this.annotation.author == \"Text\") {\n            this.redactionCount = this.redactionCount - 1;\n            this.updateRedaction();\n        }\n    }\n\n    //To enable the redaction button based on count\n    public updateRedaction(): void {\n        if (this.redactionCount <= 0) {\n            this.primaryToolbar.items[8].disabled = true;\n        }\n        else {\n            this.primaryToolbar.items[8].disabled = false;\n        }\n    }\n\n    //to read the file\n    // tslint:disable-next-line\n    private readFile(args: any): void {\n        // tslint:disable-next-line\n        let upoadedFiles: any = args.target.files;\n        if (args.target.files[0] !== null) {\n            let uploadedFile: File = upoadedFiles[0];\n            this.fileName = upoadedFiles[0].name;\n            if (uploadedFile) {\n                let reader: FileReader = new FileReader();\n                reader.readAsDataURL(uploadedFile);\n                // tslint:disable-next-line\n                let proxy: any = this;\n                // tslint:disable-next-line\n                reader.onload = (e: any): void => {\n                    let uploadedFileUrl: string = e.currentTarget.result;\n                    proxy.pdfviewerControl.documentPath = uploadedFileUrl;\n                    proxy.pdfviewerControl.fileName = proxy.fileName;\n                    proxy.pdfviewerControl.downloadFileName = proxy.fileName;\n                };\n            }\n        }\n    }\n\n    //To open a file from viewer\n    public openDocumentClicked(e: ClickEventArgs): void {\n        document.getElementById('fileUpload').click();\n    }\n\n    //when the image button is clicked\n    public imageDialog = (): void => {\n        this.dialog.show();\n    }\n\n    //when cancel button clicked\n    public closeDialog(e: ClickEventArgs): void {\n        this.dialog.hide();\n    }\n\n    //Method to create rectangle annotation when \"Text\" button is clicked\n    public addText(e: ClickEventArgs): void {\n        this.pdfviewerControl.rectangleSettings = {\n            fillColor: '#a3a2a0',\n            strokeColor: '#a3a2a0',\n            author: 'Text'\n        }\n        this.pdfviewerControl.annotation.setAnnotationMode('Rectangle');\n    }\n\n    public customStampSource: any = \"\";\n    //Adding the image to the pdf\n    public addImage(): void {\n        this.pdfviewerControl.stampSettings.author = \"Image\";\n        this.pdfviewerControl.customStampSettings = {\n            width: 200,\n            author: 'Image',\n            height: 125,\n            isAddToMenu: false,\n            enableCustomStamp: false\n\n        };\n        this.pdfviewerControl.customStamp = [\n            {\n                customStampName: 'Image',\n                customStampImageSource: this.customStampSource\n            },\n        ];\n    }\n\n    //Method to create rectangle annotation when the \"Pattern\" button is clicked\n    public addPattern(e: ClickEventArgs): void {\n        this.pdfviewerControl.rectangleSettings = {\n            fillColor: '#dedfe0',\n            strokeColor: '#dedfe0',\n            author: 'Pattern'\n        }\n        this.pdfviewerControl.annotation.setAnnotationMode('Rectangle');\n    }\n\n    //Method to create rectangle annotation when the \"Blackout\" button is clicked\n    public addBlackout(e: ClickEventArgs): void {\n        this.pdfviewerControl.rectangleSettings = {\n            fillColor: '#000000',\n            strokeColor: '#000000',\n            author: 'Redaction'\n        }\n        this.pdfviewerControl.annotation.setAnnotationMode('Rectangle');\n    }\n\n    //Method to create rectangle annotation when the \"Whiteout\" button is clicked\n    public addWhiteout(e: ClickEventArgs): void {\n        this.pdfviewerControl.rectangleSettings = {\n            fillColor: '#ffffff',\n            strokeColor: '#ffffff',\n            author: 'Redaction'\n        }\n        this.pdfviewerControl.annotation.setAnnotationMode('Rectangle');\n\n    }\n    //To download the redacted pdf \n    public download(e: ClickEventArgs): void {\n        this.pdfviewerControl.saveAsBlob().then((blob) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onload = (e: ProgressEvent<FileReader>) => {\n              const base64String = e.target?.result;\n              const xhr = new XMLHttpRequest();\n              xhr.open('POST', this.url, true);\n              xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n              const requestData = JSON.stringify({ base64String });\n              xhr.onload = () => {\n                if (xhr.status === 200) {\n                  const responseBase64 = xhr.responseText.split('base64,')[1];\n                  if (responseBase64) {\n                    const blob = this.createBloburl(responseBase64, 'application/pdf');\n                    const blobUrl = URL.createObjectURL(blob);\n                    this.downloadDocument(blobUrl);\n                  } else {\n                    console.error('Invalid base64 response.');\n                  }\n                } else {\n                  console.error('Download failed:', xhr.statusText);\n                }\n              };\n              xhr.onerror = () => {\n                console.error('An error occurred during the download:', xhr.statusText);\n              };\n              xhr.send(requestData);\n            };\n          }).catch((error) => {\n            console.error('Error saving Blob:', error);\n          });\n    }\n\n    public createBloburl(base64String: string, contentType: string):Blob{\n        const sliceSize = 512;\n        const byteCharacters = atob(base64String);\n        const byteArrays: Uint8Array[] = [];\n        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n            const slice = byteCharacters.slice(offset, offset + sliceSize);\n            const byteNumbers = Array.from(slice, char => char.charCodeAt(0));\n            byteArrays.push(new Uint8Array(byteNumbers));\n        }\n        return new Blob(byteArrays, { type: contentType });\n    }\n\n    public downloadDocument(blobUrl: string):void{\n        const anchorElement = document.createElement('a');\n        anchorElement.href = blobUrl;\n        anchorElement.target = '_parent';\n        this.pdfviewerControl.fileName = this.fileName;\n        const downloadFileName = this.pdfviewerControl.fileName || 'downloadedFile.pdf';\n        anchorElement.download = downloadFileName.endsWith('.pdf') ? downloadFileName : `${downloadFileName}.pdf`;\n        document.body.appendChild(anchorElement);\n        anchorElement.click();\n        document.body.removeChild(anchorElement);\n        URL.revokeObjectURL(blobUrl);\n    }\n\n    //Method for moving to previous page\n    public previousClicked(e: ClickEventArgs): void {\n        this.pdfviewerControl.navigation.goToPreviousPage();\n    }\n\n    //Method for moving to next page \n    public nextClicked(e: ClickEventArgs): void {\n        this.pdfviewerControl.navigation.goToNextPage();\n    }\n\n    //to get current page\n    public pageChanged(e: PageChangeEventArgs): void {\n        (document.getElementById('e-pv-redact-sb-currentPage') as HTMLSpanElement).textContent = this.pdfviewerControl.currentPageNumber.toString() + ' ';\n        this.updatePageNavigation();\n    }\n\n    public onLoad(e: CreateArgs)\n    {\n        (document.getElementById('e-pv-redact-sb-drop-area-wrap') as HTMLDivElement).style.display=\"flex\";\n        (document.getElementById('e-pv-redact-sb-appbar') as HTMLDivElement).style.display=\"block\";\n    }\n\n    //while loading document\n    public documentLoaded(e: LoadEventArgs): void {\n        document.getElementById('e-pv-redact-sb-totalPage').textContent = '/ ' + this.pdfviewerControl.pageCount;\n        (document.getElementById('e-pv-redact-sb-currentPage') as HTMLSpanElement).textContent = this.pdfviewerControl.currentPageNumber.toString() + ' ';\n        this.updatePageNavigation();\n        this.updateRedaction();\n    }\n\n    //Zoom values changes when the percentage is selected from the dropdown\n    public zoom: any;\n    public previousZoom: any;\n    public zoomValueChange(e: ChangeEventArgs) {\n        this.zoom = (e as any).value;\n        this.previousZoom = (e as any).previousItemData.value;\n        if (this.zoom !== null || this.previousZoom !== null) {\n            var zoomchange = parseInt(this.zoom.replace(\"%\", \"\"), 10);\n            this.pdfviewerControl.magnificationModule.zoomTo(zoomchange);\n        }\n    }\n\n    //Updating the navigation button based on the page number either \"enabled\" or \"disabled\"\n    private updatePageNavigation(): void {\n        if (this.pdfviewerControl.currentPageNumber === 1) {\n            this.secondaryToolbar.items[0].disabled=true;\n            this.secondaryToolbar.items[2].disabled=false;\n        } else if (this.pdfviewerControl.currentPageNumber === this.pdfviewerControl.pageCount) {\n            this.secondaryToolbar.items[0].disabled=false;\n            this.secondaryToolbar.items[2].disabled=true;\n        } else {\n            this.secondaryToolbar.items[0].disabled=false;\n            this.secondaryToolbar.items[2].disabled=false;\n        }\n    }\n\n    //To redact the pdf in server side using the button click event\n    public redaction(): void {\n        if (this.redactionCount > 0) {\n            this.pdfviewerControl.saveAsBlob().then((blob) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(blob);\n                reader.onload = (e: ProgressEvent<FileReader>) => {\n                    const base64String = e.target?.result;\n                    const xhr = new XMLHttpRequest();\n                    xhr.open('POST', this.url, true);\n                    xhr.setRequestHeader('Content-type', 'application/json; charset=UTF-8');\n                    const requestData = JSON.stringify({ base64String });\n                    xhr.onload = () => {\n                        if (xhr.status === 200) {\n                            this.pdfviewerControl.load(xhr.responseText, null);\n                        }\n                        else {\n                            console.error('Redaction failed:', xhr.statusText);\n                        }\n                    };\n                    xhr.onerror = function () {\n                        console.error('An error occurred during the redaction:', xhr.statusText);\n                    };\n                    xhr.send(requestData);\n                }\n            });\n            this.redactionCount = 0;\n            this.updateRedaction();\n        }\n    }\n\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\" id=\"e-pv-redact-sb-panel\">\n    <div class=\"content-wrapper\">\n        <div class=\"flex-container\">\n        </div>\n        <!--Appbar-->\n        <div class=\"row\" [style.display]=\"'none'\" id=\"e-pv-redact-sb-appbar\">\n            <div class=\"col-md-12\">\n                <ejs-appbar colorMode=\"Primary\" (created)=\"onLoad($event)\">\n                    <span class=\"regular\">Redaction</span>\n                    <div class=\"e-appbar-spacer\"></div>\n                    <button #defaultButtonDownload ejs-button cssClass=\"e-inherit\"\n                        iconCss=\"e-icons e-download e-btn-icon e-icon-left\" (click)=\"download($event)\">Download</button>\n                </ejs-appbar>\n            </div>\n        </div>\n\n        <!--primary toolbar-->\n        <div class=\"e-sample-resize-container\">\n            <!-- Render the Toolbar Component -->\n            <ejs-toolbar overflowMode='Popup' cssClass=\"template\" id=\"e-pv-redact-sb-toolbar\" #primaryToolbar>\n                <e-items>\n                    <e-item prefixIcon=\"e-icon e-folder\" tooltipText=\"Open\" id=\"pdfviewer_open\" text=\"Open\"\n                        (click)=\"openDocumentClicked($event)\"></e-item>\n                    <e-item type=\"Separator\"></e-item>\n                    <e-item prefixIcon=\"e-icon e-text-annotation\" tooltipText=\"Text\" cssClass=\"e-pv-redact-sb-font-container\"\n                        text=\"Text\" (click)=\"addText($event)\"></e-item>\n                    <e-item prefixIcon=\"e-icons e-image\" tooltipText=\"Image\" cssClass=\"e-pv-redact-sb-image-container\"\n                        text=\"Image\" id=\"targetButton\" (click)=\"imageDialog()\"></e-item>\n                    <e-item prefixIcon=\"e-icons e-opacity\" tooltipText=\"Pattern\" cssClass=\"e-pv-redact-sb-pattern-container\"\n                        text=\"Pattern\" (click)=\"addPattern($event)\"></e-item>\n                    <e-item prefixIcon=\"e-icons black-out\" tooltipText=\"Black out\" cssClass=\"e-pv-redact-sb-black-out-container\"\n                        text=\"Blackout\" (click)=\"addBlackout($event)\"></e-item>\n                    <e-item prefixIcon=\"e-icons white-out\" tooltipText=\"White out\" cssClass=\"e-pv-redact-sb-white-out-container\"\n                        text=\"Whiteout\" (click)=\"addWhiteout($event)\"></e-item>\n                    <e-item type=\"Separator\"></e-item>\n                    <e-item prefixIcon=\"e-icons e-redact\" cssClass=\"e-pv-redact-sb-redaction-container\" text=\"Redact\"\n                        id=\"redacticon\" (click)=\"redaction()\" [disabled]=\"true\"></e-item>\n                </e-items>\n            </ejs-toolbar>\n        </div>\n        <!--secondary toolbar-->\n        <div id=\"e-pv-redact-sb-toolbar-secondary\" class=\"e-pv-secondary-toolbar\">\n            <ejs-toolbar #secondaryToolbar>\n                <e-items>\n                    <e-item prefixIcon=\"e-icons e-chevron-left\" cssClas=\"e-pv-redact-sb-previous-container\" id=\"previousPage\"\n                        (click)=\"previousClicked($event)\" [disabled]=\"true\"></e-item>\n\n                    <e-item>\n                        <ng-template #template>\n                                <div>\n                                    <span id=\"e-pv-redact-sb-currentPage\">1 &ensp;</span>\n                                    <span id=\"e-pv-redact-sb-totalPage\">/ 1</span>\n                                </div>\n                        </ng-template>\n                    </e-item>\n\n                    <e-item prefixIcon=\"e-icon e-chevron-right\" cssClass=\"e-pv-redact-sb-next-container\" id=\"nextPage\"\n                        (click)=\"nextClicked($event)\" [disabled]=\"true\"></e-item>\n\n                    <e-item type=\"Separator\"></e-item>\n\n                    <e-item cssClass=\"percentage\">\n                        <ng-template #template>\n                            <ejs-combobox id='comboelement' [dataSource]='data' value=\"100%\" [showClearButton]='false'\n                                (change)=\"zoomValueChange($event)\" width=\"90px\">\n                            </ejs-combobox>\n                        </ng-template>\n                    </e-item>\n                </e-items>\n            </ejs-toolbar>\n        </div>\n        <!--pdfviewer-->\n        <ejs-pdfviewer #pdfviewer id='pdfViewer' [documentPath]='document' [resourceUrl]='resource'\n            (pageChange)='pageChanged($event)' (documentLoad)='documentLoaded($event)'\n            (annotationAdd)='annotationAdd($event)' (annotationRemove)='annotationRemove($event)' [enableAnnotationToolbar] =\"false\" [enableCommentPanel] = \"false\" [enableToolbar]=false\n            [enableNavigationToolbar]=false (created)='onLoad($event)' style=\"height:640px; display: block\">\n        </ejs-pdfviewer>\n        <input type=\"file\" id=\"fileUpload\" accept=\".pdf\" style=\"display:block;visibility:hidden;width:0;height:0;\">\n\n        <!--dialog box-->\n        <div class=\"control-section template\">\n            <ejs-dialog id=\"e-pv-redact-sb-dialog\" #dialogComponent [height]='height' [showCloseIcon]='showCloseIcon' [target]='target'\n                [width]='width' [visible]='visible' [isModal]='isModal'>\n                <ng-template #footerTemplate>\n                    <button id=\"cancelButton\" #cancelButton class=\"e-control e-btn e-primary\" data-ripple=\"true\"\n                        (click)=\"closeDialog($event)\">Cancel</button>\n                </ng-template>\n                <ng-template #header>\n                    <div id=\"dlg-template\" title=\"upload\" class=\"e-icon-settings\"> Upload Image </div>\n                </ng-template>\n\n                <div class=\"drop-area-wrap\" id=\"e-pv-redact-sb-drop-area-wrap\" [style.display]=\"'none'\">\n                    <div id='e-pv-redact-sb-defaultfileupload'>\n                        <div class=\"control_wrapper\">\n                            <ejs-uploader #defaultupload id='defaultfileupload' [asyncSettings]='path' [dropArea]='dropElement'\n                                (change)='onFileChange($event)' [allowedExtensions]='allowedExtensions' ></ejs-uploader>\n                            <span class=\"e-file-drop\">Or drop files here</span>\n                            <div>(Only JPG and PNG images will be accepted)</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"e-pv-redact-sb-image-list\">\n                    <div id='imageContainer' class=\"e-pv-redact-sb-image-container\">\n                        <img id='imageView' class=\"e-pv-redact-sb-image-source\" style=\"display:none\"/>\n                    </div>\n                </div>\n\n            </ejs-dialog>\n        </div>\n    </div>\n</div>\n\n\n","app.component.css":"/* custom code start*/\n#magnificationToolbar {\n    background: transparent;\n    height: auto;\n    min-height: 56px;\n    width: 200px;\n    border: none;\n    position: absolute;\n    z-index: 1001;\n    bottom: 58px;\n    right: 16px;\n    transform: rotate(90deg);\n}\n\n@font-face {\n    font-family: \"e-icons-pv\";\n    font-style: normal;\n    font-weight: normal;\n    src: url(data:application/x-font-ttf;charset=utf-8;base64,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ZWd1bGFyY3VzdG9tLXRvb2xiYXJbMTkwOF1jdXN0b20tdG9vbGJhclsxOTA4XVZlcnNpb24gMS4wY3VzdG9tLXRvb2xiYXJbMTkwOF1Gb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAGMAdQBzAHQAbwBtAC0AdABvAG8AbABiAGEAcgBbADEAOQAwADgAXQBSAGUAZwB1AGwAYQByAGMAdQBzAHQAbwBtAC0AdABvAG8AbABiAGEAcgBbADEAOQAwADgAXQBjAHUAcwB0AG8AbQAtAHQAbwBvAGwAYgBhAHIAWwAxADkAMAA4AF0AVgBlAHIAcwBpAG8AbgAgADEALgAwAGMAdQBzAHQAbwBtAC0AdABvAG8AbABiAGEAcgBbADEAOQAwADgAXQBGAG8AbgB0ACAAZwBlAG4AZQByAGEAdABlAGQAIAB1AHMAaQBuAGcAIABTAHkAbgBjAGYAdQBzAGkAbwBuACAATQBlAHQAcgBvACAAUwB0AHUAZABpAG8AdwB3AHcALgBzAHkAbgBjAGYAdQBzAGkAbwBuAC4AYwBvAG0AAAAAAgAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAQIBAwEEAQUBBgEHAQgBCQEKAQsBDAENAQ4BDwAIVG9wLWljb24LZG93bi1hcnJvdzIKUFZfWm9vbW91dAlQVl9ab29taW4LUFZfRG93bmxvYWQLUFZfQm9va21hcmsJUFZfU2VhcmNoCFBWX1ByaW50C1BWX1ByZXZpb3VzB1BWX05leHQIUFZfQ2xvc2UMUFZfRml0VG9QYWdlB1BWX09wZW4AAA==) format('truetype');\n}\n\n.e-pv-fit-page-icon::before {\n    content: '\\e91b';\n    font-family: \"e-icons-pv\";\n}\n\n#magnificationToolbar.e-toolbar .e-toolbar-items {\n    background: transparent;\n}\n\n#magnificationToolbar.e-toolbar .e-tbar-btn {\n    border-radius: 50%;\n    min-height: 30px;\n    min-width: 30px;\n    border: 1px solid #c8c8c8;\n    transform: rotate(90deg);\n}\n\n#topToolbar {\n    top: 0px;\n    z-index: 1001;\n}\n\n.e-tbar-section .e-sample-resize-container {\n    height: 46px;\n}\n\n.e-bookmark-popup {\n    height: 200px;\n    max-width: 250px;\n}\n\n.e-text-search-popup {\n    height: 104px;\n    max-width: 348px;\n}\n\n.e-custom-search-input {\n    width: 234px;\n}\n\n.e-text-search-popup .e-footer-content, .e-bookmark-popup .e-footer-content {\n    padding: 0;\n    height: 0;\n}\n\n.search-button, .search-button:disabled, .search-button:focus, .search-button:hover  {\n    background: transparent;\n    box-shadow: none;\n}\n\n#popup .e-dlg-content {\n    padding-left: 0;\n    padding-bottom: 0;\n}\n\n.e-pv-bookmarks {\n    min-width: 234px;\n}\n\n.e-pv-current-page-number {\n    width: 46px;\n    height: 28px;\n    text-align: center;\n}\n\n.material .e-pv-current-page-number {\n    border-width: 1px;\n}\n.e-pv-zoom-out-sample {    \n    transform: rotate(90deg);\n    padding-right: 2px;\n}\n.customtoolbar.e-toolbar {\n background-color: #3f51b5;\nwidth: 50px;\n}\n.customtoolbar.e-toolbar .e-toolbar-items{\n    background-color: #3f51b5;\n    height: 40px;  \n    display: flex;\n    flex-wrap: wrap;\n    \n}\n.e-pv-icon-search::before {\n    font-size: 12px;\n}\n.e-pv-search-input.e-input-group .e-input-search-group-icon.e-input-group-icon {\n    background: rgba(0,0,0,0);\n}\n\n/* custom code end*/\n\n/* style for slider button*/\n\n.flex-container {\n    display: flex;\n    justify-content: flex-end;\n}\n\n.render-mode-info {\n    background: none;\n    border: none;\n    padding-left: 0px;\n}\n\n.render-mode-info .render-mode-info-icon {\n    height: 16px;\n    width: 16px;\n}\n\n.switchLabel {\n    font-family: \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", sans-serif;        \n    font-weight: 400;\n    line-height: 20px;\n    letter-spacing: 0.24px;\n    text-align: right;\n    font-size: 14px;\n}\n\n.render-mode-info .render-mode-info-icon::before {\n    line-height: 0.5rem;\n}\n\n.buttonSwitch {\n    Width: 40px;\n    Height: 24px;\n}\n\n.pdfviewer-property-section{\n    padding: 20px 15px;\n}\n\n.pdfviewer-contextmenu-checkbox-label{\n    padding: 10px;\n}\n\n.pdfviewer-control-section {\n    border-right: 1px solid #D7D7D7;\n}\n\n.pdfviewer-property-container{\n    padding-bottom: 30px;\n}\n\n.header-pdfviewer {\n    font-weight: 600;\n    padding: 20px 2px;\n}\n/*redaction style*/\n#e-pv-redact-sb-panel.control-section .e-appbar {\n    height: 36px;\n    font-size: 14px !important;\n}\n\n#e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn {\n    flex-direction: column;\n}  \n#e-pv-redact-sb-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn .e-icons.e-btn-icon \n{\n    font-size: 18px;\n}\n#e-pv-redact-sb-toolbar\n{\n    padding: 0 9px;\n}\n#e-pv-redact-sb-toolbar .e-toolbar-items\n{\n    gap: 5px;\n}\n\n#e-pv-redact-sb-toolbar .e-toolbar-item.e-separator\n{\n    height: 48px !important;\n}\n#e-pv-redact-sb-toolbar , .e-toolbar\n{\n    border-left-width: 1px !important;\n    border-right-width: 1px !important;\n}\n\n#e-pv-redact-sb-toolbar-secondary .e-toolbar\n{\n    border-top-width: 1px !important;\n    border: 0 solid var(--color-sf-border-light);\n    --color-sf-border-light: #e0e0e0;\n}\n\n#e-pv-redact-sb-currentPage\n{\n    font-size: 12px;\n}\n#e-pv-redact-sb-totalPage \n{\n    font-weight: 400;\n} \n\n.e-pv-redact-sb-black-out-container .black-out {\n    background-color: black;\n    width: 18px !important;\n    height: 18px !important;\n    border: 1px solid white;\n    border-radius: 3px;\n    margin:4px !important;\n    }\n.e-pv-redact-sb-white-out-container .white-out {\n    background-color: white;\n    width: 18px !important;\n    height: 18px !important;\n    border: 1px solid black;\n    border-radius: 3px;\n    margin:4px !important;\n}\n.e-bigger .e-pv-redact-sb-black-out-container .black-out,\n    .e-bigger .e-pv-redact-sb-white-out-container.white-out {\n        position: relative;\n        top: -4px;\n}\n.e-bigger .e-toolbar .e-toolbar-item.e-pv-redact-sb-black-out-container .e-tbar-btn.e-btn,\n    .e-bigger .e-toolbar .e-toolbar-item.e-pv-redact-sb-white-out-container .e-tbar-btn.e-btn {\n        padding-top : 5px !important;\n}\n.e-bigger .e-pv-redact-sb-black-out-container .e-tbar-btn .e-tbar-btn-text,\n     .e-bigger .e-pv-redact-sb-white-out-container .e-tbar-btn .e-tbar-btn-text{\n         padding: 2px 4px 7px 4px !important;\n}\n/*upload image*/\n#e-pv-redact-sb-dialog.e-dialog #e-pv-redact-sb-defaultfileupload.e-upload-files {\n        border: none !important;\n    }\n#e-pv-redact-sb-panel.control-section #file-uploader\n{\n    display: flex;\n    border: 1px dashed #c8c6c4;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 12px;\n    padding: 16px;\n    border-radius: 6px;\n}\n#e-pv-redact-sb-dialog.e-dialog .e-dlg-header-content\n{\n    border-bottom:1px solid #C4C7C5 !important;\n}\n\n#e-pv-redact-sb-dialog.e-dialog .e-footer-content\n{\n    border-top:1px solid #C4C7C5 !important;\n}\n\n#e-pv-redact-sb-dialog.e-dialog .e-dlg-header-content+.e-dlg-content\n{\n    padding: 20px !important;\n}\n\n#e-pv-redact-sb-panel.control-section .e-file-select-wrap\n{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#e-pv-redact-sb-dialog.e-dialog .e-footer-content .e-btn\n{\n    background: rgba(0, 0, 0, 0);\n    border-color: rgba(0, 0, 0, 0);\n    box-shadow: none;\n    color: #242424;\n}\n\n#e-pv-redact-sb-drop-area-wrap .e-upload-file-list {\n    display: none;\n}\n#e-pv-redact-sb-defaultfileupload .e-upload-files {\n    border: none !important;\n}\n.e-pv-redact-sb-image-source {\n    width: 70px;\n    height: 70px;\n}\n.e-pv-redact-sb-image-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 4px;\n    gap: 5px;\n    border-radius: 4px;\n    position: relative;\n}\n\n.e-pv-redact-sb-image-list {\n    display: flex;\n    justify-content: center;\n    padding: 24px 15px;\n    gap: 35px;\n}\n\n.e-pv-redact-sb-image-container-selected {\n    border: 1px solid #757575 !important;\n}\n\n#e-pv-redact-sb-drop-area-wrap {\n    display: flex;\n    border: 1px dashed #c8c6c4;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap: 12px;\n    padding: 16px;\n    border-radius: 6px;\n}\n\n#e-pv-redact-sb-defaultfileupload .e-upload {\n    border: none;\n    margin-top: 10px;\n    width: 100%;\n    height:100%;\n}\n\n#e-pv-redact-sb-panel .e-dlg-container\n{\n    --color-sf-overlay-bg-color: none !important;\n}\n\n.e-icons.e-redaction:before\n{\n  content:\"\\e740\";\n}\n\n#e-pv-redact-sb-defaultfileupload .e-file-drop\n{\n    position: relative;\n    left: 9rem;\n    bottom: 17px;\n    color: #616161;\n}\n\n#e-pv-redact-sb-panel.control-section .e-dlg-overlay\n{\n    background: none;\n    backdrop-filter: blur(2px) !important;\n}\n\n#e-pv-redact-sb-dialog\n{\n    top: -152px;\n}\n\n#e-pv-redact-sb-panel .control-section\n{\n    min-height: 0px !important;\n}\n\n#e-pv-redact-sb-toolbar-secondary .e-input-group {\n    border: none !important;\n}\n\n#e-pv-redact-sb-toolbar #e-pv-redact-sb-toolbar_popup\n{\n    max-height: 500px !important;\n}\n\n#e-pv-redact-sb-toolbar #e-pv-redact-sb-toolbar_popup .e-toolbar-item\n{\n    min-height: 70px !important;\n}\n\n#e-pv-redact-sb-toolbar-secondary .e-toolbar-items .e-template \n{\n    min-width: 0px !important;\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-pdfviewer\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-pdfviewer\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-angular-notifications\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}