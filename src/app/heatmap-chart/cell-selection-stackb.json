{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","cell-seletion-data.ts":"export class SampleDataSource {\n    public cellSeletionData: Object = [\n    [2.9, 5.2, 3.4, 5.6, 4.4],\n    [6.6, 4.8, 8, 3.9, 6.5],\n    [5.1, 4.6, 5.4, 3.9, 4.3],\n    [5.2, 4.3, 3.9, 6.2, 6.4],\n    [7, 3, 1.9, 5.9, 3.5],\n    [7.8, 5.9, 3.9, 4.3, 4.3],\n    [6.5, 4.3, 3.9, 5.2, 3.9]];\n\n    \n    public chartData: object = [\n        {\n            type: 'Column', xName: 'x', width: 2, yName: 'y',name:'Cereals', \n            dataSource: [{ x: '2014', y: 2.9 }, { x: '2015', y: 5.2 }, { x: '2016', y: 3.4 },{ x: '2017', y: 5.6 },{ x: '2018', y: 4.4 }],\n            marker: { dataLabel: { visible: false } }\n        },\n        {\n            type: 'Column', xName: 'x', width: 2, yName: 'y',name:'Meat', \n            dataSource: [{ x: '2014', y: 6.6 }, { x: '2015', y: 4.8 }, { x: '2016', y: 8 },{ x: '2017', y: 3.9 },{ x: '2018', y: 6.5 }],\n            marker: { dataLabel: { visible: false } }\n        },\n        {\n            type: 'Column', xName: 'x', width: 2, yName: 'y',name:'Spices', \n            dataSource: [{ x: '2014', y: 5.1 }, { x: '2015', y: 4.6 }, { x: '2016', y: 5.4 },{ x: '2017', y: 3.9 },{ x: '2018', y: 4.3 }],\n            marker: { dataLabel: { visible: false } }\n        },\n        {\n            type: 'Column', xName: 'x', width: 2, yName: 'y',name:'Tea',\n            dataSource: [{ x: '2014', y: 5.2 }, { x: '2015', y: 4.3 }, { x: '2016', y: 3.9 },{ x: '2017', y: 6.2 },{ x: '2018', y: 6.4 }],\n            marker: { dataLabel: { visible: false } }\n        },\n        {\n            type: 'Column', xName: 'x', width: 2, yName: 'y',name:'Edible Oil',\n            dataSource: [{ x: '2014', y: 7 }, { x: '2015', y: 3 }, { x: '2016', y: 1.9 },{ x: '2017', y: 5.9 },{ x: '2018', y: 3.5 }],\n            marker: { dataLabel: { visible: false } }\n        },\n        {\n            type: 'Column', xName: 'x', width: 2, yName: 'y',name:'Dairy Products',\n            dataSource: [{ x: '2014', y: 7.8 }, { x: '2015', y: 5.9 }, { x: '2016', y: 3.9 },{ x: '2017', y: 4.3 },{ x: '2018', y: 4.5 }],\n            marker: { dataLabel: { visible: false } }\n        },\n        {\n            type: 'Column', xName: 'x', width: 2, yName: 'y',name:'Wheat',\n            dataSource: [{ x: '2014', y: 6.5 }, { x: '2015', y: 4.3 }, { x: '2016', y: 3.9 },{ x: '2017', y: 5.2 },{ x: '2018', y: 3.9 }],\n            marker: { dataLabel: { visible: false } }\n        }\n    ]\n}\n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { HeatMap, Tooltip, ILoadedEventArgs, HeatMapTheme, ISelectedEventArgs, SelectedCellDetails, SeriesModel, HeatMapComponent, HeatMapModule } from '@syncfusion/ej2-angular-heatmap';\nimport { ChartTheme, Chart, ChartComponent, ColumnSeries, Category, Legend, DataLabel, Tooltip as chartTooltip, ILoadedEventArgs as IChartLoadedEventsArgs, SeriesMarkerBorderModel, ChartModule } from '@syncfusion/ej2-angular-charts';\nimport { SampleDataSource } from './cell-seletion-data';\n\n\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\nHeatMap.Inject(Tooltip);\nChart.Inject(ColumnSeries, DataLabel, Category, Legend, chartTooltip);\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [HeatMapModule, ChartModule, ButtonModule,  ]\n})\nexport class AppComponent {\n    @ViewChild('heatmap')\n    public heatmap: HeatMapComponent;\n    @ViewChild('chart')\n    public chart: ChartComponent;\n    titleSettings: Object = {\n        text:'Top export products 2014-2018, Value in USD million',\n        textStyle: {\n            fontFamily: 'inherit'\n        }\n    };\n    allowSelection : boolean = true;\n    dataSource: Object = new SampleDataSource().cellSeletionData;\n    xAxis: Object = {\n        labels: ['Cereals', 'Meat', 'Spices', 'Tea', 'Edible Oil', 'Dairy Products', 'Wheat'],\n        textStyle: {\n            fontFamily: 'inherit'\n        }\n    };\n    yAxis: Object = {\n        labels:['2014','2015','2016','2017','2018'],\n        textStyle: {\n            fontFamily: 'inherit'\n        }\n    };\n    paletteSettings: Object = {\n        palette: [\n            {color: '#3C5E62 '},\n            {color: '#86C843 '}\n        ],\n    };\n    cellSettings: Object = {\n        textStyle: {\n            fontFamily: 'inherit'\n        }\n    };\n    tooltipSettings: Object = {\n        textStyle: {\n            fontFamily: 'inherit'\n        }\n    };\n    legendSettings: Object = {\n        visible: false\n    };\n    primaryXAxis: Object = {\n        valueType: 'Category', interval: 1, majorGridLines: { width: 0 }\n    };\n    chartArea: Object = { border: { width: 0 } };\n    primaryYAxis: object =\n    {\n        majorGridLines: { width: 0 },\n        majorTickLines: { width: 0 }, lineStyle: { width: 0 }, labelStyle: { color: 'transparent' }\n    };\n    series: Object = new SampleDataSource().chartData;\n    tooltip: Object = {\n        enable: true\n    };\n    public load(args: ILoadedEventArgs): void {\n        // custom code start\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.heatmap.theme = <HeatMapTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n        // custom code end\n    };\n    public cellSelected(args: ISelectedEventArgs): void {\n        let data: SelectedCellDetails[]  = args.data\n            let length : number = data.length;\n            let xAxis : string[] = [];\n            let flag : boolean[] = []\n            let series: any = [];\n             for (let i: number = 0; i < length; i++) {\n                 if (xAxis.indexOf(data[i].xLabel) === -1) {\n                     xAxis.push(data[i].xLabel);\n                     flag.push(false);\n                 }\n             }\n             for (var i: number = 0; i < length; i++) {\n                 var index = xAxis.indexOf(data[i].xLabel);\n                 if (!flag[index]) {\n                     flag[index] = true;\n                     var column: any = {};\n                     column.type = 'Column';\n                     column.xName = 'x';\n                     column.yName = 'y';\n                     column.width = 2;\n                     column.name = data[i].xLabel;\n                     column.marker = { dataLabel: { visible: false } };\n                     column.dataSource = [];\n                     var columnData: any = {};\n                     columnData.x = data[i].yLabel;\n                     columnData.y = data[i].value;\n                     column.dataSource.push(columnData);\n                     series.push(column);\n                 }\n                 else {\n                     var columnData: any = {};\n                     columnData.x = data[i].yLabel;\n                     columnData.y = data[i].value;\n                     series[index].dataSource.push(columnData);\n                 }\n             }\n             this.chart.series = series;\n             this.chart.refresh();\n    };\n    public chartLoad(args: IChartLoadedEventsArgs): void {\n        // custom code start\n        let selectedTheme: string = location.hash.split('/')[1];\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\n        args.chart.theme = <ChartTheme>(selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, \"Dark\").replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n        // custom code end\n    };\n    public onSubmit(): void {\n        this.heatmap.clearSelection();\n        this.chart.series = (new SampleDataSource().chartData) as [SeriesModel];\n        this.chart.refresh();\n    };\n    constructor() {\n        //code\n    };\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<main>\n    <div class=\"col-lg-9\">\n        <div class=\"control-section\">    \n                <ejs-heatmap id='container' #heatmap style=\"display:block;height:300px;\" [titleSettings]='titleSettings' [dataSource]='dataSource' [xAxis]='xAxis'\n                    [yAxis]='yAxis' [allowSelection]='allowSelection' [paletteSettings]='paletteSettings' [legendSettings]='legendSettings' (load)='load($event)' (cellSelected)='cellSelected($event)'>\n                </ejs-heatmap>\n                <ejs-chart id='container1' #chart style='display:block;height:300px;' [primaryXAxis]='primaryXAxis' [primaryYAxis]='primaryYAxis' [tooltip]='tooltip' [chartArea]='chartArea' [series]='series' (load)='chartLoad($event)'>\n                </ejs-chart>\n            </div>\n        </div>\n        <div class=\"col-md-3 property-section\">\n                <div class=\"property-panel-section\">\n                    <div class=\"property-panel-header\">Properties</div>\n                    <div class=\"property-panel-content\">\n                        <table id=\"property\" title=\"Properties\" style=\"width: 100%\" role=\"none\">\n                            <tbody>\n                                <tr style=\"height: 50px\">\n                                    <td style=\"width: 40%;\">\n                                        <div>\n                                            <button ejs-button (click)='onSubmit()' id='submit'>Clear Selection</button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n            <section id=\"action-description\" aria-label=\"Description of HeatMap sample\">\n                <p>\n                    This sample visualizes the revenue from the top exported products between the year 2014 and 2018, valued in USD million\n                </p>\n            </section>\n            <section id=\"description\" aria-label=\"Description of the HeatMap features demonstrated in this sample\">\n                <p>\n                    In this example, you can see how to selected the cell in heatmap and render the column chart based on selected data.\n                </p>\n                <p>The tooltip is enabled in this example. To see the tooltip in action, hover the mouse over an item or tap an item on touch-enabled devices.</p>\n                <br>\n                <p><b>Injecting Module</b></p>\n                <p>\n                     Heatmap component features are separated into discrete feature-based modules. To use a tooltip, inject the <a href=\"https://ej2.syncfusion.com/angular/documentation/heatmap-chart/tooltip\" target='_blank'> Tooltip </a> module using the <code>Heatmap.Inject(Tooltip) </code> method.\n                </p>\n            </section>\n</main>","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-heatmap\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-heatmap\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}