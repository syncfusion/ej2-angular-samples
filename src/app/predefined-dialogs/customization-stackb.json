{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { DialogUtility} from '@syncfusion/ej2-angular-popups'\n\n\nimport { ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ButtonModule,  ]\n})\nexport class AppComponent {\n  public dialogObj;\n  public alertBtnClick = (): void => {\n    document.getElementById('statusText').style.display=\"none\";\n    this.dialogObj = DialogUtility.alert({\n      title: '',\n      content:'<div class=\"new\" style=\"display: flex;flex-direction: column;align-items: center;\"><p><span class=\"circle-border\"><span class=\"e-icons e-check\" style=\"font-size: 30px; color: green; font-weight: 700;\"></span></span></p><p><b style=\"font-size:25px; font-weight: 500 !important;\">Good job!</b></p><p>You clicked the button!</p></div>',\n      okButton: { text: 'OK', click: this.alertOkAction.bind(this) },\n      position: { X: 'center', Y: 'center' },\n      width: '240px',\n      closeOnEscape: true\n    });\n  };\n  private alertOkAction(): void {\n    this.dialogObj.hide();\n    document.getElementById('statusText').innerHTML ='The user closed the Alert dialog.';\n    document.getElementById('statusText').style.display=\"block\";\n  }\n  public confirmBtnClick = (): void => {\n    document.getElementById('statusText').style.display=\"none\";\n    this.dialogObj = DialogUtility.confirm({\n      title: ' Delete file',\n      content:'<p ><span class= \"e-icons e-changes-reject\" style=\"float: left;padding-right: 10px;font-size: 25px;display: inline;\"></span>Are you sure you want to permanently delete this file?</p><p class=\"fileEdit\"><span class= \"e-icons e-image\" style=\"font-size: 60px;\"></span><span>failed personas.png<br/>Item type:PNG File<br/>Dimenstion: 1384 * 782<br/>Size:374 KB<br/>Original Location: C:/Users/Images</span></p>',\n      okButton: { text: 'YES', click: this.confirmOkAction.bind(this) },\n      cancelButton: {text: 'No',click: this.confirmCancelAction.bind(this) },\n      position: { X: 'center', Y: 'center' },\n      width: '420px',\n      closeOnEscape: true\n    });\n  };\n  private confirmOkAction(): void {\n    this.dialogObj.hide();\n    document.getElementById('statusText').innerHTML ='The user confirmed the dialog box';\n    document.getElementById('statusText').style.display=\"block\";\n  }\n  private confirmCancelAction(): void {\n    this.dialogObj.hide();\n    document.getElementById('statusText').innerHTML ='The user canceled the dialog box.';\n    document.getElementById('statusText').style.display=\"block\";\n  }\n  public promptBtnClick = (): void => {\n    document.getElementById('statusText').style.display=\"none\";\n    this.dialogObj = DialogUtility.confirm({\n      title: 'Join Wi-Fi network',\n      content:'<table class=\"Table\"><tbody><tr><td>SSID: <b>AndroidAP</b></td></tr><tr> <td>Password:</td> </tr> <tr> <td> <span class=\"e-input-group\"> <input type=\"password\" id=\"password\" name=\"Required\" class=\"e-input\"> </span> </td> </tr> </tbody> </table> ',\n      okButton: { text: 'OK', click: this.promptOkAction.bind(this) },\n      cancelButton: { click: this.promptCancelAction.bind(this) },\n      animationSettings: { effect: 'Zoom', delay: 0, duration: 250 },\n      position: { X: 'center', Y: 'center' },\n      width: '240px',\n      closeOnEscape: true\n    });\n  };\n  private promptOkAction(): void {\n    let value:string ;\n    value = (document.getElementById(\"password\")as any).value;\n    if (value==\"\"){\n        this.dialogObj.hide();\n        document.getElementById(\"statusText\").innerHTML = \"The user's input is returned as\\\" \\\" \";\n        document.getElementById(\"statusText\").style.display=\"block\";\n    }\n    else{\n      this.dialogObj.hide();\n      document.getElementById(\"statusText\").innerHTML=\"The user's input is returned as\" +\" \"+ value;\n      document.getElementById(\"statusText\").style.display=\"block\";\n    }\n  }\n  private promptCancelAction(): void {\n    this.dialogObj.hide();\n    document.getElementById('statusText').innerHTML ='The user canceled the prompt dialog';\n    document.getElementById('statusText').style.display=\"block\";\n  }\n}\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\" style=\"padding:10px;position:relative;\">\n    <div id=\"predefinedDialogCustomization\">\n        <!-- Buttons to open corresponding Dialogs -->\n        <button  ejs-button cssClass=\"e-danger\" class='dlgbtn' id='alertbtn' #alertButton (click)=\"alertBtnClick()\">Alert</button>\n        <button ejs-button cssClass=\"e-success\" class='dlgbtn' #confirmButton (click)=\"confirmBtnClick()\">Confirm</button>\n        <button ejs-button [isPrimary]=\"true\" #promptButton (click)=\"promptBtnClick()\">Prompt</button>\n        <span id=\"statusText\"></span>\n    </div>\n</div>","app.component.css":"\n#predefinedDialogCustomization {\n  padding: 25px 0 0 15px;\n}\n.fileEdit{\n  display:flex;\n  justify-content:space-evenly;\n  padding: 20px 0 0 50px;\n}\n#predefinedDialogCustomization .dlgbtn{\n  margin-right: 10px;\n}\n#predefinedDialogCustomization #statusText{\n  font-size: 16px;\n  margin-top: 20px;\n}\n.e-alert-dialog .e-footer-content {\n  display: flex;\n  justify-content: center;\n}\n.Table{\n  line-height: 2.0;\n}\n.circle-border{\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  color: green;\n  width: 60px;\n  height: 60px;\n  border: 5px solid rgb(215,215,215);\n  border-radius: 50%;\n}\n.e-changes-reject{\n  display: inline;\n  float: left;\n  font-size: 40px;\n  padding-right: 10px; \n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-richtexteditor\":\"*\",\"@syncfusion/ej2-angular-richtexteditor\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-grids\":\"*\",\"@syncfusion/ej2-angular-grids\":\"*\",\"@syncfusion/ej2-charts\":\"*\",\"@syncfusion/ej2-angular-charts\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-angular-schedule\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}