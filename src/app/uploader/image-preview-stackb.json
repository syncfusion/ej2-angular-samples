{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation, OnInit, Inject } from '@angular/core';\nimport { UploaderComponent, SelectedEventArgs, FileInfo, RemovingEventArgs } from '@syncfusion/ej2-angular-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { EmitType, detach, Browser, createElement, isNullOrUndefined, EventHandler } from '@syncfusion/ej2-base';\n\n/**\n * Default Uploader Image Preview Component\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('previewupload')\n    public uploadObj: UploaderComponent;\n\n    public path: Object = {\n        saveUrl: 'https://ej2.syncfusion.com/services/api/uploadbox/Save',\n        removeUrl: 'https://ej2.syncfusion.com/services/api/uploadbox/Remove'\n    };\n\n    public allowExtensions: string = '.png, .jpg, .jpeg';\n\n    public dropElement: HTMLElement;\n    public filesName: string[] = [];\n    public filesDetails : FileInfo[] = [];\n    public filesList: HTMLElement[] = [];\n    public uploadWrapper: HTMLElement;\n    public parentElement: HTMLElement;\n\n    ngOnInit(): void {\n        this.dropElement = document.getElementsByClassName('control-section')[0] as HTMLElement;\n        if (Browser.isDevice) { document.getElementById('dropimage').style.padding = '0px 10%'; }\n        document.getElementById('browse').onclick = () => {\n            document.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();\n            return false;\n        };\n        document.getElementById('clearbtn').onclick = () => {\n            if (!this.dropElement.querySelector('ul')) { return; }\n            detach(this.dropElement.querySelector('ul'));\n            this.filesList = [];\n            this.filesDetails = [];\n            this.filesName = [];\n            this.uploadObj.element.value = '';\n            if (this.dropElement.querySelector('#dropArea').classList.contains('e-spinner-pane')) {\n                hideSpinner(this.dropElement.querySelector('#dropArea'));\n                detach(this.dropElement.querySelector('.e-spinner-pane'));\n            }\n        };\n        document.getElementById('uploadbtn').onclick = () => {\n            if (this.dropElement.querySelector('ul') && this.filesDetails.length > 0) {\n                this.uploadObj.upload(this.filesDetails, true);\n            }\n        };\n    }\n    public onSelect(args: SelectedEventArgs): void {\n        if (!this.dropElement.querySelector('li')) { this.filesDetails = []; }\n        if (isNullOrUndefined(document.getElementById('dropArea').querySelector('.e-upload-files'))) {\n            this.parentElement = createElement('ul', { className: 'e-upload-files' });\n            document.getElementsByClassName('e-upload')[0].appendChild(this.parentElement);\n        }\n        let validFiles: FileInfo[] = this.validateFiles(args, this.filesDetails);\n        if (validFiles.length === 0) {\n            args.cancel = true;\n            return;\n        }\n        for (let i : number = 0; i < validFiles.length; i++) {\n            this.formSelectedData(validFiles[i], this);\n        }\n        this.filesDetails = this.filesDetails.concat(validFiles);\n        args.cancel = true;\n    }\n\n    public validateFiles(args: any, viewedFiles: FileInfo[]): FileInfo[] {\n        let modifiedFiles: FileInfo[] = [];\n        let validFiles: FileInfo[] = [];\n        let isModified: boolean = false;\n        if (args.event.type === 'drop') {\n            isModified = true;\n            let allImages: string[] = ['png', 'jpg', 'jpeg'];\n            let files: FileInfo[] = args.filesData;\n            for (let file of files) {\n                if (allImages.indexOf(file.type) !== -1) {\n                    modifiedFiles.push(file);\n                }\n            }\n        }\n        let files: FileInfo[] = modifiedFiles.length > 0 || isModified ? modifiedFiles : args.filesData;\n        if (this.filesName.length > 0) {\n            for (let file of files) {\n                if (this.filesName.indexOf(file.name) === -1) {\n                    this.filesName.push(file.name);\n                    validFiles.push(file);\n                }\n            }\n        } else {\n            for (let file of files) {\n                this.filesName.push(file.name);\n                validFiles.push(file);\n            }\n        }\n        return validFiles;\n    }\n\n    public formSelectedData (file : FileInfo, proxy: any): void {\n        let liEle : HTMLElement = createElement('li',  {className: 'e-upload-file-list', attrs: {'data-file-name': file.name}});\n        let imageTag: HTMLImageElement = <HTMLImageElement>createElement('IMG',  {className: 'upload-image', attrs: {'alt': 'Image'}});\n        let wrapper: HTMLElement = createElement('span', {className: 'wrapper'});\n        wrapper.appendChild(imageTag); liEle.appendChild(wrapper);\n        liEle.appendChild(createElement('div', {className: 'name file-name', innerHTML: file.name, attrs: {'title': file.name}}));\n        liEle.appendChild(createElement('div', {className: 'file-size', innerHTML: proxy.uploadObj.bytesToSize(file.size) }));\n        let clearbtn: HTMLElement;\n        let uploadbtn: HTMLElement;\n        clearbtn = createElement('span', {id: 'removeIcon', className: 'e-icons e-file-remove-btn', attrs: {'title': 'Remove'}});\n        EventHandler.add(clearbtn, 'click', this.removeFiles, proxy);\n        liEle.setAttribute('title', 'Ready to Upload');\n        uploadbtn = createElement('span', {className: 'e-upload-icon e-icons e-file-remove-btn', attrs: {'title': 'Upload'}});\n        uploadbtn.setAttribute('id', 'iconUpload'); EventHandler.add(uploadbtn, 'click', this.uploadFile, proxy);\n        let progressbarContainer: HTMLElement;\n        progressbarContainer = createElement('progress', {className: 'progressbar', id: 'progressBar', attrs: {value: '0', max: '100'}});\n        liEle.appendChild(clearbtn); liEle.appendChild(uploadbtn);\n        liEle.appendChild(progressbarContainer);\n        this.readURL(liEle, file); document.querySelector('.e-upload-files').appendChild(liEle);\n        proxy.filesList.push(liEle);\n    }\n    public uploadFile(args: any): void {\n        this.uploadObj.upload([this.filesDetails[this.filesList.indexOf(args.currentTarget.parentElement)]], true);\n    }\n    public removeFiles(args: any): void {\n        let removeFile: FileInfo = this.filesDetails[this.filesList.indexOf(args.currentTarget.parentElement)];\n        let statusCode: string = removeFile.statusCode;\n        if (statusCode === '2' || statusCode === '1') {\n            this.uploadObj.remove(removeFile, true);\n            this.uploadObj.element.value = '';\n        }\n        let index: number = this.filesList.indexOf(args.currentTarget.parentElement);\n        this.filesList.splice(index, 1);\n        this.filesDetails.splice(index, 1);\n        this.filesName.splice(this.filesName.indexOf(removeFile.name), 1);\n        if (statusCode !== '2') { detach(args.currentTarget.parentElement); }\n    }\n    public onFileUpload(args : any) : void {\n        let li : Element = document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        let iconEle: HTMLElement = li.querySelector('#iconUpload') as HTMLElement;\n        iconEle.style.cursor = 'not-allowed';\n        iconEle.classList.add('e-uploaded');\n        EventHandler.remove(li.querySelector('#iconUpload'), 'click', this.uploadFile);\n        let progressValue : number = Math.round((args.e.loaded / args.e.total) * 100);\n        if (!isNaN(progressValue) && li.querySelector('.progressbar')) {\n            li.getElementsByTagName('progress')[0].value = progressValue;\n        }\n    }\n    public onUploadSuccess(args : any) : void {\n        let spinnerElement: HTMLElement = document.getElementById('dropArea');\n        let li : HTMLElement = document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        if (li && !isNullOrUndefined(li.querySelector('.progressbar'))) {\n            (li.querySelector('.progressbar') as HTMLElement).style.visibility = 'hidden';\n        }\n        if (args.operation === 'upload') {\n            EventHandler.remove(li.querySelector('#iconUpload'), 'click', this.uploadFile);\n            li.setAttribute('title', args.e.currentTarget.statusText);\n            (li.querySelector('.file-name') as HTMLElement).style.color = 'green';\n            (li.querySelector('.e-icons') as HTMLElement).onclick = () => {\n                this.generateSpinner(this.dropElement.querySelector('#dropArea'));\n            };\n        } else { \n            if (!isNullOrUndefined(li)) {\n                detach(li);\n            }\n            if (!isNullOrUndefined(spinnerElement)) {\n                hideSpinner(spinnerElement);\n                detach(spinnerElement.querySelector('.e-spinner-pane'));\n            }\n        }\n        li.querySelector('#removeIcon').removeAttribute('.e-file-remove-btn');\n        li.querySelector('#removeIcon').setAttribute('class', 'e-icons e-file-delete-btn');\n    }\n    public generateSpinner(targetElement: HTMLElement): void {\n        createSpinner({ target: targetElement, width: '25px' });\n        showSpinner(targetElement);\n    }\n    public onUploadFailed(args : any) : void {\n        let li : Element = document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        (li.querySelector('.file-name') as HTMLElement).style.color = 'red';\n        li.setAttribute('title', args.e.currentTarget.statusText)\n        if (args.operation === 'upload') {\n            EventHandler.remove(li.querySelector('#iconUpload'), 'click', this.uploadFile);\n            (li.querySelector('.progressbar') as HTMLElement).style.visibility = 'hidden';\n        }\n    }\n    public readURL(li: HTMLElement, args: any): void {\n        let preview: HTMLImageElement = li.querySelector('.upload-image');\n        let file: File = args.rawFile; let reader: FileReader = new FileReader();\n        reader.addEventListener('load', () => { preview.src = reader.result as string; }, false);\n        if (file) { reader.readAsDataURL(file); }\n    }\n\n    public onFileRemove(args: RemovingEventArgs): void {\n        args.postRawFile = false;\n    }\n\n    constructor() {\n        \n    }\n}","app/app.module.ts":"import { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { CheckBoxModule  } from '@syncfusion/ej2-angular-buttons';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { UploaderModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, CheckBoxModule, UploaderModule,       DialogModule, DropDownListModule, FormsModule, CommonModule, ReactiveFormsModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-lg-9\">\n        <div class=\"control_wrapper\">\n            <div class='imagepreview'>\n                <div id='dropArea' style='height: auto'>\n                    <span id='dropimage'> Drop image (JPG, PNG) files here or <a href=\"\" id='browse'><u>Browse</u></a> </span>\n                    <ejs-uploader #previewupload id='previewfileupload' [asyncSettings]='path'\n                        [dropArea]='dropElement' [allowedExtensions]='allowExtensions' (selected)='onSelect($event)'\n                        (success)='onUploadSuccess($event)' (progress)='onFileUpload($event)' (failure)='onUploadFailed($event)' (removing)='onFileRemove($event)'>\n                    </ejs-uploader>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-lg-3 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\" style='padding-top:25px;'>\n                <button class=\"e-btn e-css\" id=\"clearbtn\" title=\"Clear All\" style=\"width:130px\">Clear All</button>\n            </div>\n            <div class=\"property-panel-content\" style='padding-top:25px;'>\n                <button class=\"e-btn e-css\" id=\"uploadbtn\" title=\"Upload All\" style=\"width:130px\">Upload All</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n","app.component.css":".control_wrapper .imagepreview{\n    max-width: 505px;\n    margin: auto;\n}\n.e-upload {\n    float: none;\n}\n.imagepreview .e-file-select-wrap {\n    display: none;\n}\n.imagepreview .e-upload {\n    border: none;\n    margin-top: 10px;\n    width: 100%;\n}\n.imagepreview #dropimage {\n    font-size: 14px;\n}\n.e-bigger .imagepreview #dropimage {\n    font-size: 15px;\n}\n.imagepreview #dropArea {\n    border: 1px dashed #c3c3cc;\n    position: relative;\n    text-align: center;\n    padding: 15px 0px 5px;\n    display: block;\n    width: 100%;\n    overflow: hidden;\n}\n.e-bigger .imagepreview #dropArea {\n    padding: 20px 0px 10px;\n}\n.imagepreview #dropArea .e-upload .e-upload-files {\n    text-align: initial;\n    border-top: none;\n}\n.imagepreview #dropArea .e-upload-files .e-file-delete-btn.e-icons,\n.imagepreview #dropArea .e-upload-files .e-file-remove-btn.e-icons {\n    top: 120px;\n    background-color: white;\n    border-radius: 50%;\n    font-size: 12px;\n    left: 80px;\n}\n.imagepreview #dropArea .e-upload-files li .e-file-remove-btn.e-icons.e-upload-icon {\n    font-size: 14px;\n    left: 20px;\n}\n.imagepreview #dropArea .e-upload-files li:hover .e-icons {\n    visibility: visible;\n}\n.imagepreview #dropArea .e-upload-files li .e-icons {\n    visibility: hidden;\n}\n@font-face {\n    font-family: 'Uploader_Icon';\n    src:\n    url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmoZcPvgAAAcgAAABAaGVhZBLQTSUAAADQAAAANmhoZWEINQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAgAAAAAAHAAAAABm1heHABDgAdAAABCAAAACBuYW1lQySinQAAAggAAAIxcG9zdLfl0usAAAQ8AAAAMgABAAAEAAAAAFwEAAAAAAAD2AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAA2vKJUF8PPPUACwQAAAAAANftBBgAAAAA1+0EGAAAAAAD2AP4AAAACAACAAAAAAAAAAEAAAACABEAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAIAAAAAIAAAAAA9gD+AAHABAAADchESMVITUjEzM3ETMRFzMBKAOwPvzMPp1mtUC1Zv7FCAF6vb0BO7X+EAHwtQE7AAAAABIA3gABAAAAAAAAAAEAAAABAAAAAAABAAgAAQABAAAAAAACAAcACQABAAAAAAADAAgAEAABAAAAAAAEAAgAGAABAAAAAAAFAAsAIAABAAAAAAAGAAgAKwABAAAAAAAKACwAMwABAAAAAAALABIAXwADAAEECQAAAAIAcQADAAEECQABABAAcwADAAEECQACAA4AgwADAAEECQADABAAkQADAAEECQAEABAAoQADAAEECQAFABYAsQADAAEECQAGABAAxwADAAEECQAKAFgA1wADAAEECQALACQBLyBVcGxvYWRlclJlZ3VsYXJVcGxvYWRlclVwbG9hZGVyVmVyc2lvbiAxLjBVcGxvYWRlckZvbnQgZ2VuZXJhdGVkIHVzaW5nIFN5bmNmdXNpb24gTWV0cm8gU3R1ZGlvd3d3LnN5bmNmdXNpb24uY29tACAAVQBwAGwAbwBhAGQAZQByAFIAZQBnAHUAbABhAHIAVQBwAGwAbwBhAGQAZQByAFUAcABsAG8AYQBkAGUAcgBWAGUAcgBzAGkAbwBuACAAMQAuADAAVQBwAGwAbwBhAGQAZQByAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAHUAcwBpAG4AZwAgAFMAeQBuAGMAZgB1AHMAaQBvAG4AIABNAGUAdAByAG8AIABTAHQAdQBkAGkAbwB3AHcAdwAuAHMAeQBuAGMAZgB1AHMAaQBvAG4ALgBjAG8AbQAAAAACAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBAgEDAAhVcGxvYWRlcgAAAAA=) format('truetype');\n    font-weight: normal;\n    font-style: normal;\n}\n.imagepreview #dropArea .e-upload .e-upload-files .e-icons.e-upload-icon{\n    font-family: 'Uploader_Icon';\n    speak: none;\n    font-size: 16px;\n    font-style: normal;\n    font-weight: normal;\n    font-variant: normal;\n    text-transform: none;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n.imagepreview #dropArea .e-upload .e-upload-files .e-icons.e-upload-icon::before {\n    content: '\\e700';\n}\n.imagepreview #dropArea .e-upload .e-upload-files .e-icons:not(.e-uploaded):hover{\n    background-color: #e6e6e6;\n    border-color: #adadad;\n    color: #333;\n}\n\n.material-dark .imagepreview #dropArea .e-upload .e-upload-files .e-icons,\n.fabric-dark .imagepreview #dropArea .e-upload .e-upload-files .e-icons,\n.bootstrap-dark .imagepreview #dropArea .e-upload .e-upload-files .e-icons, \n.bootstrap5-dark .imagepreview #dropArea .e-upload .e-upload-files .e-icons,\n.tailwind-dark .imagepreview #dropArea .e-upload .e-upload-files .e-icons {\n    color: #333;\n}\n\n.highcontrast .imagepreview #dropArea .e-upload-files .e-file-remove-btn.e-icons,\n.highcontrast .imagepreview #dropArea .e-upload-files .e-file-delete-btn.e-icons {\n    background-color: #ffd939;\n}\n.highcontrast .imagepreview #dropArea .e-upload .e-upload-files .e-file-delete-btn.e-icons::before,\n.highcontrast .imagepreview #dropArea .e-upload .e-upload-files .e-file-remove-btn.e-icons::before{\n    color: black;\n}\n.imagepreview #dropArea .e-upload .e-upload-files .e-upload-file-list {\n    border: 0;\n    display: inline-block;\n    width: 165px;\n}\n.imagepreview .upload-image {\n    width: 150px;\n    height: 150px;\n    display: inline-flex;\n    background-size: contain;\n    margin: 7px;\n    text-align: center;\n    line-height: 10;\n    border-radius: 5px;\n}\n.imagepreview .upload-image:after {\n    content: \"\";\n    position: absolute;\n    top: 6px;\n    left: 6px;\n    width: inherit;\n    height: inherit;\n    background: lightgray url('http://via.placeholder.com/300?text=Loading...') no-repeat center;\n    color: transparent;\n    border-radius: 5px;\n}\n.highcontrast .imagepreview div.file-name,\n.highcontrast .imagepreview div.file-name,\n.material-dark .imagepreview div.file-name,\n.fabric-dark .imagepreview div.file-name,\n.bootstrap-dark .imagepreview div.file-name,\n.bootstrap5-dark .imagepreview div.file-name,\n.tailwind-dark .imagepreview div.file-name,\n.fluent-dark .imagepreview div.file-name {\n    color: white;\n}\n.imagepreview div.file-name {\n    color: rgba(0, 0, 0, 0.87);\n    font-size: 14px;\n    padding: 3px 10px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    width: 90%;\n    white-space: nowrap;\n}\n.highcontrast .imagepreview div.file-size {\n    color: white;\n}\n.imagepreview div.file-size {\n    font-size: 13px;\n    padding: 3px 10px;\n    overflow: hidden;\n}\n.imagepreview .progressbar {\n    background: #ff4081;\n    border: none;\n    border-radius: 10px;\n    height: 4px;\n    margin-left: 7px;\n    width: 90%;\n    top: -60px;\n    position: relative;\n}\n.bootstrap5 .imagepreview .progressbar,\n.bootstrap5-dark .imagepreview .progressbar,\n.tailwind .imagepreview .progressbar,\n.tailwind-dark .imagepreview .progressbar,\n.fluent-dark .imagepreview .progressbar {\n    top: -70px;\n}\n.imagepreview #dropArea progress {\n    border: none;\n    background: #fff;\n}\n.highcontrast .imagepreview #dropArea progress,\n.material-dark .imagepreview #dropArea progress,\n.fabric-dark .imagepreview #dropArea progress,\n.bootstrap-dark .imagepreview #dropArea progress,\n.bootstrap5-dark .imagepreview #dropArea progress,\n.tailwind-dark .imagepreview #dropArea progress {\n    border: none;\n    background: black;\n}\n.imagepreview progress::-webkit-progress-bar {\n    border: none;\n    background-color: #ffffff;\n}\n.highcontrast .imagepreview progress::-webkit-progress-bar {\n    border: none;\n    background-color: #000000;\n}\n.material .imagepreview progress::-webkit-progress-value, .imagepreview progress::-webkit-progress-value {\n    border-radius: 2px; \n    background-color: #ff4081;\n}\n.bootstrap .imagepreview progress::-webkit-progress-value {\n    border-radius: 2px; \n    background-color: #1f496e;\n}\n.fabric .imagepreview progress::-webkit-progress-value {\n    background-color: #1763ff;\n    border-radius: 2px; \n    top: -66px;\n}\n.highcontrast .imagepreview progress::-webkit-progress-value {\n    background-color: #ffd939;\n    border-radius: 2px; \n}\n.material .imagepreview progress::-moz-progress-bar, .imagepreview progress::-moz-progress-bar {\n    border-radius: 2px; \n    background-color: #ff4081;\n}\n.bootstrap .imagepreview progress::-moz-progress-bar {\n    border-radius: 2px; \n    background-color: #1f496e;\n}\n.fabric .imagepreview progress::-moz-progress-bar {\n    background-color: #1763ff;\n    border-radius: 2px; \n    top: -66px;\n}\n.highcontrast .imagepreview progress::-moz-progress-bar {\n    background-color: #ffd939;\n    border-radius: 2px; \n}\n.material .imagepreview #dropimage a, .imagepreview #dropimage a {\n    color:#ff4081;\n}\n.fabric .imagepreview #dropimage a {\n    color: #1763ff;\n}\n.bootstrap .imagepreview #dropimage a {\n    color: #1f496e;\n}\n.highcontrast .imagepreview #dropimage a {\n    color: #ffd939;\n}\n.material-dark .imagepreview #dropimage a {\n    color:#56a4fd;\n}\n.fabric-dark .imagepreview #dropimage a {\n    color:#0074cc;\n}\n.bootstrap-dark .imagepreview #dropimage a {\n    color:#0070f0;\n}\n.bootstrap5-dark .imagepreview #dropimage a {\n    color:#0d6efd;\n}\n.tailwind-dark .imagepreview #dropimage a {\n    color:#22d3ee;\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n\t.imagepreview #dropArea .e-upload .e-upload-files .e-file-remove-btn.e-icons, .e-bigger .imagepreview #dropArea .e-upload .e-upload-files .e-file-remove-btn.e-icons {\n\t   padding: 18px 25px 18px 12px;\n\t}\n}","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}