{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { CheckBoxModule  } from '@syncfusion/ej2-angular-buttons';\n\nimport { DialogModule } from '@syncfusion/ej2-angular-popups';\n\nimport { UploaderModule } from '@syncfusion/ej2-angular-inputs';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [   AppComponent ], imports: [ BrowserModule, CheckBoxModule, UploaderModule, DialogModule, FormsModule, CommonModule, ReactiveFormsModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\">\n    <div class=\"col-lg-9\">\n        <div class=\"control_wrapper\">\n            <div class=\"uploadtemplate\">\n                <div id='dropArea'>\n                    <span id='drop' class=\"droparea\"> Drop files here or <a href=\"\" id='browse'><u>Browse</u></a> </span>\n                    <ejs-uploader #templateupload id='templatefileupload' [asyncSettings]='path' [dropArea]='dropElement' (progress)='onFileUpload($event)' (selected)='onFileSelect($event)' (failure)='onUploadFailed($event)' (success)='onUploadSuccess($event)' (removing)='onFileRemove($event)'></ejs-uploader>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-lg-3 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <button class=\"e-btn e-css\" id=\"clearbtn\" title=\"Clear All\">Clear All</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n","app.component.css":".uploadtemplate #dropArea {\n    min-height: 50px;\n    margin: 15px 0;\n    position: relative;\n}\n\n.uploadtemplate #drop {\n    padding: 3% 30% 3%;\n    display: inherit;\n    border: 1px dashed #c3c3cc\n}\n.e-upload {\n    float: none;\n}\n.e-bigger .uploadtemplate #drop {\n    padding: 20px 27% 20px;\n}\n\n.uploadtemplate .droparea {\n    font-size: 14px;\n}\n\n.e-bigger .uploadtemplate .droparea {\n    font-size: 15px;\n}\n\n.control_wrapper {\n    max-width: 400px;\n    margin: auto;\n}\n\n.uploadtemplate  .e-file-select-wrap {\n    display: none;\n}\n\n.uploadtemplate .e-upload {\n    float: none;\n    border: none;\n}\n\n.uploadtemplate .ul-element {\n    list-style: none;\n    width: 100%;\n    padding-left: 0;\n}\n\n.uploadtemplate .file-name {\n    padding: 8px 6px 8px 0;\n    font-size: 13px;\n    width: 46%;\n    display: inline-block;\n    position: relative;\n    top: 4px;\n}\n\n.e-bigger .uploadtemplate .file-name {\n    font-size: 14px;\n}\n\n.uploadtemplate .file-size {\n    padding: 4px;\n    font-size: 13px;\n    width: 18%;\n    display: inline-block;\n    position: relative;\n}\n\n.e-bigger .uploadtemplate span.file-size {\n    font-size: 14px;\n}\n\n.uploadtemplate li.file-lists {\n    border: 1px solid lightgray;\n    padding: 0 6px 0 14px;\n    margin-top: 15px;\n    position: relative;\n    background: rgba(0, 0, 0, 0.04);\n}\n\n.uploadtemplate span.file-size, .file-name {\n    font-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", \"sans-serif\";\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n.uploadtemplate span.progress-bar-container {\n    display: block;\n    float: right;\n    height: 20px;\n    right: 13%;\n    top: 14px;\n    position: relative;\n    width: 20%;\n}\n\n.uploadtemplate .progress {\n    width: 100%;\n    height: 15px;\n    -webkit-appearance: none;\n}\n\n.uploadtemplate .close-icon-container {\n    cursor: pointer;\n    font-size: 11px;\n    height: 24px;\n    margin: 0 12px 0 22px;\n    padding: 0;\n    position: absolute;\n    right: 0;\n    width: 24px;\n    top: 6px;\n}\n\n.uploadtemplate .close-icon-container.e-icons::before {\n    left: 7px;\n    position: inherit;\n    top: 7px;\n    content: '\\e932';\n}\n\n.bootstrap4 .close-icon-container.e-icons::before {\n    left: 7px;\n    position: inherit;\n    top: 7px;\n    content: '\\e745';\n}\n.bootstrap4 .file-lists {\n    background: #fff;\n}\n\n.uploadtemplate .close-icon-container.delete-icon::before {\n    content: '\\e94a';\n}\n\n.bootstrap4 .close-icon-container.delete-icon::before {\n    content: '\\e773';\n}\n\n.uploadtemplate .close-icon-container:hover {\n    background-color: rgba(0, 0, 0, 0.12);\n    border-color: transparent;\n    border-radius: 50%;\n    box-shadow: 0 0 0 transparent;\n}\n\n.bootstrap4 .close-icon-container:hover {\n    background-color: #e9ecef;\n    border-color: transparent;\n    border-radius: 4px;\n    box-shadow: 0 0 0 transparent;\n}\n\n.highcontrast .uploadtemplate .close-icon-container:hover {\n    background-color: #ffd939;\n    color: black;\n}\n\n.highcontrast .uploadtemplate .close-icon-container {\n    color: #ffffff;\n}\n\n.uploadtemplate .upload-success {\n    color: #2bc700;\n}\n\n.uploadtemplate .upload-fails {\n    color: #f44336;\n}\n.uploadtemplate progress::-webkit-progress-bar {\n    border: 1px solid lightgrey;\n    background-color: #ffffff;\n    border-radius: 2px;\n}\n.uploadtemplate #dropArea progress {\n    border: 1px solid lightgrey;\n    background-color: #ffffff;\n    border-radius: 2px;\n}\n\n.bootstrap4 #dropArea progress {\n    background-color: #dee2e6;\n    border-radius: 4px;\n}\n\n.bootstrap4 progress::-webkit-progress-value {\n    background-color: #007bff;\n    border-radius: 4px; \n}\n\n.highcontrast .uploadtemplate #dropArea progress {\n    background-color: #000000;\n}\n.highcontrast .uploadtemplate progress::-webkit-progress-bar {\n    background-color: #000000;\n}\n.material .uploadtemplate progress::-webkit-progress-value, .uploadtemplate progress::-webkit-progress-value {\n    border-radius: 2px; \n    background-color: #ff4081;\n}\n.bootstrap .uploadtemplate progress::-webkit-progress-value {\n    border-radius: 2px; \n    background-color: #1f496e;\n}\n.fabric .uploadtemplate progress::-webkit-progress-value {\n    background-color: #1763ff;\n    border-radius: 2px; \n    top: -66px;\n}\n.highcontrast .uploadtemplate progress::-webkit-progress-value {\n    background-color: #ffd939;\n    border-radius: 2px; \n}\n.material .uploadtemplate progress::-moz-progress-bar, .uploadtemplate progress::-moz-progress-bar {\n    border-radius: 2px; \n    background-color: #ff4081;\n}\n.bootstrap .uploadtemplate progress::-moz-progress-bar {\n    border-radius: 2px; \n    background-color: #1f496e;\n}\n.fabric .uploadtemplate progress::-moz-progress-bar {\n    background-color: #1763ff;\n    border-radius: 2px; \n    top: -66px;\n}\n.highcontrast .uploadtemplate progress::-moz-progress-bar {\n    background-color: #ffd939;\n    border-radius: 2px; \n}\n.material .uploadtemplate span a, .uploadtemplate span a {\n    color:#ff4081;\n}\n.fabric .uploadtemplate span a {\n    color: #1763ff;\n}\n.bootstrap .uploadtemplate span a {\n    color: #1f496e;\n}\n.highcontrast .uploadtemplate span a {\n    color: #ffd939;\n}","app.component.ts":"import { Component, ViewChild, ViewEncapsulation, Inject } from '@angular/core';\nimport { EmitType, detach, isNullOrUndefined, createElement, EventHandler } from '@syncfusion/ej2-base';\nimport { UploaderComponent, FileInfo, SelectedEventArgs, RemovingEventArgs } from '@syncfusion/ej2-angular-inputs';\nimport { createSpinner, showSpinner, hideSpinner  } from '@syncfusion/ej2-popups';\n\n/**\n * Uploader Custom Template sample\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('templateupload')\n    public uploadObj: UploaderComponent;\n\n    public path: Object = {\n        saveUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save',\n        removeUrl: 'https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove'\n    };\n    \n    public uploadWrapper: HTMLElement = document.getElementsByClassName('e-upload')[0] as HTMLElement;\n    public parentElement : HTMLElement; \n    public proxy : any;\n    public progressbarContainer : HTMLElement;\n    public filesDetails : FileInfo[] = [];\n    public filesList: HTMLElement[] = [];\n    public dropElement: HTMLElement = document.getElementsByClassName('control-fluid')[0] as HTMLElement;\n\n    ngAfterViewInit(): void {\n        document.getElementById('browse').onclick = () => {\n            document.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();\n            return false;\n        };\n        document.getElementById('clearbtn').onclick = () => {\n            if (!document.getElementsByClassName('upload-list-root')[0]) { return; }\n            this.uploadObj.element.value = '';\n            detach(document.getElementById('dropArea').querySelector('.upload-list-root'));\n            this.filesList = [];\n            this.filesDetails = [];\n        };\n    }\n\n    public onFileSelect(args : SelectedEventArgs) : void  {\n        if (isNullOrUndefined(document.getElementById('dropArea').querySelector('.upload-list-root'))) {\n            this.parentElement = createElement('div', { className: 'upload-list-root' });\n            this.parentElement.appendChild(createElement('ul', {className: 'ul-element' }));\n            document.getElementById('dropArea').appendChild(this.parentElement);\n        }\n        for (let i : number = 0; i < args.filesData.length; i++) {\n            this.formSelectedData(args.filesData[i], this);  // create the LI element for each file Data\n        }\n        this.filesDetails = this.filesDetails.concat(args.filesData);\n        this.uploadObj.upload(args.filesData, true);\n        args.cancel = true;\n    }\n\n    public onFileRemove(args: RemovingEventArgs): void {\n        args.postRawFile = false;\n    }\n\n    public formSelectedData (selectedFiles : FileInfo, proxy: any ) : void {\n        let liEle : HTMLElement = createElement('li',  { className: 'file-lists', attrs: {'data-file-name' : selectedFiles.name} });\n        liEle.appendChild(createElement('span', {className: 'file-name ', innerHTML: selectedFiles.name }));\n        liEle.appendChild(createElement('span', {className: 'file-size ', innerHTML: this.uploadObj.bytesToSize(selectedFiles.size) }));\n        if (selectedFiles.status === 'Ready to upload') {\n            this.progressbarContainer = createElement('span', {className: 'progress-bar-container'});\n            this.progressbarContainer.appendChild(createElement('progress', {className: 'progress', attrs: {value : '0', max : '100'}} ));\n            liEle.appendChild(this.progressbarContainer);\n        } else { liEle.querySelector('.file-name').classList.add('upload-fails'); }\n        let closeIconContainer : HTMLElement = createElement('span', {className: 'e-icons close-icon-container'});\n        EventHandler.add(closeIconContainer, 'click', this.removeFiles, proxy);\n        liEle.appendChild(closeIconContainer);\n        document.querySelector('.ul-element').appendChild(liEle);\n        this.filesList.push(liEle);\n    }\n\n    public onFileUpload(args : any) : void {\n        let li : Element = document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        EventHandler.remove(li.querySelector('.close-icon-container'), 'click', this.removeFiles);\n        let progressValue : number = Math.round((args.e.loaded / args.e.total) * 100);\n        if (!isNaN(progressValue)) {\n            li.getElementsByTagName('progress')[0].value = progressValue;   // Updating the progress bar value\n        }\n    }\n\n    public onUploadSuccess:  EmitType<Object> = (args: any) => {\n        let spinnerElement: HTMLElement = document.getElementById('dropArea');\n        let li: HTMLElement =  document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        if (args.operation === 'upload') {\n            let progressBar: HTMLElement = li.getElementsByTagName('progress')[0];\n            li.querySelector('.close-icon-container').classList.add('delete-icon');\n            detach(li.getElementsByTagName('progress')[0]);\n            (li.querySelector('.file-size') as HTMLElement).style.display = 'inline-block';\n            (li.querySelector('.file-name') as HTMLElement).style.color = 'green';\n            (li.querySelector('.e-icons') as HTMLElement).onclick = () => {\n                createSpinner({ target: spinnerElement, width: '25px' });\n                showSpinner(spinnerElement);\n            };\n            (li.querySelector('.close-icon-container') as HTMLElement).onkeydown = (e: any) => {\n                if (e.keyCode === 13) { \n                    createSpinner({ target: spinnerElement, width: '25px' });\n                    showSpinner(spinnerElement);\n                }\n            };\n        } else {\n            this.filesDetails.splice(this.filesList.indexOf(li), 1);\n            this.filesList.splice(this.filesList.indexOf(li), 1);\n            if (!isNullOrUndefined(li)) { detach(li); }\n            if (!isNullOrUndefined(spinnerElement)) {\n                hideSpinner(spinnerElement);\n                detach(spinnerElement.querySelector('.e-spinner-pane'));\n            }\n        }\n        EventHandler.add(li.querySelector('.close-icon-container'), 'click', this.removeFiles, this);\n    }\n\n    public onUploadFailed(args : any) : void {\n        let li : Element = document.getElementById('dropArea').querySelector('[data-file-name=\"' + args.file.name + '\"]');\n        EventHandler.add(li.querySelector('.close-icon-container'), 'click', this.removeFiles, this);\n        li.querySelector('.file-name ').classList.add('upload-fails');\n        if (args.operation === 'upload') {\n            detach(li.querySelector('.progress-bar-container'));\n        }\n    }\n\n    public removeFiles(args : any) : void {\n        let status : string = this.filesDetails[this.filesList.indexOf(args.currentTarget.parentElement)].status;\n        if (status === 'File uploaded successfully') {\n            this.uploadObj.remove(this.filesDetails[this.filesList.indexOf(args.currentTarget.parentElement)]);\n        } else {\n            detach(args.currentTarget.parentElement);\n        }\n        this.uploadObj.element.value = '';\n    }\n\n    public generateSpinner(targetElement: HTMLElement): void {\n        createSpinner({ target: targetElement, width: '25px' });\n        showSpinner(targetElement);\n    }\n\n    constructor() {\n        \n    }\n}","app/app.subcomponent.html":"<div *ngIf=\"displayError\" >\n    <div class=\"e-error\">\n      {{ errorMsg }}\n    </div>\n  </div>","app/app.subcomponent.css":".error-msg {\n    color: #a94442;\n  }\n  .fix-error-icon {\n    top: 27px;\n  }","app/app.subcomponent.ts":"import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-field-error-display',\n  templateUrl: 'app.subcomponent.html',\n  styleUrls: ['app.subcomponent.css']\n})\nexport class FieldErrorDisplayComponent {\n\n  @Input() errorMsg: string;\n  @Input() displayError: boolean;\n\n}\n"}