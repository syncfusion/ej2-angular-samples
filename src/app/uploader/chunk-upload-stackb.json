{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"import { Component, ViewChild, ViewEncapsulation, Inject } from '@angular/core';\nimport { EmitType, detach, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { UploaderComponent, RemovingEventArgs, UploaderModule } from '@syncfusion/ej2-angular-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { DropDownListComponent, ChangeEventArgs, DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\n\n\n\n/**\n * Chunk Upload sample\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [UploaderModule, DropDownListModule,  ]\n})\nexport class AppComponent {\n    @ViewChild('chunkupload') chunkupload: UploaderComponent;\n    @ViewChild('sample')\n    public listObj: DropDownListComponent;\n    // define the JSON of data\n    public chunkData: Object[] = [\n        { value: '500000', size: '500 KB' },\n        { value: '1000000', size: '1 MB' },\n        { value: '2000000', size: '2 MB' }\n    ];\n    public fields: Object = { text: 'size', value: 'value' };\n    // set the placeholder to DropDownList input element\n    public waterMark: string = 'Select chunk size';\n    // set the value to select an item based on mapped value at initial rendering\n    public value: string = '500000';\n    public path: Object = {\n        saveUrl: 'https://services.syncfusion.com/angular/production/api/FileUploader/Save',\n        removeUrl: 'https://services.syncfusion.com/angular/production/api/FileUploader/Remove',\n        chunkSize: 500000\n    };\n\n    public onChange(args: ChangeEventArgs): void {\n      this.chunkupload.asyncSettings.chunkSize = parseInt(args.itemData.value);\n    }\n\n    public onFileRemove(args: RemovingEventArgs): void {\n        args.postRawFile = false;\n    }\n\n    public isInteraction: boolean = false;\n    // to update flag variable value for automatic pause and resume\n    public onPausing(args: any): void {\n        if (args.event !== null && !navigator.onLine) {\n            this.isInteraction = true;\n        } else {\n            this.isInteraction = false;\n        }\n    }\n    // to update flag variable value for automatic pause and resume\n    public onResuming(args: any): void {\n        if (args.event !== null && !navigator.onLine) {\n            this.isInteraction = true;\n        } else {\n            this.isInteraction = false;\n        }\n    }\n\n    public dropElement: HTMLElement = document.getElementsByClassName('control-section')[0] as HTMLElement;\n    // to prevent triggering chunk-upload failure event and to pause uploading on network failure\n    public onBeforefailure(args: any): void {\n        let proxy: any = this;\n        args.cancel = !this.isInteraction;\n        /* tslint:disable */\n        // interval to check network availability on every 500 milliseconds\n        let clearTimeInterval:any = setInterval(() => {\n            if (navigator.onLine && !isNullOrUndefined(proxy.chunkupload.filesData[0]) && proxy.chunkupload.filesData[0].statusCode == 4) {\n                proxy.chunkupload.resume(proxy.chunkupload.filesData);\n                clearSetInterval();\n            } else {\n                if (!proxy.isInteraction && !isNullOrUndefined(proxy.chunkupload.filesData[0]) && proxy.chunkupload.filesData[0].statusCode == 3) {\n                    proxy.chunkupload.pause(proxy.chunkupload.filesData);\n                }\n            }\n        }, 500);\n        // clear Interval after when network is available.\n        function clearSetInterval(): void {\n            clearInterval(clearTimeInterval);\n        }\n    }\n\n    constructor() {\n        \n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"control-section\">\n    <div class=\"col-lg-8\">\n        <div class=\"control_wrapper\">\n            <ejs-uploader #chunkupload id='chunkfileupload' [maxFileSize]=104857600 [autoUpload]=false [asyncSettings]='path' [dropArea]='dropElement' (pausing)='onPausing($event)' (resuming)='onResuming($event)' (removing)='onFileRemove($event)'(chunkFailure)='onBeforefailure($event)'></ejs-uploader>\n        </div>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <ejs-dropdownlist id='chunksizes' #sample [dataSource]='chunkData' (change)='onChange($event)' [value]='value' [fields]='fields' [placeholder]='waterMark'></ejs-dropdownlist>\n            </div>\n        </div>\n    </div>\n</div>\n\n","app.component.css":".control_wrapper {\n    max-width: 500px;\n    min-width: 245px;\n    margin: auto;\n}\n#defaultfileupload .e-upload.e-control {\n    position: relative;\n    margin: 15px 0;\n}\n.e-upload {\n    float: none;\n}\n.e-upload .e-upload-actions {\n    float: none;\n    text-align: right;\n}\n.sequential-upload {\n    padding-top: 18px;\n}\n\n","dependencies.json":"{\"@syncfusion/ej2-icons\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-angular-popups\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}