{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app/app.module.ts":"import { AccordionAllModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ListViewAllModule } from '@syncfusion/ej2-angular-lists';\n\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { SplitterModule } from '@syncfusion/ej2-angular-layouts';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [   AppComponent ], imports: [ SplitterModule, BrowserModule,CommonModule, TextBoxModule, ListViewAllModule, AccordionAllModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div id=\"target\" class=\"control-section accordion-view\">\n        <ejs-splitter #splitterInstance id=\"splitter\" height='288px' width='100%'>\n            <e-panes>\n                <e-pane size='39%' min='30%' [content]='accordioncontent' ></e-pane>\n                <e-pane size='65%' min='45%' ></e-pane>\n            </e-panes>\n        </ejs-splitter>\n        <ng-template #accordioncontent1>\n                <ejs-accordion (expanding)=\"expanded($event)\">\n                    <e-accordionitems>\n                            <e-accordionitem expanded='true'>\n                                <ng-template #header>\n                                    <div>ASP.NET</div>\n                                </ng-template>\n                                <ng-template #content>\n                                    <ejs-listview id='listview' (select)=\"onSelect($event)\"  [dataSource]='listviewdata1'></ejs-listview>\n                                </ng-template>\n                            </e-accordionitem>\n                            <e-accordionitem>\n                                <ng-template #header>\n                                    <div>ASP.NET MVC</div>\n                                </ng-template>\n                                <ng-template #content>\n                                    <ejs-listview id='listview1' (select)=\"onSelect($event)\"  [dataSource]='listviewdata2'></ejs-listview>\n                                </ng-template>\n                            </e-accordionitem>\n                            <e-accordionitem>\n                                <ng-template #header>\n                                    <div>JavaScript</div>\n                                </ng-template>\n                                <ng-template #content>\n                                    <ejs-listview id='listview2' (select)=\"onSelect($event)\"  [dataSource]='listviewdata3'></ejs-listview>\n                                </ng-template>\n                            </e-accordionitem>\n                    </e-accordionitems>\n                </ejs-accordion>\n        </ng-template>\n    </div>\n    <style>\n        .accordion-view #content {\n            padding: 18px;\n        }\n        .accordion-view.control-section{            \n            min-height: 370px;   \n        }\n        .accordion-view .content {\n            padding: 9px;\n        }\n        .accordion-view #splitter .e-accordion .e-acrdn-item .e-acrdn-panel .e-acrdn-content {\n            padding: 0px;\n        }\n        .accordion-view #splitter .e-accordion, .accordion-view #splitter .e-accordion .e-acrdn-item.e-select, .accordion-view #splitter .e-accordion .e-acrdn-item.e-selected.e-select > .e-acrdn-header {\n            border: none;\n        }\n        .accordion-view #splitter .e-acrdn-header-content {\n            display: block;\n            text-decoration: none;\n        }\n\t\t.bootstrap .accordion-view #splitter .e-list-parent.e-ul li:nth-child(3),\n\t\t.bootstrap4\t.accordion-view #splitter .e-list-parent.e-ul li:nth-child(3) {\n\t\t\tborder-bottom: none;\n\t\t}\n\t\t.bootstrap4 #splitter .e-listview {\n\t\t\tborder: none;\n\t\t}\n    </style>\n\t\n\t<!-- custom code start -->\n    <style>\n        .accordion-view#target {\n            margin: 20px auto;\n            max-width: 600px;\n        }\n    </style>\n    <!-- custom code end -->\n","app.component.css":"","app.component.ts":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { SplitterComponent} from '@syncfusion/ej2-angular-layouts';\nimport { Ajax} from '@syncfusion/ej2-base';\nimport { ExpandEventArgs, Accordion} from '@syncfusion/ej2-navigations';\nimport { AccordionComponent } from '@syncfusion/ej2-angular-navigations';\n\n\n/**\n *  Sample for accordion in splitter\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n    @ViewChild('accordioncontent1') accordioncontent: AccordionComponent;\n    @ViewChild('splitterInstance') splitterObj: SplitterComponent;\n    @ViewChild('listviewcontent1') listviewcontent:any ;\n    //Define an array of JSON data\n    public listviewdata1: Object[] = [\n        { text: 'Grid', id: '1' },\n        { text: 'Schedule', id: '2'},\n        { text: 'Chart', id: '7'}\n    ];\n    public listviewdata2: Object[] = [\n        { text: 'Grid', id: '3' },\n        { text: 'Schedule', id: '4'},\n        { text: 'Chart', id: '8'}\n    ];\n    public listviewdata3: Object[] = [\n        { text: 'Grid', id: '5' },\n        { text: 'Schedule', id: '6'},\n        { text: 'Chart', id: '9'}\n    ];\n    public onSelect(e: any): void {\n        let listid: string = e.item.dataset.uid;\n        switch (listid) {\n            case '1':\n                let ajax: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/aspnet-grid-ajax.html', 'GET', true);\n                ajax.send().then();\n                ajax.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            case '2':\n                let ajax1: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/aspnet-schedule-ajax.html', 'GET', true);\n                ajax1.send().then();\n                ajax1.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            case '3':\n                let ajax2: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/aspnetmvc-grid-ajax.html', 'GET', true);\n                ajax2.send().then();\n                ajax2.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            case '4':\n                let ajax3: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/aspnetmvc-schedule-ajax.html', 'GET', true);\n                ajax3.send().then();\n                ajax3.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            case '5':\n                let ajax4: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/javascript-grid-ajax.html', 'GET', true);\n                ajax4.send().then();\n                ajax4.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            case '6':\n                let ajax5: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/javascript-schedule-ajax.html', 'GET', true);\n                ajax5.send().then();\n                ajax5.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            case '7':\n                let ajax6: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/aspnet-chart-ajax.html', 'GET', true);\n                ajax6.send().then();\n                ajax6.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            case '8':\n                let ajax7: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/aspnetmvc-chart-ajax.html', 'GET', true);\n                ajax7.send().then();\n                ajax7.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            case '9':\n                let ajax8: Ajax = new Ajax('./../../../../src/app/splitter/assets/splitter/javascript-chart-ajax.html', 'GET', true);\n                ajax8.send().then();\n                ajax8.onSuccess = (data: any) =>  {\n                    this.splitterObj.paneSettings[1].content = data;\n                };\n                break;\n            }\n    }\n    public expanded(e: ExpandEventArgs): void {\n        let index: number = e.index;\n        switch (index) {\n            case 0:\n                this.splitterObj.paneSettings[1].content = '<div id=\"content\"><h4>About ASP.NET</h4>Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services. ASP.NET pages execute on the server and generate markup such as HTML, WML, or XML that is sent to a desktop or mobile browser. ASP.NET pages use a compiled,event-driven programming model that improves performance and enables the separation of application logic and user interface.</div>';\n                break;\n            case 1:\n                this.splitterObj.paneSettings[1].content = '<div id=\"content\"><h4>About ASP.NET MVC</h4>The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller. The ASP.NET MVC framework provides an alternative to the ASP.NET Web Forms pattern for creating Web applications. The ASP.NET MVC framework is a lightweight, highly testable presentation framework that (as with Web Forms-based applications) is integrated with existing ASP.NET features, such as master pages.</div>';\n                break;\n            case 2:\n                this.splitterObj.paneSettings[1].content = '<div id=\"content\"><h4>About JavaScript</h4>JavaScript (JS) is an interpreted computer programming language.It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.More recently, however, it has become common in both game development and the creation of desktop applications.</div>';\n                break;\n        }\n    }\n}","data.ts":"/**\n * Datasource\n */\nlet panelData: any = [\n    {\n        'panel1': { 'sizeX': 4, 'sizeY': 3, 'row': 0, 'col': 0 },\n        'panel2': { 'sizeX': 2, 'sizeY': 3, 'row': 0, 'col': 4 },\n        'panel3': { 'sizeX': 6, 'sizeY': 2, 'row': 3, 'col': 0 }\n    },\n    {\n        'panel1': { 'sizeX': 6, 'sizeY': 1, 'row': 0, 'col': 0 },\n        'panel2': { 'sizeX': 2, 'sizeY': 3, 'row': 1, 'col': 0 },\n        'panel3': { 'sizeX': 4, 'sizeY': 3, 'row': 1, 'col': 2 },\n        'panel4': { 'sizeX': 6, 'sizeY': 1, 'row': 4, 'col': 0 }\n    },\n    {\n        'panel1': { 'sizeX': 6, 'sizeY': 1, 'row': 0, 'col': 0 },\n        'panel2': { 'sizeX': 3, 'sizeY': 3, 'row': 1, 'col': 0 },\n        'panel3': { 'sizeX': 3, 'sizeY': 3, 'row': 1, 'col': 3 },\n        'panel4': { 'sizeX': 6, 'sizeY': 1, 'row': 4, 'col': 0 }\n    },\n    {\n        'panel1': { 'sizeX': 6, 'sizeY': 1, 'row': 0, 'col': 0 },\n        'panel2': { 'sizeX': 2, 'sizeY': 3, 'row': 1, 'col': 0 },\n        'panel3': { 'sizeX': 2, 'sizeY': 3, 'row': 1, 'col': 2 },\n        'panel4': { 'sizeX': 2, 'sizeY': 3, 'row': 1, 'col': 4 },\n        'panel5': { 'sizeX': 6, 'sizeY': 1, 'row': 4, 'col': 0 }\n    },\n    {\n        'panel1': { 'sizeX': 6, 'sizeY': 1, 'row': 0, 'col': 0 },\n        'panel2': { 'sizeX': 4, 'sizeY': 3, 'row': 1, 'col': 0 },\n        'panel3': { 'sizeX': 2, 'sizeY': 3, 'row': 1, 'col': 4 },\n        'panel4': { 'sizeX': 6, 'sizeY': 1, 'row': 4, 'col': 0 }\n    },\n    {\n        'panel1': { 'sizeX': 2, 'sizeY': 3, 'row': 0, 'col': 0 },\n        'panel2': { 'sizeX': 2, 'sizeY': 3, 'row': 0, 'col': 2 },\n        'panel3': { 'sizeX': 2, 'sizeY': 3, 'row': 0, 'col': 4 },\n        'panel4': { 'sizeX': 6, 'sizeY': 2, 'row': 3, 'col': 0 }\n    }\n];\nexport default panelData;\n"}