{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","blockData.ts":"import { BlockModel, BlockType, ContentType } from \"@syncfusion/ej2-angular-blockeditor\"\n\nexport let blockDataAPI: BlockModel[] = [\n    {\n        id: 'heading-block',\n        type: BlockType.Heading,\n        props: { level: 1 },\n        content: [{ \n            id: 'heading-content',\n            type: ContentType.Text,\n            content: 'Block Editor API Demo'\n        }]\n    },\n    {\n        id: 'intro-block',\n        type: BlockType.Paragraph,\n        content: [{ \n            id: 'intro-content',\n            type: ContentType.Text,\n            content: 'The Block Editor enables users to create, format, and organize content using various block types.'\n        }]\n    },\n    {\n        id: 'api-heading',\n        type: BlockType.Heading,\n        props: { level: 2 },\n        content: [{ \n            id: 'api-heading-content',\n            type: ContentType.Text,\n            content: 'API Features:'\n        }]\n    },\n    {\n        id: 'api-list-1',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-1-content',\n            type: ContentType.Text,\n            content: 'readOnly - allows to change it as a non-editable state.'\n        }]\n    },\n    {\n        id: 'api-list-2',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-2-content',\n            type: ContentType.Text,\n            content: 'enableDragAndDrop - allows to control drag-and-drop operations within the block editor.'\n        }]\n    },\n    {\n        id: 'api-list-3',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-3-content',\n            type: ContentType.Text,\n            content: 'enableHtmlEncode - Get the encoded string value through value property and source code panel.'\n        }]\n    },\n    {\n        id: 'api-list-4',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-4-content',\n            type: ContentType.Text,\n            content: 'selectAllBlocks - Selects all blocks in the editor.'\n        }]\n    },\n    {\n        id: 'api-list-5',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-5-content',\n            type: ContentType.Text,\n            content: 'focusIn - Focuses the editor.'\n        }]\n    },\n    {\n        id: 'api-list-6',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-6-content',\n            type: ContentType.Text,\n            content: 'focusOut - Removes focus from the editor.'\n        }]\n    },\n    {\n        id: 'api-list-7',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-7-content',\n            type: ContentType.Text,\n            content: 'getBlockCount - Gets total block count.'\n        }]\n    },\n    {\n        id: 'api-list-8',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-8-content',\n            type: ContentType.Text,\n            content: 'getDataAsJson - Retrieves data from the editor as JSON.'\n        }]\n    },\n    {\n        id: 'api-list-9',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'api-list-9-content',\n            type: ContentType.Text,\n            content: 'getDataAsHtml - Retrieves data from the editor as HTML.'\n        }]\n    },\n    {\n        id: 'try-it-block',\n        type: BlockType.Paragraph,\n        content: [{ \n            id: 'try-it-content',\n            type: ContentType.Text,\n            content: 'Try it out! Use the property panel on the right to interact with the API.',\n            props: {\n                styles: {\n                    bold: true,\n                    bgColor: '#999999'\n                }\n            }\n        }]\n    }\n];\n\nexport let blockDataOverview: BlockModel[] = [\n    {\n        id: 'heading-block',\n        type: BlockType.Heading,\n        props: { level: 1 },\n        content: [{ \n            id: 'heading-content',\n            type: ContentType.Text,\n            content: 'Welcome to the Block Editor Demo!'\n        }]\n    },\n    {\n        id: 'intro-block',\n        type: BlockType.Paragraph,\n        content: [{ \n            id: 'intro-content',\n            type: ContentType.Text,\n            content: 'Block Editor is a powerful rich text editor that allows you to create structured content using blocks. Each block can be formatted, moved, or transformed into different types.'\n        }]\n    },\n    {\n        id: 'styled-paragraph',\n        type: BlockType.Paragraph,\n        content: [\n            { \n                id: 'styled-text-1',\n                type: ContentType.Text,\n                content: 'Try selecting text to see '\n            },\n            {\n                id: 'styled-text-2',\n                type: ContentType.Text,\n                content: 'formatting options',\n                props: {\n                    styles: {\n                        bold: true,\n                        italic: true\n                    }\n                }\n            },\n            {\n                id: 'styled-text-3',\n                type: ContentType.Text,\n                content: ' or type '\n            },\n            {\n                id: 'styled-text-4',\n                type: ContentType.Text,\n                content: '\"/\"',\n                props: {\n                    styles: {\n                        bgColor: '#999999',\n                        bold: true\n                    }\n                }\n            },\n            {\n                id: 'styled-text-5',\n                type: ContentType.Text,\n                content: ' to access the command menu.'\n            }\n        ]\n    },\n    {\n        id: 'block-types-heading',\n        type: BlockType.Heading,\n        props: { level: 2 },\n        content: [{ \n            id: 'block-types-heading-content',\n            type: ContentType.Text,\n            content: 'Block Types'\n        }]\n    },\n    {\n        id: 'quote-block',\n        type: BlockType.Quote,\n        content: [{ \n            id: 'quote-content',\n            type: ContentType.Text,\n            content: 'The Block Editor makes document creation a seamless experience with its intuitive block-based approach.',\n            props: {\n                styles: {\n                    italic: true\n                }\n            }\n        }]\n    },\n    {\n        id: 'callout-block',\n        type: BlockType.Callout,\n        props: {\n            children: [{ \n                id: 'callout-content',\n                type: BlockType.Paragraph,\n                content: [{\n                    id: 'callout-content-1',\n                    type: ContentType.Text,\n                    content: 'Important: Block Editor supports various content types including Text, Link, Code, Mention, and Label.',\n                    props: {\n                        styles: {\n                            bold: true\n                        }\n                    }\n                }]\n            }]\n        }\n    },\n    {\n        id: 'list-types-heading',\n        type: BlockType.Heading,\n        props: { level: 3 },\n        content: [{ \n            id: 'list-types-heading-content',\n            type: ContentType.Text,\n            content: 'List Types'\n        }]\n    },\n    {\n        id: 'bullet-list-header',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'bullet-list-header-content',\n            type: ContentType.Text,\n            content: 'Text blocks: Paragraph, Heading 1-4, Quote, Callout',\n            props: {\n                styles: {\n                    bold: true\n                }\n            }\n        }]\n    },\n    {\n        id: 'numbered-list',\n        type: BlockType.NumberedList,\n        content: [{ \n            id: 'numbered-list-content',\n            type: ContentType.Text,\n            content: 'Lists: Bullet lists, Numbered lists, Check lists'\n        }]\n    },\n    {\n        id: 'check-list',\n        type: BlockType.Checklist,\n        props: { isChecked: true },\n        content: [{ \n            id: 'check-list-content',\n            type: ContentType.Text,\n            content: 'Special blocks: Divider, Toggle, Code block'\n        }]\n    },\n    {\n        id: 'divider-block',\n        type: BlockType.Divider,\n        content: []\n    },\n    {\n        id: 'toggle-block',\n        type: BlockType.CollapsibleParagraph,\n\n        content: [{ \n            id: 'toggle-content',\n            type: ContentType.Text,\n            content: 'Click me to expand/collapse'\n        }],\n        props: {\n            isExpanded: true,\n            children: [\n                {\n                    id: 'toggle-child',\n                    type: BlockType.Paragraph,\n                    content: [{ \n                        id: 'toggle-child-content',\n                        type: ContentType.Text,\n                        content: 'This content is inside a toggle block. Toggle blocks are useful for organizing content that can be expanded or collapsed.'\n                    }]\n                }\n            ]\n        }\n    },\n    {\n        id: 'code-block',\n        type: BlockType.Code,\n        content: [{ \n            id: 'code-content',\n            type: ContentType.Text,\n            content: 'const editor = new BlockEditor();\\neditor.appendTo(\"#element\");'\n        }]\n    },\n    {\n        id: 'formatting-heading',\n        type: BlockType.Heading,\n        props: { level: 4 },\n        content: [{ \n            id: 'formatting-heading-content',\n            type: ContentType.Text,\n            content: 'Text Formatting Examples'\n        }]\n    },\n    {\n        id: 'formatting-examples',\n        type: BlockType.Paragraph,\n        content: [\n            { \n                id: 'format-bold',\n                type: ContentType.Text,\n                content: 'Bold ',\n                props: {\n                    styles: {\n                        bold: true\n                    }\n                }\n            },\n            { \n                id: 'format-italic',\n                type: ContentType.Text,\n                content: 'Italic ',\n                props: {\n                    styles: {\n                        italic: true\n                    }\n                }\n            },\n            { \n                id: 'format-underline',\n                type: ContentType.Text,\n                content: 'Underline ',\n                props: {\n                    styles: {\n                        underline: true\n                    }\n                }\n            },\n            { \n                id: 'format-strikethrough',\n                type: ContentType.Text,\n                content: 'Strikethrough ',\n                props: {\n                    styles: {\n                        strikethrough: true\n                    }\n                }\n            },\n            { \n                id: 'format-superscript',\n                type: ContentType.Text,\n                content: 'Superscript ',\n                props: {\n                    styles: {\n                        superscript: true\n                    }\n                }\n            },\n            { \n                id: 'format-subscript',\n                type: ContentType.Text,\n                content: 'Subscript ',\n                props: {\n                    styles: {\n                        subscript: true\n                    }\n                }\n            },\n            { \n                id: 'format-uppercase',\n                type: ContentType.Text,\n                content: 'uppercase ',\n                props: {\n                    styles: {\n                        uppercase: true\n                    }\n                }\n            },\n            { \n                id: 'format-lowercase',\n                type: ContentType.Text,\n                content: 'LOWERCASE',\n                props: {\n                    styles: {\n                        lowercase: true\n                    }\n                }\n            }\n        ]\n    },\n    {\n        id: 'link-block',\n        type: BlockType.Paragraph,\n        content: [\n            { \n                id: 'link-text',\n                type: ContentType.Text,\n                content: 'Visit '\n            },\n            { \n                id: 'link-content',\n                type: ContentType.Link,\n                content: 'Syncfusion',\n                props: {\n                    url: 'https://www.syncfusion.com/',\n                    openInNewWindow: true\n                }\n            },\n            { \n                id: 'link-text-end',\n                type: ContentType.Text,\n                content: ' for more information.'\n            }\n        ]\n    },\n    {\n        id: 'label-block',\n        type: BlockType.Paragraph,\n        content: [\n            { \n                id: 'label-text',\n                type: ContentType.Text,\n                content: 'This block contains a '\n            },\n            { \n                id: 'progress-label',\n                type: ContentType.Label,\n                props: { labelId: 'progress' }\n            },\n            { \n                id: 'label-text-end',\n                type: ContentType.Text,\n                content: ' label.'\n            }\n        ]\n    },\n    {\n        id: 'try-it-block',\n        type: BlockType.Paragraph,\n        content: [{ \n            id: 'try-it-content',\n            type: ContentType.Text,\n            content: 'Try it out! Click anywhere and start typing, or type \"/\" to see available commands.',\n            props: {\n                styles: {\n                    bold: true,\n                    bgColor: '#999999'\n                }\n            }\n        }]\n    }\n]\n\nexport let blockDataEvents: BlockModel[] = [\n    {\n        id: 'heading-block',\n        type: BlockType.Heading,\n        props: { level: 1 },\n        content: [{ \n            id: 'heading-content',\n            type: ContentType.Text,\n            content: 'Block Editor Events Demo'\n        }]\n    },\n    {\n        id: 'intro-block',\n        type: BlockType.Paragraph,\n        content: [{ \n            id: 'intro-content',\n            type: ContentType.Text,\n            content: 'This sample demonstrates the events triggered by the Block Editor component. Try different actions to see the events in the trace panel.'\n        }]\n    },\n    {\n        id: 'features-heading',\n        type: BlockType.Heading,\n        props: { level: 2 },\n        content: [{ \n            id: 'features-heading-content',\n            type: ContentType.Text,\n            content: 'Notable Features:'\n        }]\n    },\n    {\n        id: 'feature-list-1',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'feature-list-1-content',\n            type: ContentType.Text,\n            content: 'Block-based editing with various block types (paragraphs, headings, lists, etc.)'\n        }]\n    },\n    {\n        id: 'feature-list-2',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'feature-list-2-content',\n            type: ContentType.Text,\n            content: 'Slash commands for quick block transformation'\n        }]\n    },\n    {\n        id: 'feature-list-3',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'feature-list-3-content',\n            type: ContentType.Text,\n            content: 'Rich text formatting with inline toolbar'\n        }]\n    },\n    {\n        id: 'feature-list-4',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'feature-list-4-content',\n            type: ContentType.Text,\n            content: 'Hierarchical content organization with nested blocks'\n        }]\n    },\n    {\n        id: 'feature-list-5',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'feature-list-5-content',\n            type: ContentType.Text,\n            content: 'Block manipulation (move, delete, duplicate)'\n        }]\n    },\n    {\n        id: 'feature-list-6',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'feature-list-6-content',\n            type: ContentType.Text,\n            content: 'Keyboard shortcuts for efficient editing'\n        }]\n    },\n    {\n        id: 'feature-list-7',\n        type: BlockType.BulletList,\n        content: [{ \n            id: 'feature-list-7-content',\n            type: ContentType.Text,\n            content: 'Drag and drop functionality for blocks'\n        }]\n    },\n    {\n        id: 'try-it-block',\n        type: BlockType.Paragraph,\n        content: [{ \n            id: 'try-it-content',\n            type: ContentType.Text,\n            content: 'Try different actions like typing, selecting text, adding blocks, or moving blocks to see the events triggered.',\n            props: {\n                styles: {\n                    bold: true,\n                    bgColor: '#999999'\n                }\n            }\n        }]\n    }\n]","app.component.ts":"import { Component, ViewEncapsulation, ViewChild, Inject, AfterViewInit } from '@angular/core';\n\n\nimport { BlockModel, BlockEditorModule, BlockEditor, FocusEventArgs } from '@syncfusion/ej2-angular-blockeditor';\nimport { CheckBoxModule, ChangeEventArgs } from '@syncfusion/ej2-angular-buttons';\nimport { blockDataAPI } from './blockData'\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    styleUrls: ['app.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [BlockEditorModule, CheckBoxModule,  ]\n})\nexport class AppComponent {\n    @ViewChild('apiBlockEditor')\n    public apiBlockEditor: BlockEditor;\n    \n    constructor() {\n        \n    }\n    \n    public blockDataAPI: BlockModel[] = blockDataAPI;\n    public focusedBlock: string;\n    ngAfterViewInit(): void {\n        document.getElementById('getJson')?.addEventListener('click', () => {\n            const jsonData = this.apiBlockEditor.getDataAsJson(this.focusedBlock);\n            alert(JSON.stringify(jsonData, null, 2));\n        });\n\n        document.getElementById('getHtml')?.addEventListener('click', () => {\n            const htmlData = this.apiBlockEditor.getDataAsHtml();\n            alert(htmlData);\n        });\n\n        document.getElementById('getBlockCount')?.addEventListener('click', () => {\n            alert('Total blocks: ' + this.apiBlockEditor.getBlockCount());\n        });\n\n        document.getElementById('selectall')?.addEventListener('click', () => {\n            this.apiBlockEditor.selectAllBlocks();\n        });\n\n        document.getElementById('focusIn')?.addEventListener('click', () => {\n            this.apiBlockEditor.focusIn();\n        });\n\n        document.getElementById('focusOut')?.addEventListener('click', () => {\n            this.apiBlockEditor.focusOut();\n        });\n\n        document.getElementById('print')?.addEventListener('click', () => {\n            this.apiBlockEditor.print();\n        });\n    }\n    public readOnlyChange(args: ChangeEventArgs) : void {\n        this.apiBlockEditor.readOnly = args.checked;\n    }\n    public enableDragDropChange(args: ChangeEventArgs) : void {\n        this.apiBlockEditor.enableDragAndDrop = args.checked;\n    }\n    public onFocus(event: FocusEventArgs): void {\n        this.focusedBlock = event.blockId;\n    }\n}","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n            <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" >\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<div class=\"col-lg-8 control-section\">\n    <div class=\"control-wrapper\">\n        <div class=\"sample-container\">\n            <div class=\"default-section\">\n                <div id=\"api-blockeditor\" ejs-blockeditor #apiBlockEditor [blocks]=\"blockDataAPI\" (focus)=\"onFocus($event)\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"col-lg-4 property-section\">\n    <div class=\"property-panel-header\"> Properties </div>\n    <div id=\"property\" title=\"Properties\" class=\"property-panel-table\">\n        <table id=\"property\" title=\"Properties\">\n            <tbody>\n                <tr>\n                    <td>\n                        <div>ReadOnly </div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-checkbox id=\"readonly\" aria-label=\"Readonly\" [checked]=\"false\" (change)=\"readOnlyChange($event)\"></ejs-checkbox>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <div>Enable Drag and Drop </div>\n                    </td>\n                    <td>\n                        <div>\n                            <ejs-checkbox id=\"enableDragDrop\" aria-label=\"Enable Drag and Drop\" [checked]=\"true\" (change)=\"enableDragDropChange($event)\"></ejs-checkbox>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td>\n                        <div>\n                            <button id=\"getJson\" class=\"btn btn-default\">Get JSON Data</button>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td>\n                        <div>\n                            <button id=\"getHtml\" class=\"btn btn-default\">Get HTML Data</button>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td>\n                        <div>\n                            <button id=\"getBlockCount\" class=\"btn btn-default\">Get Block Count</button>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td>\n                        <div>\n                            <button id=\"selectall\" class=\"btn btn-default\">Select All Blocks</button>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td>\n                        <div>\n                            <button id=\"focusIn\" class=\"btn btn-default\">Focus In</button>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td>\n                        <div>\n                            <button id=\"focusOut\" class=\"btn btn-default\">Focus Out</button>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td>\n                        <div>\n                            <button id=\"print\" class=\"btn btn-default\">Print</button>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n","app.component.css":".blockeditor-api {\n    height: 600px;\n    width: 60vw;\n    margin: 0 auto;\n}\n\n@media only screen and (max-width: 750px) {\n    .blockeditor-api {\n        width: 100%;\n    }\n}","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-blockeditor\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-blockeditor\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}