{"main.ts":"import { bootstrapApplication } from '@angular/platform-browser'; \n\nimport { appConfig } from './app/app.config'; \n\nimport { AppComponent } from './app.component';\n\nbootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","app.component.ts":"/**\n * Dynamic Marker Sample\n */\nimport { Component, ViewEncapsulation, ViewChild, Inject } from '@angular/core';\nimport { Maps, Marker, Zoom, ILoadEventArgs, MapsTheme, NavigationLine, MarkerSettingsModel, MarkerSettings, MarkerType, MapsModule } from '@syncfusion/ej2-angular-maps';\nimport { ChangeEventArgs as CheckBoxChangeEvents } from '@syncfusion/ej2-buttons';\n\nimport { FormsModule } from '@angular/forms';\nimport { TextBoxModule } from '@syncfusion/ej2-angular-inputs';\nimport { DropDownListModule } from '@syncfusion/ej2-angular-dropdowns';\nimport { CheckBoxModule, ButtonModule } from '@syncfusion/ej2-angular-buttons';\n\nMaps.Inject(Marker, NavigationLine, Zoom);\n// custom code start\n//tslint:disable:max-func-body-length\n//tslint:disable;\n/* tslint:disable:no-string-literal */\n// custom code end\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    standalone: true,\n    imports: [ MapsModule, CheckBoxModule, DropDownListModule, TextBoxModule, FormsModule, ButtonModule, ]\n})\nexport class AppComponent {\n    public markerCheckedState: boolean = true;\n    public lineCheckedState: boolean = false;\n    public connectLineCheckedState: boolean = false;\n    public navigationLines: Object[] = [];\n    public latitude: number[] = [];\n    public longitude: number[] = [];\n    public lineWidth: number = 1;\n    public disableLineWidthTextBox: boolean = true;\n    public disableConnectLineCheckbox: boolean = true;\n    public disableButton: boolean = true;\n    public disableShapeBox: boolean = false;\n    public markerShape: string = \"Image\";\n\n    @ViewChild('maps')\n    public maps: Maps;\n\n    public load = (args: ILoadEventArgs) => {\n        // custom code start\n        let theme: string = location.hash.split('/')[1];\n        theme = theme ? theme : 'Material'; \n        args.maps.theme = <MapsTheme>(theme.charAt(0).toUpperCase() +\n        theme.slice(1)).replace(/-dark/i, 'Dark').replace(/contrast/i, 'Contrast').replace(/-high/i, 'High').replace(/5.3/i, '5');\n        // custom code end\n    }\n\n    public zoomSettings: object = {\n        enable: true\n    };\n\n    public layers: object[] = [{\n        urlTemplate: 'https://tile.openstreetmap.org/level/tileX/tileY.png'\n    }];\n\n\n    markerChangeHandler = (args: CheckBoxChangeEvents) => {\n        this.markerCheckedState = args.checked;\n        if (args.checked) {\n            this.disableShapeBox = false;\n        } else {\n            this.disableShapeBox = true;\n        }\n    };\n    lineChangeHandler = (args: CheckBoxChangeEvents) => {\n        this.lineCheckedState = args.checked;\n        if (args.checked) {\n            this.disableConnectLineCheckbox = this.disableLineWidthTextBox = !args.checked;\n        }\n        else {\n            this.disableConnectLineCheckbox = this.disableLineWidthTextBox = !args.checked;\n            this.connectLineCheckedState = args.checked;\n        }\n    }\n    connectionLineChangeHandler = (args: CheckBoxChangeEvents) => {\n        this.connectLineCheckedState = args.checked;\n        if (!args.checked) {\n            this.emptySavedLinePositions();\n        }\n\n    }\n    clearItems = () => {\n        this.maps.layers[0].markerSettings = [];\n        this.maps.layers[0].navigationLineSettings = [];\n        this.navigationLines = [];\n        this.emptySavedLinePositions();\n        this.disableButton = true;\n    }\n\n    public mapClicked = (args: any) => {\n        if (this.markerCheckedState) {\n            this.addMarker(args);\n        }\n        if (this.lineCheckedState && !this.connectLineCheckedState) {\n            this.addLine(args, this.lineWidth);\n        }\n        if (this.connectLineCheckedState) {\n            this.addLine(args, this.lineWidth, true);\n        }\n        if (this.markerCheckedState || this.lineCheckedState || this.connectLineCheckedState) {\n            this.maps.refresh();\n            if (this.disableButton && (this.maps.layers[0].markerSettings.length ||\n            this.maps.layers[0].navigationLineSettings.length)) {\n                this.disableButton = false;\n            }\n        }\n    }\n\n    public emptySavedLinePositions: any = () => {\n        this.latitude = [];\n        this.longitude = [];\n    };\n    public addMarker: any = (args: any) => {\n        if (args['latitude'] !== null && args['longitude'] !== null) {\n            let layerIndex: number = 0;\n            let geo = this.maps.getTileGeoLocation(args.layerX, args.layerY);\n            args['latitude'] = geo['latitude'];\n            args['longitude'] = geo['longitude'];\n            let marker: MarkerSettingsModel[];\n            let dynamicMarker: MarkerSettingsModel[] = this.maps.layersCollection[layerIndex].markerSettings;\n            dynamicMarker.push(new MarkerSettings(this.maps, 'markerSettings', marker));\n            let markerIndex: number = dynamicMarker.length - 1;\n            dynamicMarker[markerIndex].visible = true;\n            dynamicMarker[markerIndex].dataSource = [\n                { latitude: args['latitude'], longitude: args['longitude'], name: 'dynamicmarker' }\n            ];\n            dynamicMarker[markerIndex].animationDuration = 0;\n            dynamicMarker[markerIndex].fill = '#DB4537';\n            dynamicMarker[markerIndex].shape = (this.markerShape !== 'Image') ? this.markerShape as MarkerType : 'Image';\n            dynamicMarker[markerIndex].height = (this.markerShape !== 'Image') ? 12 : 20;\n            dynamicMarker[markerIndex].width = (this.markerShape !== 'Image') ? 12 : 20;\n            dynamicMarker[markerIndex].imageUrl = (this.markerShape !== 'Image') ? '' : 'https://ej2.syncfusion.com/angular/demos/assets/maps/images/ballon.png';\n        }\n    };\n    public addLine: any = (lineArgs: any, lineWidth: number, connectiveLine?: boolean) => {\n        let geo = this.maps.getTileGeoLocation(lineArgs.layerX, lineArgs.layerY);\n        lineArgs['latitude'] = geo['latitude'];\n        lineArgs['longitude'] = geo['longitude'];\n        if (lineArgs.latitude != null && lineArgs.longitude != null) {\n            this.latitude.push(lineArgs.latitude);\n            this.longitude.push(lineArgs.longitude);\n        }\n        if (this.latitude.length >= 2) {\n            this.navigationLines.push({\n                'visible': true,\n                'latitude': [this.latitude[(this.latitude.length - 2)], this.latitude[(this.latitude.length - 1)]],\n                'longitude': [this.longitude[(this.longitude.length - 2)], this.longitude[(this.longitude.length - 1)]],\n                'angle': 0,\n                'color': 'blue',\n                'width': (lineWidth > 5) ? 5 : (((5 >= lineWidth) && (lineWidth >= 1)) ? lineWidth : 1)\n            });\n            this.maps.layers[0].navigationLineSettings = this.navigationLines;\n            if (!connectiveLine) {\n                this.emptySavedLinePositions();\n            }\n        }\n    }\n    public markerShapeData: string[] = ['Image', 'Circle', 'Diamond', 'Star', 'Triangle'];\n}\n\n\n","polyfills.ts":"import 'zone.js';","app/app.config.ts":"import { ApplicationConfig } from '@angular/core';\n\n export const appConfig: ApplicationConfig = { providers: [], };","index.html":"<!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Window</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n          </head>\n          <body class=\"ej2-new\"> \n\n              <!-- Google Tag Manager (noscript) -->\n              <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-W8WD8WN\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n              <!-- End Google Tag Manager (noscript) -->\n           <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n            <app-root></app-root>\n          </body>\n        </html>","app.component.html":"<style>\r\n.control-section{\r\n    margin-top: 100px;\r\n}\r\n\r</style>\n<main>\n  <section id=\"action-description\" aria-label=\"Description of Maps sample\">\n    <p>\n      This sample shows how custom markers and lines can be dynamically added to\n      our maps with UI interaction. Marker or line can be chosen from the\n      properties panel.\n    </p>\n  </section>\n  <div class=\"control-section\">\n    <div class=\"col-lg-8\">\n      <ejs-maps\n        #maps\n        id=\"container\"\n        style=\"display: block\"\n        [zoomSettings]=\"zoomSettings\"\n        [layers]=\"layers\"\n        (load)=\"load($event)\"\n        (click)=\"mapClicked($event)\"\n      >\n      </ejs-maps>\n      <i>\n        <div align=\"center\">\n          <p id=\"content\" style=\"font-size: 16px; color: grey\">\n            Click on the maps to add marker/navigation line\n          </p>\n        </div>\n      </i>\n    </div>\n    <div class=\"col-lg-4 property-section\">\n      <div class=\"property-panel-section\">\n        <div class=\"property-panel-header\">Properties</div>\n        <div class=\"property-panel-content\">\n          <table\n            id=\"property\"\n            title=\"Properties\"\n            style=\"width: 100%\"\n            role=\"none\"\n          >\n            <colgroup>\n              <col span=\"1\" style=\"width: 50%\" />\n              <col span=\"1\" style=\"width: 50%\" />\n            </colgroup>\n            <tbody>\n              <tr style=\"height: 50px\">\n                <td>\n                  <div style=\"padding: 0px; display: inline-block\">Marker</div>\n                </td>\n                <td style=\"width: 50%\">\n                  <div class=\"dynamicCheckBox\">\n                    <ejs-checkbox\n                      [checked]=\"markerCheckedState\"\n                      (change)=\"markerChangeHandler($event)\"\n                    >\n                    </ejs-checkbox>\n                  </div>\n                </td>\n              </tr>\n              <tr style=\"height: 50px\">\n                <td>\n                  <div style=\"padding: 0px\">Line</div>\n                </td>\n                <td style=\"width: 50%\">\n                  <div class=\"dynamicCheckBox\">\n                    <ejs-checkbox\n                      [checked]=\"lineCheckedState\"\n                      (change)=\"lineChangeHandler($event)\"\n                    >\n                    </ejs-checkbox>\n                  </div>\n                </td>\n              </tr>\n              <tr style=\"height: 50px\">\n                <td>\n                  <div style=\"padding: 0px\">Connecting line</div>\n                </td>\n                <td style=\"width: 50%\">\n                  <div class=\"dynamicCheckBox\">\n                    <ejs-checkbox\n                      [checked]=\"connectLineCheckedState\"\n                      [disabled]=\"disableConnectLineCheckbox\"\n                      (change)=\"connectionLineChangeHandler($event)\"\n                    ></ejs-checkbox>\n                  </div>\n                </td>\n              </tr>\n              <tr style=\"height: 50px\">\n                <td style=\"padding: 0px\">Marker type</td>\n                <td>\n                  <div style=\"margin-right: 10%\">\n                    <ejs-dropdownlist\n                      id=\"ddlelement\"\n                      [dataSource]=\"markerShapeData\"\n                      [(value)]=\"markerShape\"\n                      [readonly]=\"disableShapeBox\"\n                      style=\"width: 95%\"\n                    ></ejs-dropdownlist>\n                  </div>\n                </td>\n              </tr>\n              <tr style=\"height: 50px\">\n                <td>\n                  <div style=\"padding: 0px\">Width</div>\n                </td>\n                <td>\n                  <div style=\"width: 84%\">\n                    <ejs-textbox\n                      [(ngModel)]=\"lineWidth\"\n                      id=\"width\"\n                      style=\"width: 90%\"\n                      [disabled]=\"disableLineWidthTextBox\"\n                    ></ejs-textbox>\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <div style=\"margin-top: 20px; margin-left: 35%; width: 100%\">\n            <button\n              ejs-button\n              style=\"text-transform: none !important; width: 80px\"\n              [disabled]=\"disableButton\"\n              (click)=\"clearItems()\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div></div>\n  <section\n    id=\"description\"\n    aria-label=\"Description of the Maps features demonstrated in this sample\"\n  >\n    <br />\n    <p>\n      Using UI interaction, the markers or line can be added as follows: You can\n      get the currently clicked geo location by passing \"PointerEvent\" or\n      \"MouseEvent\" argument and layer index to the \"getGeoLocation\" method.\n      Then, use that geo position to place the marker or line in the appropriate\n      position.\n    </p>\n    <br />\n    <p style=\"font-weight: 500\">Injecting Module</p>\n    <p>\n      The features of maps component are segregated into individual feature-wise\n      modules. To use navigation lines and marker, you need to inject the\n      <code>NavigationLine </code> and <code>Marker </code> module using the\n      <code>Maps.Inject(NavigationLine, Marker)</code> method.\n    </p>\n  </section>\n\n  <!-- custom code start-->\n  <style>\n    #width.e-input[disabled] {\n      border-bottom-color: inherit;\n      background-image: none;\n    }\n    .e-view.fluent2 #property .dynamicCheckBox {\n      margin-left: -4px;\n    }\n    .e-view.fluent2-dark #property .dynamicCheckBox {\n      margin-left: -8px;\n    }\n  </style>\n</main>\n","app.component.css":"","dependencies.json":"{\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-maps\":\"*\",\"tslib\":\"^2.3.0\",\"@syncfusion/ej2-angular-maps\":\"*\",\"markdown-spellcheck\":\"^1.3.1\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"codemirror\":\"5.65.15\",\"marked\":\"0.3.19\",\"@types/codemirror\":\"0.0.56\",\"@types/marked\":\"0.3.0\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\",\"fuse.js\":\"^7.0.0\"}"}