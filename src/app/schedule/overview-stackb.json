{"main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/guide/browser-support\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n */\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n * because those flags need to be set before `zone.js` being loaded, and webpack\n * will put import in the top of bundle, so user need to create a separate file\n * in this directory (for example: zone-flags.ts), and put the following flags\n * into that file, and then add the following code before importing zone.js.\n * import './zone-flags';\n *\n * The flags allowed in zone-flags.ts are listed here.\n *\n * The following flags will work for all browsers.\n *\n * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n *\n *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n *  with the following flag, it will bypass `zone.js` patch for IE/Edge\n *\n *  (window as any).__Zone_enable_cross_context_check = true;\n *\n */\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';\nimport 'reflect-metadata';","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n  <link href=\"../../styles/material.css\" rel=\"stylesheet\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/>\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, ViewEncapsulation, Inject, ViewChild, AfterViewChecked } from '@angular/core';\nimport { ItemModel } from '@syncfusion/ej2-angular-splitbuttons';\nimport { SelectedEventArgs, TextBoxComponent } from '@syncfusion/ej2-angular-inputs';\nimport {\n  ScheduleComponent, GroupModel, DayService, WeekService, WorkWeekService, MonthService, YearService, AgendaService,\n  TimelineViewsService, TimelineMonthService, TimelineYearService, View, EventSettingsModel, Timezone, CurrentAction,\n  CellClickEventArgs, ResourcesModel, EJ2Instance, PrintService, ExcelExportService, ICalendarExportService, CallbackFunction, PopupOpenEventArgs\n} from '@syncfusion/ej2-angular-schedule';\nimport { addClass, extend, removeClass, closest, remove, isNullOrUndefined, Internationalization, compile } from '@syncfusion/ej2-base';\nimport { ChangeEventArgs as SwitchEventArgs, SwitchComponent } from '@syncfusion/ej2-angular-buttons';\nimport { MultiSelectComponent, ChangeEventArgs, MultiSelectChangeEventArgs, DropDownListComponent } from '@syncfusion/ej2-angular-dropdowns';\nimport { DataManager, Predicate, Query } from '@syncfusion/ej2-data';\nimport {\n  ClickEventArgs, ContextMenuComponent, MenuItemModel, BeforeOpenCloseMenuEventArgs, MenuEventArgs\n} from '@syncfusion/ej2-angular-navigations';\nimport { ChangeEventArgs as TimeEventArgs } from '@syncfusion/ej2-calendars';\ndeclare var moment: any;\n\n/**\n * Sample for overview\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.css'],\n  providers: [DayService, WeekService, WorkWeekService, MonthService, YearService, AgendaService,\n    TimelineViewsService, TimelineMonthService, TimelineYearService, PrintService, ExcelExportService, ICalendarExportService],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  @ViewChild('scheduleObj') scheduleObj: ScheduleComponent;\n  @ViewChild('workWeekDaysObj') workWeek: MultiSelectComponent;\n  @ViewChild('resouresObj') resources: MultiSelectComponent;\n  @ViewChild('eventTypeObj') eventTypeObj: DropDownListComponent;\n  @ViewChild('titleObj') titleObj: TextBoxComponent;\n  @ViewChild('notesObj') notesObj: TextBoxComponent;\n  @ViewChild('viewSwitch') viewSwitch: SwitchComponent;\n  @ViewChild('groupSwitch') groupSwitch: SwitchComponent;\n  @ViewChild('gridlinesSwitch') gridlinesSwitch: SwitchComponent;\n  @ViewChild('rowHeightSwitch') rowHeightSwitch: SwitchComponent;\n  @ViewChild('tooltipSwitch') tooltipSwitch: SwitchComponent;\n  @ViewChild('dragSwitch') dragSwitch: SwitchComponent;\n  public showFileList = false;\n  public multiple = false;\n  public buttons: Record<string, any> = { browse: this.importTemplateFn({ text: 'Import' })[0] as HTMLElement };\n  public intl: Internationalization = new Internationalization();\n  public currentView: View = 'Week';\n  public liveTimeUpdate: string = new Date().toLocaleTimeString('en-US', { timeZone: 'UTC' });\n  public timezone: string = 'UTC';\n  public group: GroupModel = { resources: ['Calendars'] };\n  public resourceDataSource: Record<string, any>[] = [\n    { CalendarText: 'My Calendar', CalendarId: 1, CalendarColor: '#c43081' },\n    { CalendarText: 'Company', CalendarId: 2, CalendarColor: '#ff7f50' },\n    { CalendarText: 'Birthday', CalendarId: 3, CalendarColor: '#AF27CD' },\n    { CalendarText: 'Holiday', CalendarId: 4, CalendarColor: '#808000' }\n  ];\n  public resourceQuery: Query = new Query().where('CalendarId', 'equal', 1);\n  public allowMultiple = true;\n  public isTimelineView = false;\n  public exportItems: ItemModel[] = [\n    { text: 'iCalendar', iconCss: 'e-icons e-export' },\n    { text: 'Excel', iconCss: 'e-icons e-export-excel' }\n  ];\n  public checkboxMode = 'CheckBox';\n  public firstDayOfWeek = 0;\n  public workDays: number[] = [1, 2, 3, 4, 5];\n  public calendarsValue: number[] = [1];\n  public fields: Record<string, any> = { text: 'text', value: 'value' };\n  public calendarFields: Record<string, any> = { text: 'CalendarText', value: 'CalendarId' };\n  public dayStartHourValue: Date = new Date(new Date().setHours(0, 0, 0));\n  public dayEndHourValue: Date = new Date(new Date().setHours(23, 59, 59));\n  public workStartHourValue: Date = new Date(new Date().setHours(9, 0, 0));\n  public workEndHourValue: Date = new Date(new Date().setHours(18, 0, 0));\n  public liveTimeInterval: NodeJS.Timeout;\n  public weekDays: Record<string, any>[] = [\n    { text: 'Sunday', value: 0 },\n    { text: 'Monday', value: 1 },\n    { text: 'Tuesday', value: 2 },\n    { text: 'Wednesday', value: 3 },\n    { text: 'Thursday', value: 4 },\n    { text: 'Friday', value: 5 },\n    { text: 'Saturday', value: 6 }\n  ];\n  public timezoneData: Record<string, any>[] = [\n    { text: 'UTC -12:00', value: 'Etc/GMT+12' },\n    { text: 'UTC -11:00', value: 'Etc/GMT+11' },\n    { text: 'UTC -10:00', value: 'Etc/GMT+10' },\n    { text: 'UTC -09:00', value: 'Etc/GMT+9' },\n    { text: 'UTC -08:00', value: 'Etc/GMT+8' },\n    { text: 'UTC -07:00', value: 'Etc/GMT+7' },\n    { text: 'UTC -06:00', value: 'Etc/GMT+6' },\n    { text: 'UTC -05:00', value: 'Etc/GMT+5' },\n    { text: 'UTC -04:00', value: 'Etc/GMT+4' },\n    { text: 'UTC -03:00', value: 'Etc/GMT+3' },\n    { text: 'UTC -02:00', value: 'Etc/GMT+2' },\n    { text: 'UTC -01:00', value: 'Etc/GMT+1' },\n    { text: 'UTC +00:00', value: 'Etc/GMT' },\n    { text: 'UTC +01:00', value: 'Etc/GMT-1' },\n    { text: 'UTC +02:00', value: 'Etc/GMT-2' },\n    { text: 'UTC +03:00', value: 'Etc/GMT-3' },\n    { text: 'UTC +04:00', value: 'Etc/GMT-4' },\n    { text: 'UTC +05:00', value: 'Etc/GMT-5' },\n    { text: 'UTC +05:30', value: 'Asia/Calcutta' },\n    { text: 'UTC +06:00', value: 'Etc/GMT-6' },\n    { text: 'UTC +07:00', value: 'Etc/GMT-7' },\n    { text: 'UTC +08:00', value: 'Etc/GMT-8' },\n    { text: 'UTC +09:00', value: 'Etc/GMT-9' },\n    { text: 'UTC +10:00', value: 'Etc/GMT-10' },\n    { text: 'UTC +11:00', value: 'Etc/GMT-11' },\n    { text: 'UTC +12:00', value: 'Etc/GMT-12' },\n    { text: 'UTC +13:00', value: 'Etc/GMT-13' },\n    { text: 'UTC +14:00', value: 'Etc/GMT-14' }\n  ];\n  public timeSlotDuration: Record<string, any>[] = [\n    { Name: '1 hour', Value: 60 },\n    { Name: '1.5 hours', Value: 90 },\n    { Name: '2 hours', Value: 120 },\n    { Name: '2.5 hours', Value: 150 },\n    { Name: '3 hours', Value: 180 },\n    { Name: '3.5 hours', Value: 210 },\n    { Name: '4 hours', Value: 240 },\n    { Name: '4.5 hours', Value: 270 },\n    { Name: '5 hours', Value: 300 },\n    { Name: '5.5 hours', Value: 330 },\n    { Name: '6 hours', Value: 360 },\n    { Name: '6.5 hours', Value: 390 },\n    { Name: '7 hours', Value: 420 },\n    { Name: '7.5 hours', Value: 450 },\n    { Name: '8 hours', Value: 480 },\n    { Name: '8.5 hours', Value: 510 },\n    { Name: '9 hours', Value: 540 },\n    { Name: '9.5 hours', Value: 570 },\n    { Name: '10 hours', Value: 600 },\n    { Name: '10.5 hours', Value: 630 },\n    { Name: '11 hours', Value: 660 },\n    { Name: '11.5 hours', Value: 690 },\n    { Name: '12 hours', Value: 720 }\n  ];\n  public timeSlotFields = { text: 'Name', value: 'Value' };\n  public timeSlotCount: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  public timeSlotDurationValue = 60;\n  public timeSlotCountValue = 2;\n  public timeFormatData: Record<string, any>[] = [\n    { Name: '12 hours', Value: 'hh:mm a' },\n    { Name: '24 hours', Value: 'HH:mm' }\n  ];\n  public timeFormatValue = 'hh:mm a';\n  public weekNumberData: Record<string, any>[] = [\n    { Name: 'Off', Value: 'Off' },\n    { Name: 'First Day of Year', Value: 'FirstDay' },\n    { Name: 'First Full Week', Value: 'FirstFullWeek' },\n    { Name: 'First Four-Day Week', Value: 'FirstFourDayWeek' }\n  ];\n  public tooltipData: Record<string, any>[] = [\n    { Name: 'Off', Value: 'Off' },\n    { Name: 'On', Value: 'On' },\n  ];\n  public weekNumberValue = 'Off';\n  public tooltipValue = 'Off';\n  public eventSettings: EventSettingsModel = { dataSource: this.generateEvents() };\n  @ViewChild('menuObj') public menuObj: ContextMenuComponent;\n  public selectedTarget: Element;\n  public menuItems: MenuItemModel[] = [\n    { text: 'New Event', iconCss: 'e-icons e-plus', id: 'Add' },\n    { text: 'New Recurring Event', iconCss: 'e-icons e-repeat', id: 'AddRecurrence' },\n    { text: 'Today', iconCss: 'e-icons e-timeline-today', id: 'Today' },\n    { text: 'Edit Event', iconCss: 'e-icons e-edit', id: 'Save' },\n    {\n      text: 'Edit Event', id: 'EditRecurrenceEvent', iconCss: 'e-icons e-edit',\n      items: [\n        { text: 'Edit Occurrence', id: 'EditOccurrence' },\n        { text: 'Edit Series', id: 'EditSeries' }\n      ]\n    },\n    { text: 'Delete Event', iconCss: 'e-icons e-trash', id: 'Delete' },\n    {\n      text: 'Delete Event', id: 'DeleteRecurrenceEvent', iconCss: 'e-icons e-trash',\n      items: [\n        { text: 'Delete Occurrence', id: 'DeleteOccurrence' },\n        { text: 'Delete Series', id: 'DeleteSeries' }\n      ]\n    }\n  ];\n\n  constructor() {\n    \n  }\n\n  public ngAfterViewChecked(): void {\n    this.viewSwitch?.element?.setAttribute('tabindex', '0');\n    this.groupSwitch?.element?.setAttribute('tabindex', '0');\n    this.gridlinesSwitch?.element?.setAttribute('tabindex', '0');\n    this.rowHeightSwitch?.element?.setAttribute('tabindex', '0');\n  }\n\n  public importTemplateFn(data: Record<string, any>): NodeList {\n    const template: string = '<div class=\"e-template-btn\"><span class=\"e-btn-icon e-icons e-upload-1 e-icon-left\"></span>${text}</div>';\n    return compile(template.trim())(data) as NodeList;\n  }\n\n  public generateEvents(): Record<string, any>[] {\n    const eventData: Record<string, any>[] = [];\n    const eventSubjects: string[] = [\n      'Bering Sea Gold', 'Technology', 'Maintenance', 'Meeting', 'Traveling', 'Annual Conference', 'Birthday Celebration',\n      'Farewell Celebration', 'Wedding Anniversary', 'Alaska: The Last Frontier', 'Deadliest Catch', 'Sports Day', 'MoonShiners',\n      'Close Encounters', 'HighWay Thru Hell', 'Daily Planet', 'Cash Cab', 'Basketball Practice', 'Rugby Match', 'Guitar Class',\n      'Music Lessons', 'Doctor checkup', 'Brazil - Mexico', 'Opening ceremony', 'Final presentation'\n    ];\n    const weekDate: Date = new Date(new Date().setDate(new Date().getDate() - new Date().getDay()));\n    let startDate: Date = new Date(weekDate.getFullYear(), weekDate.getMonth(), weekDate.getDate(), 10, 0);\n    let endDate: Date = new Date(weekDate.getFullYear(), weekDate.getMonth(), weekDate.getDate(), 11, 30);\n    eventData.push({\n      Id: 1,\n      Subject: eventSubjects[Math.floor(Math.random() * (24 - 0 + 1) + 0)],\n      StartTime: startDate,\n      EndTime: endDate,\n      Location: '',\n      Description: 'Event Scheduled',\n      RecurrenceRule: 'FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;INTERVAL=1;COUNT=10;',\n      IsAllDay: false,\n      IsReadonly: false,\n      CalendarId: 1\n    });\n    for (let a = 0, id = 2; a < 500; a++) {\n      const month: number = Math.floor(Math.random() * (11 - 0 + 1) + 0);\n      const date: number = Math.floor(Math.random() * (28 - 1 + 1) + 1);\n      const hour: number = Math.floor(Math.random() * (23 - 0 + 1) + 0);\n      const minutes: number = Math.floor(Math.random() * (59 - 0 + 1) + 0);\n      const start: Date = new Date(new Date().getFullYear(), month, date, hour, minutes, 0);\n      const end: Date = new Date(start.getTime());\n      end.setHours(end.getHours() + 2);\n      startDate = new Date(start.getTime());\n      endDate = new Date(end.getTime());\n      eventData.push({\n        Id: id,\n        Subject: eventSubjects[Math.floor(Math.random() * (24 - 0 + 1) + 0)],\n        StartTime: startDate,\n        EndTime: endDate,\n        Location: '',\n        Description: 'Event Scheduled',\n        IsAllDay: id % 10 === 0,\n        IsReadonly: endDate < new Date(),\n        CalendarId: (a % 4) + 1\n      });\n      id++;\n    }\n    if (/MSIE \\d|Trident.*rv:/.test(navigator.userAgent)) {\n      Timezone.prototype.offset = (date: Date, zone: string): number => moment.tz.zone(zone).utcOffset(date.getTime());\n    }\n    const overviewEvents: { [key: string]: Date }[] = extend([], eventData, null, true) as { [key: string]: Date }[];\n    const timezone: Timezone = new Timezone();\n    const utcTimezone: never = 'UTC' as never;\n    const currentTimezone: never = timezone.getLocalTimezoneName() as never;\n    for (const event of overviewEvents) {\n      event.StartTime = timezone.convert(event.StartTime, utcTimezone, currentTimezone);\n      event.EndTime = timezone.convert(event.EndTime, utcTimezone, currentTimezone);\n    }\n    return overviewEvents;\n  }\n\n  public onToolbarCreated(): void {\n    this.liveTimeInterval = setInterval(() => { this.updateLiveTime(this.scheduleObj ? this.scheduleObj.timezone : 'UTC'); }, 1000);\n  }\n\n  public onToolbarItemClicked(args: ClickEventArgs): void {\n    switch (args.item.text) {\n      case 'Day':\n        this.currentView = this.isTimelineView ? 'TimelineDay' : 'Day';\n        break;\n      case 'Week':\n        this.currentView = this.isTimelineView ? 'TimelineWeek' : 'Week';\n        break;\n      case 'WorkWeek':\n        this.currentView = this.isTimelineView ? 'TimelineWorkWeek' : 'WorkWeek';\n        break;\n      case 'Month':\n        this.currentView = this.isTimelineView ? 'TimelineMonth' : 'Month';\n        break;\n      case 'Year':\n        this.currentView = this.isTimelineView ? 'TimelineYear' : 'Year';\n        break;\n      case 'Agenda':\n        this.currentView = 'Agenda';\n        break;\n      case 'New Event':\n        const eventData: Record<string, any> = this.getEventData();\n        this.scheduleObj.openEditor(eventData, 'Add', true);\n        break;\n      case 'New Recurring Event':\n        const recEventData: Record<string, any> = this.getEventData();\n        this.scheduleObj.openEditor(recEventData, 'Add', true, 1);\n        break;\n    }\n  }\n\n  private getEventData(): Record<string, any> {\n    const date: Date = this.scheduleObj.selectedDate;\n    return {\n      Id: this.scheduleObj.getEventMaxID(),\n      Subject: '',\n      StartTime: new Date(date.getFullYear(), date.getMonth(), date.getDate(), new Date().getHours(), 0, 0),\n      EndTime: new Date(date.getFullYear(), date.getMonth(), date.getDate(), new Date().getHours() + 1, 0, 0),\n      Location: '',\n      Description: '',\n      IsAllDay: false,\n      CalendarId: 1\n    };\n  }\n\n  public updateLiveTime(timezone: string = 'UTC'): void {\n    if(this.scheduleObj.isAdaptive) {\n      this.liveTimeUpdate = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', timeZone: timezone });\n    }\n    else {\n      this.liveTimeUpdate = new Date().toLocaleTimeString('en-US', { timeZone: timezone });\n    }\n  }\n\n  public onTimelineViewChange(args: SwitchEventArgs): void {\n    this.isTimelineView = args.checked;\n    switch (this.scheduleObj.currentView) {\n      case 'Day':\n      case 'TimelineDay':\n        this.currentView = this.isTimelineView ? 'TimelineDay' : 'Day';\n        break;\n      case 'Week':\n      case 'TimelineWeek':\n        this.currentView = this.isTimelineView ? 'TimelineWeek' : 'Week';\n        break;\n      case 'WorkWeek':\n      case 'TimelineWorkWeek':\n        this.currentView = this.isTimelineView ? 'TimelineWorkWeek' : 'WorkWeek';\n        break;\n      case 'Month':\n      case 'TimelineMonth':\n        this.currentView = this.isTimelineView ? 'TimelineMonth' : 'Month';\n        break;\n      case 'Year':\n      case 'TimelineYear':\n        this.currentView = this.isTimelineView ? 'TimelineYear' : 'Year';\n        break;\n      case 'Agenda':\n        this.currentView = 'Agenda';\n        break;\n    }\n  }\n\n  public onGroupingChange(args: SwitchEventArgs): void {\n    this.scheduleObj.group.resources = args.checked ? ['Calendars'] : [];\n  }\n\n  public onGridlinesChange(args: SwitchEventArgs): void {\n    this.scheduleObj.timeScale.enable = args.checked;\n  }\n\n  public onRowAutoHeightChange(args: SwitchEventArgs): void {\n    this.scheduleObj.rowAutoHeight = args.checked;\n  }\n\n  public onSelected(args: SelectedEventArgs): void {\n    this.scheduleObj.importICalendar((args.event.target as HTMLInputElement).files[0]);\n  }\n\n  public OnUploaderCreated(): void {\n    const element = document.querySelector('.calendar-import .e-css.e-btn');\n    element.classList.add('e-inherit');\n  }\n\n  public onSettingsClick(args): void {\n    const settingsPanel: Element = document.querySelector('.overview-content .right-panel');\n    if (settingsPanel.classList.contains('hide')) {\n      removeClass([settingsPanel], 'hide');\n      this.workWeek.refresh();\n      this.resources.refresh();\n    } else {\n      addClass([settingsPanel], 'hide');\n    }\n    this.scheduleObj.refreshEvents();\n  }\n\n  public getWeatherImage(value: Date): string {\n    switch (value.getDay()) {\n      case 0:\n        return '<img class=\"weather-image\" src=\"./assets/schedule/images/weather-clear.svg\"/>';\n      case 1:\n        return '<img class=\"weather-image\" src=\"./assets/schedule/images/weather-clouds.svg\"/>';\n      case 2:\n        return '<img class=\"weather-image\" src=\"./assets/schedule/images/weather-rain.svg\"/>';\n      case 3:\n        return '<img class=\"weather-image\" src=\"./assets/schedule/images/weather-clouds.svg\"/>';\n      case 4:\n        return '<img class=\"weather-image\" src=\"./assets/schedule/images/weather-rain.svg\"/';\n      case 5:\n        return '<img class=\"weather-image\" src=\"./assets/schedule/images/weather-clear.svg\"/>';\n      case 6:\n        return '<img class=\"weather-image\" src=\"./assets/schedule/images/weather-clouds.svg\"/>';\n      default:\n        return null;\n    }\n  }\n\n  public getDateHeaderDay(value: Date): string {\n    return this.intl.formatDate(value, { skeleton: 'E' });\n  }\n  public getDateHeaderDate(value: Date): string {\n    return this.intl.formatDate(value, { skeleton: 'd' });\n  }\n\n  public onWeekDayChange(args: ChangeEventArgs): void {\n    this.scheduleObj.firstDayOfWeek = args.value as number;\n  }\n\n  public onWorkWeekDayChange(args: MultiSelectChangeEventArgs): void {\n    this.scheduleObj.workDays = args.value as number[];\n  }\n\n  public onResourceChange(args: MultiSelectChangeEventArgs): void {\n    let resourcePredicate: Predicate;\n    for (const value of args.value) {\n      if (resourcePredicate) {\n        resourcePredicate = resourcePredicate.or(new Predicate('CalendarId', 'equal', value));\n      } else {\n        resourcePredicate = new Predicate('CalendarId', 'equal', value);\n      }\n    }\n    this.scheduleObj.resources[0].query = resourcePredicate ? new Query().where(resourcePredicate) :\n      new Query().where('CalendarId', 'equal', 1);\n  }\n\n  public onTimezoneChange(args: ChangeEventArgs): void {\n    this.scheduleObj.timezone = args.value as string;\n    this.updateLiveTime(this.scheduleObj.timezone);\n    this.timezone = args.itemData.text;\n  }\n\n  public onDayStartHourChange(args: TimeEventArgs): void {\n    this.scheduleObj.startHour = this.intl.formatDate(args.value, { skeleton: 'Hm' });\n  }\n\n  public onDayEndHourChange(args: TimeEventArgs): void {\n    this.scheduleObj.endHour = this.intl.formatDate(args.value, { skeleton: 'Hm' });\n  }\n\n  public onWorkStartHourChange(args: TimeEventArgs): void {\n    this.scheduleObj.workHours.start = this.intl.formatDate(args.value, { skeleton: 'Hm' });\n  }\n\n  public onWorkEndHourChange(args: TimeEventArgs): void {\n    this.scheduleObj.workHours.end = this.intl.formatDate(args.value, { skeleton: 'Hm' });\n  }\n\n  public onTimescaleDurationChange(args: ChangeEventArgs): void {\n    this.scheduleObj.timeScale.interval = args.value as number;\n  }\n\n  public onTimescaleIntervalChange(args: ChangeEventArgs): void {\n    this.scheduleObj.timeScale.slotCount = args.value as number;\n  }\n\n  public onTimeFormatChange(args: ChangeEventArgs): void {\n    this.scheduleObj.timeFormat = args.value as string;\n  }\n\n  public onWeekNumberChange(args: ChangeEventArgs): void {\n    if (args.value === 'Off') {\n      this.scheduleObj.showWeekNumber = false;\n    } else {\n      this.scheduleObj.showWeekNumber = true;\n      this.scheduleObj.weekRule = args.value as any;\n    }\n  }\n  public onTooltipChange(args: ChangeEventArgs): void {\n    if (args.value === 'Off') {\n      this.scheduleObj.eventSettings.enableTooltip = false;\n    } else {\n      this.scheduleObj.eventSettings.enableTooltip = true;\n    }\n  }\n\n  public onContextMenuBeforeOpen(args: BeforeOpenCloseMenuEventArgs): void {\n    const newEventElement: HTMLElement = document.querySelector('.e-new-event') as HTMLElement;\n    if (newEventElement) {\n      remove(newEventElement);\n      removeClass([document.querySelector('.e-selected-cell')], 'e-selected-cell');\n    }\n    this.scheduleObj.closeQuickInfoPopup();\n    const targetElement: HTMLElement = args.event.target as HTMLElement;\n    if (closest(targetElement, '.e-contextmenu')) {\n      return;\n    }\n    this.selectedTarget = closest(targetElement, '.e-appointment,.e-work-cells,' +\n      '.e-vertical-view .e-date-header-wrap .e-all-day-cells,.e-vertical-view .e-date-header-wrap .e-header-cells');\n    if (isNullOrUndefined(this.selectedTarget)) {\n      args.cancel = true;\n      return;\n    }\n    if (this.selectedTarget.classList.contains('e-appointment')) {\n      const eventObj: Record<string, any> = this.scheduleObj.getEventDetails(this.selectedTarget) as Record<string, any>;\n      if (eventObj.RecurrenceRule) {\n        this.menuObj.showItems(['EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n        this.menuObj.hideItems(['Add', 'AddRecurrence', 'Today', 'Save', 'Delete'], true);\n      } else {\n        this.menuObj.showItems(['Save', 'Delete'], true);\n        this.menuObj.hideItems(['Add', 'AddRecurrence', 'Today', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n      }\n      return;\n    } else if ((this.selectedTarget.classList.contains('e-work-cells') || this.selectedTarget.classList.contains('e-all-day-cells')) &&\n      !this.selectedTarget.classList.contains('e-selected-cell')) {\n      removeClass([].slice.call(this.scheduleObj.element.querySelectorAll('.e-selected-cell')), 'e-selected-cell');\n      this.selectedTarget.classList.add('e-selected-cell');\n      this.selectedTarget.setAttribute('aria-selected', 'true');\n    }\n    this.menuObj.hideItems(['Save', 'Delete', 'EditRecurrenceEvent', 'DeleteRecurrenceEvent'], true);\n    this.menuObj.showItems(['Add', 'AddRecurrence', 'Today'], true);\n  }\n\n  public onMenuItemSelect(args: MenuEventArgs): void {\n    const selectedMenuItem: string = args.item.id;\n    let eventObj: { [key: string]: number };\n    if (this.selectedTarget.classList.contains('e-appointment')) {\n      eventObj = this.scheduleObj.getEventDetails(this.selectedTarget) as { [key: string]: number };\n    }\n    switch (selectedMenuItem) {\n      case 'Today':\n        this.scheduleObj.selectedDate = new Date();\n        break;\n      case 'Add':\n      case 'AddRecurrence':\n        const selectedCells: Element[] = this.scheduleObj.getSelectedElements();\n        const activeCellsData: CellClickEventArgs =\n          this.scheduleObj.getCellDetails(selectedCells.length > 0 ? selectedCells : this.selectedTarget);\n        if (selectedMenuItem === 'Add') {\n          this.scheduleObj.openEditor(activeCellsData, 'Add');\n        } else {\n          this.scheduleObj.openEditor(activeCellsData, 'Add', null, 1);\n        }\n        break;\n      case 'Save':\n      case 'EditOccurrence':\n      case 'EditSeries':\n        if (selectedMenuItem === 'EditSeries') {\n          const query: Query = new Query().where(this.scheduleObj.eventFields.id, 'equal', eventObj.RecurrenceID);\n          eventObj = new DataManager(this.scheduleObj.eventsData).executeLocal(query)[0] as { [key: string]: number };\n        }\n        this.scheduleObj.openEditor(eventObj, selectedMenuItem);\n        break;\n      case 'Delete':\n        this.scheduleObj.deleteEvent(eventObj);\n        break;\n      case 'DeleteOccurrence':\n      case 'DeleteSeries':\n        this.scheduleObj.deleteEvent(eventObj, selectedMenuItem);\n        break;\n    }\n  }\n\n  public onPrintClick(): void {\n    this.scheduleObj.print();\n  }\n\n  public onExportClick(args): void {\n    if (args.item.text === 'Excel') {\n      let exportDatas: Record<string, any>[] = [];\n      const eventCollection: Record<string, any>[] = this.scheduleObj.getEvents();\n      const resourceCollection: ResourcesModel[] = this.scheduleObj.getResourceCollections();\n      const resourceData: Record<string, any>[] = resourceCollection[0].dataSource as Record<string, any>[];\n      for (const resource of resourceData) {\n        const data: Record<string, any>[] = eventCollection.filter((e: Record<string, any>) => e.CalendarId === resource.CalendarId);\n        exportDatas = exportDatas.concat(data as Record<string, any>[]);\n      }\n      this.scheduleObj.exportToExcel({\n        exportType: 'xlsx', customData: exportDatas, fields: ['Id', 'Subject', 'StartTime', 'EndTime', 'CalendarId']\n      });\n    } else {\n      this.scheduleObj.exportToICalendar();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    if (this.liveTimeInterval) {\n      clearInterval(this.liveTimeInterval);\n    }\n  }\n\n}\n","app/app.module.ts":"import { ToastAllModule } from '@syncfusion/ej2-angular-notifications';\n\nimport { DropDownButtonAllModule } from '@syncfusion/ej2-angular-splitbuttons';\n\nimport { TreeViewModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { DropDownListAllModule, MultiSelectAllModule } from '@syncfusion/ej2-angular-dropdowns';\n\nimport { MaskedTextBoxModule, UploaderAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { ToolbarAllModule, ContextMenuAllModule, AppBarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { ButtonAllModule, CheckBoxAllModule, SwitchAllModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { DatePickerAllModule, TimePickerAllModule, DateTimePickerAllModule } from '@syncfusion/ej2-angular-calendars';\n\nimport { NumericTextBoxAllModule, TextBoxAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { ScheduleAllModule, RecurrenceEditorAllModule } from '@syncfusion/ej2-angular-schedule';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ CommonModule, ScheduleAllModule, RecurrenceEditorAllModule,   NumericTextBoxAllModule, TextBoxAllModule, DatePickerAllModule, TimePickerAllModule, DateTimePickerAllModule, CheckBoxAllModule,   ToolbarAllModule, DropDownListAllModule, ContextMenuAllModule, MaskedTextBoxModule, UploaderAllModule, MultiSelectAllModule,   TreeViewModule, ButtonAllModule, DropDownButtonAllModule, SwitchAllModule, BrowserModule, ToastAllModule, AppBarModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"col-lg-12 control-section\">\n  <div class=\"content-wrapper\">\n    <div class=\"schedule-overview\">\n      <ejs-appbar colorMode=\"Primary\">\n        <span class=\"time e-icons e-time-zone\"></span>\n        <span id=\"timezoneBtn\" class=\"time \">{{timezone}}</span>\n        <span class=\"time e-icons e-clock\"></span>\n        <span id=\"timeBtn\" class=\"time current-time\">{{liveTimeUpdate}}</span>\n        <div class=\"e-appbar-spacer\"></div>\n        <button ejs-button id=\"printBtn\" cssClass=\"title-bar-btn e-inherit\" iconCss=\"e-icons e-print\"\n                (click)=\"onPrintClick()\">Print</button>\n        <div class=\"control-panel import-button\">\n          <ejs-uploader id='icalendar' cssClass='calendar-import' [multiple]='multiple' [buttons]='buttons'\n            [showFileList]='showFileList' allowedExtensions='.ics' (selected)='onSelected($event)' (created)= 'OnUploaderCreated()'></ejs-uploader>\n        </div>\n        <div class=\"control-panel calendar-export\">\n          <button ejs-dropdownbutton id=\"exportBtn\"  (select)=\"onExportClick($event)\"\n            [items]='exportItems' cssClass = \"e-inherit\">Export</button>\n        </div>\n        <button ejs-button id=\"settingsBtn\" iconCss=\"e-icons e-settings\" cssClass=\"overview-toolbar-settings e-inherit\"\n            iconPosition=\"Top\" (click)=\"onSettingsClick($event)\"></button>\n      </ejs-appbar>\n          <ejs-toolbar id=\"toolbarOptions\" cssClass=\"overview-toolbar\" height=\"70px\" overflowMode=\"Scrollable\" scrollStep=\"100\"\n            (created)=\"onToolbarCreated()\" (clicked)=\"onToolbarItemClicked($event)\">\n            <e-items>\n              <e-item prefixIcon='e-icons e-plus' tooltipText='New Event' text='New Event' tabIndex={0}>\n              </e-item>\n              <e-item prefixIcon='e-icons e-repeat' tooltipText='New Recurring Event' text='New Recurring Event' tabIndex={0}>\n              </e-item>\n              <e-item type='Separator'></e-item>\n              <e-item prefixIcon='e-icons e-day' tooltipText='Day' text='Day' tabIndex={0}></e-item>\n              <e-item prefixIcon='e-icons e-week' tooltipText='Week' text='Week' tabIndex={0}></e-item>\n              <e-item prefixIcon='e-icons e-week' tooltipText='WorkWeek' text='WorkWeek' tabIndex={0}></e-item>\n              <e-item prefixIcon='e-icons e-month' tooltipText='Month' text='Month' tabIndex={0}>\n              </e-item>\n              <e-item prefixIcon='e-icons e-month' tooltipText='Year' text='Year' tabIndex={0}></e-item>\n              <e-item prefixIcon='e-icons e-agenda-date-range' tooltipText='Agenda' text='Agenda' tabIndex={0}>\n              </e-item>\n              <e-item tooltipText='Timeline Views'>\n                <ng-template #template>\n                  <div class=\"template\">\n                    <div class=\"icon-child\">\n                      <ejs-checkbox #viewSwitch id=\"timeline_views\" [checked]=\"false\"\n                        (change)=\"onTimelineViewChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"text-child\">Timeline Views</div>\n                  </div>\n                </ng-template>\n              </e-item>\n              <e-item type='Separator'></e-item>\n              <e-item tooltipText='Resource Grouping'>\n                <ng-template #template>\n                  <div class=\"template\">\n                    <div class=\"icon-child\">\n                      <ejs-checkbox #groupSwitch id=\"grouping\" [checked]=\"true\" (change)=\"onGroupingChange($event)\">\n                      </ejs-checkbox>\n                    </div>\n                    <div class=\"text-child\">Grouping</div>\n                  </div>\n                </ng-template>\n              </e-item>\n              <e-item tooltipText='Time Slots'>\n                <ng-template #template>\n                  <div class=\"template\">\n                    <div class=\"icon-child\">\n                      <ejs-checkbox #gridlinesSwitch id=\"gridlines\" [checked]=\"true\" (change)=\"onGridlinesChange($event)\">\n                      </ejs-checkbox>\n                    </div>\n                    <div class=\"text-child\">TIme SLots</div>\n                  </div>\n                </ng-template>\n              </e-item>\n              <e-item tooltipText='Auto Fit Rows'>\n                <ng-template #template>\n                  <div class=\"template\">\n                    <div class=\"icon-child\">\n                      <ejs-checkbox #rowHeightSwitch id=\"row_auto_height\" [checked]=\"false\"\n                        (change)=\"onRowAutoHeightChange($event)\"></ejs-checkbox>\n                    </div>\n                    <div class=\"text-child\">Auto Fit Rows</div>\n                  </div>\n                </ng-template>\n              </e-item>\n            </e-items>\n          </ejs-toolbar>\n      <div class=\"overview-content\">\n        <div class=\"left-panel\">\n          <div class=\"overview-scheduler\">\n            <ejs-schedule #scheduleObj cssClass='schedule-overview' height='100%' [group]='group'\n              [(currentView)]=\"currentView\" timezone='UTC' [eventSettings]=\"eventSettings\">\n              <ng-template #dateHeaderTemplate let-data>\n                <div class=\"date-text\">{{getDateHeaderDay(data.date)}}</div>\n                <div class=\"date-text\">{{getDateHeaderDate(data.date)}}</div>\n                <div [innerHTML]=\"getWeatherImage(data.date)\"></div>\n              </ng-template>\n              <e-views>\n                <e-view option=\"Day\"></e-view>\n                <e-view option=\"Week\"></e-view>\n                <e-view option=\"WorkWeek\"></e-view>\n                <e-view option=\"Month\"></e-view>\n                <e-view option=\"Year\"></e-view>\n                <e-view option=\"Agenda\"></e-view>\n                <e-view option=\"TimelineDay\"></e-view>\n                <e-view option=\"TimelineWeek\"></e-view>\n                <e-view option=\"TimelineWorkWeek\"></e-view>\n                <e-view option=\"TimelineMonth\"></e-view>\n                <e-view option=\"TimelineYear\"></e-view>\n              </e-views>\n              <e-resources>\n                <e-resource field='CalendarId' title='Calendars' [dataSource]='resourceDataSource'\n                  [query]='resourceQuery' [allowMultiple]='allowMultiple' name='Calendars' textField='CalendarText'\n                  idField='CalendarId' colorField='CalendarColor'>\n                </e-resource>\n              </e-resources>\n            </ejs-schedule>\n            <ejs-contextmenu #menuObj cssClass='schedule-context-menu' target='.e-schedule' [items]='menuItems'\n              (beforeOpen)='onContextMenuBeforeOpen($event)' (select)='onMenuItemSelect($event)'></ejs-contextmenu>\n          </div>\n        </div>\n        <div class=\"right-panel hide\">\n          <div class=\"control-panel e-css\">\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Calendar</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-multiselect #resouresObj id='resources' [dataSource]='resourceDataSource'\n                  [mode]='checkboxMode' [fields]='calendarFields'  [showClearButton]='false'\n                  [showDropDownIcon]='true' [value]='calendarsValue' (change)='onResourceChange($event)'>\n                </ejs-multiselect>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">First Day of Week</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-dropdownlist id='weekFirstDay' [dataSource]='weekDays'\n                  (change)='onWeekDayChange($event)' [value]='firstDayOfWeek' [fields]='fields'>\n                </ejs-dropdownlist>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Work week</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-multiselect #workWeekDaysObj id='workWeekDays' [dataSource]='weekDays'\n                  [showClearButton]='false' [showDropDownIcon]='true' [mode]='checkboxMode' [fields]='fields'\n                  [value]='workDays' (change)='onWorkWeekDayChange($event)'></ejs-multiselect>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Timezone</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-dropdownlist id='timezone' [dataSource]='timezoneData'\n                  (change)='onTimezoneChange($event)' value='Etc/GMT' [fields]='fields' popupHeight='150px'>\n                </ejs-dropdownlist>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Day Start Hour</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-timepicker id='dayStartHour' showClearButton='false' [value]='dayStartHourValue'\n                  (change)='onDayStartHourChange($event)'>\n                </ejs-timepicker>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Day End Hour</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-timepicker id='dayEndHour' showClearButton='false' [value]='dayEndHourValue'\n                  (change)='onDayEndHourChange($event)'>\n                </ejs-timepicker>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Work Start Hour</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-timepicker id='workHourStart' showClearButton='false' [value]='workStartHourValue'\n                  (change)='onWorkStartHourChange($event)'>\n                </ejs-timepicker>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Work End Hour</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-timepicker id='workHourEnd' showClearButton='false' [value]='workEndHourValue'\n                  (change)='onWorkEndHourChange($event)'></ejs-timepicker>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Slot Duration</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-dropdownlist id='slotDuration' [dataSource]='timeSlotDuration'\n                  [fields]='timeSlotFields' (change)='onTimescaleDurationChange($event)' [value]='timeSlotDurationValue'\n                  popupHeight='150px'></ejs-dropdownlist>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Slot Interval</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-dropdownlist id='slotInterval' [dataSource]='timeSlotCount'\n                  (change)='onTimescaleIntervalChange($event)' [value]='timeSlotCountValue' popupHeight='150px'>\n                </ejs-dropdownlist>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Time Format</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-dropdownlist id='timeFormat' [dataSource]='timeFormatData'\n                  (change)='onTimeFormatChange($event)' [fields]='timeSlotFields' [value]='timeFormatValue'\n                  popupHeight='150px'></ejs-dropdownlist>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Week Numbers</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-dropdownlist id='weekNumber' [dataSource]='weekNumberData'\n                  (change)='onWeekNumberChange($event)' [fields]='timeSlotFields' [value]='weekNumberValue'\n                  popupHeight='150px'></ejs-dropdownlist>\n              </div>\n            </div>\n            <div class=\"col-row\">\n              <div class=\"col-left\">\n                <label style=\"line-height: 34px; margin: 0;\">Tooltip</label>\n              </div>\n              <div class=\"col-right\">\n                <ejs-dropdownlist id='tooltip' [dataSource]='tooltipData'\n                  (change)='onTooltipChange($event)' [fields]='timeSlotFields' [value]='tooltipValue'\n                  popupHeight='150px'></ejs-dropdownlist>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n","app.component.css":"\n    .tailwind .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #f3f4f6;\n  }\n\n  .tailwind-dark .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #374151;\n      color: #fff;\n  }\n\n  .material .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #fafafa;\n  }\n\n  .material-dark .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #2a2a2a;\n      color: #ffff;\n  }\n\n  .fabric .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #ffffff;\n  }\n\n  .fabric-dark .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #333232;\n      color: #fff;\n  }\n\n  .fluent .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #f3f2f1;\n  }\n\n  .fluent-dark .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #252423;\n      border-color: #c1c1c1;\n      color: #fff;\n  }\n\n  .bootstrap .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #f8f8f8;\n  }\n\n  .bootstrap-dark .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #2a2a2a;\n      color: #fff;\n  }\n\n  .bootstrap5 .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #f8f9fa;\n      color: #212529;\n  }\n\n  .bootstrap5-dark .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #343a40;\n      color: #fff;\n  }\n\n  .highcontrast .schedule-overview .overview-content .right-panel .control-panel {\n      background-color: #000000;\n      color: #ffffff;\n  }\n\n  .schedule-overview .overview-toolbar.e-rtl + *{\n      flex-direction: row-reverse;\n  }\n\n  .schedule-overview .overview-toolbar.e-toolbar {\n      border-radius: 0;\n  }\n\n  .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-tbar-btn.e-tbtn-txt {\n      display: inline-grid;\n  }\n\n  .material .schedule-overview .overview-toolbar.e-toolbar {\n      border-style: solid;\n  }\n\n  .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item:not(.e-separator) {\n      padding: 3.5px;\n  }\n\n  .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-icons.e-btn-icon,\n  .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item .e-btn.e-tbar-btn .e-tbar-btn-text {\n      line-height: 23px !important;\n      min-height: 23px !important;\n      padding: 0px !important;\n  }\n\n  .schedule-overview .overview-toolbar.e-toolbar .e-toolbar-item.e-template {\n      margin: 0 5px;\n  }\n\n  .schedule-overview .overview-content {\n      display: flex;\n  }\n\n  .schedule-overview .overview-content .left-panel {\n      height: 700px;\n      width: 100%;\n  }\n\n  .schedule-overview .overview-content .right-panel {\n      display: block;\n      height: 700px;\n      transform: translateX(0%);\n      transition: transform .5s ease, width 500ms;\n      width: 500px;\n  }\n\n  .schedule-overview .overview-content .right-panel.hide {\n      display: none;\n      transform: translateX(100%);\n      transition: transform .5s ease, width 500ms;\n      width: 0;\n  }\n\n  .schedule-overview .overview-content .right-panel .control-panel {\n      background: #f8f9fa;\n      font-size: 14px;\n      height: 100%;\n      overflow: auto;\n      padding: 15px;\n      width: 100%;\n  }\n\n  .schedule-overview .overview-content .right-panel .control-panel .col-row {\n      display: flex;\n      flex-wrap: wrap;\n  }\n\n  .schedule-overview .overview-content .right-panel .control-panel label {\n      font-weight: 500;\n  }\n\n  .schedule-overview .overview-content .right-panel .control-panel .col-left {\n      flex: 0 0 41.666667%;\n      max-width: 41.666667%;\n      margin-bottom: 1rem;\n  }\n\n  .schedule-overview .overview-content .right-panel .control-panel .col-right {\n      flex: 0 0 58.333333%;\n      max-width: 58.333333%;\n      margin-bottom: 1rem;\n  }\n\n  .schedule-overview .overview-scheduler {\n      height: 100%;\n      width: 100%;\n  }\n\n  .schedule-overview .e-schedule-toolbar .e-views,\n  .schedule-overview .e-schedule-toolbar .e-schedule-seperator,\n  .schedule-workweek.e-multi-select-list-wrapper.e-checkbox .e-filter-parent,\n  .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-filter-parent {\n      display: none;\n  }\n\n  .schedule-overview .e-timeline-view .e-resource-left-td,\n  .schedule-overview .e-timeline-month-view .e-resource-left-td {\n      width: 120px;\n  }\n\n  .schedule-resource.e-multi-select-list-wrapper.e-checkbox .e-list-parent:first-child li:first-child {\n      background-image: none;\n      opacity: .5;\n      pointer-events: none;\n      user-select: none;\n  }\n\n  .schedule-overview .calendar-import.e-upload {\n      border: 0;\n      padding-left: 0 !important;\n  }\n\n  .schedule-overview .calendar-import.e-upload .e-btn-icon {\n      margin-left: initial;\n  }\n\n  .schedule-overview .calendar-import.e-upload .e-file-select-wrap {\n      padding: 0\n  }\n\n  .schedule-overview .calendar-import.e-upload .e-file-select-wrap .e-file-drop,\n  .calendar-import .e-upload-files {\n      display: none;\n  }\n\n  .e-bigger .schedule-context-menu ul .e-menu-item .e-menu-icon {\n      font-size: 14px;\n  }\n\n  .schedule-context-menu ul .e-menu-item .e-menu-icon {\n      font-size: 12px;\n  }\n\n  .schedule-overview.e-schedule .e-vertical-view .e-header-cells,\n  .schedule-overview.e-schedule .e-timeline-month-view .e-header-cells {\n      padding: 0;\n      text-align: center !important;\n  }\n\n  .schedule-overview.e-schedule .date-text {\n      font-size: 14px;\n  }\n\n  .schedule-overview.e-schedule.e-device .date-text {\n      font-size: 12px;\n  }\n\n  .schedule-overview.e-schedule .weather-image {\n      width: 20px;\n      height: 20px;\n      background-position: center center;\n      background-repeat: no-repeat;\n      background-size: cover;\n  }\n\n  .schedule-overview.e-schedule .e-month-view .weather-image {\n      float: right;\n      margin: -20px 2px 0 0;\n      width: 20px;\n      height: 20px;\n  }\n\n  .tailwind .schedule-overview.e-schedule .e-left-indent .e-header-cells,\n  .tailwind-dark .schedule-overview.e-schedule .e-left-indent .e-header-cells {\n      height: 66px;\n  }\n\n  .fluent .e-appbar .e-btn-icon.e-icons,\n  .fluent-dark .e-appbar .e-btn-icon.e-icons {\n      margin-top: -2px;\n  }\n  .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame,\n  .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame {\n      height: 17px;\n      line-height: 17px;\n      width: 17px;\n  }\n\n  .fluent .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check,\n  .fluent-dark .e-toolbar-item .e-checkbox-wrapper .e-icons.e-frame.e-check {\n      font-size: 15px;\n      line-height: 16px;\n  }\n\n  .e-toolbar .e-toolbar-item .e-tbar-btn {\n      padding-top: 2px;\n      padding-bottom: 2px;\n  }\n\n  #exportBtn {\n      white-space: nowrap;\n  }\n\n  .time {\n      display: flex;\n      gap: 5px;\n      align-items: center;\n      padding: 0 5px;\n  }\n\n  .template {\n      height: 46px;\n      line-height: 23px;\n  }\n\n  .template .icon-child {\n      text-align: center;\n      height: 23px !important;\n  }\n\n  .template .text-child {\n      font-size: 14px;\n      line-height: 23px !important;\n  }\n\n  @media (max-width: 481px) {\n      .schedule-overview .overview-content .right-panel {\n          position: absolute;\n          width: 90%;\n      }\n\n      .import-button,\n      #printBtn,\n      #exportBtn {\n          display: none;\n      }\n\n  }\n\n  @media (max-width: 1024px) {\n      .schedule-overview .overview-content .right-panel .control-panel .col-row {\n          display: initial;\n      }\n\n      .schedule-overview .overview-content .right-panel .control-panel .col-left {\n          flex: initial;\n          max-width: initial;\n          margin-bottom: initial;\n      }\n\n      .schedule-overview .overview-content .right-panel .control-panel .col-right {\n          flex: initial;\n          max-width: initial;\n      }\n  }\n","dependencies.json":"{\"@syncfusion/ej2-angular-base\":\"*\",\"@syncfusion/ej2-base\":\"*\",\"@syncfusion/ej2-notifications\":\"*\",\"@syncfusion/ej2-angular-notifications\":\"*\",\"@syncfusion/ej2-splitbuttons\":\"*\",\"@syncfusion/ej2-angular-splitbuttons\":\"*\",\"@syncfusion/ej2-navigations\":\"*\",\"@syncfusion/ej2-angular-navigations\":\"*\",\"@syncfusion/ej2-dropdowns\":\"*\",\"@syncfusion/ej2-angular-dropdowns\":\"*\",\"@syncfusion/ej2-inputs\":\"*\",\"@syncfusion/ej2-angular-inputs\":\"*\",\"@syncfusion/ej2-buttons\":\"*\",\"@syncfusion/ej2-angular-buttons\":\"*\",\"@syncfusion/ej2-calendars\":\"*\",\"@syncfusion/ej2-angular-calendars\":\"*\",\"@syncfusion/ej2-schedule\":\"*\",\"@syncfusion/ej2-angular-schedule\":\"*\",\"@syncfusion/ej2-icons\":\"*\",\"@syncfusion/ej2-data\":\"*\",\"@syncfusion/ej2-lists\":\"*\",\"@syncfusion/ej2-popups\":\"*\",\"@angular/http\":\"*\",\"rxjs-compat\":\"*\",\"core-js\":\"2.6.9\"}"}